#version 430 compatibility
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable


struct Object
{
    mat4 r,t,s;
    mat4 World,mvp;
    uint Culled;
    uint Updated;
    float br;
    vec4 bp;
    uint index;
    int parent;
    uint Visible;
    vec3 emin,emax: vec3;
};

struct Frustum {
  vec4 pLeft, pTop, pRight, pBottom, pNear, pFar;
};


layout(std430, binding = 0) buffer Objs { Object Objects[];};

layout( local_size_x = 32,  local_size_y = 1, local_size_z = 1 ) in;

uniform mat4 ViewMatrix;
uniform mat4 ProjMatrix;
uniform uint ObjCount;
uniform Frustum fr;

float PlaneEvaluatePoint (in vec4 plane, in vec3 point)
{
  //return plane.x*point.x+plane.y*point.y+plane.z*point.z+plane.w;
  return dot(plane.xyz, point.xyz)+plane.w;
};

uint isVolumeClipped(in vec3 ObjPos, in float negRadius) {

   if (PlaneEvaluatePoint(fr.pLeft, ObjPos)<negRadius ||
       PlaneEvaluatePoint(fr.pTop, ObjPos)<negRadius ||
       PlaneEvaluatePoint(fr.pRight, ObjPos)<negRadius ||
       PlaneEvaluatePoint(fr.pBottom, ObjPos)<negRadius ||
       PlaneEvaluatePoint(fr.pNear, ObjPos)<negRadius ||
       PlaneEvaluatePoint(fr.pFar, ObjPos)<negRadius) return 0;   
   else return 1;
}

void main( )
{
	uint id = gl_WorkGroupID.x*32+gl_LocalInvocationId.x;
	if (id < ObjCount) if (Objects[id].Visible == 1) {
		mat4 wm;
		if (Objects[id].Updated != 1) {
			wm =  Objects[id].r*Objects[id].t*Objects[id].s;
	        	Objects[id].World = wm; Objects[id].Updated = 1; Objects[id].bp = wm[3];
		} else { wm = Objects[id].World;};
		uint CurrId = id; mat4 Temp;
		while (Objects[CurrId].parent !=-1) {
			if (Objects[CurrId].Updated != 1) {
				Temp = Objects[CurrId].r*Objects[CurrId].t*Objects[CurrId].s
				Objects[CurrId].World = Temp;
				Objects[CurrId].Updated = 1;
			};
			wm *= Temp;
			CurrId = Objects[CurrId].parent;
		};

		Objects[id].mvp = wm*ViewMatrix*ProjMatrix;
		Objects[id].Culled = isVolumeClipped(Objects[id].bp.xyz,-Objects[id].br);
	};
}
