unit uDAESchema;

interface

uses  uXmlParser, uGenericsRBTree;

type

{ Forward Decls }

  IXMLCOLLADA = interface;
  IXMLAsset_type = interface;
  IXMLAsset_type_contributor = interface;
  IXMLAsset_type_contributorList = interface;
  IXMLAsset_type_coverage = interface;
  IXMLAsset_type_coverage_geographic_location = interface;
  IXMLAsset_type_coverage_geographic_location_altitude = interface;
  IXMLAsset_type_unit = interface;
  IXMLExtra_type = interface;
  IXMLExtra_typeList = interface;
  IXMLTechnique_type = interface;
  IXMLTechnique_typeList = interface;
  IXMLLibrary_animations_type = interface;
  IXMLLibrary_animations_typeList = interface;
  IXMLAnimation_type = interface;
  IXMLAnimation_typeList = interface;
  IXMLSource_type = interface;
  IXMLSource_typeList = interface;
  IXMLToken_array_type = interface;
  IXMLIdref_array_type = interface;
  IXMLName_array_type = interface;
  IXMLBool_array_type = interface;
  IXMLFloat_array_type = interface;
  IXMLInt_array_type = interface;
  IXMLSidref_array_type = interface;
  IXMLSource_type_technique_common = interface;
  IXMLAccessor_type = interface;
  IXMLParam_type = interface;
  IXMLParam_typeList = interface;
  IXMLSampler_type = interface;
  IXMLSampler_typeList = interface;
  IXMLInput_local_type = interface;
  IXMLInput_local_typeList = interface;
  IXMLChannel_type = interface;
  IXMLChannel_typeList = interface;
  IXMLLibrary_animation_clips_type = interface;
  IXMLLibrary_animation_clips_typeList = interface;
  IXMLAnimation_clip_type = interface;
  IXMLAnimation_clip_typeList = interface;
  IXMLInstance_with_extra_type = interface;
  IXMLInstance_with_extra_typeList = interface;
  IXMLInstance_formula_type = interface;
  IXMLInstance_formula_typeList = interface;
  IXMLFormula_setparam_type = interface;
  IXMLKinematics_connect_param_type = interface;
  IXMLLibrary_cameras_type = interface;
  IXMLLibrary_cameras_typeList = interface;
  IXMLCamera_type = interface;
  IXMLCamera_typeList = interface;
  IXMLCamera_type_optics = interface;
  IXMLCamera_type_optics_technique_common = interface;
  IXMLCamera_type_optics_technique_common_orthographic = interface;
  IXMLTargetable_float_type = interface;
  IXMLCamera_type_optics_technique_common_perspective = interface;
  IXMLCamera_type_imager = interface;
  IXMLLibrary_controllers_type = interface;
  IXMLLibrary_controllers_typeList = interface;
  IXMLController_type = interface;
  IXMLController_typeList = interface;
  IXMLSkin_type = interface;
  IXMLSkin_type_joints = interface;
  IXMLSkin_type_vertex_weights = interface;
  IXMLInput_local_offset_type = interface;
  IXMLInput_local_offset_typeList = interface;
  IXMLMorph_type = interface;
  IXMLMorph_type_targets = interface;
  IXMLLibrary_geometries_type = interface;
  IXMLLibrary_geometries_typeList = interface;
  IXMLGeometry_type = interface;
  IXMLGeometry_typeList = interface;
  IXMLConvex_mesh_type = interface;
  IXMLVertices_type = interface;
  IXMLLines_type = interface;
  IXMLLines_typeList = interface;
  IXMLP_type = interface;
  IXMLP_typeList = interface;
  IXMLLinestrips_type = interface;
  IXMLLinestrips_typeList = interface;
  IXMLPolygons_type = interface;
  IXMLPolygons_typeList = interface;
  IXMLPolygons_type_ph = interface;
  IXMLPolygons_type_phList = interface;
  IXMLPolylist_type = interface;
  IXMLPolylist_typeList = interface;
  IXMLTriangles_type = interface;
  IXMLTriangles_typeList = interface;
  IXMLTrifans_type = interface;
  IXMLTrifans_typeList = interface;
  IXMLTristrips_type = interface;
  IXMLTristrips_typeList = interface;
  IXMLMesh_type = interface;
  IXMLSpline_type = interface;
  IXMLSpline_type_control_vertices = interface;
  IXMLBrep_type = interface;
  IXMLCurves_type = interface;
  IXMLCurve_type = interface;
  IXMLCurve_typeList = interface;
  IXMLLine_type = interface;
  IXMLCircle_type = interface;
  IXMLEllipse_type = interface;
  IXMLParabola_type = interface;
  IXMLHyperbola_type = interface;
  IXMLNurbs_type = interface;
  IXMLNurbs_type_control_vertices = interface;
  IXMLOrient_type = interface;
  IXMLOrient_typeList = interface;
  IXMLOrigin_type = interface;
  IXMLSurface_curves_type = interface;
  IXMLSurfaces_type = interface;
  IXMLSurface_type = interface;
  IXMLSurface_typeList = interface;
  IXMLPlane_type = interface;
  IXMLSphere_type = interface;
  IXMLTorus_type = interface;
  IXMLSwept_surface_type = interface;
  IXMLNurbs_surface_type = interface;
  IXMLNurbs_surface_type_control_vertices = interface;
  IXMLCone_type = interface;
  IXMLSurface_type_cylinder = interface;
  IXMLEdges_type = interface;
  IXMLWires_type = interface;
  IXMLFaces_type = interface;
  IXMLPcurves_type = interface;
  IXMLShells_type = interface;
  IXMLSolids_type = interface;
  IXMLLibrary_effects_type = interface;
  IXMLLibrary_effects_typeList = interface;
  IXMLEffect_type = interface;
  IXMLEffect_typeList = interface;
  IXMLFx_annotate_type = interface;
  IXMLFx_annotate_typeList = interface;
  IXMLFx_newparam_type = interface;
  IXMLFx_newparam_typeList = interface;
  IXMLFx_sampler_type = interface;
  IXMLInstance_image_type = interface;
  IXMLFx_sampler1D_type = interface;
  IXMLFx_sampler2D_type = interface;
  IXMLFx_sampler3D_type = interface;
  IXMLFx_samplerCUBE_type = interface;
  IXMLFx_samplerRECT_type = interface;
  IXMLFx_samplerDEPTH_type = interface;
  IXMLProfile_common_type = interface;
  IXMLFx_common_newparam_type = interface;
  IXMLFx_common_newparam_typeList = interface;
  IXMLProfile_common_type_technique = interface;
  IXMLProfile_common_type_technique_constant = interface;
  IXMLFx_common_color_or_texture_type = interface;
  IXMLFx_common_color_or_texture_type_color = interface;
  IXMLFx_common_color_or_texture_type_param = interface;
  IXMLFx_common_color_or_texture_type_texture = interface;
  IXMLFx_common_float_or_param_type = interface;
  IXMLFx_common_float_or_param_type_float = interface;
  IXMLFx_common_float_or_param_type_param = interface;
  IXMLFx_common_transparent_type = interface;
  IXMLProfile_common_type_technique_lambert = interface;
  IXMLProfile_common_type_technique_phong = interface;
  IXMLProfile_common_type_technique_blinn = interface;
  IXMLProfile_bridge_type = interface;
  IXMLProfile_gles2_type = interface;
  IXMLFx_include_type = interface;
  IXMLFx_include_typeList = interface;
  IXMLFx_code_type = interface;
  IXMLFx_code_typeList = interface;
  IXMLGles2_newparam_type = interface;
  IXMLUsertype = interface;
  IXMLUsertype_setparam = interface;
  IXMLArray_ = interface;
  IXMLProfile_gles2_type_newparam = interface;
  IXMLProfile_gles2_type_newparamList = interface;
  IXMLProfile_gles2_type_technique = interface;
  IXMLProfile_gles2_type_techniqueList = interface;
  IXMLGles2_pass_type = interface;
  IXMLGles2_pass_typeList = interface;
  IXMLGles2_pass_type_states = interface;
  IXMLBlend_color = interface;
  IXMLBlend_equation = interface;
  IXMLBlend_equation_separate = interface;
  IXMLBlend_equation_separate_rgb = interface;
  IXMLBlend_equation_separate_alpha = interface;
  IXMLBlend_func = interface;
  IXMLBlend_func_src = interface;
  IXMLBlend_func_dest = interface;
  IXMLBlend_func_separate = interface;
  IXMLBlend_func_separate_src_rgb = interface;
  IXMLBlend_func_separate_dest_rgb = interface;
  IXMLBlend_func_separate_src_alpha = interface;
  IXMLBlend_func_separate_dest_alpha = interface;
  IXMLColor_mask = interface;
  IXMLCull_face = interface;
  IXMLDepth_func = interface;
  IXMLDepth_mask = interface;
  IXMLDepth_range = interface;
  IXMLFront_face = interface;
  IXMLLine_width = interface;
  IXMLPolygon_offset = interface;
  IXMLPoint_size = interface;
  IXMLSample_coverage = interface;
  IXMLSample_coverage_value = interface;
  IXMLSample_coverage_invert = interface;
  IXMLScissor = interface;
  IXMLStencil_func = interface;
  IXMLStencil_func_func = interface;
  IXMLStencil_func_ref = interface;
  IXMLStencil_func_mask = interface;
  IXMLStencil_func_separate = interface;
  IXMLStencil_func_separate_front = interface;
  IXMLStencil_func_separate_back = interface;
  IXMLStencil_func_separate_ref = interface;
  IXMLStencil_func_separate_mask = interface;
  IXMLStencil_mask = interface;
  IXMLStencil_mask_separate = interface;
  IXMLStencil_mask_separate_face = interface;
  IXMLStencil_mask_separate_mask = interface;
  IXMLStencil_op = interface;
  IXMLStencil_op_fail = interface;
  IXMLStencil_op_zfail = interface;
  IXMLStencil_op_zpass = interface;
  IXMLStencil_op_separate = interface;
  IXMLStencil_op_separate_face = interface;
  IXMLStencil_op_separate_fail = interface;
  IXMLStencil_op_separate_zfail = interface;
  IXMLStencil_op_separate_zpass = interface;
  IXMLBlend_enable = interface;
  IXMLCull_face_enable = interface;
  IXMLDepth_test_enable = interface;
  IXMLDither_enable = interface;
  IXMLPolygon_offset_fill_enable = interface;
  IXMLPoint_size_enable = interface;
  IXMLSample_alpha_to_coverage_enable = interface;
  IXMLSample_coverage_enable = interface;
  IXMLScissor_test_enable = interface;
  IXMLStencil_test_enable = interface;
  IXMLGles2_program_type = interface;
  IXMLGles2_shader_type = interface;
  IXMLGles2_shader_typeList = interface;
  IXMLFx_sources_type = interface;
  IXMLFx_sources_type_import = interface;
  IXMLFx_sources_type_importList = interface;
  IXMLGles2_shader_type_sources = interface;
  IXMLFx_target_type = interface;
  IXMLFx_target_typeList = interface;
  IXMLFx_target_type_binary = interface;
  IXMLFx_target_type_binary_hex = interface;
  IXMLGles2_program_type_bind_attribute = interface;
  IXMLGles2_program_type_bind_attributeList = interface;
  IXMLGles2_program_type_bind_uniform = interface;
  IXMLGles2_program_type_bind_uniformList = interface;
  IXMLGles2_program_type_bind_uniform_param = interface;
  IXMLGles2_pass_type_evaluate = interface;
  IXMLFx_rendertarget_type = interface;
  IXMLFx_rendertarget_type_param = interface;
  IXMLFx_colortarget_type = interface;
  IXMLFx_colortarget_typeList = interface;
  IXMLFx_depthtarget_type = interface;
  IXMLFx_depthtarget_typeList = interface;
  IXMLFx_stenciltarget_type = interface;
  IXMLFx_stenciltarget_typeList = interface;
  IXMLFx_clearcolor_type = interface;
  IXMLFx_clearcolor_typeList = interface;
  IXMLFx_clearstencil_type = interface;
  IXMLFx_clearstencil_typeList = interface;
  IXMLFx_cleardepth_type = interface;
  IXMLFx_cleardepth_typeList = interface;
  IXMLProfile_glsl_type = interface;
  IXMLGlsl_newparam_type = interface;
  IXMLGlsl_newparam_typeList = interface;
  IXMLGlsl_array_type = interface;
  IXMLProfile_glsl_type_technique = interface;
  IXMLProfile_glsl_type_techniqueList = interface;
  IXMLProfile_glsl_type_technique_pass = interface;
  IXMLProfile_glsl_type_technique_passList = interface;
  IXMLProfile_glsl_type_technique_pass_states = interface;
  IXMLAlpha_func = interface;
  IXMLAlpha_func_func = interface;
  IXMLAlpha_func_value = interface;
  IXMLColor_material = interface;
  IXMLColor_material_face = interface;
  IXMLColor_material_mode = interface;
  IXMLFog_mode = interface;
  IXMLFog_coord_src = interface;
  IXMLLight_model_color_control = interface;
  IXMLLogic_op = interface;
  IXMLPolygon_mode = interface;
  IXMLPolygon_mode_face = interface;
  IXMLPolygon_mode_mode = interface;
  IXMLShade_model = interface;
  IXMLLight_enable = interface;
  IXMLLight_ambient = interface;
  IXMLLight_diffuse = interface;
  IXMLLight_specular = interface;
  IXMLLight_position = interface;
  IXMLLight_constant_attenuation = interface;
  IXMLLight_linear_attenuation = interface;
  IXMLLight_quadratic_attenuation = interface;
  IXMLLight_spot_cutoff = interface;
  IXMLLight_spot_direction = interface;
  IXMLLight_spot_exponent = interface;
  IXMLTexture1D = interface;
  IXMLTexture2D = interface;
  IXMLTexture3D = interface;
  IXMLTextureCUBE = interface;
  IXMLTextureRECT = interface;
  IXMLTextureDEPTH = interface;
  IXMLTexture1D_enable = interface;
  IXMLTexture2D_enable = interface;
  IXMLTexture3D_enable = interface;
  IXMLTextureCUBE_enable = interface;
  IXMLTextureRECT_enable = interface;
  IXMLTextureDEPTH_enable = interface;
  IXMLTexture_env_color = interface;
  IXMLTexture_env_mode = interface;
  IXMLClip_plane = interface;
  IXMLClip_plane_enable = interface;
  IXMLDepth_bounds = interface;
  IXMLFog_density = interface;
  IXMLFog_start = interface;
  IXMLFog_end = interface;
  IXMLFog_color = interface;
  IXMLLight_model_ambient = interface;
  IXMLLighting_enable = interface;
  IXMLLine_stipple = interface;
  IXMLMaterial_ambient = interface;
  IXMLMaterial_diffuse = interface;
  IXMLMaterial_emission = interface;
  IXMLMaterial_shininess = interface;
  IXMLMaterial_specular = interface;
  IXMLModel_view_matrix = interface;
  IXMLPoint_distance_attenuation = interface;
  IXMLPoint_fade_threshold_size = interface;
  IXMLPoint_size_min = interface;
  IXMLPoint_size_max = interface;
  IXMLProjection_matrix = interface;
  IXMLAlpha_test_enable = interface;
  IXMLColor_logic_op_enable = interface;
  IXMLColor_material_enable = interface;
  IXMLDepth_bounds_enable = interface;
  IXMLDepth_clamp_enable = interface;
  IXMLFog_enable = interface;
  IXMLLight_model_local_viewer_enable = interface;
  IXMLLight_model_two_side_enable = interface;
  IXMLLine_smooth_enable = interface;
  IXMLLine_stipple_enable = interface;
  IXMLLogic_op_enable = interface;
  IXMLMultisample_enable = interface;
  IXMLNormalize_enable = interface;
  IXMLPoint_smooth_enable = interface;
  IXMLPolygon_offset_line_enable = interface;
  IXMLPolygon_offset_point_enable = interface;
  IXMLPolygon_smooth_enable = interface;
  IXMLPolygon_stipple_enable = interface;
  IXMLRescale_normal_enable = interface;
  IXMLSample_alpha_to_one_enable = interface;
  IXMLGlsl_program_type = interface;
  IXMLGlsl_shader_type = interface;
  IXMLGlsl_shader_typeList = interface;
  IXMLGlsl_program_type_bind_attribute = interface;
  IXMLGlsl_program_type_bind_attributeList = interface;
  IXMLGlsl_program_type_bind_uniform = interface;
  IXMLGlsl_program_type_bind_uniformList = interface;
  IXMLGlsl_program_type_bind_uniform_param = interface;
  IXMLProfile_glsl_type_technique_pass_evaluate = interface;
  IXMLProfile_cg_type = interface;
  IXMLCg_newparam_type = interface;
  IXMLCg_newparam_typeList = interface;
  IXMLCg_array_type = interface;
  IXMLCg_user_type = interface;
  IXMLCg_setparam_type = interface;
  IXMLProfile_cg_type_technique = interface;
  IXMLProfile_cg_type_techniqueList = interface;
  IXMLCg_pass_type = interface;
  IXMLCg_pass_typeList = interface;
  IXMLCg_pass_type_states = interface;
  IXMLCg_pass_type_program = interface;
  IXMLCg_pass_type_program_shader = interface;
  IXMLCg_pass_type_program_shader_sources = interface;
  IXMLCg_pass_type_program_shader_bind_uniform = interface;
  IXMLCg_pass_type_program_shader_bind_uniformList = interface;
  IXMLCg_pass_type_program_shader_bind_uniform_param = interface;
  IXMLCg_pass_type_evaluate = interface;
  IXMLProfile_gles_type = interface;
  IXMLGles_newparam_type = interface;
  IXMLGles_newparam_typeList = interface;
  IXMLGles_sampler_type = interface;
  IXMLGles_sampler_type_texcoord = interface;
  IXMLProfile_gles_type_technique = interface;
  IXMLProfile_gles_type_techniqueList = interface;
  IXMLProfile_gles_type_technique_pass = interface;
  IXMLProfile_gles_type_technique_passList = interface;
  IXMLProfile_gles_type_technique_pass_states = interface;
  IXMLTexture_pipeline = interface;
  IXMLGles_texture_pipeline_type = interface;
  IXMLGles_texcombiner_command_type = interface;
  IXMLGles_texcombiner_command_typeList = interface;
  IXMLGles_texture_constant_type = interface;
  IXMLGles_texcombiner_command_rgb_type = interface;
  IXMLGles_texcombiner_argument_rgb_type = interface;
  IXMLGles_texcombiner_command_alpha_type = interface;
  IXMLGles_texcombiner_argument_alpha_type = interface;
  IXMLGles_texenv_command_type = interface;
  IXMLGles_texenv_command_typeList = interface;
  IXMLProfile_gles_type_technique_pass_evaluate = interface;
  IXMLLibrary_force_fields_type = interface;
  IXMLLibrary_force_fields_typeList = interface;
  IXMLForce_field_type = interface;
  IXMLForce_field_typeList = interface;
  IXMLLibrary_images_type = interface;
  IXMLLibrary_images_typeList = interface;
  IXMLImage_type = interface;
  IXMLImage_typeList = interface;
  IXMLImage_type_renderable = interface;
  IXMLImage_source_type = interface;
  IXMLImage_source_type_hex = interface;
  IXMLImage_type_init_from = interface;
  IXMLImage_type_create_2d = interface;
  IXMLImage_type_create_2d_size_exact = interface;
  IXMLImage_type_create_2d_size_ratio = interface;
  IXMLImage_mips_type = interface;
  IXMLImage_type_create_2d_array = interface;
  IXMLImage_type_create_2d_format = interface;
  IXMLImage_type_create_2d_format_hint = interface;
  IXMLImage_type_create_2d_init_from = interface;
  IXMLImage_type_create_2d_init_fromList = interface;
  IXMLImage_type_create_3d = interface;
  IXMLImage_type_create_3d_size = interface;
  IXMLImage_type_create_3d_array = interface;
  IXMLImage_type_create_3d_format = interface;
  IXMLImage_type_create_3d_format_hint = interface;
  IXMLImage_type_create_3d_init_from = interface;
  IXMLImage_type_create_3d_init_fromList = interface;
  IXMLImage_type_create_cube = interface;
  IXMLImage_type_create_cube_size = interface;
  IXMLImage_type_create_cube_array = interface;
  IXMLImage_type_create_cube_format = interface;
  IXMLImage_type_create_cube_format_hint = interface;
  IXMLImage_type_create_cube_init_from = interface;
  IXMLImage_type_create_cube_init_fromList = interface;
  IXMLLibrary_lights_type = interface;
  IXMLLibrary_lights_typeList = interface;
  IXMLLight_type = interface;
  IXMLLight_typeList = interface;
  IXMLLight_type_technique_common = interface;
  IXMLLight_type_technique_common_ambient = interface;
  IXMLTargetable_float3_type = interface;
  IXMLLight_type_technique_common_directional = interface;
  IXMLLight_type_technique_common_point = interface;
  IXMLLight_type_technique_common_spot = interface;
  IXMLLibrary_materials_type = interface;
  IXMLLibrary_materials_typeList = interface;
  IXMLMaterial_type = interface;
  IXMLMaterial_typeList = interface;
  IXMLInstance_effect_type = interface;
  IXMLInstance_effect_type_technique_hint = interface;
  IXMLInstance_effect_type_technique_hintList = interface;
  IXMLInstance_effect_type_setparam = interface;
  IXMLInstance_effect_type_setparamList = interface;
  IXMLSampler_states = interface;
  IXMLLibrary_nodes_type = interface;
  IXMLLibrary_nodes_typeList = interface;
  IXMLNode_type = interface;
  IXMLNode_typeList = interface;
  IXMLLookat_type = interface;
  IXMLLookat_typeList = interface;
  IXMLMatrix_type = interface;
  IXMLMatrix_typeList = interface;
  IXMLRotate_type = interface;
  IXMLRotate_typeList = interface;
  IXMLScale_type = interface;
  IXMLScale_typeList = interface;
  IXMLSkew_type = interface;
  IXMLSkew_typeList = interface;
  IXMLTranslate_type = interface;
  IXMLTranslate_typeList = interface;
  IXMLInstance_camera_type = interface;
  IXMLInstance_camera_typeList = interface;
  IXMLInstance_controller_type = interface;
  IXMLInstance_controller_typeList = interface;
  IXMLBind_material_type = interface;
  IXMLBind_material_type_technique_common = interface;
  IXMLInstance_material_type = interface;
  IXMLInstance_material_type_bind = interface;
  IXMLInstance_material_type_bindList = interface;
  IXMLInstance_material_type_bind_vertex_input = interface;
  IXMLInstance_material_type_bind_vertex_inputList = interface;
  IXMLInstance_geometry_type = interface;
  IXMLInstance_geometry_typeList = interface;
  IXMLInstance_light_type = interface;
  IXMLInstance_light_typeList = interface;
  IXMLInstance_node_type = interface;
  IXMLInstance_node_typeList = interface;
  IXMLLibrary_physics_materials_type = interface;
  IXMLLibrary_physics_materials_typeList = interface;
  IXMLPhysics_material_type = interface;
  IXMLPhysics_material_typeList = interface;
  IXMLPhysics_material_type_technique_common = interface;
  IXMLLibrary_physics_models_type = interface;
  IXMLLibrary_physics_models_typeList = interface;
  IXMLPhysics_model_type = interface;
  IXMLPhysics_model_typeList = interface;
  IXMLRigid_body_type = interface;
  IXMLRigid_body_typeList = interface;
  IXMLRigid_body_type_technique_common = interface;
  IXMLRigid_body_type_technique_common_dynamic = interface;
  IXMLRigid_body_type_technique_common_mass_frame = interface;
  IXMLInstance_physics_material_type = interface;
  IXMLRigid_body_type_technique_common_shape = interface;
  IXMLRigid_body_type_technique_common_shapeList = interface;
  IXMLRigid_body_type_technique_common_shape_hollow = interface;
  IXMLBox_type = interface;
  IXMLCylinder_type = interface;
  IXMLCapsule_type = interface;
  IXMLRigid_constraint_type = interface;
  IXMLRigid_constraint_typeList = interface;
  IXMLRigid_constraint_type_ref_attachment = interface;
  IXMLRigid_constraint_type_attachment = interface;
  IXMLRigid_constraint_type_technique_common = interface;
  IXMLRigid_constraint_type_technique_common_enabled = interface;
  IXMLRigid_constraint_type_technique_common_interpenetrate = interface;
  IXMLRigid_constraint_type_technique_common_limits = interface;
  IXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist = interface;
  IXMLRigid_constraint_type_technique_common_limits_linear = interface;
  IXMLRigid_constraint_type_technique_common_spring = interface;
  IXMLRigid_constraint_type_technique_common_spring_angular = interface;
  IXMLRigid_constraint_type_technique_common_spring_linear = interface;
  IXMLInstance_physics_model_type = interface;
  IXMLInstance_physics_model_typeList = interface;
  IXMLInstance_force_field_type = interface;
  IXMLInstance_force_field_typeList = interface;
  IXMLInstance_rigid_body_type = interface;
  IXMLInstance_rigid_body_typeList = interface;
  IXMLInstance_rigid_body_type_technique_common = interface;
  IXMLInstance_rigid_body_type_technique_common_dynamic = interface;
  IXMLInstance_rigid_body_type_technique_common_mass_frame = interface;
  IXMLInstance_rigid_body_type_technique_common_shape = interface;
  IXMLInstance_rigid_body_type_technique_common_shapeList = interface;
  IXMLInstance_rigid_body_type_technique_common_shape_hollow = interface;
  IXMLInstance_rigid_constraint_type = interface;
  IXMLInstance_rigid_constraint_typeList = interface;
  IXMLLibrary_physics_scenes_type = interface;
  IXMLLibrary_physics_scenes_typeList = interface;
  IXMLPhysics_scene_type = interface;
  IXMLPhysics_scene_typeList = interface;
  IXMLPhysics_scene_type_technique_common = interface;
  IXMLLibrary_visual_scenes_type = interface;
  IXMLLibrary_visual_scenes_typeList = interface;
  IXMLVisual_scene_type = interface;
  IXMLVisual_scene_typeList = interface;
  IXMLVisual_scene_type_evaluate_scene = interface;
  IXMLVisual_scene_type_evaluate_sceneList = interface;
  IXMLVisual_scene_type_evaluate_scene_render = interface;
  IXMLVisual_scene_type_evaluate_scene_renderList = interface;
  IXMLVisual_scene_type_evaluate_scene_render_instance_material = interface;
  IXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override = interface;
  IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind = interface;
  IXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList = interface;
  IXMLLibrary_joints_type = interface;
  IXMLLibrary_joints_typeList = interface;
  IXMLJoint_type = interface;
  IXMLJoint_typeList = interface;
  IXMLAxis_constraint_type = interface;
  IXMLAxis_constraint_typeList = interface;
  IXMLAxis_type = interface;
  IXMLJoint_limits_type = interface;
  IXMLMinmax_type = interface;
  IXMLLibrary_kinematics_models_type = interface;
  IXMLLibrary_kinematics_models_typeList = interface;
  IXMLKinematics_model_type = interface;
  IXMLKinematics_model_typeList = interface;
  IXMLKinematics_model_technique_type = interface;
  IXMLKinematics_newparam_type = interface;
  IXMLKinematics_newparam_typeList = interface;
  IXMLInstance_joint_type = interface;
  IXMLInstance_joint_typeList = interface;
  IXMLLink_type = interface;
  IXMLLink_typeList = interface;
  IXMLLink_type_attachment_full = interface;
  IXMLLink_type_attachment_fullList = interface;
  IXMLLink_type_attachment_start = interface;
  IXMLLink_type_attachment_startList = interface;
  IXMLLink_type_attachment_end = interface;
  IXMLLink_type_attachment_endList = interface;
  IXMLFormula_type = interface;
  IXMLFormula_typeList = interface;
  IXMLFormula_newparam_type = interface;
  IXMLFormula_newparam_typeList = interface;
  IXMLCommon_float_or_param_type = interface;
  IXMLCommon_param_type = interface;
  IXMLFormula_technique_type = interface;
  IXMLMathtype = interface;
  IXMLMitype = interface;
  IXMLMalignmarktype = interface;
  IXMLMglyphtype = interface;
  IXMLMotype = interface;
  IXMLMntype = interface;
  IXMLMtexttype = interface;
  IXMLMstype = interface;
  IXMLMrowtype = interface;
  IXMLMfractype = interface;
  IXMLMsqrttype = interface;
  IXMLMroottype = interface;
  IXMLMpaddedtype = interface;
  IXMLMphantomtype = interface;
  IXMLMfencedtype = interface;
  IXMLMenclosetype = interface;
  IXMLMsubtype = interface;
  IXMLMsuptype = interface;
  IXMLMsubsuptype = interface;
  IXMLMundertype = interface;
  IXMLMovertype = interface;
  IXMLMunderovertype = interface;
  IXMLMmultiscriptstype = interface;
  IXMLMtabletype = interface;
  IXMLMtrtype = interface;
  IXMLMtdtype = interface;
  IXMLMaligngrouptype = interface;
  IXMLMspacetype = interface;
  IXMLMactiontype = interface;
  IXMLMerrortype = interface;
  IXMLMstyletype = interface;
  IXMLCntype = interface;
  IXMLCitype = interface;
  IXMLCsymboltype = interface;
  IXMLArithtype = interface;
  IXMLFunctionstype = interface;
  IXMLDomainofapplicationtype = interface;
  IXMLElementaryfunctionstype = interface;
  IXMLLogictype = interface;
  IXMLConstanttype = interface;
  IXMLSettype = interface;
  IXMLListtype = interface;
  IXMLUniontype = interface;
  IXMLIntersecttype = interface;
  IXMLIntype = interface;
  IXMLNotintype = interface;
  IXMLSubsettype = interface;
  IXMLPrsubsettype = interface;
  IXMLNotsubsettype = interface;
  IXMLNotprsubsettype = interface;
  IXMLSetdifftype = interface;
  IXMLCardtype = interface;
  IXMLCartesianproducttype = interface;
  IXMLRelationstype = interface;
  IXMLLogbasetype = interface;
  IXMLInttype = interface;
  IXMLDifftype = interface;
  IXMLPartialdifftype = interface;
  IXMLLimittype = interface;
  IXMLLowlimittype = interface;
  IXMLUplimittype = interface;
  IXMLTendstotype = interface;
  IXMLVectortype = interface;
  IXMLMatrixtype = interface;
  IXMLMatrixrowtype = interface;
  IXMLDeterminanttype = interface;
  IXMLTransposetype = interface;
  IXMLSelectortype = interface;
  IXMLVectorproducttype = interface;
  IXMLScalarproducttype = interface;
  IXMLOuterproducttype = interface;
  IXMLDivergencetype = interface;
  IXMLGradtype = interface;
  IXMLCurltype = interface;
  IXMLLaplaciantype = interface;
  IXMLMeantype = interface;
  IXMLSdevtype = interface;
  IXMLVariancetype = interface;
  IXMLMediantype = interface;
  IXMLModetype = interface;
  IXMLMomenttype = interface;
  IXMLMomentabouttype = interface;
  IXMLApplytype = interface;
  IXMLIntervaltype = interface;
  IXMLInversetype = interface;
  IXMLConditiontype = interface;
  IXMLDeclaretype = interface;
  IXMLLambdatype = interface;
  IXMLPiecewisetype = interface;
  IXMLPiecetype = interface;
  IXMLPiecetypeList = interface;
  IXMLBvartype = interface;
  IXMLDegreetype = interface;
  IXMLSemanticstype = interface;
  IXMLAnnotationtype = interface;
  IXMLAnnotationxmltype = interface;
  IXMLOtherwisetype = interface;
  IXMLSeptype = interface;
  IXMLMlabeledtrtype = interface;
  IXMLNonetype = interface;
  IXMLMprescriptstype = interface;
  IXMLLibrary_articulated_systems_type = interface;
  IXMLLibrary_articulated_systems_typeList = interface;
  IXMLArticulated_system_type = interface;
  IXMLArticulated_system_typeList = interface;
  IXMLKinematics_type = interface;
  IXMLInstance_kinematics_model_type = interface;
  IXMLInstance_kinematics_model_typeList = interface;
  IXMLKinematics_bind_type = interface;
  IXMLKinematics_bind_typeList = interface;
  IXMLKinematics_param_type = interface;
  IXMLKinematics_setparam_type = interface;
  IXMLKinematics_setparam_typeList = interface;
  IXMLKinematics_technique_type = interface;
  IXMLKinematics_axis_info_type = interface;
  IXMLKinematics_axis_info_typeList = interface;
  IXMLCommon_bool_or_param_type = interface;
  IXMLCommon_int_or_param_type = interface;
  IXMLKinematics_index_type = interface;
  IXMLKinematics_index_typeList = interface;
  IXMLKinematics_limits_type = interface;
  IXMLKinematics_frame_type = interface;
  IXMLMotion_type = interface;
  IXMLInstance_articulated_system_type = interface;
  IXMLInstance_articulated_system_typeList = interface;
  IXMLMotion_technique_type = interface;
  IXMLMotion_axis_info_type = interface;
  IXMLMotion_axis_info_typeList = interface;
  IXMLMotion_effector_info_type = interface;
  IXMLCommon_float2_or_param_type = interface;
  IXMLLibrary_kinematics_scenes_type = interface;
  IXMLLibrary_kinematics_scenes_typeList = interface;
  IXMLKinematics_scene_type = interface;
  IXMLKinematics_scene_typeList = interface;
  IXMLLibrary_formulas_type = interface;
  IXMLLibrary_formulas_typeList = interface;
  IXMLCOLLADA_scene = interface;
  IXMLInstance_kinematics_scene_type = interface;
  IXMLInstance_kinematics_scene_typeList = interface;
  IXMLCommon_sidref_or_param_type = interface;
  IXMLBind_kinematics_model_type = interface;
  IXMLBind_kinematics_model_typeList = interface;
  IXMLBind_joint_axis_type = interface;
  IXMLBind_joint_axis_typeList = interface;
  IXMLInput_global_type = interface;
  IXMLEllipsoid_type = interface;
  IXMLLimits_sub_type = interface;
  IXMLTargetable_float4_type = interface;
  IXMLList_of_uints_typeList = interface;
  IXMLAnyURIList = interface;
  IXMLString_List = interface;
  IXMLNCNameList = interface;

{ IXMLCOLLADA }

  IXMLCOLLADA = interface(IXML)
    ['{AAF8B969-C825-4602-BE48-FB5D3A69D2E5}']
    { Property Accessors }
    function Get_Version: UnicodeString;
    function Get_Base: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Library_animations: IXMLLibrary_animations_typeList;
    function Get_Library_animation_clips: IXMLLibrary_animation_clips_typeList;
    function Get_Library_cameras: IXMLLibrary_cameras_typeList;
    function Get_Library_controllers: IXMLLibrary_controllers_typeList;
    function Get_Library_geometries: IXMLLibrary_geometries_typeList;
    function Get_Library_effects: IXMLLibrary_effects_typeList;
    function Get_Library_force_fields: IXMLLibrary_force_fields_typeList;
    function Get_Library_images: IXMLLibrary_images_typeList;
    function Get_Library_lights: IXMLLibrary_lights_typeList;
    function Get_Library_materials: IXMLLibrary_materials_typeList;
    function Get_Library_nodes: IXMLLibrary_nodes_typeList;
    function Get_Library_physics_materials: IXMLLibrary_physics_materials_typeList;
    function Get_Library_physics_models: IXMLLibrary_physics_models_typeList;
    function Get_Library_physics_scenes: IXMLLibrary_physics_scenes_typeList;
    function Get_Library_visual_scenes: IXMLLibrary_visual_scenes_typeList;
    function Get_Library_joints: IXMLLibrary_joints_typeList;
    function Get_Library_kinematics_models: IXMLLibrary_kinematics_models_typeList;
    function Get_Library_articulated_systems: IXMLLibrary_articulated_systems_typeList;
    function Get_Library_kinematics_scenes: IXMLLibrary_kinematics_scenes_typeList;
    function Get_Library_formulas: IXMLLibrary_formulas_typeList;
    function Get_Scene: IXMLCOLLADA_scene;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Version(Value: UnicodeString);
    procedure Set_Base(Value: UnicodeString);
    { Methods & Properties }
    property Version: UnicodeString read Get_Version write Set_Version;
    property Base: UnicodeString read Get_Base write Set_Base;
    property Asset: IXMLAsset_type read Get_Asset;
    property Library_animations: IXMLLibrary_animations_typeList read Get_Library_animations;
    property Library_animation_clips: IXMLLibrary_animation_clips_typeList read Get_Library_animation_clips;
    property Library_cameras: IXMLLibrary_cameras_typeList read Get_Library_cameras;
    property Library_controllers: IXMLLibrary_controllers_typeList read Get_Library_controllers;
    property Library_geometries: IXMLLibrary_geometries_typeList read Get_Library_geometries;
    property Library_effects: IXMLLibrary_effects_typeList read Get_Library_effects;
    property Library_force_fields: IXMLLibrary_force_fields_typeList read Get_Library_force_fields;
    property Library_images: IXMLLibrary_images_typeList read Get_Library_images;
    property Library_lights: IXMLLibrary_lights_typeList read Get_Library_lights;
    property Library_materials: IXMLLibrary_materials_typeList read Get_Library_materials;
    property Library_nodes: IXMLLibrary_nodes_typeList read Get_Library_nodes;
    property Library_physics_materials: IXMLLibrary_physics_materials_typeList read Get_Library_physics_materials;
    property Library_physics_models: IXMLLibrary_physics_models_typeList read Get_Library_physics_models;
    property Library_physics_scenes: IXMLLibrary_physics_scenes_typeList read Get_Library_physics_scenes;
    property Library_visual_scenes: IXMLLibrary_visual_scenes_typeList read Get_Library_visual_scenes;
    property Library_joints: IXMLLibrary_joints_typeList read Get_Library_joints;
    property Library_kinematics_models: IXMLLibrary_kinematics_models_typeList read Get_Library_kinematics_models;
    property Library_articulated_systems: IXMLLibrary_articulated_systems_typeList read Get_Library_articulated_systems;
    property Library_kinematics_scenes: IXMLLibrary_kinematics_scenes_typeList read Get_Library_kinematics_scenes;
    property Library_formulas: IXMLLibrary_formulas_typeList read Get_Library_formulas;
    property Scene: IXMLCOLLADA_scene read Get_Scene;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLAsset_type }

  IXMLAsset_type = interface(IXML)
    ['{8D97294B-82BB-4F42-A27A-0E643B9BCA5C}']
    { Property Accessors }
    function Get_Contributor: IXMLAsset_type_contributorList;
    function Get_Coverage: IXMLAsset_type_coverage;
    function Get_Created: UnicodeString;
    function Get_Keywords: UnicodeString;
    function Get_Modified: UnicodeString;
    function Get_Revision: UnicodeString;
    function Get_Subject: UnicodeString;
    function Get_Title: UnicodeString;
    function Get_Unit_: IXMLAsset_type_unit;
    function Get_Up_axis: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Created(Value: UnicodeString);
    procedure Set_Keywords(Value: UnicodeString);
    procedure Set_Modified(Value: UnicodeString);
    procedure Set_Revision(Value: UnicodeString);
    procedure Set_Subject(Value: UnicodeString);
    procedure Set_Title(Value: UnicodeString);
    procedure Set_Up_axis(Value: UnicodeString);
    { Methods & Properties }
    property Contributor: IXMLAsset_type_contributorList read Get_Contributor;
    property Coverage: IXMLAsset_type_coverage read Get_Coverage;
    property Created: UnicodeString read Get_Created write Set_Created;
    property Keywords: UnicodeString read Get_Keywords write Set_Keywords;
    property Modified: UnicodeString read Get_Modified write Set_Modified;
    property Revision: UnicodeString read Get_Revision write Set_Revision;
    property Subject: UnicodeString read Get_Subject write Set_Subject;
    property Title: UnicodeString read Get_Title write Set_Title;
    property Unit_: IXMLAsset_type_unit read Get_Unit_;
    property Up_axis: UnicodeString read Get_Up_axis write Set_Up_axis;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLAsset_type_contributor }

  IXMLAsset_type_contributor = interface(IXML)
    ['{1B7305E2-35F4-4FB6-B3E3-22FA5DD26145}']
    { Property Accessors }
    function Get_Author: UnicodeString;
    function Get_Author_email: UnicodeString;
    function Get_Author_website: UnicodeString;
    function Get_Authoring_tool: UnicodeString;
    function Get_Comments: UnicodeString;
    function Get_Copyright: UnicodeString;
    function Get_Source_data: UnicodeString;
    procedure Set_Author(Value: UnicodeString);
    procedure Set_Author_email(Value: UnicodeString);
    procedure Set_Author_website(Value: UnicodeString);
    procedure Set_Authoring_tool(Value: UnicodeString);
    procedure Set_Comments(Value: UnicodeString);
    procedure Set_Copyright(Value: UnicodeString);
    procedure Set_Source_data(Value: UnicodeString);
    { Methods & Properties }
    property Author: UnicodeString read Get_Author write Set_Author;
    property Author_email: UnicodeString read Get_Author_email write Set_Author_email;
    property Author_website: UnicodeString read Get_Author_website write Set_Author_website;
    property Authoring_tool: UnicodeString read Get_Authoring_tool write Set_Authoring_tool;
    property Comments: UnicodeString read Get_Comments write Set_Comments;
    property Copyright: UnicodeString read Get_Copyright write Set_Copyright;
    property Source_data: UnicodeString read Get_Source_data write Set_Source_data;
  end;

{ IXMLAsset_type_contributorList }

  IXMLAsset_type_contributorList = interface(IXMLFilter)
    ['{BCA69F12-A95F-4263-9C40-1BE868EED828}']
    { Methods & Properties }
    function Add: IXMLAsset_type_contributor;
    function Insert(const Index: Integer): IXMLAsset_type_contributor;

    function Get_Item(Index: Integer): IXMLAsset_type_contributor;
    property Items[Index: Integer]: IXMLAsset_type_contributor read Get_Item; default;
  end;

{ IXMLAsset_type_coverage }

  IXMLAsset_type_coverage = interface(IXML)
    ['{8E706A91-4C06-439E-99CC-0E2F7B241B91}']
    { Property Accessors }
    function Get_Geographic_location: IXMLAsset_type_coverage_geographic_location;
    { Methods & Properties }
    property Geographic_location: IXMLAsset_type_coverage_geographic_location read Get_Geographic_location;
  end;

{ IXMLAsset_type_coverage_geographic_location }

  IXMLAsset_type_coverage_geographic_location = interface(IXML)
    ['{3C4DD3A9-4785-451A-B005-67C6FCD3C175}']
    { Property Accessors }
    function Get_Longitude: Single;
    function Get_Latitude: Single;
    function Get_Altitude: IXMLAsset_type_coverage_geographic_location_altitude;
    procedure Set_Longitude(Value: Single);
    procedure Set_Latitude(Value: Single);
    { Methods & Properties }
    property Longitude: Single read Get_Longitude write Set_Longitude;
    property Latitude: Single read Get_Latitude write Set_Latitude;
    property Altitude: IXMLAsset_type_coverage_geographic_location_altitude read Get_Altitude;
  end;

{ IXMLAsset_type_coverage_geographic_location_altitude }

  IXMLAsset_type_coverage_geographic_location_altitude = interface(IXML)
    ['{264A9E7C-FA67-451E-B7F7-335121692126}']
    { Property Accessors }
    function Get_Mode: UnicodeString;
    procedure Set_Mode(Value: UnicodeString);
    { Methods & Properties }
    property Mode: UnicodeString read Get_Mode write Set_Mode;
  end;

{ IXMLAsset_type_unit }

  IXMLAsset_type_unit = interface(IXML)
    ['{65533AED-2DDC-407C-8468-ACC3F5D5DB1B}']
    { Property Accessors }
    function Get_Meter: Double;
    function Get_Name: UnicodeString;
    procedure Set_Meter(Value: Double);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Meter: Double read Get_Meter write Set_Meter;
    property Name: UnicodeString read Get_Name write Set_Name;
  end;

{ IXMLExtra_type }

  IXMLExtra_type = interface(IXML)
    ['{F640340D-9ADF-425D-AC16-18B5C7AE8E5C}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Type_: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Technique: IXMLTechnique_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Type_(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Type_: UnicodeString read Get_Type_ write Set_Type_;
    property Asset: IXMLAsset_type read Get_Asset;
    property Technique: IXMLTechnique_typeList read Get_Technique;
  end;

{ IXMLExtra_typeList }

  IXMLExtra_typeList = interface(IXMLFilter)
    ['{7C9901CB-06D5-4526-9F69-69859E475061}']
    { Methods & Properties }
    function Add: IXMLExtra_type;
    function Insert(const Index: Integer): IXMLExtra_type;

    function Get_Item(Index: Integer): IXMLExtra_type;
    property Items[Index: Integer]: IXMLExtra_type read Get_Item; default;
  end;

{ IXMLTechnique_type }

  IXMLTechnique_type = interface(IXML)
    ['{29E0C631-D4D4-4E54-BDF9-B4EA4DDCA993}']
    { Property Accessors }
    function Get_Profile: UnicodeString;
    procedure Set_Profile(Value: UnicodeString);
    { Methods & Properties }
    property Profile: UnicodeString read Get_Profile write Set_Profile;
  end;

{ IXMLTechnique_typeList }

  IXMLTechnique_typeList = interface(IXMLFilter)
    ['{37A03A3F-E96C-4E89-8FEF-9749B0C5F797}']
    { Methods & Properties }
    function Add: IXMLTechnique_type;
    function Insert(const Index: Integer): IXMLTechnique_type;

    function Get_Item(Index: Integer): IXMLTechnique_type;
    property Items[Index: Integer]: IXMLTechnique_type read Get_Item; default;
  end;

{ IXMLLibrary_animations_type }

  IXMLLibrary_animations_type = interface(IXML)
    ['{2C2D4913-43AD-43AF-8A17-2A24F23D0D9D}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Animation: IXMLAnimation_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Animation: IXMLAnimation_typeList read Get_Animation;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_animations_typeList }

  IXMLLibrary_animations_typeList = interface(IXMLFilter)
    ['{979F0CD9-5D3D-45D2-BAF0-AA163EF16B49}']
    { Methods & Properties }
    function Add: IXMLLibrary_animations_type;
    function Insert(const Index: Integer): IXMLLibrary_animations_type;

    function Get_Item(Index: Integer): IXMLLibrary_animations_type;
    property Items[Index: Integer]: IXMLLibrary_animations_type read Get_Item; default;
  end;

{ IXMLAnimation_type }

  IXMLAnimation_type = interface(IXML)
    ['{5F0ED153-47AB-4BD7-98E9-9C0CB2DD2B67}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Source: IXMLSource_typeList;
    function Get_Sampler: IXMLSampler_typeList;
    function Get_Channel: IXMLChannel_typeList;
    function Get_Animation: IXMLAnimation_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Source: IXMLSource_typeList read Get_Source;
    property Sampler: IXMLSampler_typeList read Get_Sampler;
    property Channel: IXMLChannel_typeList read Get_Channel;
    property Animation: IXMLAnimation_typeList read Get_Animation;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLAnimation_typeList }

  IXMLAnimation_typeList = interface(IXMLFilter)
    ['{8F7EC455-840C-48E9-B343-D941085C5481}']
    { Methods & Properties }
    function Add: IXMLAnimation_type;
    function Insert(const Index: Integer): IXMLAnimation_type;

    function Get_Item(Index: Integer): IXMLAnimation_type;
    property Items[Index: Integer]: IXMLAnimation_type read Get_Item; default;
  end;

{ IXMLSource_type }

  IXMLSource_type = interface(IXML)
    ['{582759B6-FB96-4485-BBAA-3A53F230454A}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Token_array: IXMLToken_array_type;
    function Get_IDREF_array: IXMLIdref_array_type;
    function Get_Name_array: IXMLName_array_type;
    function Get_Bool_array: IXMLBool_array_type;
    function Get_Float_array: IXMLFloat_array_type;
    function Get_Int_array: IXMLInt_array_type;
    function Get_SIDREF_array: IXMLSidref_array_type;
    function Get_Technique_common: IXMLSource_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Token_array: IXMLToken_array_type read Get_Token_array;
    property IDREF_array: IXMLIdref_array_type read Get_IDREF_array;
    property Name_array: IXMLName_array_type read Get_Name_array;
    property Bool_array: IXMLBool_array_type read Get_Bool_array;
    property Float_array: IXMLFloat_array_type read Get_Float_array;
    property Int_array: IXMLInt_array_type read Get_Int_array;
    property SIDREF_array: IXMLSidref_array_type read Get_SIDREF_array;
    property Technique_common: IXMLSource_type_technique_common read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
  end;

{ IXMLSource_typeList }

  IXMLSource_typeList = interface(IXMLFilter)
    ['{D82E89EC-55B0-4F15-B26E-A24955B95929}']
    { Methods & Properties }
    function Add: IXMLSource_type;
    function Insert(const Index: Integer): IXMLSource_type;

    function Get_Item(Index: Integer): IXMLSource_type;
    property Items[Index: Integer]: IXMLSource_type read Get_Item; default;
  end;

{ IXMLToken_array_type }

  IXMLToken_array_type = interface(IXML)
    ['{F42D30CC-FF5A-47E8-B1A6-C6346A8EDB32}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
  end;

{ IXMLIdref_array_type }

  IXMLIdref_array_type = interface(IXML)
    ['{D488D4E0-B3CE-47ED-B258-E237E11B7EEF}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
  end;

{ IXMLName_array_type }

  IXMLName_array_type = interface(IXML)
    ['{8A57FBF0-6CEC-4D54-ABEE-05AACDDFDCF5}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
  end;

{ IXMLBool_array_type }

  IXMLBool_array_type = interface(IXML)
    ['{770C4467-6F59-451D-9F0E-2E5371BF9820}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
  end;

{ IXMLFloat_array_type }

  IXMLFloat_array_type = interface(IXML)
    ['{FD309CDF-ED80-483D-87FB-80F7BEA96B99}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Digits: Byte;
    function Get_Magnitude: SmallInt;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Digits(Value: Byte);
    procedure Set_Magnitude(Value: SmallInt);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Digits: Byte read Get_Digits write Set_Digits;
    property Magnitude: SmallInt read Get_Magnitude write Set_Magnitude;
  end;

{ IXMLInt_array_type }

  IXMLInt_array_type = interface(IXML)
    ['{79BD69FE-668E-492F-A308-9BDAC6902E46}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_MinInclusive: Integer;
    function Get_MaxInclusive: Integer;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_MinInclusive(Value: Integer);
    procedure Set_MaxInclusive(Value: Integer);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property MinInclusive: Integer read Get_MinInclusive write Set_MinInclusive;
    property MaxInclusive: Integer read Get_MaxInclusive write Set_MaxInclusive;
  end;

{ IXMLSidref_array_type }

  IXMLSidref_array_type = interface(IXML)
    ['{31C2C924-532F-413F-AFCA-FC6E26DF366C}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
  end;

{ IXMLSource_type_technique_common }

  IXMLSource_type_technique_common = interface(IXML)
    ['{01956D2A-38DA-494F-9225-1642DE5AD806}']
    { Property Accessors }
    function Get_Accessor: IXMLAccessor_type;
    { Methods & Properties }
    property Accessor: IXMLAccessor_type read Get_Accessor;
  end;

{ IXMLAccessor_type }

  IXMLAccessor_type = interface(IXMLFilter)
    ['{C0439A49-5F10-48F5-9D4B-20357B0A088E}']
    { Property Accessors }
    function Get_Count: Int64;
    function Get_Offset: Int64;
    function Get_Source: UnicodeString;
    function Get_Stride: Int64;
    function Get_Param(Index: Integer): IXMLParam_type;
    procedure Set_Count(Value: Int64);
    procedure Set_Offset(Value: Int64);
    procedure Set_Source(Value: UnicodeString);
    procedure Set_Stride(Value: Int64);
    { Methods & Properties }
    function Add: IXMLParam_type;
    function Insert(const Index: Integer): IXMLParam_type;
    property AccessorCount: Int64 read Get_Count write Set_Count;
    property Offset: Int64 read Get_Offset write Set_Offset;
    property Source: UnicodeString read Get_Source write Set_Source;
    property Stride: Int64 read Get_Stride write Set_Stride;
    property Param[Index: Integer]: IXMLParam_type read Get_Param; default;
  end;

{ IXMLParam_type }

  IXMLParam_type = interface(IXML)
    ['{76BCB4E0-18C2-4A5A-84C7-9B6FC5D173FD}']
    { Property Accessors }
    function Get_Name: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Semantic: UnicodeString;
    function Get_Type_: UnicodeString;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Type_(Value: UnicodeString);
    { Methods & Properties }
    property Name: UnicodeString read Get_Name write Set_Name;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Type_: UnicodeString read Get_Type_ write Set_Type_;
  end;

{ IXMLParam_typeList }

  IXMLParam_typeList = interface(IXMLFilter)
    ['{26B3907A-FECB-4765-9680-8C77150CCC3D}']
    { Methods & Properties }
    function Add: IXMLParam_type;
    function Insert(const Index: Integer): IXMLParam_type;

    function Get_Item(Index: Integer): IXMLParam_type;
    property Items[Index: Integer]: IXMLParam_type read Get_Item; default;
  end;

{ IXMLSampler_type }

  IXMLSampler_type = interface(IXMLFilter)
    ['{8E517DB1-04B0-426E-96A3-D8D98935F7C6}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Pre_behavior: UnicodeString;
    function Get_Post_behavior: UnicodeString;
    function Get_Input(Index: Integer): IXMLInput_local_type;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Pre_behavior(Value: UnicodeString);
    procedure Set_Post_behavior(Value: UnicodeString);
    { Methods & Properties }
    function Add: IXMLInput_local_type;
    function Insert(const Index: Integer): IXMLInput_local_type;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Pre_behavior: UnicodeString read Get_Pre_behavior write Set_Pre_behavior;
    property Post_behavior: UnicodeString read Get_Post_behavior write Set_Post_behavior;
    property Input[Index: Integer]: IXMLInput_local_type read Get_Input; default;
  end;

{ IXMLSampler_typeList }

  IXMLSampler_typeList = interface(IXMLFilter)
    ['{9124F427-54E1-4044-B7BD-567EBD56CFF1}']
    { Methods & Properties }
    function Add: IXMLSampler_type;
    function Insert(const Index: Integer): IXMLSampler_type;

    function Get_Item(Index: Integer): IXMLSampler_type;
    property Items[Index: Integer]: IXMLSampler_type read Get_Item; default;
  end;

{ IXMLInput_local_type }

  IXMLInput_local_type = interface(IXML)
    ['{9F9EE0F5-10CA-4663-B536-101766DC5122}']
    { Property Accessors }
    function Get_Semantic: UnicodeString;
    function Get_Source: UnicodeString;
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Source(Value: UnicodeString);
    { Methods & Properties }
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Source: UnicodeString read Get_Source write Set_Source;
  end;

{ IXMLInput_local_typeList }

  IXMLInput_local_typeList = interface(IXMLFilter)
    ['{A9A362FF-4CC2-4B1C-B3EF-11797B51BF54}']
    { Methods & Properties }
    function Add: IXMLInput_local_type;
    function Insert(const Index: Integer): IXMLInput_local_type;

    function Get_Item(Index: Integer): IXMLInput_local_type;
    property Items[Index: Integer]: IXMLInput_local_type read Get_Item; default;
  end;

{ IXMLChannel_type }

  IXMLChannel_type = interface(IXML)
    ['{0D2C25A8-078A-4E75-B283-4145F8FD2392}']
    { Property Accessors }
    function Get_Source: UnicodeString;
    function Get_Target: UnicodeString;
    procedure Set_Source(Value: UnicodeString);
    procedure Set_Target(Value: UnicodeString);
    { Methods & Properties }
    property Source: UnicodeString read Get_Source write Set_Source;
    property Target: UnicodeString read Get_Target write Set_Target;
  end;

{ IXMLChannel_typeList }

  IXMLChannel_typeList = interface(IXMLFilter)
    ['{CB881648-6608-405A-A7E8-59DDF0CE7530}']
    { Methods & Properties }
    function Add: IXMLChannel_type;
    function Insert(const Index: Integer): IXMLChannel_type;

    function Get_Item(Index: Integer): IXMLChannel_type;
    property Items[Index: Integer]: IXMLChannel_type read Get_Item; default;
  end;

{ IXMLLibrary_animation_clips_type }

  IXMLLibrary_animation_clips_type = interface(IXML)
    ['{E97254A6-DFB4-4844-8878-E8160E9695E7}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Animation_clip: IXMLAnimation_clip_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Animation_clip: IXMLAnimation_clip_typeList read Get_Animation_clip;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_animation_clips_typeList }

  IXMLLibrary_animation_clips_typeList = interface(IXMLFilter)
    ['{A0526617-5EC7-4D02-879B-16E47DE22CA5}']
    { Methods & Properties }
    function Add: IXMLLibrary_animation_clips_type;
    function Insert(const Index: Integer): IXMLLibrary_animation_clips_type;

    function Get_Item(Index: Integer): IXMLLibrary_animation_clips_type;
    property Items[Index: Integer]: IXMLLibrary_animation_clips_type read Get_Item; default;
  end;

{ IXMLAnimation_clip_type }

  IXMLAnimation_clip_type = interface(IXML)
    ['{FC9E6EFE-5355-4F11-BBA0-50011DCF580E}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Start: Double;
    function Get_End_: Double;
    function Get_Asset: IXMLAsset_type;
    function Get_Instance_animation: IXMLInstance_with_extra_typeList;
    function Get_Instance_formula: IXMLInstance_formula_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Start(Value: Double);
    procedure Set_End_(Value: Double);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Start: Double read Get_Start write Set_Start;
    property End_: Double read Get_End_ write Set_End_;
    property Asset: IXMLAsset_type read Get_Asset;
    property Instance_animation: IXMLInstance_with_extra_typeList read Get_Instance_animation;
    property Instance_formula: IXMLInstance_formula_typeList read Get_Instance_formula;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLAnimation_clip_typeList }

  IXMLAnimation_clip_typeList = interface(IXMLFilter)
    ['{D851BC0F-714A-430C-87CC-B75303D133DE}']
    { Methods & Properties }
    function Add: IXMLAnimation_clip_type;
    function Insert(const Index: Integer): IXMLAnimation_clip_type;

    function Get_Item(Index: Integer): IXMLAnimation_clip_type;
    property Items[Index: Integer]: IXMLAnimation_clip_type read Get_Item; default;
  end;

{ IXMLInstance_with_extra_type }

  IXMLInstance_with_extra_type = interface(IXMLFilter)
    ['{13BBF11D-7325-4978-8394-A103AE661FCD}']
    { Property Accessors }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Extra(Index: Integer): IXMLExtra_type;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    function Add: IXMLExtra_type;
    function Insert(const Index: Integer): IXMLExtra_type;
    property Url: UnicodeString read Get_Url write Set_Url;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Extra[Index: Integer]: IXMLExtra_type read Get_Extra; default;
  end;

{ IXMLInstance_with_extra_typeList }

  IXMLInstance_with_extra_typeList = interface(IXMLFilter)
    ['{6A69BF46-9B27-4BA1-B85D-F7420AE4860A}']
    { Methods & Properties }
    function Add: IXMLInstance_with_extra_type;
    function Insert(const Index: Integer): IXMLInstance_with_extra_type;

    function Get_Item(Index: Integer): IXMLInstance_with_extra_type;
    property Items[Index: Integer]: IXMLInstance_with_extra_type read Get_Item; default;
  end;

{ IXMLInstance_formula_type }

  IXMLInstance_formula_type = interface(IXMLFilter)
    ['{A1745384-C1C3-45AF-B3D0-90C5E1829ECC}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Url: UnicodeString;
    function Get_Setparam(Index: Integer): IXMLFormula_setparam_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Url(Value: UnicodeString);
    { Methods & Properties }
    function Add: IXMLFormula_setparam_type;
    function Insert(const Index: Integer): IXMLFormula_setparam_type;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Url: UnicodeString read Get_Url write Set_Url;
    property Setparam[Index: Integer]: IXMLFormula_setparam_type read Get_Setparam; default;
  end;

{ IXMLInstance_formula_typeList }

  IXMLInstance_formula_typeList = interface(IXMLFilter)
    ['{46116BEF-8D85-460C-88C8-5640781B1999}']
    { Methods & Properties }
    function Add: IXMLInstance_formula_type;
    function Insert(const Index: Integer): IXMLInstance_formula_type;

    function Get_Item(Index: Integer): IXMLInstance_formula_type;
    property Items[Index: Integer]: IXMLInstance_formula_type read Get_Item; default;
  end;

{ IXMLFormula_setparam_type }

  IXMLFormula_setparam_type = interface(IXML)
    ['{2713F51A-F897-40FC-B390-BD02DCDC7789}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    function Get_Float: Double;
    function Get_Int: Int64;
    function Get_SIDREF: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Connect_param: IXMLKinematics_connect_param_type;
    procedure Set_Ref(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Int(Value: Int64);
    procedure Set_SIDREF(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
    property Float: Double read Get_Float write Set_Float;
    property Int: Int64 read Get_Int write Set_Int;
    property SIDREF: UnicodeString read Get_SIDREF write Set_SIDREF;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Connect_param: IXMLKinematics_connect_param_type read Get_Connect_param;
  end;

{ IXMLKinematics_connect_param_type }

  IXMLKinematics_connect_param_type = interface(IXML)
    ['{1E151FB6-2D88-448C-9A0F-830997E3D213}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
  end;

{ IXMLLibrary_cameras_type }

  IXMLLibrary_cameras_type = interface(IXML)
    ['{E9419170-8793-4246-A778-7E223C7B9074}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Camera: IXMLCamera_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Camera: IXMLCamera_typeList read Get_Camera;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_cameras_typeList }

  IXMLLibrary_cameras_typeList = interface(IXMLFilter)
    ['{82D8A111-B8BC-4667-9DC3-5B3C659D193E}']
    { Methods & Properties }
    function Add: IXMLLibrary_cameras_type;
    function Insert(const Index: Integer): IXMLLibrary_cameras_type;

    function Get_Item(Index: Integer): IXMLLibrary_cameras_type;
    property Items[Index: Integer]: IXMLLibrary_cameras_type read Get_Item; default;
  end;

{ IXMLCamera_type }

  IXMLCamera_type = interface(IXML)
    ['{7FF9514F-153E-498D-BD16-6E99866C8FED}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Optics: IXMLCamera_type_optics;
    function Get_Imager: IXMLCamera_type_imager;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Optics: IXMLCamera_type_optics read Get_Optics;
    property Imager: IXMLCamera_type_imager read Get_Imager;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLCamera_typeList }

  IXMLCamera_typeList = interface(IXMLFilter)
    ['{FFA00A1C-82C4-4E31-99A6-7A77B9C3C5B7}']
    { Methods & Properties }
    function Add: IXMLCamera_type;
    function Insert(const Index: Integer): IXMLCamera_type;

    function Get_Item(Index: Integer): IXMLCamera_type;
    property Items[Index: Integer]: IXMLCamera_type read Get_Item; default;
  end;

{ IXMLCamera_type_optics }

  IXMLCamera_type_optics = interface(IXML)
    ['{3E3CBB2C-FD85-4D13-A337-AFACBB9BCB2A}']
    { Property Accessors }
    function Get_Technique_common: IXMLCamera_type_optics_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Technique_common: IXMLCamera_type_optics_technique_common read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLCamera_type_optics_technique_common }

  IXMLCamera_type_optics_technique_common = interface(IXML)
    ['{A428673C-8F51-4D76-8421-3141D0153A46}']
    { Property Accessors }
    function Get_Orthographic: IXMLCamera_type_optics_technique_common_orthographic;
    function Get_Perspective: IXMLCamera_type_optics_technique_common_perspective;
    { Methods & Properties }
    property Orthographic: IXMLCamera_type_optics_technique_common_orthographic read Get_Orthographic;
    property Perspective: IXMLCamera_type_optics_technique_common_perspective read Get_Perspective;
  end;

{ IXMLCamera_type_optics_technique_common_orthographic }

  IXMLCamera_type_optics_technique_common_orthographic = interface(IXML)
    ['{2B91F488-7100-4EAD-8A77-90CA97A54AD9}']
    { Property Accessors }
    function Get_Xmag: IXMLTargetable_float_type;
    function Get_Ymag: IXMLTargetable_float_type;
    function Get_Aspect_ratio: IXMLTargetable_float_type;
    function Get_Znear: IXMLTargetable_float_type;
    function Get_Zfar: IXMLTargetable_float_type;
    { Methods & Properties }
    property Xmag: IXMLTargetable_float_type read Get_Xmag;
    property Ymag: IXMLTargetable_float_type read Get_Ymag;
    property Aspect_ratio: IXMLTargetable_float_type read Get_Aspect_ratio;
    property Znear: IXMLTargetable_float_type read Get_Znear;
    property Zfar: IXMLTargetable_float_type read Get_Zfar;
  end;

{ IXMLTargetable_float_type }

  IXMLTargetable_float_type = interface(IXML)
    ['{40D7A44D-6434-42D1-A845-0257B1546443}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLCamera_type_optics_technique_common_perspective }

  IXMLCamera_type_optics_technique_common_perspective = interface(IXML)
    ['{D34A5D2D-F961-4AEF-9FAE-3684BAC78B48}']
    { Property Accessors }
    function Get_Xfov: IXMLTargetable_float_type;
    function Get_Yfov: IXMLTargetable_float_type;
    function Get_Aspect_ratio: IXMLTargetable_float_type;
    function Get_Znear: IXMLTargetable_float_type;
    function Get_Zfar: IXMLTargetable_float_type;
    { Methods & Properties }
    property Xfov: IXMLTargetable_float_type read Get_Xfov;
    property Yfov: IXMLTargetable_float_type read Get_Yfov;
    property Aspect_ratio: IXMLTargetable_float_type read Get_Aspect_ratio;
    property Znear: IXMLTargetable_float_type read Get_Znear;
    property Zfar: IXMLTargetable_float_type read Get_Zfar;
  end;

{ IXMLCamera_type_imager }

  IXMLCamera_type_imager = interface(IXML)
    ['{57A6AD95-A494-47B2-9FCF-5B6246B80A28}']
    { Property Accessors }
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_controllers_type }

  IXMLLibrary_controllers_type = interface(IXML)
    ['{6F180CAD-F6B3-4ABB-A533-CFECD664C3AB}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Controller: IXMLController_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Controller: IXMLController_typeList read Get_Controller;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_controllers_typeList }

  IXMLLibrary_controllers_typeList = interface(IXMLFilter)
    ['{94CBE6D7-5733-487D-846B-0C9A21BD4EBA}']
    { Methods & Properties }
    function Add: IXMLLibrary_controllers_type;
    function Insert(const Index: Integer): IXMLLibrary_controllers_type;

    function Get_Item(Index: Integer): IXMLLibrary_controllers_type;
    property Items[Index: Integer]: IXMLLibrary_controllers_type read Get_Item; default;
  end;

{ IXMLController_type }

  IXMLController_type = interface(IXML)
    ['{82176E43-4A77-4506-870B-B12DF337DAF9}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Skin: IXMLSkin_type;
    function Get_Morph: IXMLMorph_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Skin: IXMLSkin_type read Get_Skin;
    property Morph: IXMLMorph_type read Get_Morph;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLController_typeList }

  IXMLController_typeList = interface(IXMLFilter)
    ['{696AD688-9FF1-4375-AB51-C0BD820BAD47}']
    { Methods & Properties }
    function Add: IXMLController_type;
    function Insert(const Index: Integer): IXMLController_type;

    function Get_Item(Index: Integer): IXMLController_type;
    property Items[Index: Integer]: IXMLController_type read Get_Item; default;
  end;

{ IXMLSkin_type }

  IXMLSkin_type = interface(IXML)
    ['{52DD6E99-E22C-47E2-A297-845FA8A505B5}']
    { Property Accessors }
    function Get_Source: UnicodeString;
    function Get_Bind_shape_matrix: UnicodeString;
    function Get_SourceList: IXMLSource_typeList;
    function Get_Joints: IXMLSkin_type_joints;
    function Get_Vertex_weights: IXMLSkin_type_vertex_weights;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Source(Value: UnicodeString);
    procedure Set_Bind_shape_matrix(Value: UnicodeString);
    { Methods & Properties }
    property Source: UnicodeString read Get_Source write Set_Source;
    property Bind_shape_matrix: UnicodeString read Get_Bind_shape_matrix write Set_Bind_shape_matrix;
    property SourceList: IXMLSource_typeList read Get_SourceList;
    property Joints: IXMLSkin_type_joints read Get_Joints;
    property Vertex_weights: IXMLSkin_type_vertex_weights read Get_Vertex_weights;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLSkin_type_joints }

  IXMLSkin_type_joints = interface(IXML)
    ['{61EBF017-959C-4D05-90F5-CBF063B57E77}']
    { Property Accessors }
    function Get_Input: IXMLInput_local_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Input: IXMLInput_local_typeList read Get_Input;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLSkin_type_vertex_weights }

  IXMLSkin_type_vertex_weights = interface(IXML)
    ['{F984DA52-0F73-4CE3-B924-C50FD6527286}']
    { Property Accessors }
    function Get_Count: Int64;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_V: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Count(Value: Int64);
    procedure Set_Vcount(Value: UnicodeString);
    procedure Set_V(Value: UnicodeString);
    { Methods & Properties }
    property Count: Int64 read Get_Count write Set_Count;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property Vcount: UnicodeString read Get_Vcount write Set_Vcount;
    property V: UnicodeString read Get_V write Set_V;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInput_local_offset_type }

  IXMLInput_local_offset_type = interface(IXML)
    ['{4FF8FCE4-70A4-49CE-87ED-035BD372B687}']
    { Property Accessors }
    function Get_Offset: Int64;
    function Get_Semantic: UnicodeString;
    function Get_Source: UnicodeString;
    function Get_Set_: Int64;
    procedure Set_Offset(Value: Int64);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Source(Value: UnicodeString);
    procedure Set_Set_(Value: Int64);
    { Methods & Properties }
    property Offset: Int64 read Get_Offset write Set_Offset;
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Source: UnicodeString read Get_Source write Set_Source;
    property Set_: Int64 read Get_Set_ write Set_Set_;
  end;

{ IXMLInput_local_offset_typeList }

  IXMLInput_local_offset_typeList = interface(IXMLFilter)
    ['{A55C8DB1-3AA0-4DE8-AE9B-FE50EAAE4FAC}']
    { Methods & Properties }
    function Add: IXMLInput_local_offset_type;
    function Insert(const Index: Integer): IXMLInput_local_offset_type;

    function Get_Item(Index: Integer): IXMLInput_local_offset_type;
    property Items[Index: Integer]: IXMLInput_local_offset_type read Get_Item; default;
  end;

{ IXMLMorph_type }

  IXMLMorph_type = interface(IXML)
    ['{87688D58-46F2-4725-9E1F-1FD1D05FD735}']
    { Property Accessors }
    function Get_Method: UnicodeString;
    function Get_Source: UnicodeString;
    function Get_SourceList: IXMLSource_typeList;
    function Get_Targets: IXMLMorph_type_targets;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Method(Value: UnicodeString);
    procedure Set_Source(Value: UnicodeString);
    { Methods & Properties }
    property Method: UnicodeString read Get_Method write Set_Method;
    property Source: UnicodeString read Get_Source write Set_Source;
    property SourceList: IXMLSource_typeList read Get_SourceList;
    property Targets: IXMLMorph_type_targets read Get_Targets;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLMorph_type_targets }

  IXMLMorph_type_targets = interface(IXML)
    ['{EACCDFB8-E993-49CE-A3DD-1A7E341D7F91}']
    { Property Accessors }
    function Get_Input: IXMLInput_local_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Input: IXMLInput_local_typeList read Get_Input;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_geometries_type }

  IXMLLibrary_geometries_type = interface(IXML)
    ['{65DC4679-2410-4998-AAC5-DDB6F7904D62}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Geometry: IXMLGeometry_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Geometry: IXMLGeometry_typeList read Get_Geometry;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_geometries_typeList }

  IXMLLibrary_geometries_typeList = interface(IXMLFilter)
    ['{720DDC1F-EC1D-422D-A873-AB0D05E9660B}']
    { Methods & Properties }
    function Add: IXMLLibrary_geometries_type;
    function Insert(const Index: Integer): IXMLLibrary_geometries_type;

    function Get_Item(Index: Integer): IXMLLibrary_geometries_type;
    property Items[Index: Integer]: IXMLLibrary_geometries_type read Get_Item; default;
  end;

{ IXMLGeometry_type }

  IXMLGeometry_type = interface(IXML)
    ['{F5C3D86C-A1A3-43D7-B3C6-87EDF4C944A6}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Convex_mesh: IXMLConvex_mesh_type;
    function Get_Mesh: IXMLMesh_type;
    function Get_Spline: IXMLSpline_type;
    function Get_Brep: IXMLBrep_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Convex_mesh: IXMLConvex_mesh_type read Get_Convex_mesh;
    property Mesh: IXMLMesh_type read Get_Mesh;
    property Spline: IXMLSpline_type read Get_Spline;
    property Brep: IXMLBrep_type read Get_Brep;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLGeometry_typeList }

  IXMLGeometry_typeList = interface(IXMLFilter)
    ['{A3F51B5D-DF15-40E5-88F1-A5B36F4B3B3B}']
    { Methods & Properties }
    function Add: IXMLGeometry_type;
    function Insert(const Index: Integer): IXMLGeometry_type;

    function Get_Item(Index: Integer): IXMLGeometry_type;
    property Items[Index: Integer]: IXMLGeometry_type read Get_Item; default;
  end;

{ IXMLConvex_mesh_type }

  IXMLConvex_mesh_type = interface(IXML)
    ['{50C058B6-AF78-447A-A8C6-44E0B771C698}']
    { Property Accessors }
    function Get_Convex_hull_of: UnicodeString;
    function Get_Source: IXMLSource_typeList;
    function Get_Vertices: IXMLVertices_type;
    function Get_Lines: IXMLLines_typeList;
    function Get_Linestrips: IXMLLinestrips_typeList;
    function Get_Polygons: IXMLPolygons_typeList;
    function Get_Polylist: IXMLPolylist_typeList;
    function Get_Triangles: IXMLTriangles_typeList;
    function Get_Trifans: IXMLTrifans_typeList;
    function Get_Tristrips: IXMLTristrips_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Convex_hull_of(Value: UnicodeString);
    { Methods & Properties }
    property Convex_hull_of: UnicodeString read Get_Convex_hull_of write Set_Convex_hull_of;
    property Source: IXMLSource_typeList read Get_Source;
    property Vertices: IXMLVertices_type read Get_Vertices;
    property Lines: IXMLLines_typeList read Get_Lines;
    property Linestrips: IXMLLinestrips_typeList read Get_Linestrips;
    property Polygons: IXMLPolygons_typeList read Get_Polygons;
    property Polylist: IXMLPolylist_typeList read Get_Polylist;
    property Triangles: IXMLTriangles_typeList read Get_Triangles;
    property Trifans: IXMLTrifans_typeList read Get_Trifans;
    property Tristrips: IXMLTristrips_typeList read Get_Tristrips;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLVertices_type }

  IXMLVertices_type = interface(IXML)
    ['{A0F2EC83-970B-4606-A569-E10426229639}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Input: IXMLInput_local_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Input: IXMLInput_local_typeList read Get_Input;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLines_type }

  IXMLLines_type = interface(IXML)
    ['{F6FD6D1A-B2E9-4460-A3A6-7AF873C6BEC8}']
    { Property Accessors }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
    { Methods & Properties }
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Material: UnicodeString read Get_Material write Set_Material;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property P: IXMLP_type read Get_P;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLines_typeList }

  IXMLLines_typeList = interface(IXMLFilter)
    ['{DB2A7778-AEAD-4A82-A967-3F3407DE0CC8}']
    { Methods & Properties }
    function Add: IXMLLines_type;
    function Insert(const Index: Integer): IXMLLines_type;

    function Get_Item(Index: Integer): IXMLLines_type;
    property Items[Index: Integer]: IXMLLines_type read Get_Item; default;
  end;

{ IXMLP_type }

  IXMLP_type = interface(IXML)
    ['{5A9A597E-F083-4450-AA74-8831EA040252}']
  end;

{ IXMLP_typeList }

  IXMLP_typeList = interface(IXMLFilter)
    ['{BBD3DB84-7CD5-4CDC-B940-DC1F5CE9117A}']
    { Methods & Properties }
    function Add: IXMLP_type;
    function Insert(const Index: Integer): IXMLP_type;

    function Get_Item(Index: Integer): IXMLP_type;
    property Items[Index: Integer]: IXMLP_type read Get_Item; default;
  end;

{ IXMLLinestrips_type }

  IXMLLinestrips_type = interface(IXML)
    ['{D5A29678-5FD9-40E5-847F-81A2D39CE48F}']
    { Property Accessors }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
    { Methods & Properties }
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Material: UnicodeString read Get_Material write Set_Material;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property P: IXMLP_typeList read Get_P;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLinestrips_typeList }

  IXMLLinestrips_typeList = interface(IXMLFilter)
    ['{65C880F2-F8E6-4735-9EED-E1687FFD538A}']
    { Methods & Properties }
    function Add: IXMLLinestrips_type;
    function Insert(const Index: Integer): IXMLLinestrips_type;

    function Get_Item(Index: Integer): IXMLLinestrips_type;
    property Items[Index: Integer]: IXMLLinestrips_type read Get_Item; default;
  end;

{ IXMLPolygons_type }

  IXMLPolygons_type = interface(IXML)
    ['{D787E676-02FF-4676-A81B-168C8F6A840F}']
    { Property Accessors }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_typeList;
    function Get_Ph: IXMLPolygons_type_phList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
    { Methods & Properties }
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Material: UnicodeString read Get_Material write Set_Material;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property P: IXMLP_typeList read Get_P;
    property Ph: IXMLPolygons_type_phList read Get_Ph;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLPolygons_typeList }

  IXMLPolygons_typeList = interface(IXMLFilter)
    ['{A2295B3A-0D11-41BC-BC58-54C3C2347FF5}']
    { Methods & Properties }
    function Add: IXMLPolygons_type;
    function Insert(const Index: Integer): IXMLPolygons_type;

    function Get_Item(Index: Integer): IXMLPolygons_type;
    property Items[Index: Integer]: IXMLPolygons_type read Get_Item; default;
  end;

{ IXMLPolygons_type_ph }

  IXMLPolygons_type_ph = interface(IXML)
    ['{D568A4F6-A4DA-495E-A99B-28283662E277}']
    { Property Accessors }
    function Get_P: IXMLP_type;
    function Get_H: IXMLList_of_uints_typeList;
    { Methods & Properties }
    property P: IXMLP_type read Get_P;
    property H: IXMLList_of_uints_typeList read Get_H;
  end;

{ IXMLPolygons_type_phList }

  IXMLPolygons_type_phList = interface(IXMLFilter)
    ['{F1E12625-A134-4043-BE84-1720B441AC53}']
    { Methods & Properties }
    function Add: IXMLPolygons_type_ph;
    function Insert(const Index: Integer): IXMLPolygons_type_ph;

    function Get_Item(Index: Integer): IXMLPolygons_type_ph;
    property Items[Index: Integer]: IXMLPolygons_type_ph read Get_Item; default;
  end;

{ IXMLPolylist_type }

  IXMLPolylist_type = interface(IXML)
    ['{D2E3D2FA-49D0-4FC6-8EE5-FA02BBA52F75}']
    { Property Accessors }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
    procedure Set_Vcount(Value: UnicodeString);
    { Methods & Properties }
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Material: UnicodeString read Get_Material write Set_Material;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property Vcount: UnicodeString read Get_Vcount write Set_Vcount;
    property P: IXMLP_type read Get_P;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLPolylist_typeList }

  IXMLPolylist_typeList = interface(IXMLFilter)
    ['{2A8B658A-D68C-470B-AFEB-D8E61CDC8839}']
    { Methods & Properties }
    function Add: IXMLPolylist_type;
    function Insert(const Index: Integer): IXMLPolylist_type;

    function Get_Item(Index: Integer): IXMLPolylist_type;
    property Items[Index: Integer]: IXMLPolylist_type read Get_Item; default;
  end;

{ IXMLTriangles_type }

  IXMLTriangles_type = interface(IXML)
    ['{B65DC8B7-810A-42FC-BA86-0B0D7FC695A2}']
    { Property Accessors }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
    { Methods & Properties }
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Material: UnicodeString read Get_Material write Set_Material;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property P: IXMLP_type read Get_P;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLTriangles_typeList }

  IXMLTriangles_typeList = interface(IXMLFilter)
    ['{84FEBFE9-6187-426E-9D80-2801AFDF7309}']
    { Methods & Properties }
    function Add: IXMLTriangles_type;
    function Insert(const Index: Integer): IXMLTriangles_type;

    function Get_Item(Index: Integer): IXMLTriangles_type;
    property Items[Index: Integer]: IXMLTriangles_type read Get_Item; default;
  end;

{ IXMLTrifans_type }

  IXMLTrifans_type = interface(IXML)
    ['{7E39BDAC-27BF-43DC-B5F8-D27ED84F3362}']
    { Property Accessors }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
    { Methods & Properties }
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Material: UnicodeString read Get_Material write Set_Material;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property P: IXMLP_typeList read Get_P;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLTrifans_typeList }

  IXMLTrifans_typeList = interface(IXMLFilter)
    ['{6CB0908F-0C16-4C99-B865-E6D5AF8FDDEE}']
    { Methods & Properties }
    function Add: IXMLTrifans_type;
    function Insert(const Index: Integer): IXMLTrifans_type;

    function Get_Item(Index: Integer): IXMLTrifans_type;
    property Items[Index: Integer]: IXMLTrifans_type read Get_Item; default;
  end;

{ IXMLTristrips_type }

  IXMLTristrips_type = interface(IXML)
    ['{9E257935-419C-4F4A-BEBA-29880675C1EE}']
    { Property Accessors }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
    { Methods & Properties }
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Material: UnicodeString read Get_Material write Set_Material;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property P: IXMLP_typeList read Get_P;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLTristrips_typeList }

  IXMLTristrips_typeList = interface(IXMLFilter)
    ['{8FF7C902-5CF2-44BA-B856-D573F6E9F20F}']
    { Methods & Properties }
    function Add: IXMLTristrips_type;
    function Insert(const Index: Integer): IXMLTristrips_type;

    function Get_Item(Index: Integer): IXMLTristrips_type;
    property Items[Index: Integer]: IXMLTristrips_type read Get_Item; default;
  end;

{ IXMLMesh_type }

  IXMLMesh_type = interface(IXML)
    ['{97CAB26D-7876-4FCE-9531-FC552613DBD1}']
    { Property Accessors }
    function Get_Source: IXMLSource_typeList;
    function Get_Vertices: IXMLVertices_type;
    function Get_Lines: IXMLLines_typeList;
    function Get_Linestrips: IXMLLinestrips_typeList;
    function Get_Polygons: IXMLPolygons_typeList;
    function Get_Polylist: IXMLPolylist_typeList;
    function Get_Triangles: IXMLTriangles_typeList;
    function Get_Trifans: IXMLTrifans_typeList;
    function Get_Tristrips: IXMLTristrips_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Source: IXMLSource_typeList read Get_Source;
    property Vertices: IXMLVertices_type read Get_Vertices;
    property Lines: IXMLLines_typeList read Get_Lines;
    property Linestrips: IXMLLinestrips_typeList read Get_Linestrips;
    property Polygons: IXMLPolygons_typeList read Get_Polygons;
    property Polylist: IXMLPolylist_typeList read Get_Polylist;
    property Triangles: IXMLTriangles_typeList read Get_Triangles;
    property Trifans: IXMLTrifans_typeList read Get_Trifans;
    property Tristrips: IXMLTristrips_typeList read Get_Tristrips;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLSpline_type }

  IXMLSpline_type = interface(IXML)
    ['{0E9DC512-0343-40FC-AD61-2DB87A1ED34E}']
    { Property Accessors }
    function Get_Closed: Boolean;
    function Get_Source: IXMLSource_typeList;
    function Get_Control_vertices: IXMLSpline_type_control_vertices;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Closed(Value: Boolean);
    { Methods & Properties }
    property Closed: Boolean read Get_Closed write Set_Closed;
    property Source: IXMLSource_typeList read Get_Source;
    property Control_vertices: IXMLSpline_type_control_vertices read Get_Control_vertices;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLSpline_type_control_vertices }

  IXMLSpline_type_control_vertices = interface(IXML)
    ['{EE18B523-2E20-4F69-B4AD-14E1BF7C9A3E}']
    { Property Accessors }
    function Get_Input: IXMLInput_local_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Input: IXMLInput_local_typeList read Get_Input;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLBrep_type }

  IXMLBrep_type = interface(IXML)
    ['{380F6344-CE73-44FF-98E7-2F74E38C72A4}']
    { Property Accessors }
    function Get_Curves: IXMLCurves_type;
    function Get_Surface_curves: IXMLSurface_curves_type;
    function Get_Surfaces: IXMLSurfaces_type;
    function Get_Source: IXMLSource_typeList;
    function Get_Vertices: IXMLVertices_type;
    function Get_Edges: IXMLEdges_type;
    function Get_Wires: IXMLWires_type;
    function Get_Faces: IXMLFaces_type;
    function Get_Pcurves: IXMLPcurves_type;
    function Get_Shells: IXMLShells_type;
    function Get_Solids: IXMLSolids_type;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Curves: IXMLCurves_type read Get_Curves;
    property Surface_curves: IXMLSurface_curves_type read Get_Surface_curves;
    property Surfaces: IXMLSurfaces_type read Get_Surfaces;
    property Source: IXMLSource_typeList read Get_Source;
    property Vertices: IXMLVertices_type read Get_Vertices;
    property Edges: IXMLEdges_type read Get_Edges;
    property Wires: IXMLWires_type read Get_Wires;
    property Faces: IXMLFaces_type read Get_Faces;
    property Pcurves: IXMLPcurves_type read Get_Pcurves;
    property Shells: IXMLShells_type read Get_Shells;
    property Solids: IXMLSolids_type read Get_Solids;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLCurves_type }

  IXMLCurves_type = interface(IXML)
    ['{35E1E15B-7545-4601-AAEB-E2779E5D3539}']
    { Property Accessors }
    function Get_Curve: IXMLCurve_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Curve: IXMLCurve_typeList read Get_Curve;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLCurve_type }

  IXMLCurve_type = interface(IXML)
    ['{F07E3A2D-E20B-4ACE-92BE-B47DCA96910A}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Line: IXMLLine_type;
    function Get_Circle: IXMLCircle_type;
    function Get_Ellipse: IXMLEllipse_type;
    function Get_Parabola: IXMLParabola_type;
    function Get_Hyperbola: IXMLHyperbola_type;
    function Get_Nurbs: IXMLNurbs_type;
    function Get_Orient: IXMLOrient_typeList;
    function Get_Origin: IXMLOrigin_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Line: IXMLLine_type read Get_Line;
    property Circle: IXMLCircle_type read Get_Circle;
    property Ellipse: IXMLEllipse_type read Get_Ellipse;
    property Parabola: IXMLParabola_type read Get_Parabola;
    property Hyperbola: IXMLHyperbola_type read Get_Hyperbola;
    property Nurbs: IXMLNurbs_type read Get_Nurbs;
    property Orient: IXMLOrient_typeList read Get_Orient;
    property Origin: IXMLOrigin_type read Get_Origin;
  end;

{ IXMLCurve_typeList }

  IXMLCurve_typeList = interface(IXMLFilter)
    ['{092457F5-7449-4FF1-938B-1B66A3E748C4}']
    { Methods & Properties }
    function Add: IXMLCurve_type;
    function Insert(const Index: Integer): IXMLCurve_type;

    function Get_Item(Index: Integer): IXMLCurve_type;
    property Items[Index: Integer]: IXMLCurve_type read Get_Item; default;
  end;

{ IXMLLine_type }

  IXMLLine_type = interface(IXML)
    ['{592733A9-C1F7-43BE-A650-064E408F3E81}']
    { Property Accessors }
    function Get_Origin: UnicodeString;
    function Get_Direction: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Origin(Value: UnicodeString);
    procedure Set_Direction(Value: UnicodeString);
    { Methods & Properties }
    property Origin: UnicodeString read Get_Origin write Set_Origin;
    property Direction: UnicodeString read Get_Direction write Set_Direction;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLCircle_type }

  IXMLCircle_type = interface(IXML)
    ['{B556E046-43FA-4C9D-B98D-834E8BEEAC9D}']
    { Property Accessors }
    function Get_Radius: Double;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: Double);
    { Methods & Properties }
    property Radius: Double read Get_Radius write Set_Radius;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLEllipse_type }

  IXMLEllipse_type = interface(IXML)
    ['{8AA6E80E-AFB6-4430-9E79-51B9744A6AF4}']
    { Property Accessors }
    function Get_Radius: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: UnicodeString);
    { Methods & Properties }
    property Radius: UnicodeString read Get_Radius write Set_Radius;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLParabola_type }

  IXMLParabola_type = interface(IXML)
    ['{ECAC7F15-53CE-4F19-83EB-3479BC5F7B3A}']
    { Property Accessors }
    function Get_Focal: Double;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Focal(Value: Double);
    { Methods & Properties }
    property Focal: Double read Get_Focal write Set_Focal;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLHyperbola_type }

  IXMLHyperbola_type = interface(IXML)
    ['{948A3C13-AD0A-4FE9-B29A-536A92B8718F}']
    { Property Accessors }
    function Get_Radius: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: UnicodeString);
    { Methods & Properties }
    property Radius: UnicodeString read Get_Radius write Set_Radius;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLNurbs_type }

  IXMLNurbs_type = interface(IXML)
    ['{7F21E27F-6BF0-496B-AF21-77CF305FD4F8}']
    { Property Accessors }
    function Get_Degree: Int64;
    function Get_Closed: Boolean;
    function Get_Source: IXMLSource_typeList;
    function Get_Control_vertices: IXMLNurbs_type_control_vertices;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Degree(Value: Int64);
    procedure Set_Closed(Value: Boolean);
    { Methods & Properties }
    property Degree: Int64 read Get_Degree write Set_Degree;
    property Closed: Boolean read Get_Closed write Set_Closed;
    property Source: IXMLSource_typeList read Get_Source;
    property Control_vertices: IXMLNurbs_type_control_vertices read Get_Control_vertices;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLNurbs_type_control_vertices }

  IXMLNurbs_type_control_vertices = interface(IXML)
    ['{615A8F96-2E29-4EAB-9777-151DE8FCB90B}']
    { Property Accessors }
    function Get_Input: IXMLInput_local_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Input: IXMLInput_local_typeList read Get_Input;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLOrient_type }

  IXMLOrient_type = interface(IXML)
    ['{85E86448-7996-499A-92B4-7029C5C05E3B}']
  end;

{ IXMLOrient_typeList }

  IXMLOrient_typeList = interface(IXMLFilter)
    ['{75C6169D-9DCA-402E-A98F-194700D869FD}']
    { Methods & Properties }
    function Add: IXMLOrient_type;
    function Insert(const Index: Integer): IXMLOrient_type;

    function Get_Item(Index: Integer): IXMLOrient_type;
    property Items[Index: Integer]: IXMLOrient_type read Get_Item; default;
  end;

{ IXMLOrigin_type }

  IXMLOrigin_type = interface(IXML)
    ['{AE980D63-626C-4172-A3F2-4AAD5537EDD0}']
  end;

{ IXMLSurface_curves_type }

  IXMLSurface_curves_type = interface(IXML)
    ['{FB94F855-D340-4632-8318-420E6221CCE8}']
    { Property Accessors }
    function Get_Curve: IXMLCurve_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Curve: IXMLCurve_typeList read Get_Curve;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLSurfaces_type }

  IXMLSurfaces_type = interface(IXML)
    ['{509AB819-A9DD-4193-AB6B-E75C5931C111}']
    { Property Accessors }
    function Get_Surface: IXMLSurface_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Surface: IXMLSurface_typeList read Get_Surface;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLSurface_type }

  IXMLSurface_type = interface(IXML)
    ['{C4D8F709-06A1-40D0-B355-B606069FFD93}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Plane: IXMLPlane_type;
    function Get_Sphere: IXMLSphere_type;
    function Get_Torus: IXMLTorus_type;
    function Get_Swept_surface: IXMLSwept_surface_type;
    function Get_Nurbs_surface: IXMLNurbs_surface_type;
    function Get_Cone: IXMLCone_type;
    function Get_Cylinder: IXMLSurface_type_cylinder;
    function Get_Orient: IXMLOrient_typeList;
    function Get_Origin: IXMLOrigin_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Plane: IXMLPlane_type read Get_Plane;
    property Sphere: IXMLSphere_type read Get_Sphere;
    property Torus: IXMLTorus_type read Get_Torus;
    property Swept_surface: IXMLSwept_surface_type read Get_Swept_surface;
    property Nurbs_surface: IXMLNurbs_surface_type read Get_Nurbs_surface;
    property Cone: IXMLCone_type read Get_Cone;
    property Cylinder: IXMLSurface_type_cylinder read Get_Cylinder;
    property Orient: IXMLOrient_typeList read Get_Orient;
    property Origin: IXMLOrigin_type read Get_Origin;
  end;

{ IXMLSurface_typeList }

  IXMLSurface_typeList = interface(IXMLFilter)
    ['{092EDA98-E4CF-4BE0-8C42-FDE4423D8FBA}']
    { Methods & Properties }
    function Add: IXMLSurface_type;
    function Insert(const Index: Integer): IXMLSurface_type;

    function Get_Item(Index: Integer): IXMLSurface_type;
    property Items[Index: Integer]: IXMLSurface_type read Get_Item; default;
  end;

{ IXMLPlane_type }

  IXMLPlane_type = interface(IXML)
    ['{70D02236-8078-45A4-A494-A7780EF94374}']
    { Property Accessors }
    function Get_Equation: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Equation(Value: UnicodeString);
    { Methods & Properties }
    property Equation: UnicodeString read Get_Equation write Set_Equation;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLSphere_type }

  IXMLSphere_type = interface(IXML)
    ['{2CB1392C-0AAB-4664-87F7-DE7734DA0CBA}']
    { Property Accessors }
    function Get_Radius: Double;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: Double);
    { Methods & Properties }
    property Radius: Double read Get_Radius write Set_Radius;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLTorus_type }

  IXMLTorus_type = interface(IXML)
    ['{622D1425-5DFA-46D6-9F1F-129D27505A74}']
    { Property Accessors }
    function Get_Radius: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: UnicodeString);
    { Methods & Properties }
    property Radius: UnicodeString read Get_Radius write Set_Radius;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLSwept_surface_type }

  IXMLSwept_surface_type = interface(IXML)
    ['{8B7D84F2-5216-4598-AB85-6687E96A2703}']
    { Property Accessors }
    function Get_Curve: IXMLCurve_type;
    function Get_Direction: UnicodeString;
    function Get_Origin: UnicodeString;
    function Get_Axis: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Direction(Value: UnicodeString);
    procedure Set_Origin(Value: UnicodeString);
    procedure Set_Axis(Value: UnicodeString);
    { Methods & Properties }
    property Curve: IXMLCurve_type read Get_Curve;
    property Direction: UnicodeString read Get_Direction write Set_Direction;
    property Origin: UnicodeString read Get_Origin write Set_Origin;
    property Axis: UnicodeString read Get_Axis write Set_Axis;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLNurbs_surface_type }

  IXMLNurbs_surface_type = interface(IXML)
    ['{3FFE7584-8492-49BA-8D23-C4B9898BC2B8}']
    { Property Accessors }
    function Get_Degree_u: Int64;
    function Get_Closed_u: Boolean;
    function Get_Degree_v: Int64;
    function Get_Closed_v: Boolean;
    function Get_Source: IXMLSource_typeList;
    function Get_Control_vertices: IXMLNurbs_surface_type_control_vertices;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Degree_u(Value: Int64);
    procedure Set_Closed_u(Value: Boolean);
    procedure Set_Degree_v(Value: Int64);
    procedure Set_Closed_v(Value: Boolean);
    { Methods & Properties }
    property Degree_u: Int64 read Get_Degree_u write Set_Degree_u;
    property Closed_u: Boolean read Get_Closed_u write Set_Closed_u;
    property Degree_v: Int64 read Get_Degree_v write Set_Degree_v;
    property Closed_v: Boolean read Get_Closed_v write Set_Closed_v;
    property Source: IXMLSource_typeList read Get_Source;
    property Control_vertices: IXMLNurbs_surface_type_control_vertices read Get_Control_vertices;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLNurbs_surface_type_control_vertices }

  IXMLNurbs_surface_type_control_vertices = interface(IXML)
    ['{BFEF09B1-40DB-4CE0-9354-0CACD39B8A67}']
    { Property Accessors }
    function Get_Input: IXMLInput_local_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Input: IXMLInput_local_typeList read Get_Input;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLCone_type }

  IXMLCone_type = interface(IXML)
    ['{FEBD2E8E-02A2-4037-A5A3-E1DF0673C075}']
    { Property Accessors }
    function Get_Radius: Double;
    function Get_Angle: Single;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: Double);
    procedure Set_Angle(Value: Single);
    { Methods & Properties }
    property Radius: Double read Get_Radius write Set_Radius;
    property Angle: Single read Get_Angle write Set_Angle;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLSurface_type_cylinder }

  IXMLSurface_type_cylinder = interface(IXML)
    ['{465BDF82-8CC1-41B5-937C-1A38CE2342AE}']
    { Property Accessors }
    function Get_Radius: Double;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: Double);
    { Methods & Properties }
    property Radius: Double read Get_Radius write Set_Radius;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLEdges_type }

  IXMLEdges_type = interface(IXML)
    ['{CAF27AFB-DD6A-462C-8CD7-DC7924F30B0E}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Integer;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Integer);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Integer read Get_Count write Set_Count;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property P: IXMLP_type read Get_P;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLWires_type }

  IXMLWires_type = interface(IXML)
    ['{FB37A5F2-5A0C-401F-8C29-B24DAF258C3D}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Vcount(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property Vcount: UnicodeString read Get_Vcount write Set_Vcount;
    property P: IXMLP_type read Get_P;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLFaces_type }

  IXMLFaces_type = interface(IXML)
    ['{A1CED348-203B-4E37-A44A-91780C89B558}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Vcount(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property Vcount: UnicodeString read Get_Vcount write Set_Vcount;
    property P: IXMLP_type read Get_P;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLPcurves_type }

  IXMLPcurves_type = interface(IXML)
    ['{F063369F-6B02-4388-A434-58EEEAB4C4FC}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Vcount(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property Vcount: UnicodeString read Get_Vcount write Set_Vcount;
    property P: IXMLP_type read Get_P;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLShells_type }

  IXMLShells_type = interface(IXML)
    ['{E54A7B9B-ED53-463A-83C3-CC9EFF26A42A}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Vcount(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property Vcount: UnicodeString read Get_Vcount write Set_Vcount;
    property P: IXMLP_type read Get_P;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLSolids_type }

  IXMLSolids_type = interface(IXML)
    ['{D8D5DC79-480F-4F07-BF33-53A5C4289CC0}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Vcount(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Count: Int64 read Get_Count write Set_Count;
    property Input: IXMLInput_local_offset_typeList read Get_Input;
    property Vcount: UnicodeString read Get_Vcount write Set_Vcount;
    property P: IXMLP_type read Get_P;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_effects_type }

  IXMLLibrary_effects_type = interface(IXML)
    ['{1D6F6D8C-5FD5-412C-B6BA-E252BBD5AE83}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Effect: IXMLEffect_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Effect: IXMLEffect_typeList read Get_Effect;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_effects_typeList }

  IXMLLibrary_effects_typeList = interface(IXMLFilter)
    ['{B705E97F-8470-462C-93FD-FA8F337853BF}']
    { Methods & Properties }
    function Add: IXMLLibrary_effects_type;
    function Insert(const Index: Integer): IXMLLibrary_effects_type;

    function Get_Item(Index: Integer): IXMLLibrary_effects_type;
    property Items[Index: Integer]: IXMLLibrary_effects_type read Get_Item; default;
  end;

{ IXMLEffect_type }

  IXMLEffect_type = interface(IXML)
    ['{FE476901-8A55-44A6-AF20-2BB38B2D1B2E}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Newparam: IXMLFx_newparam_typeList;
    function Get_Profile_COMMON: IXMLProfile_common_type;
    function Get_Profile_BRIDGE: IXMLProfile_bridge_type;
    function Get_Profile_GLES2: IXMLProfile_gles2_type;
    function Get_Profile_GLSL: IXMLProfile_glsl_type;
    function Get_Profile_CG: IXMLProfile_cg_type;
    function Get_Profile_GLES: IXMLProfile_gles_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property Newparam: IXMLFx_newparam_typeList read Get_Newparam;
    property Profile_COMMON: IXMLProfile_common_type read Get_Profile_COMMON;
    property Profile_BRIDGE: IXMLProfile_bridge_type read Get_Profile_BRIDGE;
    property Profile_GLES2: IXMLProfile_gles2_type read Get_Profile_GLES2;
    property Profile_GLSL: IXMLProfile_glsl_type read Get_Profile_GLSL;
    property Profile_CG: IXMLProfile_cg_type read Get_Profile_CG;
    property Profile_GLES: IXMLProfile_gles_type read Get_Profile_GLES;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLEffect_typeList }

  IXMLEffect_typeList = interface(IXMLFilter)
    ['{348F39F4-CC11-45E6-B8A9-6A88CB7C88D3}']
    { Methods & Properties }
    function Add: IXMLEffect_type;
    function Insert(const Index: Integer): IXMLEffect_type;

    function Get_Item(Index: Integer): IXMLEffect_type;
    property Items[Index: Integer]: IXMLEffect_type read Get_Item; default;
  end;

{ IXMLFx_annotate_type }

  IXMLFx_annotate_type = interface(IXML)
    ['{C0E534A3-F941-499B-A9DC-794519CA4431}']
    { Property Accessors }
    function Get_Name: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_String_: UnicodeString;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_String_(Value: UnicodeString);
    { Methods & Properties }
    property Name: UnicodeString read Get_Name write Set_Name;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bool2: UnicodeString read Get_Bool2 write Set_Bool2;
    property Bool3: UnicodeString read Get_Bool3 write Set_Bool3;
    property Bool4: UnicodeString read Get_Bool4 write Set_Bool4;
    property Int: Int64 read Get_Int write Set_Int;
    property Int2: UnicodeString read Get_Int2 write Set_Int2;
    property Int3: UnicodeString read Get_Int3 write Set_Int3;
    property Int4: UnicodeString read Get_Int4 write Set_Int4;
    property Float: Double read Get_Float write Set_Float;
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Float3: UnicodeString read Get_Float3 write Set_Float3;
    property Float4: UnicodeString read Get_Float4 write Set_Float4;
    property Float2x2: UnicodeString read Get_Float2x2 write Set_Float2x2;
    property Float3x3: UnicodeString read Get_Float3x3 write Set_Float3x3;
    property Float4x4: UnicodeString read Get_Float4x4 write Set_Float4x4;
    property String_: UnicodeString read Get_String_ write Set_String_;
  end;

{ IXMLFx_annotate_typeList }

  IXMLFx_annotate_typeList = interface(IXMLFilter)
    ['{1FE321B4-FE0D-4B88-BDCA-8F28E169772F}']
    { Methods & Properties }
    function Add: IXMLFx_annotate_type;
    function Insert(const Index: Integer): IXMLFx_annotate_type;

    function Get_Item(Index: Integer): IXMLFx_annotate_type;
    property Items[Index: Integer]: IXMLFx_annotate_type read Get_Item; default;
  end;

{ IXMLFx_newparam_type }

  IXMLFx_newparam_type = interface(IXML)
    ['{6AB5EED5-7318-4C45-9E10-6FB44609226A}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Semantic: UnicodeString;
    function Get_Modifier: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Enum: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Modifier(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Modifier: UnicodeString read Get_Modifier write Set_Modifier;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bool2: UnicodeString read Get_Bool2 write Set_Bool2;
    property Bool3: UnicodeString read Get_Bool3 write Set_Bool3;
    property Bool4: UnicodeString read Get_Bool4 write Set_Bool4;
    property Int: Int64 read Get_Int write Set_Int;
    property Int2: UnicodeString read Get_Int2 write Set_Int2;
    property Int3: UnicodeString read Get_Int3 write Set_Int3;
    property Int4: UnicodeString read Get_Int4 write Set_Int4;
    property Float: Double read Get_Float write Set_Float;
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Float3: UnicodeString read Get_Float3 write Set_Float3;
    property Float4: UnicodeString read Get_Float4 write Set_Float4;
    property Float2x1: UnicodeString read Get_Float2x1 write Set_Float2x1;
    property Float2x2: UnicodeString read Get_Float2x2 write Set_Float2x2;
    property Float2x3: UnicodeString read Get_Float2x3 write Set_Float2x3;
    property Float2x4: UnicodeString read Get_Float2x4 write Set_Float2x4;
    property Float3x1: UnicodeString read Get_Float3x1 write Set_Float3x1;
    property Float3x2: UnicodeString read Get_Float3x2 write Set_Float3x2;
    property Float3x3: UnicodeString read Get_Float3x3 write Set_Float3x3;
    property Float3x4: UnicodeString read Get_Float3x4 write Set_Float3x4;
    property Float4x1: UnicodeString read Get_Float4x1 write Set_Float4x1;
    property Float4x2: UnicodeString read Get_Float4x2 write Set_Float4x2;
    property Float4x3: UnicodeString read Get_Float4x3 write Set_Float4x3;
    property Float4x4: UnicodeString read Get_Float4x4 write Set_Float4x4;
    property Sampler1D: IXMLFx_sampler1D_type read Get_Sampler1D;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
    property Sampler3D: IXMLFx_sampler3D_type read Get_Sampler3D;
    property SamplerCUBE: IXMLFx_samplerCUBE_type read Get_SamplerCUBE;
    property SamplerRECT: IXMLFx_samplerRECT_type read Get_SamplerRECT;
    property SamplerDEPTH: IXMLFx_samplerDEPTH_type read Get_SamplerDEPTH;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
  end;

{ IXMLFx_newparam_typeList }

  IXMLFx_newparam_typeList = interface(IXMLFilter)
    ['{901883AF-47EB-45FB-9925-82736EAB7391}']
    { Methods & Properties }
    function Add: IXMLFx_newparam_type;
    function Insert(const Index: Integer): IXMLFx_newparam_type;

    function Get_Item(Index: Integer): IXMLFx_newparam_type;
    property Items[Index: Integer]: IXMLFx_newparam_type read Get_Item; default;
  end;

{ IXMLFx_sampler_type }

  IXMLFx_sampler_type = interface(IXML)
    ['{A419CA5C-F775-4567-AF24-F4931061DE8B}']
    { Property Accessors }
    function Get_Instance_image: IXMLInstance_image_type;
    function Get_Wrap_s: UnicodeString;
    function Get_Wrap_t: UnicodeString;
    function Get_Wrap_p: UnicodeString;
    function Get_Minfilter: UnicodeString;
    function Get_Magfilter: UnicodeString;
    function Get_Mipfilter: UnicodeString;
    function Get_Border_color: UnicodeString;
    function Get_Mip_max_level: Byte;
    function Get_Mip_min_level: Byte;
    function Get_Mip_bias: Single;
    function Get_Max_anisotropy: LongWord;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Wrap_s(Value: UnicodeString);
    procedure Set_Wrap_t(Value: UnicodeString);
    procedure Set_Wrap_p(Value: UnicodeString);
    procedure Set_Minfilter(Value: UnicodeString);
    procedure Set_Magfilter(Value: UnicodeString);
    procedure Set_Mipfilter(Value: UnicodeString);
    procedure Set_Border_color(Value: UnicodeString);
    procedure Set_Mip_max_level(Value: Byte);
    procedure Set_Mip_min_level(Value: Byte);
    procedure Set_Mip_bias(Value: Single);
    procedure Set_Max_anisotropy(Value: LongWord);
    { Methods & Properties }
    property Instance_image: IXMLInstance_image_type read Get_Instance_image;
    property Wrap_s: UnicodeString read Get_Wrap_s write Set_Wrap_s;
    property Wrap_t: UnicodeString read Get_Wrap_t write Set_Wrap_t;
    property Wrap_p: UnicodeString read Get_Wrap_p write Set_Wrap_p;
    property Minfilter: UnicodeString read Get_Minfilter write Set_Minfilter;
    property Magfilter: UnicodeString read Get_Magfilter write Set_Magfilter;
    property Mipfilter: UnicodeString read Get_Mipfilter write Set_Mipfilter;
    property Border_color: UnicodeString read Get_Border_color write Set_Border_color;
    property Mip_max_level: Byte read Get_Mip_max_level write Set_Mip_max_level;
    property Mip_min_level: Byte read Get_Mip_min_level write Set_Mip_min_level;
    property Mip_bias: Single read Get_Mip_bias write Set_Mip_bias;
    property Max_anisotropy: LongWord read Get_Max_anisotropy write Set_Max_anisotropy;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_image_type }

  IXMLInstance_image_type = interface(IXMLInstance_with_extra_type)
    ['{9C68BDEB-6F5C-4AEC-9E23-B679BAA72798}']
  end;

{ IXMLFx_sampler1D_type }

  IXMLFx_sampler1D_type = interface(IXMLFx_sampler_type)
    ['{59FC363E-6863-4003-9C59-2F12E20B23A6}']
  end;

{ IXMLFx_sampler2D_type }

  IXMLFx_sampler2D_type = interface(IXMLFx_sampler_type)
    ['{728A290B-EEE0-44A3-BDEF-DA10AEE9AB06}']
  end;

{ IXMLFx_sampler3D_type }

  IXMLFx_sampler3D_type = interface(IXMLFx_sampler_type)
    ['{AB2E9F42-AA0F-4007-8D4B-B80935774D2C}']
  end;

{ IXMLFx_samplerCUBE_type }

  IXMLFx_samplerCUBE_type = interface(IXMLFx_sampler_type)
    ['{D6050EDD-66EF-47B9-B829-40EDA11E3F6A}']
  end;

{ IXMLFx_samplerRECT_type }

  IXMLFx_samplerRECT_type = interface(IXMLFx_sampler_type)
    ['{ADF41962-E3E9-42AE-BA09-EE99943B5113}']
  end;

{ IXMLFx_samplerDEPTH_type }

  IXMLFx_samplerDEPTH_type = interface(IXMLFx_sampler_type)
    ['{A94FED81-7F9D-477B-B128-EC02427EDDC0}']
  end;

{ IXMLProfile_common_type }

  IXMLProfile_common_type = interface(IXML)
    ['{2242424B-7AAA-4778-B3A6-02239BEB2D99}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Newparam: IXMLFx_common_newparam_typeList;
    function Get_Technique: IXMLProfile_common_type_technique;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Asset: IXMLAsset_type read Get_Asset;
    property Newparam: IXMLFx_common_newparam_typeList read Get_Newparam;
    property Technique: IXMLProfile_common_type_technique read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLFx_common_newparam_type }

  IXMLFx_common_newparam_type = interface(IXML)
    ['{C08A7A26-FA6B-4602-9CA5-913D5A27FC32}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Semantic: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Float: Double read Get_Float write Set_Float;
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Float3: UnicodeString read Get_Float3 write Set_Float3;
    property Float4: UnicodeString read Get_Float4 write Set_Float4;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
  end;

{ IXMLFx_common_newparam_typeList }

  IXMLFx_common_newparam_typeList = interface(IXMLFilter)
    ['{FECE62AC-EA3E-4438-B9CE-7B4E5EC15B8A}']
    { Methods & Properties }
    function Add: IXMLFx_common_newparam_type;
    function Insert(const Index: Integer): IXMLFx_common_newparam_type;

    function Get_Item(Index: Integer): IXMLFx_common_newparam_type;
    property Items[Index: Integer]: IXMLFx_common_newparam_type read Get_Item; default;
  end;

{ IXMLProfile_common_type_technique }

  IXMLProfile_common_type_technique = interface(IXML)
    ['{4FA1C85F-A117-466E-8250-BBB7F035F13A}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Constant: IXMLProfile_common_type_technique_constant;
    function Get_Lambert: IXMLProfile_common_type_technique_lambert;
    function Get_Phong: IXMLProfile_common_type_technique_phong;
    function Get_Blinn: IXMLProfile_common_type_technique_blinn;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Asset: IXMLAsset_type read Get_Asset;
    property Constant: IXMLProfile_common_type_technique_constant read Get_Constant;
    property Lambert: IXMLProfile_common_type_technique_lambert read Get_Lambert;
    property Phong: IXMLProfile_common_type_technique_phong read Get_Phong;
    property Blinn: IXMLProfile_common_type_technique_blinn read Get_Blinn;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLProfile_common_type_technique_constant }

  IXMLProfile_common_type_technique_constant = interface(IXML)
    ['{8F522F83-08C5-47F7-9C78-ADA3EF3EB275}']
    { Property Accessors }
    function Get_Emission: IXMLFx_common_color_or_texture_type;
    function Get_Reflective: IXMLFx_common_color_or_texture_type;
    function Get_Reflectivity: IXMLFx_common_float_or_param_type;
    function Get_Transparent: IXMLFx_common_transparent_type;
    function Get_Transparency: IXMLFx_common_float_or_param_type;
    function Get_Index_of_refraction: IXMLFx_common_float_or_param_type;
    { Methods & Properties }
    property Emission: IXMLFx_common_color_or_texture_type read Get_Emission;
    property Reflective: IXMLFx_common_color_or_texture_type read Get_Reflective;
    property Reflectivity: IXMLFx_common_float_or_param_type read Get_Reflectivity;
    property Transparent: IXMLFx_common_transparent_type read Get_Transparent;
    property Transparency: IXMLFx_common_float_or_param_type read Get_Transparency;
    property Index_of_refraction: IXMLFx_common_float_or_param_type read Get_Index_of_refraction;
  end;

{ IXMLFx_common_color_or_texture_type }

  IXMLFx_common_color_or_texture_type = interface(IXML)
    ['{C40FE403-00E5-406B-A382-D967FADB3DAD}']
    { Property Accessors }
    function Get_Color: IXMLFx_common_color_or_texture_type_color;
    function Get_Param: IXMLFx_common_color_or_texture_type_param;
    function Get_Texture: IXMLFx_common_color_or_texture_type_texture;
    { Methods & Properties }
    property Color: IXMLFx_common_color_or_texture_type_color read Get_Color;
    property Param: IXMLFx_common_color_or_texture_type_param read Get_Param;
    property Texture: IXMLFx_common_color_or_texture_type_texture read Get_Texture;
  end;

{ IXMLFx_common_color_or_texture_type_color }

  IXMLFx_common_color_or_texture_type_color = interface(IXML)
    ['{9554CB96-FC8D-4224-9621-A446E050E8AE}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLFx_common_color_or_texture_type_param }

  IXMLFx_common_color_or_texture_type_param = interface(IXML)
    ['{333C946F-AC6B-46BA-B27E-B6AE93CFC5BA}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
  end;

{ IXMLFx_common_color_or_texture_type_texture }

  IXMLFx_common_color_or_texture_type_texture = interface(IXMLFilter)
    ['{DB13C7F4-37C9-46D9-866D-5CC72BA6DE3B}']
    { Property Accessors }
    function Get_Texture: UnicodeString;
    function Get_Texcoord: UnicodeString;
    function Get_Extra(Index: Integer): IXMLExtra_type;
    procedure Set_Texture(Value: UnicodeString);
    procedure Set_Texcoord(Value: UnicodeString);
    { Methods & Properties }
    function Add: IXMLExtra_type;
    function Insert(const Index: Integer): IXMLExtra_type;
    property Texture: UnicodeString read Get_Texture write Set_Texture;
    property Texcoord: UnicodeString read Get_Texcoord write Set_Texcoord;
    property Extra[Index: Integer]: IXMLExtra_type read Get_Extra; default;
  end;

{ IXMLFx_common_float_or_param_type }

  IXMLFx_common_float_or_param_type = interface(IXML)
    ['{70E2493E-F5F5-4F8E-AEB2-C3B43C2C44B1}']
    { Property Accessors }
    function Get_Float: IXMLFx_common_float_or_param_type_float;
    function Get_Param: IXMLFx_common_float_or_param_type_param;
    { Methods & Properties }
    property Float: IXMLFx_common_float_or_param_type_float read Get_Float;
    property Param: IXMLFx_common_float_or_param_type_param read Get_Param;
  end;

{ IXMLFx_common_float_or_param_type_float }

  IXMLFx_common_float_or_param_type_float = interface(IXML)
    ['{ECA688F3-6B14-44B2-BACD-B0183CB3F7DE}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLFx_common_float_or_param_type_param }

  IXMLFx_common_float_or_param_type_param = interface(IXML)
    ['{B8CB5106-54FC-4CE3-B8C7-67BBE6DFF9F0}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
  end;

{ IXMLFx_common_transparent_type }

  IXMLFx_common_transparent_type = interface(IXMLFx_common_color_or_texture_type)
    ['{B7465527-0308-40AE-BC4D-B77F75B17BB8}']
    { Property Accessors }
    function Get_Opaque: UnicodeString;
    procedure Set_Opaque(Value: UnicodeString);
    { Methods & Properties }
    property Opaque: UnicodeString read Get_Opaque write Set_Opaque;
  end;

{ IXMLProfile_common_type_technique_lambert }

  IXMLProfile_common_type_technique_lambert = interface(IXML)
    ['{9461AE13-6E61-4C35-BD89-52825BFB537A}']
    { Property Accessors }
    function Get_Emission: IXMLFx_common_color_or_texture_type;
    function Get_Ambient: IXMLFx_common_color_or_texture_type;
    function Get_Diffuse: IXMLFx_common_color_or_texture_type;
    function Get_Reflective: IXMLFx_common_color_or_texture_type;
    function Get_Reflectivity: IXMLFx_common_float_or_param_type;
    function Get_Transparent: IXMLFx_common_transparent_type;
    function Get_Transparency: IXMLFx_common_float_or_param_type;
    function Get_Index_of_refraction: IXMLFx_common_float_or_param_type;
    { Methods & Properties }
    property Emission: IXMLFx_common_color_or_texture_type read Get_Emission;
    property Ambient: IXMLFx_common_color_or_texture_type read Get_Ambient;
    property Diffuse: IXMLFx_common_color_or_texture_type read Get_Diffuse;
    property Reflective: IXMLFx_common_color_or_texture_type read Get_Reflective;
    property Reflectivity: IXMLFx_common_float_or_param_type read Get_Reflectivity;
    property Transparent: IXMLFx_common_transparent_type read Get_Transparent;
    property Transparency: IXMLFx_common_float_or_param_type read Get_Transparency;
    property Index_of_refraction: IXMLFx_common_float_or_param_type read Get_Index_of_refraction;
  end;

{ IXMLProfile_common_type_technique_phong }

  IXMLProfile_common_type_technique_phong = interface(IXML)
    ['{EEA7018E-B636-4FFF-9F2E-FA291F017023}']
    { Property Accessors }
    function Get_Emission: IXMLFx_common_color_or_texture_type;
    function Get_Ambient: IXMLFx_common_color_or_texture_type;
    function Get_Diffuse: IXMLFx_common_color_or_texture_type;
    function Get_Specular: IXMLFx_common_color_or_texture_type;
    function Get_Shininess: IXMLFx_common_float_or_param_type;
    function Get_Reflective: IXMLFx_common_color_or_texture_type;
    function Get_Reflectivity: IXMLFx_common_float_or_param_type;
    function Get_Transparent: IXMLFx_common_transparent_type;
    function Get_Transparency: IXMLFx_common_float_or_param_type;
    function Get_Index_of_refraction: IXMLFx_common_float_or_param_type;
    { Methods & Properties }
    property Emission: IXMLFx_common_color_or_texture_type read Get_Emission;
    property Ambient: IXMLFx_common_color_or_texture_type read Get_Ambient;
    property Diffuse: IXMLFx_common_color_or_texture_type read Get_Diffuse;
    property Specular: IXMLFx_common_color_or_texture_type read Get_Specular;
    property Shininess: IXMLFx_common_float_or_param_type read Get_Shininess;
    property Reflective: IXMLFx_common_color_or_texture_type read Get_Reflective;
    property Reflectivity: IXMLFx_common_float_or_param_type read Get_Reflectivity;
    property Transparent: IXMLFx_common_transparent_type read Get_Transparent;
    property Transparency: IXMLFx_common_float_or_param_type read Get_Transparency;
    property Index_of_refraction: IXMLFx_common_float_or_param_type read Get_Index_of_refraction;
  end;

{ IXMLProfile_common_type_technique_blinn }

  IXMLProfile_common_type_technique_blinn = interface(IXML)
    ['{32F3AC65-019D-4655-9ADF-30C0CA3B0946}']
    { Property Accessors }
    function Get_Emission: IXMLFx_common_color_or_texture_type;
    function Get_Ambient: IXMLFx_common_color_or_texture_type;
    function Get_Diffuse: IXMLFx_common_color_or_texture_type;
    function Get_Specular: IXMLFx_common_color_or_texture_type;
    function Get_Shininess: IXMLFx_common_float_or_param_type;
    function Get_Reflective: IXMLFx_common_color_or_texture_type;
    function Get_Reflectivity: IXMLFx_common_float_or_param_type;
    function Get_Transparent: IXMLFx_common_transparent_type;
    function Get_Transparency: IXMLFx_common_float_or_param_type;
    function Get_Index_of_refraction: IXMLFx_common_float_or_param_type;
    { Methods & Properties }
    property Emission: IXMLFx_common_color_or_texture_type read Get_Emission;
    property Ambient: IXMLFx_common_color_or_texture_type read Get_Ambient;
    property Diffuse: IXMLFx_common_color_or_texture_type read Get_Diffuse;
    property Specular: IXMLFx_common_color_or_texture_type read Get_Specular;
    property Shininess: IXMLFx_common_float_or_param_type read Get_Shininess;
    property Reflective: IXMLFx_common_color_or_texture_type read Get_Reflective;
    property Reflectivity: IXMLFx_common_float_or_param_type read Get_Reflectivity;
    property Transparent: IXMLFx_common_transparent_type read Get_Transparent;
    property Transparency: IXMLFx_common_float_or_param_type read Get_Transparency;
    property Index_of_refraction: IXMLFx_common_float_or_param_type read Get_Index_of_refraction;
  end;

{ IXMLProfile_bridge_type }

  IXMLProfile_bridge_type = interface(IXML)
    ['{DBE604A7-74EA-4337-B791-D42631E8DEF7}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Platform: UnicodeString;
    function Get_Url: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Platform(Value: UnicodeString);
    procedure Set_Url(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Platform: UnicodeString read Get_Platform write Set_Platform;
    property Url: UnicodeString read Get_Url write Set_Url;
    property Asset: IXMLAsset_type read Get_Asset;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLProfile_gles2_type }

  IXMLProfile_gles2_type = interface(IXML)
    ['{F2CA96D7-0563-45D4-82FA-28072215AD1F}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Language: UnicodeString;
    function Get_Platforms: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Include: IXMLFx_include_typeList;
    function Get_Code: IXMLFx_code_typeList;
    function Get_Newparam: IXMLProfile_gles2_type_newparamList;
    function Get_Technique: IXMLProfile_gles2_type_techniqueList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Language(Value: UnicodeString);
    procedure Set_Platforms(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Language: UnicodeString read Get_Language write Set_Language;
    property Platforms: UnicodeString read Get_Platforms write Set_Platforms;
    property Asset: IXMLAsset_type read Get_Asset;
    property Include: IXMLFx_include_typeList read Get_Include;
    property Code: IXMLFx_code_typeList read Get_Code;
    property Newparam: IXMLProfile_gles2_type_newparamList read Get_Newparam;
    property Technique: IXMLProfile_gles2_type_techniqueList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLFx_include_type }

  IXMLFx_include_type = interface(IXML)
    ['{4DFB402E-EB80-462B-A01C-BF576D63A852}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Url: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Url(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Url: UnicodeString read Get_Url write Set_Url;
  end;

{ IXMLFx_include_typeList }

  IXMLFx_include_typeList = interface(IXMLFilter)
    ['{B8378A46-0AE4-43B8-8BD3-FDBB43905472}']
    { Methods & Properties }
    function Add: IXMLFx_include_type;
    function Insert(const Index: Integer): IXMLFx_include_type;

    function Get_Item(Index: Integer): IXMLFx_include_type;
    property Items[Index: Integer]: IXMLFx_include_type read Get_Item; default;
  end;

{ IXMLFx_code_type }

  IXMLFx_code_type = interface(IXML)
    ['{6C258B65-487D-441E-86D7-0A3667A9597E}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLFx_code_typeList }

  IXMLFx_code_typeList = interface(IXMLFilter)
    ['{8E3E971E-AE0B-4465-9A9B-A42BBB104891}']
    { Methods & Properties }
    function Add: IXMLFx_code_type;
    function Insert(const Index: Integer): IXMLFx_code_type;

    function Get_Item(Index: Integer): IXMLFx_code_type;
    property Items[Index: Integer]: IXMLFx_code_type read Get_Item; default;
  end;

{ IXMLGles2_newparam_type }

  IXMLGles2_newparam_type = interface(IXML)
    ['{F2E5674E-EFA1-4FB4-96E4-21173AE56B95}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Semantic: UnicodeString;
    function Get_Modifier: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bvec2: UnicodeString;
    function Get_Bvec3: UnicodeString;
    function Get_Bvec4: UnicodeString;
    function Get_Float: Double;
    function Get_Vec2: UnicodeString;
    function Get_Vec3: UnicodeString;
    function Get_Vec4: UnicodeString;
    function Get_Mat2: UnicodeString;
    function Get_Mat3: UnicodeString;
    function Get_Mat4: UnicodeString;
    function Get_Int: Int64;
    function Get_Ivec2: UnicodeString;
    function Get_Ivec3: UnicodeString;
    function Get_Ivec4: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Usertype: IXMLUsertype;
    function Get_Array_: IXMLArray_;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Modifier(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bvec2(Value: UnicodeString);
    procedure Set_Bvec3(Value: UnicodeString);
    procedure Set_Bvec4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Vec2(Value: UnicodeString);
    procedure Set_Vec3(Value: UnicodeString);
    procedure Set_Vec4(Value: UnicodeString);
    procedure Set_Mat2(Value: UnicodeString);
    procedure Set_Mat3(Value: UnicodeString);
    procedure Set_Mat4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Ivec2(Value: UnicodeString);
    procedure Set_Ivec3(Value: UnicodeString);
    procedure Set_Ivec4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Modifier: UnicodeString read Get_Modifier write Set_Modifier;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bvec2: UnicodeString read Get_Bvec2 write Set_Bvec2;
    property Bvec3: UnicodeString read Get_Bvec3 write Set_Bvec3;
    property Bvec4: UnicodeString read Get_Bvec4 write Set_Bvec4;
    property Float: Double read Get_Float write Set_Float;
    property Vec2: UnicodeString read Get_Vec2 write Set_Vec2;
    property Vec3: UnicodeString read Get_Vec3 write Set_Vec3;
    property Vec4: UnicodeString read Get_Vec4 write Set_Vec4;
    property Mat2: UnicodeString read Get_Mat2 write Set_Mat2;
    property Mat3: UnicodeString read Get_Mat3 write Set_Mat3;
    property Mat4: UnicodeString read Get_Mat4 write Set_Mat4;
    property Int: Int64 read Get_Int write Set_Int;
    property Ivec2: UnicodeString read Get_Ivec2 write Set_Ivec2;
    property Ivec3: UnicodeString read Get_Ivec3 write Set_Ivec3;
    property Ivec4: UnicodeString read Get_Ivec4 write Set_Ivec4;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
    property Sampler3D: IXMLFx_sampler3D_type read Get_Sampler3D;
    property SamplerCUBE: IXMLFx_samplerCUBE_type read Get_SamplerCUBE;
    property SamplerDEPTH: IXMLFx_samplerDEPTH_type read Get_SamplerDEPTH;
    property Usertype: IXMLUsertype read Get_Usertype;
    property Array_: IXMLArray_ read Get_Array_;
  end;

{ IXMLUsertype }

  IXMLUsertype = interface(IXMLFilter)
    ['{A2AFABAD-5ECE-4604-BDFA-81D3F6B93A79}']
    { Property Accessors }
    function Get_Typename: UnicodeString;
    function Get_Setparam(Index: Integer): IXMLUsertype_setparam;
    procedure Set_Typename(Value: UnicodeString);
    { Methods & Properties }
    function Add: IXMLUsertype_setparam;
    function Insert(const Index: Integer): IXMLUsertype_setparam;
    property Typename: UnicodeString read Get_Typename write Set_Typename;
    property Setparam[Index: Integer]: IXMLUsertype_setparam read Get_Setparam; default;
  end;

{ IXMLUsertype_setparam }

  IXMLUsertype_setparam = interface(IXML)
    ['{CA023DFF-33FB-4433-89AA-F31947E67626}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bvec2: UnicodeString;
    function Get_Bvec3: UnicodeString;
    function Get_Bvec4: UnicodeString;
    function Get_Float: Double;
    function Get_Vec2: UnicodeString;
    function Get_Vec3: UnicodeString;
    function Get_Vec4: UnicodeString;
    function Get_Mat2: UnicodeString;
    function Get_Mat3: UnicodeString;
    function Get_Mat4: UnicodeString;
    function Get_Int: Int64;
    function Get_Ivec2: UnicodeString;
    function Get_Ivec3: UnicodeString;
    function Get_Ivec4: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Usertype: IXMLUsertype;
    function Get_Array_: IXMLArray_;
    procedure Set_Ref(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bvec2(Value: UnicodeString);
    procedure Set_Bvec3(Value: UnicodeString);
    procedure Set_Bvec4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Vec2(Value: UnicodeString);
    procedure Set_Vec3(Value: UnicodeString);
    procedure Set_Vec4(Value: UnicodeString);
    procedure Set_Mat2(Value: UnicodeString);
    procedure Set_Mat3(Value: UnicodeString);
    procedure Set_Mat4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Ivec2(Value: UnicodeString);
    procedure Set_Ivec3(Value: UnicodeString);
    procedure Set_Ivec4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bvec2: UnicodeString read Get_Bvec2 write Set_Bvec2;
    property Bvec3: UnicodeString read Get_Bvec3 write Set_Bvec3;
    property Bvec4: UnicodeString read Get_Bvec4 write Set_Bvec4;
    property Float: Double read Get_Float write Set_Float;
    property Vec2: UnicodeString read Get_Vec2 write Set_Vec2;
    property Vec3: UnicodeString read Get_Vec3 write Set_Vec3;
    property Vec4: UnicodeString read Get_Vec4 write Set_Vec4;
    property Mat2: UnicodeString read Get_Mat2 write Set_Mat2;
    property Mat3: UnicodeString read Get_Mat3 write Set_Mat3;
    property Mat4: UnicodeString read Get_Mat4 write Set_Mat4;
    property Int: Int64 read Get_Int write Set_Int;
    property Ivec2: UnicodeString read Get_Ivec2 write Set_Ivec2;
    property Ivec3: UnicodeString read Get_Ivec3 write Set_Ivec3;
    property Ivec4: UnicodeString read Get_Ivec4 write Set_Ivec4;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
    property Sampler3D: IXMLFx_sampler3D_type read Get_Sampler3D;
    property SamplerCUBE: IXMLFx_samplerCUBE_type read Get_SamplerCUBE;
    property SamplerDEPTH: IXMLFx_samplerDEPTH_type read Get_SamplerDEPTH;
    property Usertype: IXMLUsertype read Get_Usertype;
    property Array_: IXMLArray_ read Get_Array_;
  end;

{ IXMLArray_ }

  IXMLArray_ = interface(IXML)
    ['{19C8E30C-07BF-4FA6-AC1A-6245FFC7A1EC}']
    { Property Accessors }
    function Get_Length: LongWord;
    function Get_Bool: Boolean;
    function Get_Bvec2: UnicodeString;
    function Get_Bvec3: UnicodeString;
    function Get_Bvec4: UnicodeString;
    function Get_Float: Double;
    function Get_Vec2: UnicodeString;
    function Get_Vec3: UnicodeString;
    function Get_Vec4: UnicodeString;
    function Get_Mat2: UnicodeString;
    function Get_Mat3: UnicodeString;
    function Get_Mat4: UnicodeString;
    function Get_Int: Int64;
    function Get_Ivec2: UnicodeString;
    function Get_Ivec3: UnicodeString;
    function Get_Ivec4: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Usertype: IXMLUsertype;
    function Get_Array_: IXMLArray_;
    procedure Set_Length(Value: LongWord);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bvec2(Value: UnicodeString);
    procedure Set_Bvec3(Value: UnicodeString);
    procedure Set_Bvec4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Vec2(Value: UnicodeString);
    procedure Set_Vec3(Value: UnicodeString);
    procedure Set_Vec4(Value: UnicodeString);
    procedure Set_Mat2(Value: UnicodeString);
    procedure Set_Mat3(Value: UnicodeString);
    procedure Set_Mat4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Ivec2(Value: UnicodeString);
    procedure Set_Ivec3(Value: UnicodeString);
    procedure Set_Ivec4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Length: LongWord read Get_Length write Set_Length;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bvec2: UnicodeString read Get_Bvec2 write Set_Bvec2;
    property Bvec3: UnicodeString read Get_Bvec3 write Set_Bvec3;
    property Bvec4: UnicodeString read Get_Bvec4 write Set_Bvec4;
    property Float: Double read Get_Float write Set_Float;
    property Vec2: UnicodeString read Get_Vec2 write Set_Vec2;
    property Vec3: UnicodeString read Get_Vec3 write Set_Vec3;
    property Vec4: UnicodeString read Get_Vec4 write Set_Vec4;
    property Mat2: UnicodeString read Get_Mat2 write Set_Mat2;
    property Mat3: UnicodeString read Get_Mat3 write Set_Mat3;
    property Mat4: UnicodeString read Get_Mat4 write Set_Mat4;
    property Int: Int64 read Get_Int write Set_Int;
    property Ivec2: UnicodeString read Get_Ivec2 write Set_Ivec2;
    property Ivec3: UnicodeString read Get_Ivec3 write Set_Ivec3;
    property Ivec4: UnicodeString read Get_Ivec4 write Set_Ivec4;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
    property Sampler3D: IXMLFx_sampler3D_type read Get_Sampler3D;
    property SamplerCUBE: IXMLFx_samplerCUBE_type read Get_SamplerCUBE;
    property SamplerDEPTH: IXMLFx_samplerDEPTH_type read Get_SamplerDEPTH;
    property Usertype: IXMLUsertype read Get_Usertype;
    property Array_: IXMLArray_ read Get_Array_;
  end;

{ IXMLProfile_gles2_type_newparam }

  IXMLProfile_gles2_type_newparam = interface(IXMLGles2_newparam_type)
    ['{D614A322-1853-45FB-8525-1B9A2B3BF0BE}']
  end;

{ IXMLProfile_gles2_type_newparamList }

  IXMLProfile_gles2_type_newparamList = interface(IXMLFilter)
    ['{15B5BFB0-79F9-46A5-98F1-749C6477D1F1}']
    { Methods & Properties }
    function Add: IXMLProfile_gles2_type_newparam;
    function Insert(const Index: Integer): IXMLProfile_gles2_type_newparam;

    function Get_Item(Index: Integer): IXMLProfile_gles2_type_newparam;
    property Items[Index: Integer]: IXMLProfile_gles2_type_newparam read Get_Item; default;
  end;

{ IXMLProfile_gles2_type_technique }

  IXMLProfile_gles2_type_technique = interface(IXML)
    ['{2EB162F7-F0CE-4887-B51E-3EE7E5392DFE}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Pass: IXMLGles2_pass_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Asset: IXMLAsset_type read Get_Asset;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property Pass: IXMLGles2_pass_typeList read Get_Pass;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLProfile_gles2_type_techniqueList }

  IXMLProfile_gles2_type_techniqueList = interface(IXMLFilter)
    ['{ED2DFC28-0CDC-4AEE-8245-81DCD15CA371}']
    { Methods & Properties }
    function Add: IXMLProfile_gles2_type_technique;
    function Insert(const Index: Integer): IXMLProfile_gles2_type_technique;

    function Get_Item(Index: Integer): IXMLProfile_gles2_type_technique;
    property Items[Index: Integer]: IXMLProfile_gles2_type_technique read Get_Item; default;
  end;

{ IXMLGles2_pass_type }

  IXMLGles2_pass_type = interface(IXML)
    ['{8C2BA657-1E5B-4E86-95C2-66486137DA2E}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_States: IXMLGles2_pass_type_states;
    function Get_Program_: IXMLGles2_program_type;
    function Get_Evaluate: IXMLGles2_pass_type_evaluate;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property States: IXMLGles2_pass_type_states read Get_States;
    property Program_: IXMLGles2_program_type read Get_Program_;
    property Evaluate: IXMLGles2_pass_type_evaluate read Get_Evaluate;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLGles2_pass_typeList }

  IXMLGles2_pass_typeList = interface(IXMLFilter)
    ['{B841D5EE-E8AF-479F-A35C-479D7ED83501}']
    { Methods & Properties }
    function Add: IXMLGles2_pass_type;
    function Insert(const Index: Integer): IXMLGles2_pass_type;

    function Get_Item(Index: Integer): IXMLGles2_pass_type;
    property Items[Index: Integer]: IXMLGles2_pass_type read Get_Item; default;
  end;

{ IXMLGles2_pass_type_states }

  IXMLGles2_pass_type_states = interface(IXML)
    ['{018F1334-9908-4A38-8475-C6E50AE9FCC0}']
    { Property Accessors }
    function Get_Blend_color: IXMLBlend_color;
    function Get_Blend_equation: IXMLBlend_equation;
    function Get_Blend_equation_separate: IXMLBlend_equation_separate;
    function Get_Blend_func: IXMLBlend_func;
    function Get_Blend_func_separate: IXMLBlend_func_separate;
    function Get_Color_mask: IXMLColor_mask;
    function Get_Cull_face: IXMLCull_face;
    function Get_Depth_func: IXMLDepth_func;
    function Get_Depth_mask: IXMLDepth_mask;
    function Get_Depth_range: IXMLDepth_range;
    function Get_Front_face: IXMLFront_face;
    function Get_Line_width: IXMLLine_width;
    function Get_Polygon_offset: IXMLPolygon_offset;
    function Get_Point_size: IXMLPoint_size;
    function Get_Sample_coverage: IXMLSample_coverage;
    function Get_Scissor: IXMLScissor;
    function Get_Stencil_func: IXMLStencil_func;
    function Get_Stencil_func_separate: IXMLStencil_func_separate;
    function Get_Stencil_mask: IXMLStencil_mask;
    function Get_Stencil_mask_separate: IXMLStencil_mask_separate;
    function Get_Stencil_op: IXMLStencil_op;
    function Get_Stencil_op_separate: IXMLStencil_op_separate;
    function Get_Blend_enable: IXMLBlend_enable;
    function Get_Cull_face_enable: IXMLCull_face_enable;
    function Get_Depth_test_enable: IXMLDepth_test_enable;
    function Get_Dither_enable: IXMLDither_enable;
    function Get_Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable;
    function Get_Point_size_enable: IXMLPoint_size_enable;
    function Get_Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable;
    function Get_Sample_coverage_enable: IXMLSample_coverage_enable;
    function Get_Scissor_test_enable: IXMLScissor_test_enable;
    function Get_Stencil_test_enable: IXMLStencil_test_enable;
    { Methods & Properties }
    property Blend_color: IXMLBlend_color read Get_Blend_color;
    property Blend_equation: IXMLBlend_equation read Get_Blend_equation;
    property Blend_equation_separate: IXMLBlend_equation_separate read Get_Blend_equation_separate;
    property Blend_func: IXMLBlend_func read Get_Blend_func;
    property Blend_func_separate: IXMLBlend_func_separate read Get_Blend_func_separate;
    property Color_mask: IXMLColor_mask read Get_Color_mask;
    property Cull_face: IXMLCull_face read Get_Cull_face;
    property Depth_func: IXMLDepth_func read Get_Depth_func;
    property Depth_mask: IXMLDepth_mask read Get_Depth_mask;
    property Depth_range: IXMLDepth_range read Get_Depth_range;
    property Front_face: IXMLFront_face read Get_Front_face;
    property Line_width: IXMLLine_width read Get_Line_width;
    property Polygon_offset: IXMLPolygon_offset read Get_Polygon_offset;
    property Point_size: IXMLPoint_size read Get_Point_size;
    property Sample_coverage: IXMLSample_coverage read Get_Sample_coverage;
    property Scissor: IXMLScissor read Get_Scissor;
    property Stencil_func: IXMLStencil_func read Get_Stencil_func;
    property Stencil_func_separate: IXMLStencil_func_separate read Get_Stencil_func_separate;
    property Stencil_mask: IXMLStencil_mask read Get_Stencil_mask;
    property Stencil_mask_separate: IXMLStencil_mask_separate read Get_Stencil_mask_separate;
    property Stencil_op: IXMLStencil_op read Get_Stencil_op;
    property Stencil_op_separate: IXMLStencil_op_separate read Get_Stencil_op_separate;
    property Blend_enable: IXMLBlend_enable read Get_Blend_enable;
    property Cull_face_enable: IXMLCull_face_enable read Get_Cull_face_enable;
    property Depth_test_enable: IXMLDepth_test_enable read Get_Depth_test_enable;
    property Dither_enable: IXMLDither_enable read Get_Dither_enable;
    property Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable read Get_Polygon_offset_fill_enable;
    property Point_size_enable: IXMLPoint_size_enable read Get_Point_size_enable;
    property Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable read Get_Sample_alpha_to_coverage_enable;
    property Sample_coverage_enable: IXMLSample_coverage_enable read Get_Sample_coverage_enable;
    property Scissor_test_enable: IXMLScissor_test_enable read Get_Scissor_test_enable;
    property Stencil_test_enable: IXMLStencil_test_enable read Get_Stencil_test_enable;
  end;

{ IXMLBlend_color }

  IXMLBlend_color = interface(IXML)
    ['{674FE4E7-799C-4B28-A7BD-646419E85724}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLBlend_equation }

  IXMLBlend_equation = interface(IXML)
    ['{BD7C00A6-9116-4242-9EC2-2FC65C76F4C7}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLBlend_equation_separate }

  IXMLBlend_equation_separate = interface(IXML)
    ['{5A4BC664-20A6-40D2-9CA0-40AE21FF86C9}']
    { Property Accessors }
    function Get_Rgb: IXMLBlend_equation_separate_rgb;
    function Get_Alpha: IXMLBlend_equation_separate_alpha;
    { Methods & Properties }
    property Rgb: IXMLBlend_equation_separate_rgb read Get_Rgb;
    property Alpha: IXMLBlend_equation_separate_alpha read Get_Alpha;
  end;

{ IXMLBlend_equation_separate_rgb }

  IXMLBlend_equation_separate_rgb = interface(IXML)
    ['{AE255DEC-76FD-4250-9A1A-B0A3038547B3}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLBlend_equation_separate_alpha }

  IXMLBlend_equation_separate_alpha = interface(IXML)
    ['{E7847259-7977-485B-9D3A-CF3803A68A4C}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLBlend_func }

  IXMLBlend_func = interface(IXML)
    ['{7188855C-155C-4CDA-8880-ADC69EDF4E84}']
    { Property Accessors }
    function Get_Src: IXMLBlend_func_src;
    function Get_Dest: IXMLBlend_func_dest;
    { Methods & Properties }
    property Src: IXMLBlend_func_src read Get_Src;
    property Dest: IXMLBlend_func_dest read Get_Dest;
  end;

{ IXMLBlend_func_src }

  IXMLBlend_func_src = interface(IXML)
    ['{5FADDFFC-3B16-44F4-BE19-3A7822150685}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLBlend_func_dest }

  IXMLBlend_func_dest = interface(IXML)
    ['{3881BF94-3FCB-48C9-9B49-F28016997716}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLBlend_func_separate }

  IXMLBlend_func_separate = interface(IXML)
    ['{F05DB67D-7665-4D68-871E-C74050D49BFF}']
    { Property Accessors }
    function Get_Src_rgb: IXMLBlend_func_separate_src_rgb;
    function Get_Dest_rgb: IXMLBlend_func_separate_dest_rgb;
    function Get_Src_alpha: IXMLBlend_func_separate_src_alpha;
    function Get_Dest_alpha: IXMLBlend_func_separate_dest_alpha;
    { Methods & Properties }
    property Src_rgb: IXMLBlend_func_separate_src_rgb read Get_Src_rgb;
    property Dest_rgb: IXMLBlend_func_separate_dest_rgb read Get_Dest_rgb;
    property Src_alpha: IXMLBlend_func_separate_src_alpha read Get_Src_alpha;
    property Dest_alpha: IXMLBlend_func_separate_dest_alpha read Get_Dest_alpha;
  end;

{ IXMLBlend_func_separate_src_rgb }

  IXMLBlend_func_separate_src_rgb = interface(IXML)
    ['{C0354622-870F-4B08-8CB2-AE6870682A24}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLBlend_func_separate_dest_rgb }

  IXMLBlend_func_separate_dest_rgb = interface(IXML)
    ['{AA37E7AE-9EC6-4E71-A319-86EEDBF34EE4}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLBlend_func_separate_src_alpha }

  IXMLBlend_func_separate_src_alpha = interface(IXML)
    ['{E17F33C2-79DE-49D2-8D78-C1CC460FFFB2}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLBlend_func_separate_dest_alpha }

  IXMLBlend_func_separate_dest_alpha = interface(IXML)
    ['{57432EAD-49FA-4242-A21B-6C7ABB09077B}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLColor_mask }

  IXMLColor_mask = interface(IXML)
    ['{6BF5C117-2DD2-4221-81B9-B24CAA82E459}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLCull_face }

  IXMLCull_face = interface(IXML)
    ['{25319C70-EE05-490E-AEA9-B17A40230615}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLDepth_func }

  IXMLDepth_func = interface(IXML)
    ['{5321E23F-F8A3-4385-B361-25FEABAC3D5E}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLDepth_mask }

  IXMLDepth_mask = interface(IXML)
    ['{7572901B-850B-4C20-8F37-86D622B236CC}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLDepth_range }

  IXMLDepth_range = interface(IXML)
    ['{EBABAF4D-B9EB-488D-BB6C-E3A1B93EF208}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLFront_face }

  IXMLFront_face = interface(IXML)
    ['{AC24AF4F-5937-4018-AF03-E875D132C320}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLLine_width }

  IXMLLine_width = interface(IXML)
    ['{2F556C8B-AA5B-4ECE-B98B-ABE3F1F9995F}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPolygon_offset }

  IXMLPolygon_offset = interface(IXML)
    ['{25D5856C-3E19-4245-8D25-15CB30DA7EC5}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPoint_size }

  IXMLPoint_size = interface(IXML)
    ['{0C955864-C21E-4F3C-AFA9-32DC3EDD6E5F}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLSample_coverage }

  IXMLSample_coverage = interface(IXML)
    ['{DAB96057-AC6F-4699-897A-E409B425CF1B}']
    { Property Accessors }
    function Get_Value: IXMLSample_coverage_value;
    function Get_Invert: IXMLSample_coverage_invert;
    { Methods & Properties }
    property Value: IXMLSample_coverage_value read Get_Value;
    property Invert: IXMLSample_coverage_invert read Get_Invert;
  end;

{ IXMLSample_coverage_value }

  IXMLSample_coverage_value = interface(IXML)
    ['{88CFA444-15EE-4271-B429-BF68B970848D}']
    { Property Accessors }
    function Get_Value: Single;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Single);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Single read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLSample_coverage_invert }

  IXMLSample_coverage_invert = interface(IXML)
    ['{F794CAD4-6CAA-4620-88AC-C82FE3566D38}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLScissor }

  IXMLScissor = interface(IXML)
    ['{D1A26B41-5860-435A-97C4-2352B7F9DB7A}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_func }

  IXMLStencil_func = interface(IXML)
    ['{79ADDFEC-E0AB-40F9-A012-C1EC5ED67F7F}']
    { Property Accessors }
    function Get_Func: IXMLStencil_func_func;
    function Get_Ref: IXMLStencil_func_ref;
    function Get_Mask: IXMLStencil_func_mask;
    { Methods & Properties }
    property Func: IXMLStencil_func_func read Get_Func;
    property Ref: IXMLStencil_func_ref read Get_Ref;
    property Mask: IXMLStencil_func_mask read Get_Mask;
  end;

{ IXMLStencil_func_func }

  IXMLStencil_func_func = interface(IXML)
    ['{CBC16CC5-FBB7-438F-AE48-7567A24AB250}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_func_ref }

  IXMLStencil_func_ref = interface(IXML)
    ['{ED86FCBD-49BB-4492-932A-118AA5A36BB4}']
    { Property Accessors }
    function Get_Value: Byte;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Byte);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Byte read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_func_mask }

  IXMLStencil_func_mask = interface(IXML)
    ['{B5985806-F39C-4BB0-AA1C-3D42B70C2A63}']
    { Property Accessors }
    function Get_Value: Byte;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Byte);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Byte read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_func_separate }

  IXMLStencil_func_separate = interface(IXML)
    ['{EB6DDFB2-64BB-4569-B2B2-9738CE3D8D53}']
    { Property Accessors }
    function Get_Front: IXMLStencil_func_separate_front;
    function Get_Back: IXMLStencil_func_separate_back;
    function Get_Ref: IXMLStencil_func_separate_ref;
    function Get_Mask: IXMLStencil_func_separate_mask;
    { Methods & Properties }
    property Front: IXMLStencil_func_separate_front read Get_Front;
    property Back: IXMLStencil_func_separate_back read Get_Back;
    property Ref: IXMLStencil_func_separate_ref read Get_Ref;
    property Mask: IXMLStencil_func_separate_mask read Get_Mask;
  end;

{ IXMLStencil_func_separate_front }

  IXMLStencil_func_separate_front = interface(IXML)
    ['{FF344AB8-0E08-4808-ABB0-9C2981B6C384}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_func_separate_back }

  IXMLStencil_func_separate_back = interface(IXML)
    ['{8ADD3F55-E415-41C5-9C94-2403738B40F9}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_func_separate_ref }

  IXMLStencil_func_separate_ref = interface(IXML)
    ['{E8CCFDB6-2355-4ED8-A129-98417F72625D}']
    { Property Accessors }
    function Get_Value: Byte;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Byte);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Byte read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_func_separate_mask }

  IXMLStencil_func_separate_mask = interface(IXML)
    ['{0688B708-0463-45C0-BC12-C827504D6503}']
    { Property Accessors }
    function Get_Value: Byte;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Byte);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Byte read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_mask }

  IXMLStencil_mask = interface(IXML)
    ['{C1E13E5E-C6DF-420B-907C-91E61F575497}']
    { Property Accessors }
    function Get_Value: Int64;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Int64);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Int64 read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_mask_separate }

  IXMLStencil_mask_separate = interface(IXML)
    ['{B134FD2F-970A-46D3-BF3C-1F36C2C7936B}']
    { Property Accessors }
    function Get_Face: IXMLStencil_mask_separate_face;
    function Get_Mask: IXMLStencil_mask_separate_mask;
    { Methods & Properties }
    property Face: IXMLStencil_mask_separate_face read Get_Face;
    property Mask: IXMLStencil_mask_separate_mask read Get_Mask;
  end;

{ IXMLStencil_mask_separate_face }

  IXMLStencil_mask_separate_face = interface(IXML)
    ['{146F9E9D-6F81-48CE-A0F3-E2F879F43830}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_mask_separate_mask }

  IXMLStencil_mask_separate_mask = interface(IXML)
    ['{B2AAAD47-8B8B-421D-B896-578E8AB9BFF4}']
    { Property Accessors }
    function Get_Value: Byte;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Byte);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Byte read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_op }

  IXMLStencil_op = interface(IXML)
    ['{AF263F0F-66F3-4648-9FE7-07650C6305A4}']
    { Property Accessors }
    function Get_Fail: IXMLStencil_op_fail;
    function Get_Zfail: IXMLStencil_op_zfail;
    function Get_Zpass: IXMLStencil_op_zpass;
    { Methods & Properties }
    property Fail: IXMLStencil_op_fail read Get_Fail;
    property Zfail: IXMLStencil_op_zfail read Get_Zfail;
    property Zpass: IXMLStencil_op_zpass read Get_Zpass;
  end;

{ IXMLStencil_op_fail }

  IXMLStencil_op_fail = interface(IXML)
    ['{597AA7FE-B802-4E1A-BD41-ACE92E82CA34}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_op_zfail }

  IXMLStencil_op_zfail = interface(IXML)
    ['{4BB9396F-26F9-4C8A-87B8-8C1341716D7F}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_op_zpass }

  IXMLStencil_op_zpass = interface(IXML)
    ['{D6290D32-6174-43A2-9F6B-5140AE29BCF5}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_op_separate }

  IXMLStencil_op_separate = interface(IXML)
    ['{18D75A04-A719-4891-8045-B5DCBB1928FD}']
    { Property Accessors }
    function Get_Face: IXMLStencil_op_separate_face;
    function Get_Fail: IXMLStencil_op_separate_fail;
    function Get_Zfail: IXMLStencil_op_separate_zfail;
    function Get_Zpass: IXMLStencil_op_separate_zpass;
    { Methods & Properties }
    property Face: IXMLStencil_op_separate_face read Get_Face;
    property Fail: IXMLStencil_op_separate_fail read Get_Fail;
    property Zfail: IXMLStencil_op_separate_zfail read Get_Zfail;
    property Zpass: IXMLStencil_op_separate_zpass read Get_Zpass;
  end;

{ IXMLStencil_op_separate_face }

  IXMLStencil_op_separate_face = interface(IXML)
    ['{02BABEEE-2E86-4106-9C7D-83DEA90DAD82}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_op_separate_fail }

  IXMLStencil_op_separate_fail = interface(IXML)
    ['{4EBA1286-A9F2-4E2E-ACE5-BC88901FE40D}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_op_separate_zfail }

  IXMLStencil_op_separate_zfail = interface(IXML)
    ['{A45BDA96-A576-4005-BBA4-A5E482A5C553}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_op_separate_zpass }

  IXMLStencil_op_separate_zpass = interface(IXML)
    ['{ACECFE79-597E-46C9-BB9F-6ACFE07917F4}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLBlend_enable }

  IXMLBlend_enable = interface(IXML)
    ['{3822FB2D-ED32-4180-9B8F-68936FF66AA5}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLCull_face_enable }

  IXMLCull_face_enable = interface(IXML)
    ['{A492A91D-F805-41D4-BCAA-615421C0AC37}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLDepth_test_enable }

  IXMLDepth_test_enable = interface(IXML)
    ['{BEF236CB-5C43-4155-9F6D-3DA3BA97E244}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLDither_enable }

  IXMLDither_enable = interface(IXML)
    ['{ACCA94AF-54AB-41E3-BE56-80188F40EA6D}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPolygon_offset_fill_enable }

  IXMLPolygon_offset_fill_enable = interface(IXML)
    ['{1F026664-1564-45B4-8224-BF1B61409E89}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPoint_size_enable }

  IXMLPoint_size_enable = interface(IXML)
    ['{A5BDC689-6D49-4EF5-9C22-B2BCDAC95D86}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLSample_alpha_to_coverage_enable }

  IXMLSample_alpha_to_coverage_enable = interface(IXML)
    ['{24678D0C-1987-4A66-8463-3F386C36F96F}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLSample_coverage_enable }

  IXMLSample_coverage_enable = interface(IXML)
    ['{DF624553-E239-49B3-AB18-29C12483B479}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLScissor_test_enable }

  IXMLScissor_test_enable = interface(IXML)
    ['{A2DF04FF-15E7-45B8-8959-043253337021}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLStencil_test_enable }

  IXMLStencil_test_enable = interface(IXML)
    ['{ACB936E1-E401-4D12-9949-45E9F90A2592}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLGles2_program_type }

  IXMLGles2_program_type = interface(IXML)
    ['{2682C4AA-97DA-4579-94EF-8EABFAAC4906}']
    { Property Accessors }
    function Get_Shader: IXMLGles2_shader_typeList;
    function Get_Linker: IXMLFx_target_typeList;
    function Get_Bind_attribute: IXMLGles2_program_type_bind_attributeList;
    function Get_Bind_uniform: IXMLGles2_program_type_bind_uniformList;
    { Methods & Properties }
    property Shader: IXMLGles2_shader_typeList read Get_Shader;
    property Linker: IXMLFx_target_typeList read Get_Linker;
    property Bind_attribute: IXMLGles2_program_type_bind_attributeList read Get_Bind_attribute;
    property Bind_uniform: IXMLGles2_program_type_bind_uniformList read Get_Bind_uniform;
  end;

{ IXMLGles2_shader_type }

  IXMLGles2_shader_type = interface(IXML)
    ['{37424980-2744-4AC0-9979-78EA2D6024BB}']
    { Property Accessors }
    function Get_Stage: UnicodeString;
    function Get_Sources: IXMLGles2_shader_type_sources;
    function Get_Compiler: IXMLFx_target_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Stage(Value: UnicodeString);
    { Methods & Properties }
    property Stage: UnicodeString read Get_Stage write Set_Stage;
    property Sources: IXMLGles2_shader_type_sources read Get_Sources;
    property Compiler: IXMLFx_target_typeList read Get_Compiler;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLGles2_shader_typeList }

  IXMLGles2_shader_typeList = interface(IXMLFilter)
    ['{5698DA63-5909-4C0E-95D9-E060443198E7}']
    { Methods & Properties }
    function Add: IXMLGles2_shader_type;
    function Insert(const Index: Integer): IXMLGles2_shader_type;

    function Get_Item(Index: Integer): IXMLGles2_shader_type;
    property Items[Index: Integer]: IXMLGles2_shader_type read Get_Item; default;
  end;

{ IXMLFx_sources_type }

  IXMLFx_sources_type = interface(IXML)
    ['{643C47E3-734D-44F9-B209-4E25D6A8DDE9}']
    { Property Accessors }
    function Get_Inline_: IXMLString_List;
    function Get_Import: IXMLFx_sources_type_importList;
    { Methods & Properties }
    property Inline_: IXMLString_List read Get_Inline_;
    property Import: IXMLFx_sources_type_importList read Get_Import;
  end;

{ IXMLFx_sources_type_import }

  IXMLFx_sources_type_import = interface(IXML)
    ['{C7713A1B-ADEE-4263-849E-78EF245E1037}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
  end;

{ IXMLFx_sources_type_importList }

  IXMLFx_sources_type_importList = interface(IXMLFilter)
    ['{C4C78965-04AF-4885-A77F-A46E462A1451}']
    { Methods & Properties }
    function Add: IXMLFx_sources_type_import;
    function Insert(const Index: Integer): IXMLFx_sources_type_import;

    function Get_Item(Index: Integer): IXMLFx_sources_type_import;
    property Items[Index: Integer]: IXMLFx_sources_type_import read Get_Item; default;
  end;

{ IXMLGles2_shader_type_sources }

  IXMLGles2_shader_type_sources = interface(IXMLFx_sources_type)
    ['{F1BF3168-E706-4CF7-899B-8FDBAFFF5DCD}']
    { Property Accessors }
    function Get_Entry: UnicodeString;
    procedure Set_Entry(Value: UnicodeString);
    { Methods & Properties }
    property Entry: UnicodeString read Get_Entry write Set_Entry;
  end;

{ IXMLFx_target_type }

  IXMLFx_target_type = interface(IXML)
    ['{39B95CD5-F210-4142-99C0-4E252B1D29BA}']
    { Property Accessors }
    function Get_Platform: UnicodeString;
    function Get_Target: UnicodeString;
    function Get_Options: UnicodeString;
    function Get_Binary: IXMLFx_target_type_binary;
    procedure Set_Platform(Value: UnicodeString);
    procedure Set_Target(Value: UnicodeString);
    procedure Set_Options(Value: UnicodeString);
    { Methods & Properties }
    property Platform: UnicodeString read Get_Platform write Set_Platform;
    property Target: UnicodeString read Get_Target write Set_Target;
    property Options: UnicodeString read Get_Options write Set_Options;
    property Binary: IXMLFx_target_type_binary read Get_Binary;
  end;

{ IXMLFx_target_typeList }

  IXMLFx_target_typeList = interface(IXMLFilter)
    ['{EFA3EBA8-3E18-4F89-A301-1ED936C785A0}']
    { Methods & Properties }
    function Add: IXMLFx_target_type;
    function Insert(const Index: Integer): IXMLFx_target_type;

    function Get_Item(Index: Integer): IXMLFx_target_type;
    property Items[Index: Integer]: IXMLFx_target_type read Get_Item; default;
  end;

{ IXMLFx_target_type_binary }

  IXMLFx_target_type_binary = interface(IXML)
    ['{87A86695-B3D5-4C84-B288-ABC831776809}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    function Get_Hex: IXMLFx_target_type_binary_hex;
    procedure Set_Ref(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
    property Hex: IXMLFx_target_type_binary_hex read Get_Hex;
  end;

{ IXMLFx_target_type_binary_hex }

  IXMLFx_target_type_binary_hex = interface(IXML)
    ['{7B2221C6-8CE6-46EC-B634-051180BA345C}']
    { Property Accessors }
    function Get_Format: UnicodeString;
    procedure Set_Format(Value: UnicodeString);
    { Methods & Properties }
    property Format: UnicodeString read Get_Format write Set_Format;
  end;

{ IXMLGles2_program_type_bind_attribute }

  IXMLGles2_program_type_bind_attribute = interface(IXML)
    ['{596F0298-5C68-45D6-A582-994B6E24F083}']
    { Property Accessors }
    function Get_Symbol: UnicodeString;
    function Get_Semantic: UnicodeString;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    { Methods & Properties }
    property Symbol: UnicodeString read Get_Symbol write Set_Symbol;
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
  end;

{ IXMLGles2_program_type_bind_attributeList }

  IXMLGles2_program_type_bind_attributeList = interface(IXMLFilter)
    ['{284365A5-F8EB-41CF-8715-25FBF74974C6}']
    { Methods & Properties }
    function Add: IXMLGles2_program_type_bind_attribute;
    function Insert(const Index: Integer): IXMLGles2_program_type_bind_attribute;

    function Get_Item(Index: Integer): IXMLGles2_program_type_bind_attribute;
    property Items[Index: Integer]: IXMLGles2_program_type_bind_attribute read Get_Item; default;
  end;

{ IXMLGles2_program_type_bind_uniform }

  IXMLGles2_program_type_bind_uniform = interface(IXML)
    ['{47E30718-9CB7-464C-B412-50DC1F7CA759}']
    { Property Accessors }
    function Get_Symbol: UnicodeString;
    function Get_Param: IXMLGles2_program_type_bind_uniform_param;
    function Get_Bool: Boolean;
    function Get_Bvec2: UnicodeString;
    function Get_Bvec3: UnicodeString;
    function Get_Bvec4: UnicodeString;
    function Get_Float: Double;
    function Get_Vec2: UnicodeString;
    function Get_Vec3: UnicodeString;
    function Get_Vec4: UnicodeString;
    function Get_Mat2: UnicodeString;
    function Get_Mat3: UnicodeString;
    function Get_Mat4: UnicodeString;
    function Get_Int: Int64;
    function Get_Ivec2: UnicodeString;
    function Get_Ivec3: UnicodeString;
    function Get_Ivec4: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Usertype: IXMLUsertype;
    function Get_Array_: IXMLArray_;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bvec2(Value: UnicodeString);
    procedure Set_Bvec3(Value: UnicodeString);
    procedure Set_Bvec4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Vec2(Value: UnicodeString);
    procedure Set_Vec3(Value: UnicodeString);
    procedure Set_Vec4(Value: UnicodeString);
    procedure Set_Mat2(Value: UnicodeString);
    procedure Set_Mat3(Value: UnicodeString);
    procedure Set_Mat4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Ivec2(Value: UnicodeString);
    procedure Set_Ivec3(Value: UnicodeString);
    procedure Set_Ivec4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Symbol: UnicodeString read Get_Symbol write Set_Symbol;
    property Param: IXMLGles2_program_type_bind_uniform_param read Get_Param;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bvec2: UnicodeString read Get_Bvec2 write Set_Bvec2;
    property Bvec3: UnicodeString read Get_Bvec3 write Set_Bvec3;
    property Bvec4: UnicodeString read Get_Bvec4 write Set_Bvec4;
    property Float: Double read Get_Float write Set_Float;
    property Vec2: UnicodeString read Get_Vec2 write Set_Vec2;
    property Vec3: UnicodeString read Get_Vec3 write Set_Vec3;
    property Vec4: UnicodeString read Get_Vec4 write Set_Vec4;
    property Mat2: UnicodeString read Get_Mat2 write Set_Mat2;
    property Mat3: UnicodeString read Get_Mat3 write Set_Mat3;
    property Mat4: UnicodeString read Get_Mat4 write Set_Mat4;
    property Int: Int64 read Get_Int write Set_Int;
    property Ivec2: UnicodeString read Get_Ivec2 write Set_Ivec2;
    property Ivec3: UnicodeString read Get_Ivec3 write Set_Ivec3;
    property Ivec4: UnicodeString read Get_Ivec4 write Set_Ivec4;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
    property Sampler3D: IXMLFx_sampler3D_type read Get_Sampler3D;
    property SamplerCUBE: IXMLFx_samplerCUBE_type read Get_SamplerCUBE;
    property SamplerDEPTH: IXMLFx_samplerDEPTH_type read Get_SamplerDEPTH;
    property Usertype: IXMLUsertype read Get_Usertype;
    property Array_: IXMLArray_ read Get_Array_;
  end;

{ IXMLGles2_program_type_bind_uniformList }

  IXMLGles2_program_type_bind_uniformList = interface(IXMLFilter)
    ['{2AE2D982-6084-4CF8-9BA6-08B54CF70FD6}']
    { Methods & Properties }
    function Add: IXMLGles2_program_type_bind_uniform;
    function Insert(const Index: Integer): IXMLGles2_program_type_bind_uniform;

    function Get_Item(Index: Integer): IXMLGles2_program_type_bind_uniform;
    property Items[Index: Integer]: IXMLGles2_program_type_bind_uniform read Get_Item; default;
  end;

{ IXMLGles2_program_type_bind_uniform_param }

  IXMLGles2_program_type_bind_uniform_param = interface(IXML)
    ['{D1A44A50-661B-4009-892E-4B2F32FF011D}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
  end;

{ IXMLGles2_pass_type_evaluate }

  IXMLGles2_pass_type_evaluate = interface(IXML)
    ['{78044BDB-3BF1-4358-8F59-C7F1B9BF1D20}']
    { Property Accessors }
    function Get_Color_target: IXMLFx_colortarget_typeList;
    function Get_Depth_target: IXMLFx_depthtarget_typeList;
    function Get_Stencil_target: IXMLFx_stenciltarget_typeList;
    function Get_Color_clear: IXMLFx_clearcolor_typeList;
    function Get_Stencil_clear: IXMLFx_clearstencil_typeList;
    function Get_Depth_clear: IXMLFx_cleardepth_typeList;
    function Get_Draw: UnicodeString;
    procedure Set_Draw(Value: UnicodeString);
    { Methods & Properties }
    property Color_target: IXMLFx_colortarget_typeList read Get_Color_target;
    property Depth_target: IXMLFx_depthtarget_typeList read Get_Depth_target;
    property Stencil_target: IXMLFx_stenciltarget_typeList read Get_Stencil_target;
    property Color_clear: IXMLFx_clearcolor_typeList read Get_Color_clear;
    property Stencil_clear: IXMLFx_clearstencil_typeList read Get_Stencil_clear;
    property Depth_clear: IXMLFx_cleardepth_typeList read Get_Depth_clear;
    property Draw: UnicodeString read Get_Draw write Set_Draw;
  end;

{ IXMLFx_rendertarget_type }

  IXMLFx_rendertarget_type = interface(IXML)
    ['{80CF4B9E-890F-4F5B-94B8-65F64560ECCE}']
    { Property Accessors }
    function Get_Index: LongWord;
    function Get_Mip: LongWord;
    function Get_Face: UnicodeString;
    function Get_Slice: LongWord;
    function Get_Param: IXMLFx_rendertarget_type_param;
    function Get_Instance_image: IXMLInstance_image_type;
    procedure Set_Index(Value: LongWord);
    procedure Set_Mip(Value: LongWord);
    procedure Set_Face(Value: UnicodeString);
    procedure Set_Slice(Value: LongWord);
    { Methods & Properties }
    property Index: LongWord read Get_Index write Set_Index;
    property Mip: LongWord read Get_Mip write Set_Mip;
    property Face: UnicodeString read Get_Face write Set_Face;
    property Slice: LongWord read Get_Slice write Set_Slice;
    property Param: IXMLFx_rendertarget_type_param read Get_Param;
    property Instance_image: IXMLInstance_image_type read Get_Instance_image;
  end;

{ IXMLFx_rendertarget_type_param }

  IXMLFx_rendertarget_type_param = interface(IXML)
    ['{1DE12E72-0868-477F-A47B-DA8212966A37}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
  end;

{ IXMLFx_colortarget_type }

  IXMLFx_colortarget_type = interface(IXMLFx_rendertarget_type)
    ['{5FE06DB2-E584-4BF9-8FFF-0D2284771375}']
  end;

{ IXMLFx_colortarget_typeList }

  IXMLFx_colortarget_typeList = interface(IXMLFilter)
    ['{C35D0FC9-25D9-4E8B-99AA-A42ED8478DA0}']
    { Methods & Properties }
    function Add: IXMLFx_colortarget_type;
    function Insert(const Index: Integer): IXMLFx_colortarget_type;

    function Get_Item(Index: Integer): IXMLFx_colortarget_type;
    property Items[Index: Integer]: IXMLFx_colortarget_type read Get_Item; default;
  end;

{ IXMLFx_depthtarget_type }

  IXMLFx_depthtarget_type = interface(IXMLFx_rendertarget_type)
    ['{BA5FA307-15AC-407C-A14C-30BCF72EA826}']
  end;

{ IXMLFx_depthtarget_typeList }

  IXMLFx_depthtarget_typeList = interface(IXMLFilter)
    ['{32DEDD42-8B5D-45C2-89DC-530529A6B323}']
    { Methods & Properties }
    function Add: IXMLFx_depthtarget_type;
    function Insert(const Index: Integer): IXMLFx_depthtarget_type;

    function Get_Item(Index: Integer): IXMLFx_depthtarget_type;
    property Items[Index: Integer]: IXMLFx_depthtarget_type read Get_Item; default;
  end;

{ IXMLFx_stenciltarget_type }

  IXMLFx_stenciltarget_type = interface(IXMLFx_rendertarget_type)
    ['{93C1803E-38FA-47D6-B33A-48BD7BB9F9E7}']
  end;

{ IXMLFx_stenciltarget_typeList }

  IXMLFx_stenciltarget_typeList = interface(IXMLFilter)
    ['{D09D1DA0-6639-49D9-B04F-D9060B38DFE8}']
    { Methods & Properties }
    function Add: IXMLFx_stenciltarget_type;
    function Insert(const Index: Integer): IXMLFx_stenciltarget_type;

    function Get_Item(Index: Integer): IXMLFx_stenciltarget_type;
    property Items[Index: Integer]: IXMLFx_stenciltarget_type read Get_Item; default;
  end;

{ IXMLFx_clearcolor_type }

  IXMLFx_clearcolor_type = interface(IXML)
    ['{8167DF22-D71D-40FA-AD62-3870E29CA088}']
    { Property Accessors }
    function Get_Index: LongWord;
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLFx_clearcolor_typeList }

  IXMLFx_clearcolor_typeList = interface(IXMLFilter)
    ['{30155194-3B14-4D46-B938-C4754675CCD8}']
    { Methods & Properties }
    function Add: IXMLFx_clearcolor_type;
    function Insert(const Index: Integer): IXMLFx_clearcolor_type;

    function Get_Item(Index: Integer): IXMLFx_clearcolor_type;
    property Items[Index: Integer]: IXMLFx_clearcolor_type read Get_Item; default;
  end;

{ IXMLFx_clearstencil_type }

  IXMLFx_clearstencil_type = interface(IXML)
    ['{F35721F7-5B4C-4035-BB1E-D32A6C063EC6}']
    { Property Accessors }
    function Get_Index: LongWord;
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLFx_clearstencil_typeList }

  IXMLFx_clearstencil_typeList = interface(IXMLFilter)
    ['{0C9379AC-17F3-4545-A066-956117243B3A}']
    { Methods & Properties }
    function Add: IXMLFx_clearstencil_type;
    function Insert(const Index: Integer): IXMLFx_clearstencil_type;

    function Get_Item(Index: Integer): IXMLFx_clearstencil_type;
    property Items[Index: Integer]: IXMLFx_clearstencil_type read Get_Item; default;
  end;

{ IXMLFx_cleardepth_type }

  IXMLFx_cleardepth_type = interface(IXML)
    ['{93B790F8-EFD3-4CD5-A17F-BCE11B5AB6CC}']
    { Property Accessors }
    function Get_Index: LongWord;
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLFx_cleardepth_typeList }

  IXMLFx_cleardepth_typeList = interface(IXMLFilter)
    ['{63114096-FD8B-4AF5-AC7B-A9935B91DFF9}']
    { Methods & Properties }
    function Add: IXMLFx_cleardepth_type;
    function Insert(const Index: Integer): IXMLFx_cleardepth_type;

    function Get_Item(Index: Integer): IXMLFx_cleardepth_type;
    property Items[Index: Integer]: IXMLFx_cleardepth_type read Get_Item; default;
  end;

{ IXMLProfile_glsl_type }

  IXMLProfile_glsl_type = interface(IXML)
    ['{E82913B9-2C3A-4FF0-B63B-F2EDBF733A9A}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Platform: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Code: IXMLFx_code_typeList;
    function Get_Include: IXMLFx_include_typeList;
    function Get_Newparam: IXMLGlsl_newparam_typeList;
    function Get_Technique: IXMLProfile_glsl_type_techniqueList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Platform(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Platform: UnicodeString read Get_Platform write Set_Platform;
    property Asset: IXMLAsset_type read Get_Asset;
    property Code: IXMLFx_code_typeList read Get_Code;
    property Include: IXMLFx_include_typeList read Get_Include;
    property Newparam: IXMLGlsl_newparam_typeList read Get_Newparam;
    property Technique: IXMLProfile_glsl_type_techniqueList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLGlsl_newparam_type }

  IXMLGlsl_newparam_type = interface(IXML)
    ['{A6D71C07-335B-4142-9E31-E75A24FA3B66}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Semantic: UnicodeString;
    function Get_Modifier: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLGlsl_array_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Modifier(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Modifier: UnicodeString read Get_Modifier write Set_Modifier;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bool2: UnicodeString read Get_Bool2 write Set_Bool2;
    property Bool3: UnicodeString read Get_Bool3 write Set_Bool3;
    property Bool4: UnicodeString read Get_Bool4 write Set_Bool4;
    property Float: Double read Get_Float write Set_Float;
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Float3: UnicodeString read Get_Float3 write Set_Float3;
    property Float4: UnicodeString read Get_Float4 write Set_Float4;
    property Float2x2: UnicodeString read Get_Float2x2 write Set_Float2x2;
    property Float3x3: UnicodeString read Get_Float3x3 write Set_Float3x3;
    property Float4x4: UnicodeString read Get_Float4x4 write Set_Float4x4;
    property Int: Int64 read Get_Int write Set_Int;
    property Int2: UnicodeString read Get_Int2 write Set_Int2;
    property Int3: UnicodeString read Get_Int3 write Set_Int3;
    property Int4: UnicodeString read Get_Int4 write Set_Int4;
    property Sampler1D: IXMLFx_sampler1D_type read Get_Sampler1D;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
    property Sampler3D: IXMLFx_sampler3D_type read Get_Sampler3D;
    property SamplerCUBE: IXMLFx_samplerCUBE_type read Get_SamplerCUBE;
    property SamplerRECT: IXMLFx_samplerRECT_type read Get_SamplerRECT;
    property SamplerDEPTH: IXMLFx_samplerDEPTH_type read Get_SamplerDEPTH;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
    property Array_: IXMLGlsl_array_type read Get_Array_;
  end;

{ IXMLGlsl_newparam_typeList }

  IXMLGlsl_newparam_typeList = interface(IXMLFilter)
    ['{FA39269A-59A3-4D82-A262-22F174382B5C}']
    { Methods & Properties }
    function Add: IXMLGlsl_newparam_type;
    function Insert(const Index: Integer): IXMLGlsl_newparam_type;

    function Get_Item(Index: Integer): IXMLGlsl_newparam_type;
    property Items[Index: Integer]: IXMLGlsl_newparam_type read Get_Item; default;
  end;

{ IXMLGlsl_array_type }

  IXMLGlsl_array_type = interface(IXML)
    ['{017ECB21-1E6E-46C3-9556-B33BD9D5D85B}']
    { Property Accessors }
    function Get_Length: LongWord;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLGlsl_array_type;
    procedure Set_Length(Value: LongWord);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Length: LongWord read Get_Length write Set_Length;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bool2: UnicodeString read Get_Bool2 write Set_Bool2;
    property Bool3: UnicodeString read Get_Bool3 write Set_Bool3;
    property Bool4: UnicodeString read Get_Bool4 write Set_Bool4;
    property Float: Double read Get_Float write Set_Float;
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Float3: UnicodeString read Get_Float3 write Set_Float3;
    property Float4: UnicodeString read Get_Float4 write Set_Float4;
    property Float2x2: UnicodeString read Get_Float2x2 write Set_Float2x2;
    property Float3x3: UnicodeString read Get_Float3x3 write Set_Float3x3;
    property Float4x4: UnicodeString read Get_Float4x4 write Set_Float4x4;
    property Int: Int64 read Get_Int write Set_Int;
    property Int2: UnicodeString read Get_Int2 write Set_Int2;
    property Int3: UnicodeString read Get_Int3 write Set_Int3;
    property Int4: UnicodeString read Get_Int4 write Set_Int4;
    property Sampler1D: IXMLFx_sampler1D_type read Get_Sampler1D;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
    property Sampler3D: IXMLFx_sampler3D_type read Get_Sampler3D;
    property SamplerCUBE: IXMLFx_samplerCUBE_type read Get_SamplerCUBE;
    property SamplerRECT: IXMLFx_samplerRECT_type read Get_SamplerRECT;
    property SamplerDEPTH: IXMLFx_samplerDEPTH_type read Get_SamplerDEPTH;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
    property Array_: IXMLGlsl_array_type read Get_Array_;
  end;

{ IXMLProfile_glsl_type_technique }

  IXMLProfile_glsl_type_technique = interface(IXML)
    ['{7C7A049B-E0D6-48F6-89FA-56EA5AB50732}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Pass: IXMLProfile_glsl_type_technique_passList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Asset: IXMLAsset_type read Get_Asset;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property Pass: IXMLProfile_glsl_type_technique_passList read Get_Pass;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLProfile_glsl_type_techniqueList }

  IXMLProfile_glsl_type_techniqueList = interface(IXMLFilter)
    ['{EEBA4612-061E-483C-86D3-6376D84BF311}']
    { Methods & Properties }
    function Add: IXMLProfile_glsl_type_technique;
    function Insert(const Index: Integer): IXMLProfile_glsl_type_technique;

    function Get_Item(Index: Integer): IXMLProfile_glsl_type_technique;
    property Items[Index: Integer]: IXMLProfile_glsl_type_technique read Get_Item; default;
  end;

{ IXMLProfile_glsl_type_technique_pass }

  IXMLProfile_glsl_type_technique_pass = interface(IXML)
    ['{858F9322-2370-4333-BAFC-0AE434EEAAD6}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_States: IXMLProfile_glsl_type_technique_pass_states;
    function Get_Program_: IXMLGlsl_program_type;
    function Get_Evaluate: IXMLProfile_glsl_type_technique_pass_evaluate;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property States: IXMLProfile_glsl_type_technique_pass_states read Get_States;
    property Program_: IXMLGlsl_program_type read Get_Program_;
    property Evaluate: IXMLProfile_glsl_type_technique_pass_evaluate read Get_Evaluate;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLProfile_glsl_type_technique_passList }

  IXMLProfile_glsl_type_technique_passList = interface(IXMLFilter)
    ['{C2FDFD20-8C7A-4776-BA98-A5DB352A5BDC}']
    { Methods & Properties }
    function Add: IXMLProfile_glsl_type_technique_pass;
    function Insert(const Index: Integer): IXMLProfile_glsl_type_technique_pass;

    function Get_Item(Index: Integer): IXMLProfile_glsl_type_technique_pass;
    property Items[Index: Integer]: IXMLProfile_glsl_type_technique_pass read Get_Item; default;
  end;

{ IXMLProfile_glsl_type_technique_pass_states }

  IXMLProfile_glsl_type_technique_pass_states = interface(IXML)
    ['{425898BE-E198-4983-AEF2-E3FCEEBF2945}']
    { Property Accessors }
    function Get_Alpha_func: IXMLAlpha_func;
    function Get_Blend_func: IXMLBlend_func;
    function Get_Blend_func_separate: IXMLBlend_func_separate;
    function Get_Blend_equation: IXMLBlend_equation;
    function Get_Blend_equation_separate: IXMLBlend_equation_separate;
    function Get_Color_material: IXMLColor_material;
    function Get_Cull_face: IXMLCull_face;
    function Get_Depth_func: IXMLDepth_func;
    function Get_Fog_mode: IXMLFog_mode;
    function Get_Fog_coord_src: IXMLFog_coord_src;
    function Get_Front_face: IXMLFront_face;
    function Get_Light_model_color_control: IXMLLight_model_color_control;
    function Get_Logic_op: IXMLLogic_op;
    function Get_Polygon_mode: IXMLPolygon_mode;
    function Get_Shade_model: IXMLShade_model;
    function Get_Stencil_func: IXMLStencil_func;
    function Get_Stencil_op: IXMLStencil_op;
    function Get_Stencil_func_separate: IXMLStencil_func_separate;
    function Get_Stencil_op_separate: IXMLStencil_op_separate;
    function Get_Stencil_mask_separate: IXMLStencil_mask_separate;
    function Get_Light_enable: IXMLLight_enable;
    function Get_Light_ambient: IXMLLight_ambient;
    function Get_Light_diffuse: IXMLLight_diffuse;
    function Get_Light_specular: IXMLLight_specular;
    function Get_Light_position: IXMLLight_position;
    function Get_Light_constant_attenuation: IXMLLight_constant_attenuation;
    function Get_Light_linear_attenuation: IXMLLight_linear_attenuation;
    function Get_Light_quadratic_attenuation: IXMLLight_quadratic_attenuation;
    function Get_Light_spot_cutoff: IXMLLight_spot_cutoff;
    function Get_Light_spot_direction: IXMLLight_spot_direction;
    function Get_Light_spot_exponent: IXMLLight_spot_exponent;
    function Get_Texture1D: IXMLTexture1D;
    function Get_Texture2D: IXMLTexture2D;
    function Get_Texture3D: IXMLTexture3D;
    function Get_TextureCUBE: IXMLTextureCUBE;
    function Get_TextureRECT: IXMLTextureRECT;
    function Get_TextureDEPTH: IXMLTextureDEPTH;
    function Get_Texture1D_enable: IXMLTexture1D_enable;
    function Get_Texture2D_enable: IXMLTexture2D_enable;
    function Get_Texture3D_enable: IXMLTexture3D_enable;
    function Get_TextureCUBE_enable: IXMLTextureCUBE_enable;
    function Get_TextureRECT_enable: IXMLTextureRECT_enable;
    function Get_TextureDEPTH_enable: IXMLTextureDEPTH_enable;
    function Get_Texture_env_color: IXMLTexture_env_color;
    function Get_Texture_env_mode: IXMLTexture_env_mode;
    function Get_Clip_plane: IXMLClip_plane;
    function Get_Clip_plane_enable: IXMLClip_plane_enable;
    function Get_Blend_color: IXMLBlend_color;
    function Get_Color_mask: IXMLColor_mask;
    function Get_Depth_bounds: IXMLDepth_bounds;
    function Get_Depth_mask: IXMLDepth_mask;
    function Get_Depth_range: IXMLDepth_range;
    function Get_Fog_density: IXMLFog_density;
    function Get_Fog_start: IXMLFog_start;
    function Get_Fog_end: IXMLFog_end;
    function Get_Fog_color: IXMLFog_color;
    function Get_Light_model_ambient: IXMLLight_model_ambient;
    function Get_Lighting_enable: IXMLLighting_enable;
    function Get_Line_stipple: IXMLLine_stipple;
    function Get_Line_width: IXMLLine_width;
    function Get_Material_ambient: IXMLMaterial_ambient;
    function Get_Material_diffuse: IXMLMaterial_diffuse;
    function Get_Material_emission: IXMLMaterial_emission;
    function Get_Material_shininess: IXMLMaterial_shininess;
    function Get_Material_specular: IXMLMaterial_specular;
    function Get_Model_view_matrix: IXMLModel_view_matrix;
    function Get_Point_distance_attenuation: IXMLPoint_distance_attenuation;
    function Get_Point_fade_threshold_size: IXMLPoint_fade_threshold_size;
    function Get_Point_size: IXMLPoint_size;
    function Get_Point_size_min: IXMLPoint_size_min;
    function Get_Point_size_max: IXMLPoint_size_max;
    function Get_Polygon_offset: IXMLPolygon_offset;
    function Get_Projection_matrix: IXMLProjection_matrix;
    function Get_Scissor: IXMLScissor;
    function Get_Stencil_mask: IXMLStencil_mask;
    function Get_Alpha_test_enable: IXMLAlpha_test_enable;
    function Get_Blend_enable: IXMLBlend_enable;
    function Get_Color_logic_op_enable: IXMLColor_logic_op_enable;
    function Get_Color_material_enable: IXMLColor_material_enable;
    function Get_Cull_face_enable: IXMLCull_face_enable;
    function Get_Depth_bounds_enable: IXMLDepth_bounds_enable;
    function Get_Depth_clamp_enable: IXMLDepth_clamp_enable;
    function Get_Depth_test_enable: IXMLDepth_test_enable;
    function Get_Dither_enable: IXMLDither_enable;
    function Get_Fog_enable: IXMLFog_enable;
    function Get_Light_model_local_viewer_enable: IXMLLight_model_local_viewer_enable;
    function Get_Light_model_two_side_enable: IXMLLight_model_two_side_enable;
    function Get_Line_smooth_enable: IXMLLine_smooth_enable;
    function Get_Line_stipple_enable: IXMLLine_stipple_enable;
    function Get_Logic_op_enable: IXMLLogic_op_enable;
    function Get_Multisample_enable: IXMLMultisample_enable;
    function Get_Normalize_enable: IXMLNormalize_enable;
    function Get_Point_smooth_enable: IXMLPoint_smooth_enable;
    function Get_Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable;
    function Get_Polygon_offset_line_enable: IXMLPolygon_offset_line_enable;
    function Get_Polygon_offset_point_enable: IXMLPolygon_offset_point_enable;
    function Get_Polygon_smooth_enable: IXMLPolygon_smooth_enable;
    function Get_Polygon_stipple_enable: IXMLPolygon_stipple_enable;
    function Get_Rescale_normal_enable: IXMLRescale_normal_enable;
    function Get_Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable;
    function Get_Sample_alpha_to_one_enable: IXMLSample_alpha_to_one_enable;
    function Get_Sample_coverage_enable: IXMLSample_coverage_enable;
    function Get_Scissor_test_enable: IXMLScissor_test_enable;
    function Get_Stencil_test_enable: IXMLStencil_test_enable;
    { Methods & Properties }
    property Alpha_func: IXMLAlpha_func read Get_Alpha_func;
    property Blend_func: IXMLBlend_func read Get_Blend_func;
    property Blend_func_separate: IXMLBlend_func_separate read Get_Blend_func_separate;
    property Blend_equation: IXMLBlend_equation read Get_Blend_equation;
    property Blend_equation_separate: IXMLBlend_equation_separate read Get_Blend_equation_separate;
    property Color_material: IXMLColor_material read Get_Color_material;
    property Cull_face: IXMLCull_face read Get_Cull_face;
    property Depth_func: IXMLDepth_func read Get_Depth_func;
    property Fog_mode: IXMLFog_mode read Get_Fog_mode;
    property Fog_coord_src: IXMLFog_coord_src read Get_Fog_coord_src;
    property Front_face: IXMLFront_face read Get_Front_face;
    property Light_model_color_control: IXMLLight_model_color_control read Get_Light_model_color_control;
    property Logic_op: IXMLLogic_op read Get_Logic_op;
    property Polygon_mode: IXMLPolygon_mode read Get_Polygon_mode;
    property Shade_model: IXMLShade_model read Get_Shade_model;
    property Stencil_func: IXMLStencil_func read Get_Stencil_func;
    property Stencil_op: IXMLStencil_op read Get_Stencil_op;
    property Stencil_func_separate: IXMLStencil_func_separate read Get_Stencil_func_separate;
    property Stencil_op_separate: IXMLStencil_op_separate read Get_Stencil_op_separate;
    property Stencil_mask_separate: IXMLStencil_mask_separate read Get_Stencil_mask_separate;
    property Light_enable: IXMLLight_enable read Get_Light_enable;
    property Light_ambient: IXMLLight_ambient read Get_Light_ambient;
    property Light_diffuse: IXMLLight_diffuse read Get_Light_diffuse;
    property Light_specular: IXMLLight_specular read Get_Light_specular;
    property Light_position: IXMLLight_position read Get_Light_position;
    property Light_constant_attenuation: IXMLLight_constant_attenuation read Get_Light_constant_attenuation;
    property Light_linear_attenuation: IXMLLight_linear_attenuation read Get_Light_linear_attenuation;
    property Light_quadratic_attenuation: IXMLLight_quadratic_attenuation read Get_Light_quadratic_attenuation;
    property Light_spot_cutoff: IXMLLight_spot_cutoff read Get_Light_spot_cutoff;
    property Light_spot_direction: IXMLLight_spot_direction read Get_Light_spot_direction;
    property Light_spot_exponent: IXMLLight_spot_exponent read Get_Light_spot_exponent;
    property Texture1D: IXMLTexture1D read Get_Texture1D;
    property Texture2D: IXMLTexture2D read Get_Texture2D;
    property Texture3D: IXMLTexture3D read Get_Texture3D;
    property TextureCUBE: IXMLTextureCUBE read Get_TextureCUBE;
    property TextureRECT: IXMLTextureRECT read Get_TextureRECT;
    property TextureDEPTH: IXMLTextureDEPTH read Get_TextureDEPTH;
    property Texture1D_enable: IXMLTexture1D_enable read Get_Texture1D_enable;
    property Texture2D_enable: IXMLTexture2D_enable read Get_Texture2D_enable;
    property Texture3D_enable: IXMLTexture3D_enable read Get_Texture3D_enable;
    property TextureCUBE_enable: IXMLTextureCUBE_enable read Get_TextureCUBE_enable;
    property TextureRECT_enable: IXMLTextureRECT_enable read Get_TextureRECT_enable;
    property TextureDEPTH_enable: IXMLTextureDEPTH_enable read Get_TextureDEPTH_enable;
    property Texture_env_color: IXMLTexture_env_color read Get_Texture_env_color;
    property Texture_env_mode: IXMLTexture_env_mode read Get_Texture_env_mode;
    property Clip_plane: IXMLClip_plane read Get_Clip_plane;
    property Clip_plane_enable: IXMLClip_plane_enable read Get_Clip_plane_enable;
    property Blend_color: IXMLBlend_color read Get_Blend_color;
    property Color_mask: IXMLColor_mask read Get_Color_mask;
    property Depth_bounds: IXMLDepth_bounds read Get_Depth_bounds;
    property Depth_mask: IXMLDepth_mask read Get_Depth_mask;
    property Depth_range: IXMLDepth_range read Get_Depth_range;
    property Fog_density: IXMLFog_density read Get_Fog_density;
    property Fog_start: IXMLFog_start read Get_Fog_start;
    property Fog_end: IXMLFog_end read Get_Fog_end;
    property Fog_color: IXMLFog_color read Get_Fog_color;
    property Light_model_ambient: IXMLLight_model_ambient read Get_Light_model_ambient;
    property Lighting_enable: IXMLLighting_enable read Get_Lighting_enable;
    property Line_stipple: IXMLLine_stipple read Get_Line_stipple;
    property Line_width: IXMLLine_width read Get_Line_width;
    property Material_ambient: IXMLMaterial_ambient read Get_Material_ambient;
    property Material_diffuse: IXMLMaterial_diffuse read Get_Material_diffuse;
    property Material_emission: IXMLMaterial_emission read Get_Material_emission;
    property Material_shininess: IXMLMaterial_shininess read Get_Material_shininess;
    property Material_specular: IXMLMaterial_specular read Get_Material_specular;
    property Model_view_matrix: IXMLModel_view_matrix read Get_Model_view_matrix;
    property Point_distance_attenuation: IXMLPoint_distance_attenuation read Get_Point_distance_attenuation;
    property Point_fade_threshold_size: IXMLPoint_fade_threshold_size read Get_Point_fade_threshold_size;
    property Point_size: IXMLPoint_size read Get_Point_size;
    property Point_size_min: IXMLPoint_size_min read Get_Point_size_min;
    property Point_size_max: IXMLPoint_size_max read Get_Point_size_max;
    property Polygon_offset: IXMLPolygon_offset read Get_Polygon_offset;
    property Projection_matrix: IXMLProjection_matrix read Get_Projection_matrix;
    property Scissor: IXMLScissor read Get_Scissor;
    property Stencil_mask: IXMLStencil_mask read Get_Stencil_mask;
    property Alpha_test_enable: IXMLAlpha_test_enable read Get_Alpha_test_enable;
    property Blend_enable: IXMLBlend_enable read Get_Blend_enable;
    property Color_logic_op_enable: IXMLColor_logic_op_enable read Get_Color_logic_op_enable;
    property Color_material_enable: IXMLColor_material_enable read Get_Color_material_enable;
    property Cull_face_enable: IXMLCull_face_enable read Get_Cull_face_enable;
    property Depth_bounds_enable: IXMLDepth_bounds_enable read Get_Depth_bounds_enable;
    property Depth_clamp_enable: IXMLDepth_clamp_enable read Get_Depth_clamp_enable;
    property Depth_test_enable: IXMLDepth_test_enable read Get_Depth_test_enable;
    property Dither_enable: IXMLDither_enable read Get_Dither_enable;
    property Fog_enable: IXMLFog_enable read Get_Fog_enable;
    property Light_model_local_viewer_enable: IXMLLight_model_local_viewer_enable read Get_Light_model_local_viewer_enable;
    property Light_model_two_side_enable: IXMLLight_model_two_side_enable read Get_Light_model_two_side_enable;
    property Line_smooth_enable: IXMLLine_smooth_enable read Get_Line_smooth_enable;
    property Line_stipple_enable: IXMLLine_stipple_enable read Get_Line_stipple_enable;
    property Logic_op_enable: IXMLLogic_op_enable read Get_Logic_op_enable;
    property Multisample_enable: IXMLMultisample_enable read Get_Multisample_enable;
    property Normalize_enable: IXMLNormalize_enable read Get_Normalize_enable;
    property Point_smooth_enable: IXMLPoint_smooth_enable read Get_Point_smooth_enable;
    property Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable read Get_Polygon_offset_fill_enable;
    property Polygon_offset_line_enable: IXMLPolygon_offset_line_enable read Get_Polygon_offset_line_enable;
    property Polygon_offset_point_enable: IXMLPolygon_offset_point_enable read Get_Polygon_offset_point_enable;
    property Polygon_smooth_enable: IXMLPolygon_smooth_enable read Get_Polygon_smooth_enable;
    property Polygon_stipple_enable: IXMLPolygon_stipple_enable read Get_Polygon_stipple_enable;
    property Rescale_normal_enable: IXMLRescale_normal_enable read Get_Rescale_normal_enable;
    property Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable read Get_Sample_alpha_to_coverage_enable;
    property Sample_alpha_to_one_enable: IXMLSample_alpha_to_one_enable read Get_Sample_alpha_to_one_enable;
    property Sample_coverage_enable: IXMLSample_coverage_enable read Get_Sample_coverage_enable;
    property Scissor_test_enable: IXMLScissor_test_enable read Get_Scissor_test_enable;
    property Stencil_test_enable: IXMLStencil_test_enable read Get_Stencil_test_enable;
  end;

{ IXMLAlpha_func }

  IXMLAlpha_func = interface(IXML)
    ['{5E80FDE7-A37C-4DCF-8439-FA7983FDE1E5}']
    { Property Accessors }
    function Get_Func: IXMLAlpha_func_func;
    function Get_Value: IXMLAlpha_func_value;
    { Methods & Properties }
    property Func: IXMLAlpha_func_func read Get_Func;
    property Value: IXMLAlpha_func_value read Get_Value;
  end;

{ IXMLAlpha_func_func }

  IXMLAlpha_func_func = interface(IXML)
    ['{B04312A2-DCC1-4FCA-AC5A-A2AFD766978E}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLAlpha_func_value }

  IXMLAlpha_func_value = interface(IXML)
    ['{22973CFF-E5A8-4F6B-B21D-A50E0B031C52}']
    { Property Accessors }
    function Get_Value: Single;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Single);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Single read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLColor_material }

  IXMLColor_material = interface(IXML)
    ['{BC7C74A5-B64C-4C87-9161-2B969B56EB5A}']
    { Property Accessors }
    function Get_Face: IXMLColor_material_face;
    function Get_Mode: IXMLColor_material_mode;
    { Methods & Properties }
    property Face: IXMLColor_material_face read Get_Face;
    property Mode: IXMLColor_material_mode read Get_Mode;
  end;

{ IXMLColor_material_face }

  IXMLColor_material_face = interface(IXML)
    ['{2F07B6A0-7315-453D-919D-944CE7981DDF}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLColor_material_mode }

  IXMLColor_material_mode = interface(IXML)
    ['{F67CF692-4DF8-4F4E-B352-FDDDA78A1204}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLFog_mode }

  IXMLFog_mode = interface(IXML)
    ['{06EBD9BD-164B-497E-8FB9-EB6989FCB31D}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLFog_coord_src }

  IXMLFog_coord_src = interface(IXML)
    ['{185CDC9D-76D5-4481-B48A-A4CB8BD3214F}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLLight_model_color_control }

  IXMLLight_model_color_control = interface(IXML)
    ['{D7518D67-8186-41EA-ACCD-80AFBF633F62}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLLogic_op }

  IXMLLogic_op = interface(IXML)
    ['{10134A2D-6BA7-48E0-BA28-2F6D374B2789}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPolygon_mode }

  IXMLPolygon_mode = interface(IXML)
    ['{79F16467-42FD-4B2E-9832-AC2FC9C86C85}']
    { Property Accessors }
    function Get_Face: IXMLPolygon_mode_face;
    function Get_Mode: IXMLPolygon_mode_mode;
    { Methods & Properties }
    property Face: IXMLPolygon_mode_face read Get_Face;
    property Mode: IXMLPolygon_mode_mode read Get_Mode;
  end;

{ IXMLPolygon_mode_face }

  IXMLPolygon_mode_face = interface(IXML)
    ['{B2D6DD4F-09D2-481D-9B92-7FA6D68FB0AE}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPolygon_mode_mode }

  IXMLPolygon_mode_mode = interface(IXML)
    ['{5C67DCF5-7F56-4035-A954-B3A8C32D5081}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLShade_model }

  IXMLShade_model = interface(IXML)
    ['{98537992-CD6C-4FAE-A7F1-FD0935C022E3}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLLight_enable }

  IXMLLight_enable = interface(IXML)
    ['{9B3F70F5-AFF2-49DF-9B0D-070C837B6C78}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLLight_ambient }

  IXMLLight_ambient = interface(IXML)
    ['{A17ADB8B-9588-4636-B210-DBDC2660CC24}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLLight_diffuse }

  IXMLLight_diffuse = interface(IXML)
    ['{A69CAB39-A9D2-4BBF-A6BD-BE9CA02D2EC8}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLLight_specular }

  IXMLLight_specular = interface(IXML)
    ['{5B3A6785-C73B-4D8A-8ACE-766DA4E715FE}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLLight_position }

  IXMLLight_position = interface(IXML)
    ['{244739E7-1D14-40E1-BBDD-22D9CB6B7C52}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLLight_constant_attenuation }

  IXMLLight_constant_attenuation = interface(IXML)
    ['{B4F72777-C282-4480-B4E0-5388B6AFEC9F}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLLight_linear_attenuation }

  IXMLLight_linear_attenuation = interface(IXML)
    ['{6FDB0175-DE28-4103-8344-3228BCF0D6AC}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLLight_quadratic_attenuation }

  IXMLLight_quadratic_attenuation = interface(IXML)
    ['{636D9352-FCEA-4F85-A103-B14CB7048D9F}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLLight_spot_cutoff }

  IXMLLight_spot_cutoff = interface(IXML)
    ['{D7E09A6B-5073-48CC-8854-328211342072}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLLight_spot_direction }

  IXMLLight_spot_direction = interface(IXML)
    ['{61A8B857-E354-4A71-A42C-7BDA181725EE}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLLight_spot_exponent }

  IXMLLight_spot_exponent = interface(IXML)
    ['{B73B38AE-66AD-446A-A2D3-83832E3F2F21}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLTexture1D }

  IXMLTexture1D = interface(IXML)
    ['{1863E56A-A78C-40B9-AE8A-79FFE79630CB}']
    { Property Accessors }
    function Get_Index: LongWord;
    function Get_Value: IXMLFx_sampler1D_type;
    function Get_Param: UnicodeString;
    procedure Set_Index(Value: LongWord);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Index: LongWord read Get_Index write Set_Index;
    property Value: IXMLFx_sampler1D_type read Get_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLTexture2D }

  IXMLTexture2D = interface(IXML)
    ['{8699390F-477D-4423-ABD3-60F953BA6749}']
    { Property Accessors }
    function Get_Index: LongWord;
    function Get_Value: IXMLFx_sampler2D_type;
    function Get_Param: UnicodeString;
    procedure Set_Index(Value: LongWord);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Index: LongWord read Get_Index write Set_Index;
    property Value: IXMLFx_sampler2D_type read Get_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLTexture3D }

  IXMLTexture3D = interface(IXML)
    ['{D58AC6C6-9734-4319-82ED-97CD8873CFC6}']
    { Property Accessors }
    function Get_Index: LongWord;
    function Get_Value: IXMLFx_sampler3D_type;
    function Get_Param: UnicodeString;
    procedure Set_Index(Value: LongWord);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Index: LongWord read Get_Index write Set_Index;
    property Value: IXMLFx_sampler3D_type read Get_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLTextureCUBE }

  IXMLTextureCUBE = interface(IXML)
    ['{CAE87EF8-0F7A-4587-9A22-DF5919314CE0}']
    { Property Accessors }
    function Get_Index: LongWord;
    function Get_Value: IXMLFx_samplerCUBE_type;
    function Get_Param: UnicodeString;
    procedure Set_Index(Value: LongWord);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Index: LongWord read Get_Index write Set_Index;
    property Value: IXMLFx_samplerCUBE_type read Get_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLTextureRECT }

  IXMLTextureRECT = interface(IXML)
    ['{DA9552E7-C88F-4598-AFC1-363946A1C2EE}']
    { Property Accessors }
    function Get_Index: LongWord;
    function Get_Value: IXMLFx_samplerRECT_type;
    function Get_Param: UnicodeString;
    procedure Set_Index(Value: LongWord);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Index: LongWord read Get_Index write Set_Index;
    property Value: IXMLFx_samplerRECT_type read Get_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLTextureDEPTH }

  IXMLTextureDEPTH = interface(IXML)
    ['{0FB934A7-76F0-4E58-8A6A-DD3C10261FA1}']
    { Property Accessors }
    function Get_Index: LongWord;
    function Get_Value: IXMLFx_samplerDEPTH_type;
    function Get_Param: UnicodeString;
    procedure Set_Index(Value: LongWord);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Index: LongWord read Get_Index write Set_Index;
    property Value: IXMLFx_samplerDEPTH_type read Get_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLTexture1D_enable }

  IXMLTexture1D_enable = interface(IXML)
    ['{7510804E-A7D8-4498-A2FA-1F77408D3F08}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLTexture2D_enable }

  IXMLTexture2D_enable = interface(IXML)
    ['{8F82795D-5F39-4FB8-976B-44CC36BDA980}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLTexture3D_enable }

  IXMLTexture3D_enable = interface(IXML)
    ['{771CF6FD-C8E2-481E-98D8-273843ECE0F2}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLTextureCUBE_enable }

  IXMLTextureCUBE_enable = interface(IXML)
    ['{A8F3FDCC-61FC-4230-B47E-3BA585CD4AB9}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLTextureRECT_enable }

  IXMLTextureRECT_enable = interface(IXML)
    ['{8B21AF3B-5CB4-4725-B496-B501E5A24139}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLTextureDEPTH_enable }

  IXMLTextureDEPTH_enable = interface(IXML)
    ['{76B39D55-B0DC-40CB-A357-D902DC54F922}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLTexture_env_color }

  IXMLTexture_env_color = interface(IXML)
    ['{9A2B7E85-0E70-45B6-A629-C1158436F192}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLTexture_env_mode }

  IXMLTexture_env_mode = interface(IXML)
    ['{F47D11E6-6094-4D4E-B542-C66BF3E54E7E}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLClip_plane }

  IXMLClip_plane = interface(IXML)
    ['{23696286-5B1A-4FB7-ACF6-4E5A0F64FB56}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLClip_plane_enable }

  IXMLClip_plane_enable = interface(IXML)
    ['{1DA1DFD3-7761-42CE-8155-781155881996}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLDepth_bounds }

  IXMLDepth_bounds = interface(IXML)
    ['{1E0E8779-4FE4-4942-A401-62228F1E0C57}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLFog_density }

  IXMLFog_density = interface(IXML)
    ['{FDF22EDE-BBC2-43EA-8310-13B65E3AC00E}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLFog_start }

  IXMLFog_start = interface(IXML)
    ['{FF716319-DD72-412D-A924-95CE3294839B}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLFog_end }

  IXMLFog_end = interface(IXML)
    ['{898A2C36-06FC-4F55-B037-E6DBF737D017}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLFog_color }

  IXMLFog_color = interface(IXML)
    ['{57557404-E167-47E9-A5D0-B91E107D7D73}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLLight_model_ambient }

  IXMLLight_model_ambient = interface(IXML)
    ['{7AAEE8D1-103F-44F4-B287-DD073C0850D7}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLLighting_enable }

  IXMLLighting_enable = interface(IXML)
    ['{A2ACC9A6-0A7F-490A-B1C2-95E092CF98D1}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLLine_stipple }

  IXMLLine_stipple = interface(IXML)
    ['{C71B95FC-3AC2-4F65-824C-55671593FB89}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLMaterial_ambient }

  IXMLMaterial_ambient = interface(IXML)
    ['{579ACCFA-10CF-4916-B72D-51A3A54C9DA8}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLMaterial_diffuse }

  IXMLMaterial_diffuse = interface(IXML)
    ['{59AF41C9-D7E2-472C-9542-FF911E89F265}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLMaterial_emission }

  IXMLMaterial_emission = interface(IXML)
    ['{A06C9C32-3DE4-49F1-AE45-446FA78A293E}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLMaterial_shininess }

  IXMLMaterial_shininess = interface(IXML)
    ['{1C458950-15D2-4CCA-9715-8076826C61FC}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLMaterial_specular }

  IXMLMaterial_specular = interface(IXML)
    ['{8910CF75-29A7-4BC2-A8AB-B7F40AC467CB}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLModel_view_matrix }

  IXMLModel_view_matrix = interface(IXML)
    ['{A8D9233B-9332-4F52-80C4-BD7876978FCF}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPoint_distance_attenuation }

  IXMLPoint_distance_attenuation = interface(IXML)
    ['{BE1A8B54-8C53-44A5-9EE5-1824BCF99000}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPoint_fade_threshold_size }

  IXMLPoint_fade_threshold_size = interface(IXML)
    ['{1F6C7D83-A090-4967-9040-AF9E5D707289}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPoint_size_min }

  IXMLPoint_size_min = interface(IXML)
    ['{E352D128-11EF-4CD7-8E3E-2762DD9494D3}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPoint_size_max }

  IXMLPoint_size_max = interface(IXML)
    ['{72B75059-D89A-4292-A9F9-EC5321D33093}']
    { Property Accessors }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Double read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLProjection_matrix }

  IXMLProjection_matrix = interface(IXML)
    ['{1EB56546-D9B6-4321-BD6B-A48E54A24BB9}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLAlpha_test_enable }

  IXMLAlpha_test_enable = interface(IXML)
    ['{7553D2CB-AB43-4D1A-8EA7-226A95EE07BB}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLColor_logic_op_enable }

  IXMLColor_logic_op_enable = interface(IXML)
    ['{113B6ACC-B48D-46E4-9DF7-F074D74965D8}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLColor_material_enable }

  IXMLColor_material_enable = interface(IXML)
    ['{E66A6C37-B8DC-41B1-BD1F-CEF43DA43D93}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLDepth_bounds_enable }

  IXMLDepth_bounds_enable = interface(IXML)
    ['{01648435-2804-494A-9E8C-B6B66FF825A5}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLDepth_clamp_enable }

  IXMLDepth_clamp_enable = interface(IXML)
    ['{35B3ED93-A29D-4BFD-A257-0F6CE6DEA402}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLFog_enable }

  IXMLFog_enable = interface(IXML)
    ['{7E8DA0C9-1D00-47E8-A469-2CBEC3F783A0}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLLight_model_local_viewer_enable }

  IXMLLight_model_local_viewer_enable = interface(IXML)
    ['{CCEBEFD4-037F-4E4B-A0E5-9A266B3F6969}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLLight_model_two_side_enable }

  IXMLLight_model_two_side_enable = interface(IXML)
    ['{CC0F4456-0AF5-43EA-943D-D537458A6589}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLLine_smooth_enable }

  IXMLLine_smooth_enable = interface(IXML)
    ['{94DA41B0-F029-4FAE-8894-665F06FF0622}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLLine_stipple_enable }

  IXMLLine_stipple_enable = interface(IXML)
    ['{FA03F5F8-B664-4DC5-9E03-E7C0C599FDC0}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLLogic_op_enable }

  IXMLLogic_op_enable = interface(IXML)
    ['{CDAAFF36-C730-4EF4-B183-314A5A596746}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLMultisample_enable }

  IXMLMultisample_enable = interface(IXML)
    ['{CCF0CA01-3BF2-422B-953E-7E135C695E2F}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLNormalize_enable }

  IXMLNormalize_enable = interface(IXML)
    ['{C6E01C09-5A55-4E29-B346-81837C98DFD9}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPoint_smooth_enable }

  IXMLPoint_smooth_enable = interface(IXML)
    ['{05BDB1A5-095A-4F0E-B7FD-A2DE5309E674}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPolygon_offset_line_enable }

  IXMLPolygon_offset_line_enable = interface(IXML)
    ['{7BB4F48B-DDBD-44E8-87D9-C07D43A338D8}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPolygon_offset_point_enable }

  IXMLPolygon_offset_point_enable = interface(IXML)
    ['{C5D32DEA-1B80-45A2-A8B6-21B7203E0917}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPolygon_smooth_enable }

  IXMLPolygon_smooth_enable = interface(IXML)
    ['{414AB649-FD9D-4E68-B688-3F65D217EA7C}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLPolygon_stipple_enable }

  IXMLPolygon_stipple_enable = interface(IXML)
    ['{C2FC82BC-B4E8-48B0-8EAD-0D5E4D40151A}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLRescale_normal_enable }

  IXMLRescale_normal_enable = interface(IXML)
    ['{3909791C-64A5-490E-B7CA-2F073A85D15C}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLSample_alpha_to_one_enable }

  IXMLSample_alpha_to_one_enable = interface(IXML)
    ['{391B0BF4-8ABE-4446-ABEB-C36AA2E3C7C1}']
    { Property Accessors }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: Boolean read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLGlsl_program_type }

  IXMLGlsl_program_type = interface(IXML)
    ['{D7E168BB-4ED6-433F-A32F-BB2445094A2A}']
    { Property Accessors }
    function Get_Shader: IXMLGlsl_shader_typeList;
    function Get_Bind_attribute: IXMLGlsl_program_type_bind_attributeList;
    function Get_Bind_uniform: IXMLGlsl_program_type_bind_uniformList;
    { Methods & Properties }
    property Shader: IXMLGlsl_shader_typeList read Get_Shader;
    property Bind_attribute: IXMLGlsl_program_type_bind_attributeList read Get_Bind_attribute;
    property Bind_uniform: IXMLGlsl_program_type_bind_uniformList read Get_Bind_uniform;
  end;

{ IXMLGlsl_shader_type }

  IXMLGlsl_shader_type = interface(IXML)
    ['{51452731-B6C2-443E-8896-A2A6421522BB}']
    { Property Accessors }
    function Get_Stage: UnicodeString;
    function Get_Sources: IXMLFx_sources_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Stage(Value: UnicodeString);
    { Methods & Properties }
    property Stage: UnicodeString read Get_Stage write Set_Stage;
    property Sources: IXMLFx_sources_type read Get_Sources;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLGlsl_shader_typeList }

  IXMLGlsl_shader_typeList = interface(IXMLFilter)
    ['{AC9CFA59-3EE9-4EEF-ADD8-21A37E2DC54E}']
    { Methods & Properties }
    function Add: IXMLGlsl_shader_type;
    function Insert(const Index: Integer): IXMLGlsl_shader_type;

    function Get_Item(Index: Integer): IXMLGlsl_shader_type;
    property Items[Index: Integer]: IXMLGlsl_shader_type read Get_Item; default;
  end;

{ IXMLGlsl_program_type_bind_attribute }

  IXMLGlsl_program_type_bind_attribute = interface(IXML)
    ['{9F82BA01-CACF-4704-9F95-AC54F980704D}']
    { Property Accessors }
    function Get_Symbol: UnicodeString;
    function Get_Semantic: UnicodeString;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    { Methods & Properties }
    property Symbol: UnicodeString read Get_Symbol write Set_Symbol;
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
  end;

{ IXMLGlsl_program_type_bind_attributeList }

  IXMLGlsl_program_type_bind_attributeList = interface(IXMLFilter)
    ['{AE4DBB61-3748-488E-A457-311C3F512780}']
    { Methods & Properties }
    function Add: IXMLGlsl_program_type_bind_attribute;
    function Insert(const Index: Integer): IXMLGlsl_program_type_bind_attribute;

    function Get_Item(Index: Integer): IXMLGlsl_program_type_bind_attribute;
    property Items[Index: Integer]: IXMLGlsl_program_type_bind_attribute read Get_Item; default;
  end;

{ IXMLGlsl_program_type_bind_uniform }

  IXMLGlsl_program_type_bind_uniform = interface(IXML)
    ['{6B4EFB46-1411-4566-9335-FDD2C9D6757E}']
    { Property Accessors }
    function Get_Symbol: UnicodeString;
    function Get_Param: IXMLGlsl_program_type_bind_uniform_param;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLGlsl_array_type;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Symbol: UnicodeString read Get_Symbol write Set_Symbol;
    property Param: IXMLGlsl_program_type_bind_uniform_param read Get_Param;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bool2: UnicodeString read Get_Bool2 write Set_Bool2;
    property Bool3: UnicodeString read Get_Bool3 write Set_Bool3;
    property Bool4: UnicodeString read Get_Bool4 write Set_Bool4;
    property Float: Double read Get_Float write Set_Float;
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Float3: UnicodeString read Get_Float3 write Set_Float3;
    property Float4: UnicodeString read Get_Float4 write Set_Float4;
    property Float2x2: UnicodeString read Get_Float2x2 write Set_Float2x2;
    property Float3x3: UnicodeString read Get_Float3x3 write Set_Float3x3;
    property Float4x4: UnicodeString read Get_Float4x4 write Set_Float4x4;
    property Int: Int64 read Get_Int write Set_Int;
    property Int2: UnicodeString read Get_Int2 write Set_Int2;
    property Int3: UnicodeString read Get_Int3 write Set_Int3;
    property Int4: UnicodeString read Get_Int4 write Set_Int4;
    property Sampler1D: IXMLFx_sampler1D_type read Get_Sampler1D;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
    property Sampler3D: IXMLFx_sampler3D_type read Get_Sampler3D;
    property SamplerCUBE: IXMLFx_samplerCUBE_type read Get_SamplerCUBE;
    property SamplerRECT: IXMLFx_samplerRECT_type read Get_SamplerRECT;
    property SamplerDEPTH: IXMLFx_samplerDEPTH_type read Get_SamplerDEPTH;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
    property Array_: IXMLGlsl_array_type read Get_Array_;
  end;

{ IXMLGlsl_program_type_bind_uniformList }

  IXMLGlsl_program_type_bind_uniformList = interface(IXMLFilter)
    ['{14EEEEE4-2FF0-48CD-B7BC-6438026A6E60}']
    { Methods & Properties }
    function Add: IXMLGlsl_program_type_bind_uniform;
    function Insert(const Index: Integer): IXMLGlsl_program_type_bind_uniform;

    function Get_Item(Index: Integer): IXMLGlsl_program_type_bind_uniform;
    property Items[Index: Integer]: IXMLGlsl_program_type_bind_uniform read Get_Item; default;
  end;

{ IXMLGlsl_program_type_bind_uniform_param }

  IXMLGlsl_program_type_bind_uniform_param = interface(IXML)
    ['{D88A1514-4663-4EA6-AB8C-BB5B6BA700C4}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
  end;

{ IXMLProfile_glsl_type_technique_pass_evaluate }

  IXMLProfile_glsl_type_technique_pass_evaluate = interface(IXML)
    ['{2606BC23-1DE4-4361-B9AE-DA132C5A5458}']
    { Property Accessors }
    function Get_Color_target: IXMLFx_colortarget_typeList;
    function Get_Depth_target: IXMLFx_depthtarget_typeList;
    function Get_Stencil_target: IXMLFx_stenciltarget_typeList;
    function Get_Color_clear: IXMLFx_clearcolor_typeList;
    function Get_Depth_clear: IXMLFx_cleardepth_typeList;
    function Get_Stencil_clear: IXMLFx_clearstencil_typeList;
    function Get_Draw: UnicodeString;
    procedure Set_Draw(Value: UnicodeString);
    { Methods & Properties }
    property Color_target: IXMLFx_colortarget_typeList read Get_Color_target;
    property Depth_target: IXMLFx_depthtarget_typeList read Get_Depth_target;
    property Stencil_target: IXMLFx_stenciltarget_typeList read Get_Stencil_target;
    property Color_clear: IXMLFx_clearcolor_typeList read Get_Color_clear;
    property Depth_clear: IXMLFx_cleardepth_typeList read Get_Depth_clear;
    property Stencil_clear: IXMLFx_clearstencil_typeList read Get_Stencil_clear;
    property Draw: UnicodeString read Get_Draw write Set_Draw;
  end;

{ IXMLProfile_cg_type }

  IXMLProfile_cg_type = interface(IXML)
    ['{72471E87-0B39-43F1-9435-47744AEDC77D}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Platform: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Code: IXMLFx_code_typeList;
    function Get_Include: IXMLFx_include_typeList;
    function Get_Newparam: IXMLCg_newparam_typeList;
    function Get_Technique: IXMLProfile_cg_type_techniqueList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Platform(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Platform: UnicodeString read Get_Platform write Set_Platform;
    property Asset: IXMLAsset_type read Get_Asset;
    property Code: IXMLFx_code_typeList read Get_Code;
    property Include: IXMLFx_include_typeList read Get_Include;
    property Newparam: IXMLCg_newparam_typeList read Get_Newparam;
    property Technique: IXMLProfile_cg_type_techniqueList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLCg_newparam_type }

  IXMLCg_newparam_type = interface(IXML)
    ['{B7FFBBBF-B1D5-4BF2-9673-D846B10AC83A}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Semantic: UnicodeString;
    function Get_Modifier: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Bool2x1: UnicodeString;
    function Get_Bool2x2: UnicodeString;
    function Get_Bool2x3: UnicodeString;
    function Get_Bool2x4: UnicodeString;
    function Get_Bool3x1: UnicodeString;
    function Get_Bool3x2: UnicodeString;
    function Get_Bool3x3: UnicodeString;
    function Get_Bool3x4: UnicodeString;
    function Get_Bool4x1: UnicodeString;
    function Get_Bool4x2: UnicodeString;
    function Get_Bool4x3: UnicodeString;
    function Get_Bool4x4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Int2x1: UnicodeString;
    function Get_Int2x2: UnicodeString;
    function Get_Int2x3: UnicodeString;
    function Get_Int2x4: UnicodeString;
    function Get_Int3x1: UnicodeString;
    function Get_Int3x2: UnicodeString;
    function Get_Int3x3: UnicodeString;
    function Get_Int3x4: UnicodeString;
    function Get_Int4x1: UnicodeString;
    function Get_Int4x2: UnicodeString;
    function Get_Int4x3: UnicodeString;
    function Get_Int4x4: UnicodeString;
    function Get_Half: Double;
    function Get_Half2: UnicodeString;
    function Get_Half3: UnicodeString;
    function Get_Half4: UnicodeString;
    function Get_Half2x1: UnicodeString;
    function Get_Half2x2: UnicodeString;
    function Get_Half2x3: UnicodeString;
    function Get_Half2x4: UnicodeString;
    function Get_Half3x1: UnicodeString;
    function Get_Half3x2: UnicodeString;
    function Get_Half3x3: UnicodeString;
    function Get_Half3x4: UnicodeString;
    function Get_Half4x1: UnicodeString;
    function Get_Half4x2: UnicodeString;
    function Get_Half4x3: UnicodeString;
    function Get_Half4x4: UnicodeString;
    function Get_Fixed: Double;
    function Get_Fixed2: UnicodeString;
    function Get_Fixed3: UnicodeString;
    function Get_Fixed4: UnicodeString;
    function Get_Fixed2x1: UnicodeString;
    function Get_Fixed2x2: UnicodeString;
    function Get_Fixed2x3: UnicodeString;
    function Get_Fixed2x4: UnicodeString;
    function Get_Fixed3x1: UnicodeString;
    function Get_Fixed3x2: UnicodeString;
    function Get_Fixed3x3: UnicodeString;
    function Get_Fixed3x4: UnicodeString;
    function Get_Fixed4x1: UnicodeString;
    function Get_Fixed4x2: UnicodeString;
    function Get_Fixed4x3: UnicodeString;
    function Get_Fixed4x4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_String_: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLCg_array_type;
    function Get_Usertype: IXMLCg_user_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Modifier(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Bool2x1(Value: UnicodeString);
    procedure Set_Bool2x2(Value: UnicodeString);
    procedure Set_Bool2x3(Value: UnicodeString);
    procedure Set_Bool2x4(Value: UnicodeString);
    procedure Set_Bool3x1(Value: UnicodeString);
    procedure Set_Bool3x2(Value: UnicodeString);
    procedure Set_Bool3x3(Value: UnicodeString);
    procedure Set_Bool3x4(Value: UnicodeString);
    procedure Set_Bool4x1(Value: UnicodeString);
    procedure Set_Bool4x2(Value: UnicodeString);
    procedure Set_Bool4x3(Value: UnicodeString);
    procedure Set_Bool4x4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Int2x1(Value: UnicodeString);
    procedure Set_Int2x2(Value: UnicodeString);
    procedure Set_Int2x3(Value: UnicodeString);
    procedure Set_Int2x4(Value: UnicodeString);
    procedure Set_Int3x1(Value: UnicodeString);
    procedure Set_Int3x2(Value: UnicodeString);
    procedure Set_Int3x3(Value: UnicodeString);
    procedure Set_Int3x4(Value: UnicodeString);
    procedure Set_Int4x1(Value: UnicodeString);
    procedure Set_Int4x2(Value: UnicodeString);
    procedure Set_Int4x3(Value: UnicodeString);
    procedure Set_Int4x4(Value: UnicodeString);
    procedure Set_Half(Value: Double);
    procedure Set_Half2(Value: UnicodeString);
    procedure Set_Half3(Value: UnicodeString);
    procedure Set_Half4(Value: UnicodeString);
    procedure Set_Half2x1(Value: UnicodeString);
    procedure Set_Half2x2(Value: UnicodeString);
    procedure Set_Half2x3(Value: UnicodeString);
    procedure Set_Half2x4(Value: UnicodeString);
    procedure Set_Half3x1(Value: UnicodeString);
    procedure Set_Half3x2(Value: UnicodeString);
    procedure Set_Half3x3(Value: UnicodeString);
    procedure Set_Half3x4(Value: UnicodeString);
    procedure Set_Half4x1(Value: UnicodeString);
    procedure Set_Half4x2(Value: UnicodeString);
    procedure Set_Half4x3(Value: UnicodeString);
    procedure Set_Half4x4(Value: UnicodeString);
    procedure Set_Fixed(Value: Double);
    procedure Set_Fixed2(Value: UnicodeString);
    procedure Set_Fixed3(Value: UnicodeString);
    procedure Set_Fixed4(Value: UnicodeString);
    procedure Set_Fixed2x1(Value: UnicodeString);
    procedure Set_Fixed2x2(Value: UnicodeString);
    procedure Set_Fixed2x3(Value: UnicodeString);
    procedure Set_Fixed2x4(Value: UnicodeString);
    procedure Set_Fixed3x1(Value: UnicodeString);
    procedure Set_Fixed3x2(Value: UnicodeString);
    procedure Set_Fixed3x3(Value: UnicodeString);
    procedure Set_Fixed3x4(Value: UnicodeString);
    procedure Set_Fixed4x1(Value: UnicodeString);
    procedure Set_Fixed4x2(Value: UnicodeString);
    procedure Set_Fixed4x3(Value: UnicodeString);
    procedure Set_Fixed4x4(Value: UnicodeString);
    procedure Set_String_(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Modifier: UnicodeString read Get_Modifier write Set_Modifier;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bool2: UnicodeString read Get_Bool2 write Set_Bool2;
    property Bool3: UnicodeString read Get_Bool3 write Set_Bool3;
    property Bool4: UnicodeString read Get_Bool4 write Set_Bool4;
    property Bool2x1: UnicodeString read Get_Bool2x1 write Set_Bool2x1;
    property Bool2x2: UnicodeString read Get_Bool2x2 write Set_Bool2x2;
    property Bool2x3: UnicodeString read Get_Bool2x3 write Set_Bool2x3;
    property Bool2x4: UnicodeString read Get_Bool2x4 write Set_Bool2x4;
    property Bool3x1: UnicodeString read Get_Bool3x1 write Set_Bool3x1;
    property Bool3x2: UnicodeString read Get_Bool3x2 write Set_Bool3x2;
    property Bool3x3: UnicodeString read Get_Bool3x3 write Set_Bool3x3;
    property Bool3x4: UnicodeString read Get_Bool3x4 write Set_Bool3x4;
    property Bool4x1: UnicodeString read Get_Bool4x1 write Set_Bool4x1;
    property Bool4x2: UnicodeString read Get_Bool4x2 write Set_Bool4x2;
    property Bool4x3: UnicodeString read Get_Bool4x3 write Set_Bool4x3;
    property Bool4x4: UnicodeString read Get_Bool4x4 write Set_Bool4x4;
    property Float: Double read Get_Float write Set_Float;
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Float3: UnicodeString read Get_Float3 write Set_Float3;
    property Float4: UnicodeString read Get_Float4 write Set_Float4;
    property Float2x1: UnicodeString read Get_Float2x1 write Set_Float2x1;
    property Float2x2: UnicodeString read Get_Float2x2 write Set_Float2x2;
    property Float2x3: UnicodeString read Get_Float2x3 write Set_Float2x3;
    property Float2x4: UnicodeString read Get_Float2x4 write Set_Float2x4;
    property Float3x1: UnicodeString read Get_Float3x1 write Set_Float3x1;
    property Float3x2: UnicodeString read Get_Float3x2 write Set_Float3x2;
    property Float3x3: UnicodeString read Get_Float3x3 write Set_Float3x3;
    property Float3x4: UnicodeString read Get_Float3x4 write Set_Float3x4;
    property Float4x1: UnicodeString read Get_Float4x1 write Set_Float4x1;
    property Float4x2: UnicodeString read Get_Float4x2 write Set_Float4x2;
    property Float4x3: UnicodeString read Get_Float4x3 write Set_Float4x3;
    property Float4x4: UnicodeString read Get_Float4x4 write Set_Float4x4;
    property Int: Int64 read Get_Int write Set_Int;
    property Int2: UnicodeString read Get_Int2 write Set_Int2;
    property Int3: UnicodeString read Get_Int3 write Set_Int3;
    property Int4: UnicodeString read Get_Int4 write Set_Int4;
    property Int2x1: UnicodeString read Get_Int2x1 write Set_Int2x1;
    property Int2x2: UnicodeString read Get_Int2x2 write Set_Int2x2;
    property Int2x3: UnicodeString read Get_Int2x3 write Set_Int2x3;
    property Int2x4: UnicodeString read Get_Int2x4 write Set_Int2x4;
    property Int3x1: UnicodeString read Get_Int3x1 write Set_Int3x1;
    property Int3x2: UnicodeString read Get_Int3x2 write Set_Int3x2;
    property Int3x3: UnicodeString read Get_Int3x3 write Set_Int3x3;
    property Int3x4: UnicodeString read Get_Int3x4 write Set_Int3x4;
    property Int4x1: UnicodeString read Get_Int4x1 write Set_Int4x1;
    property Int4x2: UnicodeString read Get_Int4x2 write Set_Int4x2;
    property Int4x3: UnicodeString read Get_Int4x3 write Set_Int4x3;
    property Int4x4: UnicodeString read Get_Int4x4 write Set_Int4x4;
    property Half: Double read Get_Half write Set_Half;
    property Half2: UnicodeString read Get_Half2 write Set_Half2;
    property Half3: UnicodeString read Get_Half3 write Set_Half3;
    property Half4: UnicodeString read Get_Half4 write Set_Half4;
    property Half2x1: UnicodeString read Get_Half2x1 write Set_Half2x1;
    property Half2x2: UnicodeString read Get_Half2x2 write Set_Half2x2;
    property Half2x3: UnicodeString read Get_Half2x3 write Set_Half2x3;
    property Half2x4: UnicodeString read Get_Half2x4 write Set_Half2x4;
    property Half3x1: UnicodeString read Get_Half3x1 write Set_Half3x1;
    property Half3x2: UnicodeString read Get_Half3x2 write Set_Half3x2;
    property Half3x3: UnicodeString read Get_Half3x3 write Set_Half3x3;
    property Half3x4: UnicodeString read Get_Half3x4 write Set_Half3x4;
    property Half4x1: UnicodeString read Get_Half4x1 write Set_Half4x1;
    property Half4x2: UnicodeString read Get_Half4x2 write Set_Half4x2;
    property Half4x3: UnicodeString read Get_Half4x3 write Set_Half4x3;
    property Half4x4: UnicodeString read Get_Half4x4 write Set_Half4x4;
    property Fixed: Double read Get_Fixed write Set_Fixed;
    property Fixed2: UnicodeString read Get_Fixed2 write Set_Fixed2;
    property Fixed3: UnicodeString read Get_Fixed3 write Set_Fixed3;
    property Fixed4: UnicodeString read Get_Fixed4 write Set_Fixed4;
    property Fixed2x1: UnicodeString read Get_Fixed2x1 write Set_Fixed2x1;
    property Fixed2x2: UnicodeString read Get_Fixed2x2 write Set_Fixed2x2;
    property Fixed2x3: UnicodeString read Get_Fixed2x3 write Set_Fixed2x3;
    property Fixed2x4: UnicodeString read Get_Fixed2x4 write Set_Fixed2x4;
    property Fixed3x1: UnicodeString read Get_Fixed3x1 write Set_Fixed3x1;
    property Fixed3x2: UnicodeString read Get_Fixed3x2 write Set_Fixed3x2;
    property Fixed3x3: UnicodeString read Get_Fixed3x3 write Set_Fixed3x3;
    property Fixed3x4: UnicodeString read Get_Fixed3x4 write Set_Fixed3x4;
    property Fixed4x1: UnicodeString read Get_Fixed4x1 write Set_Fixed4x1;
    property Fixed4x2: UnicodeString read Get_Fixed4x2 write Set_Fixed4x2;
    property Fixed4x3: UnicodeString read Get_Fixed4x3 write Set_Fixed4x3;
    property Fixed4x4: UnicodeString read Get_Fixed4x4 write Set_Fixed4x4;
    property Sampler1D: IXMLFx_sampler1D_type read Get_Sampler1D;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
    property Sampler3D: IXMLFx_sampler3D_type read Get_Sampler3D;
    property SamplerRECT: IXMLFx_samplerRECT_type read Get_SamplerRECT;
    property SamplerCUBE: IXMLFx_samplerCUBE_type read Get_SamplerCUBE;
    property SamplerDEPTH: IXMLFx_samplerDEPTH_type read Get_SamplerDEPTH;
    property String_: UnicodeString read Get_String_ write Set_String_;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
    property Array_: IXMLCg_array_type read Get_Array_;
    property Usertype: IXMLCg_user_type read Get_Usertype;
  end;

{ IXMLCg_newparam_typeList }

  IXMLCg_newparam_typeList = interface(IXMLFilter)
    ['{291DE285-B968-4BC2-8F93-1684386D0551}']
    { Methods & Properties }
    function Add: IXMLCg_newparam_type;
    function Insert(const Index: Integer): IXMLCg_newparam_type;

    function Get_Item(Index: Integer): IXMLCg_newparam_type;
    property Items[Index: Integer]: IXMLCg_newparam_type read Get_Item; default;
  end;

{ IXMLCg_array_type }

  IXMLCg_array_type = interface(IXML)
    ['{722C7EE0-6D1E-4526-8C2C-AE01A2AE4409}']
    { Property Accessors }
    function Get_Length: LongWord;
    function Get_Resizable: Boolean;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Bool2x1: UnicodeString;
    function Get_Bool2x2: UnicodeString;
    function Get_Bool2x3: UnicodeString;
    function Get_Bool2x4: UnicodeString;
    function Get_Bool3x1: UnicodeString;
    function Get_Bool3x2: UnicodeString;
    function Get_Bool3x3: UnicodeString;
    function Get_Bool3x4: UnicodeString;
    function Get_Bool4x1: UnicodeString;
    function Get_Bool4x2: UnicodeString;
    function Get_Bool4x3: UnicodeString;
    function Get_Bool4x4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Int2x1: UnicodeString;
    function Get_Int2x2: UnicodeString;
    function Get_Int2x3: UnicodeString;
    function Get_Int2x4: UnicodeString;
    function Get_Int3x1: UnicodeString;
    function Get_Int3x2: UnicodeString;
    function Get_Int3x3: UnicodeString;
    function Get_Int3x4: UnicodeString;
    function Get_Int4x1: UnicodeString;
    function Get_Int4x2: UnicodeString;
    function Get_Int4x3: UnicodeString;
    function Get_Int4x4: UnicodeString;
    function Get_Half: Double;
    function Get_Half2: UnicodeString;
    function Get_Half3: UnicodeString;
    function Get_Half4: UnicodeString;
    function Get_Half2x1: UnicodeString;
    function Get_Half2x2: UnicodeString;
    function Get_Half2x3: UnicodeString;
    function Get_Half2x4: UnicodeString;
    function Get_Half3x1: UnicodeString;
    function Get_Half3x2: UnicodeString;
    function Get_Half3x3: UnicodeString;
    function Get_Half3x4: UnicodeString;
    function Get_Half4x1: UnicodeString;
    function Get_Half4x2: UnicodeString;
    function Get_Half4x3: UnicodeString;
    function Get_Half4x4: UnicodeString;
    function Get_Fixed: Double;
    function Get_Fixed2: UnicodeString;
    function Get_Fixed3: UnicodeString;
    function Get_Fixed4: UnicodeString;
    function Get_Fixed2x1: UnicodeString;
    function Get_Fixed2x2: UnicodeString;
    function Get_Fixed2x3: UnicodeString;
    function Get_Fixed2x4: UnicodeString;
    function Get_Fixed3x1: UnicodeString;
    function Get_Fixed3x2: UnicodeString;
    function Get_Fixed3x3: UnicodeString;
    function Get_Fixed3x4: UnicodeString;
    function Get_Fixed4x1: UnicodeString;
    function Get_Fixed4x2: UnicodeString;
    function Get_Fixed4x3: UnicodeString;
    function Get_Fixed4x4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_String_: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLCg_array_type;
    function Get_Usertype: IXMLCg_user_type;
    procedure Set_Length(Value: LongWord);
    procedure Set_Resizable(Value: Boolean);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Bool2x1(Value: UnicodeString);
    procedure Set_Bool2x2(Value: UnicodeString);
    procedure Set_Bool2x3(Value: UnicodeString);
    procedure Set_Bool2x4(Value: UnicodeString);
    procedure Set_Bool3x1(Value: UnicodeString);
    procedure Set_Bool3x2(Value: UnicodeString);
    procedure Set_Bool3x3(Value: UnicodeString);
    procedure Set_Bool3x4(Value: UnicodeString);
    procedure Set_Bool4x1(Value: UnicodeString);
    procedure Set_Bool4x2(Value: UnicodeString);
    procedure Set_Bool4x3(Value: UnicodeString);
    procedure Set_Bool4x4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Int2x1(Value: UnicodeString);
    procedure Set_Int2x2(Value: UnicodeString);
    procedure Set_Int2x3(Value: UnicodeString);
    procedure Set_Int2x4(Value: UnicodeString);
    procedure Set_Int3x1(Value: UnicodeString);
    procedure Set_Int3x2(Value: UnicodeString);
    procedure Set_Int3x3(Value: UnicodeString);
    procedure Set_Int3x4(Value: UnicodeString);
    procedure Set_Int4x1(Value: UnicodeString);
    procedure Set_Int4x2(Value: UnicodeString);
    procedure Set_Int4x3(Value: UnicodeString);
    procedure Set_Int4x4(Value: UnicodeString);
    procedure Set_Half(Value: Double);
    procedure Set_Half2(Value: UnicodeString);
    procedure Set_Half3(Value: UnicodeString);
    procedure Set_Half4(Value: UnicodeString);
    procedure Set_Half2x1(Value: UnicodeString);
    procedure Set_Half2x2(Value: UnicodeString);
    procedure Set_Half2x3(Value: UnicodeString);
    procedure Set_Half2x4(Value: UnicodeString);
    procedure Set_Half3x1(Value: UnicodeString);
    procedure Set_Half3x2(Value: UnicodeString);
    procedure Set_Half3x3(Value: UnicodeString);
    procedure Set_Half3x4(Value: UnicodeString);
    procedure Set_Half4x1(Value: UnicodeString);
    procedure Set_Half4x2(Value: UnicodeString);
    procedure Set_Half4x3(Value: UnicodeString);
    procedure Set_Half4x4(Value: UnicodeString);
    procedure Set_Fixed(Value: Double);
    procedure Set_Fixed2(Value: UnicodeString);
    procedure Set_Fixed3(Value: UnicodeString);
    procedure Set_Fixed4(Value: UnicodeString);
    procedure Set_Fixed2x1(Value: UnicodeString);
    procedure Set_Fixed2x2(Value: UnicodeString);
    procedure Set_Fixed2x3(Value: UnicodeString);
    procedure Set_Fixed2x4(Value: UnicodeString);
    procedure Set_Fixed3x1(Value: UnicodeString);
    procedure Set_Fixed3x2(Value: UnicodeString);
    procedure Set_Fixed3x3(Value: UnicodeString);
    procedure Set_Fixed3x4(Value: UnicodeString);
    procedure Set_Fixed4x1(Value: UnicodeString);
    procedure Set_Fixed4x2(Value: UnicodeString);
    procedure Set_Fixed4x3(Value: UnicodeString);
    procedure Set_Fixed4x4(Value: UnicodeString);
    procedure Set_String_(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Length: LongWord read Get_Length write Set_Length;
    property Resizable: Boolean read Get_Resizable write Set_Resizable;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bool2: UnicodeString read Get_Bool2 write Set_Bool2;
    property Bool3: UnicodeString read Get_Bool3 write Set_Bool3;
    property Bool4: UnicodeString read Get_Bool4 write Set_Bool4;
    property Bool2x1: UnicodeString read Get_Bool2x1 write Set_Bool2x1;
    property Bool2x2: UnicodeString read Get_Bool2x2 write Set_Bool2x2;
    property Bool2x3: UnicodeString read Get_Bool2x3 write Set_Bool2x3;
    property Bool2x4: UnicodeString read Get_Bool2x4 write Set_Bool2x4;
    property Bool3x1: UnicodeString read Get_Bool3x1 write Set_Bool3x1;
    property Bool3x2: UnicodeString read Get_Bool3x2 write Set_Bool3x2;
    property Bool3x3: UnicodeString read Get_Bool3x3 write Set_Bool3x3;
    property Bool3x4: UnicodeString read Get_Bool3x4 write Set_Bool3x4;
    property Bool4x1: UnicodeString read Get_Bool4x1 write Set_Bool4x1;
    property Bool4x2: UnicodeString read Get_Bool4x2 write Set_Bool4x2;
    property Bool4x3: UnicodeString read Get_Bool4x3 write Set_Bool4x3;
    property Bool4x4: UnicodeString read Get_Bool4x4 write Set_Bool4x4;
    property Float: Double read Get_Float write Set_Float;
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Float3: UnicodeString read Get_Float3 write Set_Float3;
    property Float4: UnicodeString read Get_Float4 write Set_Float4;
    property Float2x1: UnicodeString read Get_Float2x1 write Set_Float2x1;
    property Float2x2: UnicodeString read Get_Float2x2 write Set_Float2x2;
    property Float2x3: UnicodeString read Get_Float2x3 write Set_Float2x3;
    property Float2x4: UnicodeString read Get_Float2x4 write Set_Float2x4;
    property Float3x1: UnicodeString read Get_Float3x1 write Set_Float3x1;
    property Float3x2: UnicodeString read Get_Float3x2 write Set_Float3x2;
    property Float3x3: UnicodeString read Get_Float3x3 write Set_Float3x3;
    property Float3x4: UnicodeString read Get_Float3x4 write Set_Float3x4;
    property Float4x1: UnicodeString read Get_Float4x1 write Set_Float4x1;
    property Float4x2: UnicodeString read Get_Float4x2 write Set_Float4x2;
    property Float4x3: UnicodeString read Get_Float4x3 write Set_Float4x3;
    property Float4x4: UnicodeString read Get_Float4x4 write Set_Float4x4;
    property Int: Int64 read Get_Int write Set_Int;
    property Int2: UnicodeString read Get_Int2 write Set_Int2;
    property Int3: UnicodeString read Get_Int3 write Set_Int3;
    property Int4: UnicodeString read Get_Int4 write Set_Int4;
    property Int2x1: UnicodeString read Get_Int2x1 write Set_Int2x1;
    property Int2x2: UnicodeString read Get_Int2x2 write Set_Int2x2;
    property Int2x3: UnicodeString read Get_Int2x3 write Set_Int2x3;
    property Int2x4: UnicodeString read Get_Int2x4 write Set_Int2x4;
    property Int3x1: UnicodeString read Get_Int3x1 write Set_Int3x1;
    property Int3x2: UnicodeString read Get_Int3x2 write Set_Int3x2;
    property Int3x3: UnicodeString read Get_Int3x3 write Set_Int3x3;
    property Int3x4: UnicodeString read Get_Int3x4 write Set_Int3x4;
    property Int4x1: UnicodeString read Get_Int4x1 write Set_Int4x1;
    property Int4x2: UnicodeString read Get_Int4x2 write Set_Int4x2;
    property Int4x3: UnicodeString read Get_Int4x3 write Set_Int4x3;
    property Int4x4: UnicodeString read Get_Int4x4 write Set_Int4x4;
    property Half: Double read Get_Half write Set_Half;
    property Half2: UnicodeString read Get_Half2 write Set_Half2;
    property Half3: UnicodeString read Get_Half3 write Set_Half3;
    property Half4: UnicodeString read Get_Half4 write Set_Half4;
    property Half2x1: UnicodeString read Get_Half2x1 write Set_Half2x1;
    property Half2x2: UnicodeString read Get_Half2x2 write Set_Half2x2;
    property Half2x3: UnicodeString read Get_Half2x3 write Set_Half2x3;
    property Half2x4: UnicodeString read Get_Half2x4 write Set_Half2x4;
    property Half3x1: UnicodeString read Get_Half3x1 write Set_Half3x1;
    property Half3x2: UnicodeString read Get_Half3x2 write Set_Half3x2;
    property Half3x3: UnicodeString read Get_Half3x3 write Set_Half3x3;
    property Half3x4: UnicodeString read Get_Half3x4 write Set_Half3x4;
    property Half4x1: UnicodeString read Get_Half4x1 write Set_Half4x1;
    property Half4x2: UnicodeString read Get_Half4x2 write Set_Half4x2;
    property Half4x3: UnicodeString read Get_Half4x3 write Set_Half4x3;
    property Half4x4: UnicodeString read Get_Half4x4 write Set_Half4x4;
    property Fixed: Double read Get_Fixed write Set_Fixed;
    property Fixed2: UnicodeString read Get_Fixed2 write Set_Fixed2;
    property Fixed3: UnicodeString read Get_Fixed3 write Set_Fixed3;
    property Fixed4: UnicodeString read Get_Fixed4 write Set_Fixed4;
    property Fixed2x1: UnicodeString read Get_Fixed2x1 write Set_Fixed2x1;
    property Fixed2x2: UnicodeString read Get_Fixed2x2 write Set_Fixed2x2;
    property Fixed2x3: UnicodeString read Get_Fixed2x3 write Set_Fixed2x3;
    property Fixed2x4: UnicodeString read Get_Fixed2x4 write Set_Fixed2x4;
    property Fixed3x1: UnicodeString read Get_Fixed3x1 write Set_Fixed3x1;
    property Fixed3x2: UnicodeString read Get_Fixed3x2 write Set_Fixed3x2;
    property Fixed3x3: UnicodeString read Get_Fixed3x3 write Set_Fixed3x3;
    property Fixed3x4: UnicodeString read Get_Fixed3x4 write Set_Fixed3x4;
    property Fixed4x1: UnicodeString read Get_Fixed4x1 write Set_Fixed4x1;
    property Fixed4x2: UnicodeString read Get_Fixed4x2 write Set_Fixed4x2;
    property Fixed4x3: UnicodeString read Get_Fixed4x3 write Set_Fixed4x3;
    property Fixed4x4: UnicodeString read Get_Fixed4x4 write Set_Fixed4x4;
    property Sampler1D: IXMLFx_sampler1D_type read Get_Sampler1D;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
    property Sampler3D: IXMLFx_sampler3D_type read Get_Sampler3D;
    property SamplerRECT: IXMLFx_samplerRECT_type read Get_SamplerRECT;
    property SamplerCUBE: IXMLFx_samplerCUBE_type read Get_SamplerCUBE;
    property SamplerDEPTH: IXMLFx_samplerDEPTH_type read Get_SamplerDEPTH;
    property String_: UnicodeString read Get_String_ write Set_String_;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
    property Array_: IXMLCg_array_type read Get_Array_;
    property Usertype: IXMLCg_user_type read Get_Usertype;
  end;

{ IXMLCg_user_type }

  IXMLCg_user_type = interface(IXMLFilter)
    ['{CDEA4C31-C2D5-4BB6-AF5D-F43A97E1D0E3}']
    { Property Accessors }
    function Get_Typename: UnicodeString;
    function Get_Source: UnicodeString;
    function Get_Setparam(Index: Integer): IXMLCg_setparam_type;
    procedure Set_Typename(Value: UnicodeString);
    procedure Set_Source(Value: UnicodeString);
    { Methods & Properties }
    function Add: IXMLCg_setparam_type;
    function Insert(const Index: Integer): IXMLCg_setparam_type;
    property Typename: UnicodeString read Get_Typename write Set_Typename;
    property Source: UnicodeString read Get_Source write Set_Source;
    property Setparam[Index: Integer]: IXMLCg_setparam_type read Get_Setparam; default;
  end;

{ IXMLCg_setparam_type }

  IXMLCg_setparam_type = interface(IXML)
    ['{4EC7104E-4FD9-4CEB-81C1-C6A936A5DA3A}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Bool2x1: UnicodeString;
    function Get_Bool2x2: UnicodeString;
    function Get_Bool2x3: UnicodeString;
    function Get_Bool2x4: UnicodeString;
    function Get_Bool3x1: UnicodeString;
    function Get_Bool3x2: UnicodeString;
    function Get_Bool3x3: UnicodeString;
    function Get_Bool3x4: UnicodeString;
    function Get_Bool4x1: UnicodeString;
    function Get_Bool4x2: UnicodeString;
    function Get_Bool4x3: UnicodeString;
    function Get_Bool4x4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Int2x1: UnicodeString;
    function Get_Int2x2: UnicodeString;
    function Get_Int2x3: UnicodeString;
    function Get_Int2x4: UnicodeString;
    function Get_Int3x1: UnicodeString;
    function Get_Int3x2: UnicodeString;
    function Get_Int3x3: UnicodeString;
    function Get_Int3x4: UnicodeString;
    function Get_Int4x1: UnicodeString;
    function Get_Int4x2: UnicodeString;
    function Get_Int4x3: UnicodeString;
    function Get_Int4x4: UnicodeString;
    function Get_Half: Double;
    function Get_Half2: UnicodeString;
    function Get_Half3: UnicodeString;
    function Get_Half4: UnicodeString;
    function Get_Half2x1: UnicodeString;
    function Get_Half2x2: UnicodeString;
    function Get_Half2x3: UnicodeString;
    function Get_Half2x4: UnicodeString;
    function Get_Half3x1: UnicodeString;
    function Get_Half3x2: UnicodeString;
    function Get_Half3x3: UnicodeString;
    function Get_Half3x4: UnicodeString;
    function Get_Half4x1: UnicodeString;
    function Get_Half4x2: UnicodeString;
    function Get_Half4x3: UnicodeString;
    function Get_Half4x4: UnicodeString;
    function Get_Fixed: Double;
    function Get_Fixed2: UnicodeString;
    function Get_Fixed3: UnicodeString;
    function Get_Fixed4: UnicodeString;
    function Get_Fixed2x1: UnicodeString;
    function Get_Fixed2x2: UnicodeString;
    function Get_Fixed2x3: UnicodeString;
    function Get_Fixed2x4: UnicodeString;
    function Get_Fixed3x1: UnicodeString;
    function Get_Fixed3x2: UnicodeString;
    function Get_Fixed3x3: UnicodeString;
    function Get_Fixed3x4: UnicodeString;
    function Get_Fixed4x1: UnicodeString;
    function Get_Fixed4x2: UnicodeString;
    function Get_Fixed4x3: UnicodeString;
    function Get_Fixed4x4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_String_: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLCg_array_type;
    function Get_Usertype: IXMLCg_user_type;
    procedure Set_Ref(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Bool2x1(Value: UnicodeString);
    procedure Set_Bool2x2(Value: UnicodeString);
    procedure Set_Bool2x3(Value: UnicodeString);
    procedure Set_Bool2x4(Value: UnicodeString);
    procedure Set_Bool3x1(Value: UnicodeString);
    procedure Set_Bool3x2(Value: UnicodeString);
    procedure Set_Bool3x3(Value: UnicodeString);
    procedure Set_Bool3x4(Value: UnicodeString);
    procedure Set_Bool4x1(Value: UnicodeString);
    procedure Set_Bool4x2(Value: UnicodeString);
    procedure Set_Bool4x3(Value: UnicodeString);
    procedure Set_Bool4x4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Int2x1(Value: UnicodeString);
    procedure Set_Int2x2(Value: UnicodeString);
    procedure Set_Int2x3(Value: UnicodeString);
    procedure Set_Int2x4(Value: UnicodeString);
    procedure Set_Int3x1(Value: UnicodeString);
    procedure Set_Int3x2(Value: UnicodeString);
    procedure Set_Int3x3(Value: UnicodeString);
    procedure Set_Int3x4(Value: UnicodeString);
    procedure Set_Int4x1(Value: UnicodeString);
    procedure Set_Int4x2(Value: UnicodeString);
    procedure Set_Int4x3(Value: UnicodeString);
    procedure Set_Int4x4(Value: UnicodeString);
    procedure Set_Half(Value: Double);
    procedure Set_Half2(Value: UnicodeString);
    procedure Set_Half3(Value: UnicodeString);
    procedure Set_Half4(Value: UnicodeString);
    procedure Set_Half2x1(Value: UnicodeString);
    procedure Set_Half2x2(Value: UnicodeString);
    procedure Set_Half2x3(Value: UnicodeString);
    procedure Set_Half2x4(Value: UnicodeString);
    procedure Set_Half3x1(Value: UnicodeString);
    procedure Set_Half3x2(Value: UnicodeString);
    procedure Set_Half3x3(Value: UnicodeString);
    procedure Set_Half3x4(Value: UnicodeString);
    procedure Set_Half4x1(Value: UnicodeString);
    procedure Set_Half4x2(Value: UnicodeString);
    procedure Set_Half4x3(Value: UnicodeString);
    procedure Set_Half4x4(Value: UnicodeString);
    procedure Set_Fixed(Value: Double);
    procedure Set_Fixed2(Value: UnicodeString);
    procedure Set_Fixed3(Value: UnicodeString);
    procedure Set_Fixed4(Value: UnicodeString);
    procedure Set_Fixed2x1(Value: UnicodeString);
    procedure Set_Fixed2x2(Value: UnicodeString);
    procedure Set_Fixed2x3(Value: UnicodeString);
    procedure Set_Fixed2x4(Value: UnicodeString);
    procedure Set_Fixed3x1(Value: UnicodeString);
    procedure Set_Fixed3x2(Value: UnicodeString);
    procedure Set_Fixed3x3(Value: UnicodeString);
    procedure Set_Fixed3x4(Value: UnicodeString);
    procedure Set_Fixed4x1(Value: UnicodeString);
    procedure Set_Fixed4x2(Value: UnicodeString);
    procedure Set_Fixed4x3(Value: UnicodeString);
    procedure Set_Fixed4x4(Value: UnicodeString);
    procedure Set_String_(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bool2: UnicodeString read Get_Bool2 write Set_Bool2;
    property Bool3: UnicodeString read Get_Bool3 write Set_Bool3;
    property Bool4: UnicodeString read Get_Bool4 write Set_Bool4;
    property Bool2x1: UnicodeString read Get_Bool2x1 write Set_Bool2x1;
    property Bool2x2: UnicodeString read Get_Bool2x2 write Set_Bool2x2;
    property Bool2x3: UnicodeString read Get_Bool2x3 write Set_Bool2x3;
    property Bool2x4: UnicodeString read Get_Bool2x4 write Set_Bool2x4;
    property Bool3x1: UnicodeString read Get_Bool3x1 write Set_Bool3x1;
    property Bool3x2: UnicodeString read Get_Bool3x2 write Set_Bool3x2;
    property Bool3x3: UnicodeString read Get_Bool3x3 write Set_Bool3x3;
    property Bool3x4: UnicodeString read Get_Bool3x4 write Set_Bool3x4;
    property Bool4x1: UnicodeString read Get_Bool4x1 write Set_Bool4x1;
    property Bool4x2: UnicodeString read Get_Bool4x2 write Set_Bool4x2;
    property Bool4x3: UnicodeString read Get_Bool4x3 write Set_Bool4x3;
    property Bool4x4: UnicodeString read Get_Bool4x4 write Set_Bool4x4;
    property Float: Double read Get_Float write Set_Float;
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Float3: UnicodeString read Get_Float3 write Set_Float3;
    property Float4: UnicodeString read Get_Float4 write Set_Float4;
    property Float2x1: UnicodeString read Get_Float2x1 write Set_Float2x1;
    property Float2x2: UnicodeString read Get_Float2x2 write Set_Float2x2;
    property Float2x3: UnicodeString read Get_Float2x3 write Set_Float2x3;
    property Float2x4: UnicodeString read Get_Float2x4 write Set_Float2x4;
    property Float3x1: UnicodeString read Get_Float3x1 write Set_Float3x1;
    property Float3x2: UnicodeString read Get_Float3x2 write Set_Float3x2;
    property Float3x3: UnicodeString read Get_Float3x3 write Set_Float3x3;
    property Float3x4: UnicodeString read Get_Float3x4 write Set_Float3x4;
    property Float4x1: UnicodeString read Get_Float4x1 write Set_Float4x1;
    property Float4x2: UnicodeString read Get_Float4x2 write Set_Float4x2;
    property Float4x3: UnicodeString read Get_Float4x3 write Set_Float4x3;
    property Float4x4: UnicodeString read Get_Float4x4 write Set_Float4x4;
    property Int: Int64 read Get_Int write Set_Int;
    property Int2: UnicodeString read Get_Int2 write Set_Int2;
    property Int3: UnicodeString read Get_Int3 write Set_Int3;
    property Int4: UnicodeString read Get_Int4 write Set_Int4;
    property Int2x1: UnicodeString read Get_Int2x1 write Set_Int2x1;
    property Int2x2: UnicodeString read Get_Int2x2 write Set_Int2x2;
    property Int2x3: UnicodeString read Get_Int2x3 write Set_Int2x3;
    property Int2x4: UnicodeString read Get_Int2x4 write Set_Int2x4;
    property Int3x1: UnicodeString read Get_Int3x1 write Set_Int3x1;
    property Int3x2: UnicodeString read Get_Int3x2 write Set_Int3x2;
    property Int3x3: UnicodeString read Get_Int3x3 write Set_Int3x3;
    property Int3x4: UnicodeString read Get_Int3x4 write Set_Int3x4;
    property Int4x1: UnicodeString read Get_Int4x1 write Set_Int4x1;
    property Int4x2: UnicodeString read Get_Int4x2 write Set_Int4x2;
    property Int4x3: UnicodeString read Get_Int4x3 write Set_Int4x3;
    property Int4x4: UnicodeString read Get_Int4x4 write Set_Int4x4;
    property Half: Double read Get_Half write Set_Half;
    property Half2: UnicodeString read Get_Half2 write Set_Half2;
    property Half3: UnicodeString read Get_Half3 write Set_Half3;
    property Half4: UnicodeString read Get_Half4 write Set_Half4;
    property Half2x1: UnicodeString read Get_Half2x1 write Set_Half2x1;
    property Half2x2: UnicodeString read Get_Half2x2 write Set_Half2x2;
    property Half2x3: UnicodeString read Get_Half2x3 write Set_Half2x3;
    property Half2x4: UnicodeString read Get_Half2x4 write Set_Half2x4;
    property Half3x1: UnicodeString read Get_Half3x1 write Set_Half3x1;
    property Half3x2: UnicodeString read Get_Half3x2 write Set_Half3x2;
    property Half3x3: UnicodeString read Get_Half3x3 write Set_Half3x3;
    property Half3x4: UnicodeString read Get_Half3x4 write Set_Half3x4;
    property Half4x1: UnicodeString read Get_Half4x1 write Set_Half4x1;
    property Half4x2: UnicodeString read Get_Half4x2 write Set_Half4x2;
    property Half4x3: UnicodeString read Get_Half4x3 write Set_Half4x3;
    property Half4x4: UnicodeString read Get_Half4x4 write Set_Half4x4;
    property Fixed: Double read Get_Fixed write Set_Fixed;
    property Fixed2: UnicodeString read Get_Fixed2 write Set_Fixed2;
    property Fixed3: UnicodeString read Get_Fixed3 write Set_Fixed3;
    property Fixed4: UnicodeString read Get_Fixed4 write Set_Fixed4;
    property Fixed2x1: UnicodeString read Get_Fixed2x1 write Set_Fixed2x1;
    property Fixed2x2: UnicodeString read Get_Fixed2x2 write Set_Fixed2x2;
    property Fixed2x3: UnicodeString read Get_Fixed2x3 write Set_Fixed2x3;
    property Fixed2x4: UnicodeString read Get_Fixed2x4 write Set_Fixed2x4;
    property Fixed3x1: UnicodeString read Get_Fixed3x1 write Set_Fixed3x1;
    property Fixed3x2: UnicodeString read Get_Fixed3x2 write Set_Fixed3x2;
    property Fixed3x3: UnicodeString read Get_Fixed3x3 write Set_Fixed3x3;
    property Fixed3x4: UnicodeString read Get_Fixed3x4 write Set_Fixed3x4;
    property Fixed4x1: UnicodeString read Get_Fixed4x1 write Set_Fixed4x1;
    property Fixed4x2: UnicodeString read Get_Fixed4x2 write Set_Fixed4x2;
    property Fixed4x3: UnicodeString read Get_Fixed4x3 write Set_Fixed4x3;
    property Fixed4x4: UnicodeString read Get_Fixed4x4 write Set_Fixed4x4;
    property Sampler1D: IXMLFx_sampler1D_type read Get_Sampler1D;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
    property Sampler3D: IXMLFx_sampler3D_type read Get_Sampler3D;
    property SamplerRECT: IXMLFx_samplerRECT_type read Get_SamplerRECT;
    property SamplerCUBE: IXMLFx_samplerCUBE_type read Get_SamplerCUBE;
    property SamplerDEPTH: IXMLFx_samplerDEPTH_type read Get_SamplerDEPTH;
    property String_: UnicodeString read Get_String_ write Set_String_;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
    property Array_: IXMLCg_array_type read Get_Array_;
    property Usertype: IXMLCg_user_type read Get_Usertype;
  end;

{ IXMLProfile_cg_type_technique }

  IXMLProfile_cg_type_technique = interface(IXML)
    ['{AF7CD944-FE24-419E-BDAF-CBF66B887FDF}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Pass: IXMLCg_pass_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Asset: IXMLAsset_type read Get_Asset;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property Pass: IXMLCg_pass_typeList read Get_Pass;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLProfile_cg_type_techniqueList }

  IXMLProfile_cg_type_techniqueList = interface(IXMLFilter)
    ['{B33EF92E-9251-4C2B-80CF-A5EDEA8732B2}']
    { Methods & Properties }
    function Add: IXMLProfile_cg_type_technique;
    function Insert(const Index: Integer): IXMLProfile_cg_type_technique;

    function Get_Item(Index: Integer): IXMLProfile_cg_type_technique;
    property Items[Index: Integer]: IXMLProfile_cg_type_technique read Get_Item; default;
  end;

{ IXMLCg_pass_type }

  IXMLCg_pass_type = interface(IXML)
    ['{5E68643B-711D-47F9-8663-138359C848BE}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_States: IXMLCg_pass_type_states;
    function Get_Program_: IXMLCg_pass_type_program;
    function Get_Evaluate: IXMLCg_pass_type_evaluate;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property States: IXMLCg_pass_type_states read Get_States;
    property Program_: IXMLCg_pass_type_program read Get_Program_;
    property Evaluate: IXMLCg_pass_type_evaluate read Get_Evaluate;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLCg_pass_typeList }

  IXMLCg_pass_typeList = interface(IXMLFilter)
    ['{2061889B-8C77-4273-BC7D-468BC52F4FA5}']
    { Methods & Properties }
    function Add: IXMLCg_pass_type;
    function Insert(const Index: Integer): IXMLCg_pass_type;

    function Get_Item(Index: Integer): IXMLCg_pass_type;
    property Items[Index: Integer]: IXMLCg_pass_type read Get_Item; default;
  end;

{ IXMLCg_pass_type_states }

  IXMLCg_pass_type_states = interface(IXML)
    ['{DCE713C8-FF4D-46EC-9B29-13AE6BD28018}']
    { Property Accessors }
    function Get_Alpha_func: IXMLAlpha_func;
    function Get_Blend_func: IXMLBlend_func;
    function Get_Blend_func_separate: IXMLBlend_func_separate;
    function Get_Blend_equation: IXMLBlend_equation;
    function Get_Blend_equation_separate: IXMLBlend_equation_separate;
    function Get_Color_material: IXMLColor_material;
    function Get_Cull_face: IXMLCull_face;
    function Get_Depth_func: IXMLDepth_func;
    function Get_Fog_mode: IXMLFog_mode;
    function Get_Fog_coord_src: IXMLFog_coord_src;
    function Get_Front_face: IXMLFront_face;
    function Get_Light_model_color_control: IXMLLight_model_color_control;
    function Get_Logic_op: IXMLLogic_op;
    function Get_Polygon_mode: IXMLPolygon_mode;
    function Get_Shade_model: IXMLShade_model;
    function Get_Stencil_func: IXMLStencil_func;
    function Get_Stencil_op: IXMLStencil_op;
    function Get_Stencil_func_separate: IXMLStencil_func_separate;
    function Get_Stencil_op_separate: IXMLStencil_op_separate;
    function Get_Stencil_mask_separate: IXMLStencil_mask_separate;
    function Get_Light_enable: IXMLLight_enable;
    function Get_Light_ambient: IXMLLight_ambient;
    function Get_Light_diffuse: IXMLLight_diffuse;
    function Get_Light_specular: IXMLLight_specular;
    function Get_Light_position: IXMLLight_position;
    function Get_Light_constant_attenuation: IXMLLight_constant_attenuation;
    function Get_Light_linear_attenuation: IXMLLight_linear_attenuation;
    function Get_Light_quadratic_attenuation: IXMLLight_quadratic_attenuation;
    function Get_Light_spot_cutoff: IXMLLight_spot_cutoff;
    function Get_Light_spot_direction: IXMLLight_spot_direction;
    function Get_Light_spot_exponent: IXMLLight_spot_exponent;
    function Get_Texture1D: IXMLTexture1D;
    function Get_Texture2D: IXMLTexture2D;
    function Get_Texture3D: IXMLTexture3D;
    function Get_TextureCUBE: IXMLTextureCUBE;
    function Get_TextureRECT: IXMLTextureRECT;
    function Get_TextureDEPTH: IXMLTextureDEPTH;
    function Get_Texture1D_enable: IXMLTexture1D_enable;
    function Get_Texture2D_enable: IXMLTexture2D_enable;
    function Get_Texture3D_enable: IXMLTexture3D_enable;
    function Get_TextureCUBE_enable: IXMLTextureCUBE_enable;
    function Get_TextureRECT_enable: IXMLTextureRECT_enable;
    function Get_TextureDEPTH_enable: IXMLTextureDEPTH_enable;
    function Get_Texture_env_color: IXMLTexture_env_color;
    function Get_Texture_env_mode: IXMLTexture_env_mode;
    function Get_Clip_plane: IXMLClip_plane;
    function Get_Clip_plane_enable: IXMLClip_plane_enable;
    function Get_Blend_color: IXMLBlend_color;
    function Get_Color_mask: IXMLColor_mask;
    function Get_Depth_bounds: IXMLDepth_bounds;
    function Get_Depth_mask: IXMLDepth_mask;
    function Get_Depth_range: IXMLDepth_range;
    function Get_Fog_density: IXMLFog_density;
    function Get_Fog_start: IXMLFog_start;
    function Get_Fog_end: IXMLFog_end;
    function Get_Fog_color: IXMLFog_color;
    function Get_Light_model_ambient: IXMLLight_model_ambient;
    function Get_Lighting_enable: IXMLLighting_enable;
    function Get_Line_stipple: IXMLLine_stipple;
    function Get_Line_width: IXMLLine_width;
    function Get_Material_ambient: IXMLMaterial_ambient;
    function Get_Material_diffuse: IXMLMaterial_diffuse;
    function Get_Material_emission: IXMLMaterial_emission;
    function Get_Material_shininess: IXMLMaterial_shininess;
    function Get_Material_specular: IXMLMaterial_specular;
    function Get_Model_view_matrix: IXMLModel_view_matrix;
    function Get_Point_distance_attenuation: IXMLPoint_distance_attenuation;
    function Get_Point_fade_threshold_size: IXMLPoint_fade_threshold_size;
    function Get_Point_size: IXMLPoint_size;
    function Get_Point_size_min: IXMLPoint_size_min;
    function Get_Point_size_max: IXMLPoint_size_max;
    function Get_Polygon_offset: IXMLPolygon_offset;
    function Get_Projection_matrix: IXMLProjection_matrix;
    function Get_Scissor: IXMLScissor;
    function Get_Stencil_mask: IXMLStencil_mask;
    function Get_Alpha_test_enable: IXMLAlpha_test_enable;
    function Get_Blend_enable: IXMLBlend_enable;
    function Get_Color_logic_op_enable: IXMLColor_logic_op_enable;
    function Get_Color_material_enable: IXMLColor_material_enable;
    function Get_Cull_face_enable: IXMLCull_face_enable;
    function Get_Depth_bounds_enable: IXMLDepth_bounds_enable;
    function Get_Depth_clamp_enable: IXMLDepth_clamp_enable;
    function Get_Depth_test_enable: IXMLDepth_test_enable;
    function Get_Dither_enable: IXMLDither_enable;
    function Get_Fog_enable: IXMLFog_enable;
    function Get_Light_model_local_viewer_enable: IXMLLight_model_local_viewer_enable;
    function Get_Light_model_two_side_enable: IXMLLight_model_two_side_enable;
    function Get_Line_smooth_enable: IXMLLine_smooth_enable;
    function Get_Line_stipple_enable: IXMLLine_stipple_enable;
    function Get_Logic_op_enable: IXMLLogic_op_enable;
    function Get_Multisample_enable: IXMLMultisample_enable;
    function Get_Normalize_enable: IXMLNormalize_enable;
    function Get_Point_smooth_enable: IXMLPoint_smooth_enable;
    function Get_Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable;
    function Get_Polygon_offset_line_enable: IXMLPolygon_offset_line_enable;
    function Get_Polygon_offset_point_enable: IXMLPolygon_offset_point_enable;
    function Get_Polygon_smooth_enable: IXMLPolygon_smooth_enable;
    function Get_Polygon_stipple_enable: IXMLPolygon_stipple_enable;
    function Get_Rescale_normal_enable: IXMLRescale_normal_enable;
    function Get_Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable;
    function Get_Sample_alpha_to_one_enable: IXMLSample_alpha_to_one_enable;
    function Get_Sample_coverage_enable: IXMLSample_coverage_enable;
    function Get_Scissor_test_enable: IXMLScissor_test_enable;
    function Get_Stencil_test_enable: IXMLStencil_test_enable;
    { Methods & Properties }
    property Alpha_func: IXMLAlpha_func read Get_Alpha_func;
    property Blend_func: IXMLBlend_func read Get_Blend_func;
    property Blend_func_separate: IXMLBlend_func_separate read Get_Blend_func_separate;
    property Blend_equation: IXMLBlend_equation read Get_Blend_equation;
    property Blend_equation_separate: IXMLBlend_equation_separate read Get_Blend_equation_separate;
    property Color_material: IXMLColor_material read Get_Color_material;
    property Cull_face: IXMLCull_face read Get_Cull_face;
    property Depth_func: IXMLDepth_func read Get_Depth_func;
    property Fog_mode: IXMLFog_mode read Get_Fog_mode;
    property Fog_coord_src: IXMLFog_coord_src read Get_Fog_coord_src;
    property Front_face: IXMLFront_face read Get_Front_face;
    property Light_model_color_control: IXMLLight_model_color_control read Get_Light_model_color_control;
    property Logic_op: IXMLLogic_op read Get_Logic_op;
    property Polygon_mode: IXMLPolygon_mode read Get_Polygon_mode;
    property Shade_model: IXMLShade_model read Get_Shade_model;
    property Stencil_func: IXMLStencil_func read Get_Stencil_func;
    property Stencil_op: IXMLStencil_op read Get_Stencil_op;
    property Stencil_func_separate: IXMLStencil_func_separate read Get_Stencil_func_separate;
    property Stencil_op_separate: IXMLStencil_op_separate read Get_Stencil_op_separate;
    property Stencil_mask_separate: IXMLStencil_mask_separate read Get_Stencil_mask_separate;
    property Light_enable: IXMLLight_enable read Get_Light_enable;
    property Light_ambient: IXMLLight_ambient read Get_Light_ambient;
    property Light_diffuse: IXMLLight_diffuse read Get_Light_diffuse;
    property Light_specular: IXMLLight_specular read Get_Light_specular;
    property Light_position: IXMLLight_position read Get_Light_position;
    property Light_constant_attenuation: IXMLLight_constant_attenuation read Get_Light_constant_attenuation;
    property Light_linear_attenuation: IXMLLight_linear_attenuation read Get_Light_linear_attenuation;
    property Light_quadratic_attenuation: IXMLLight_quadratic_attenuation read Get_Light_quadratic_attenuation;
    property Light_spot_cutoff: IXMLLight_spot_cutoff read Get_Light_spot_cutoff;
    property Light_spot_direction: IXMLLight_spot_direction read Get_Light_spot_direction;
    property Light_spot_exponent: IXMLLight_spot_exponent read Get_Light_spot_exponent;
    property Texture1D: IXMLTexture1D read Get_Texture1D;
    property Texture2D: IXMLTexture2D read Get_Texture2D;
    property Texture3D: IXMLTexture3D read Get_Texture3D;
    property TextureCUBE: IXMLTextureCUBE read Get_TextureCUBE;
    property TextureRECT: IXMLTextureRECT read Get_TextureRECT;
    property TextureDEPTH: IXMLTextureDEPTH read Get_TextureDEPTH;
    property Texture1D_enable: IXMLTexture1D_enable read Get_Texture1D_enable;
    property Texture2D_enable: IXMLTexture2D_enable read Get_Texture2D_enable;
    property Texture3D_enable: IXMLTexture3D_enable read Get_Texture3D_enable;
    property TextureCUBE_enable: IXMLTextureCUBE_enable read Get_TextureCUBE_enable;
    property TextureRECT_enable: IXMLTextureRECT_enable read Get_TextureRECT_enable;
    property TextureDEPTH_enable: IXMLTextureDEPTH_enable read Get_TextureDEPTH_enable;
    property Texture_env_color: IXMLTexture_env_color read Get_Texture_env_color;
    property Texture_env_mode: IXMLTexture_env_mode read Get_Texture_env_mode;
    property Clip_plane: IXMLClip_plane read Get_Clip_plane;
    property Clip_plane_enable: IXMLClip_plane_enable read Get_Clip_plane_enable;
    property Blend_color: IXMLBlend_color read Get_Blend_color;
    property Color_mask: IXMLColor_mask read Get_Color_mask;
    property Depth_bounds: IXMLDepth_bounds read Get_Depth_bounds;
    property Depth_mask: IXMLDepth_mask read Get_Depth_mask;
    property Depth_range: IXMLDepth_range read Get_Depth_range;
    property Fog_density: IXMLFog_density read Get_Fog_density;
    property Fog_start: IXMLFog_start read Get_Fog_start;
    property Fog_end: IXMLFog_end read Get_Fog_end;
    property Fog_color: IXMLFog_color read Get_Fog_color;
    property Light_model_ambient: IXMLLight_model_ambient read Get_Light_model_ambient;
    property Lighting_enable: IXMLLighting_enable read Get_Lighting_enable;
    property Line_stipple: IXMLLine_stipple read Get_Line_stipple;
    property Line_width: IXMLLine_width read Get_Line_width;
    property Material_ambient: IXMLMaterial_ambient read Get_Material_ambient;
    property Material_diffuse: IXMLMaterial_diffuse read Get_Material_diffuse;
    property Material_emission: IXMLMaterial_emission read Get_Material_emission;
    property Material_shininess: IXMLMaterial_shininess read Get_Material_shininess;
    property Material_specular: IXMLMaterial_specular read Get_Material_specular;
    property Model_view_matrix: IXMLModel_view_matrix read Get_Model_view_matrix;
    property Point_distance_attenuation: IXMLPoint_distance_attenuation read Get_Point_distance_attenuation;
    property Point_fade_threshold_size: IXMLPoint_fade_threshold_size read Get_Point_fade_threshold_size;
    property Point_size: IXMLPoint_size read Get_Point_size;
    property Point_size_min: IXMLPoint_size_min read Get_Point_size_min;
    property Point_size_max: IXMLPoint_size_max read Get_Point_size_max;
    property Polygon_offset: IXMLPolygon_offset read Get_Polygon_offset;
    property Projection_matrix: IXMLProjection_matrix read Get_Projection_matrix;
    property Scissor: IXMLScissor read Get_Scissor;
    property Stencil_mask: IXMLStencil_mask read Get_Stencil_mask;
    property Alpha_test_enable: IXMLAlpha_test_enable read Get_Alpha_test_enable;
    property Blend_enable: IXMLBlend_enable read Get_Blend_enable;
    property Color_logic_op_enable: IXMLColor_logic_op_enable read Get_Color_logic_op_enable;
    property Color_material_enable: IXMLColor_material_enable read Get_Color_material_enable;
    property Cull_face_enable: IXMLCull_face_enable read Get_Cull_face_enable;
    property Depth_bounds_enable: IXMLDepth_bounds_enable read Get_Depth_bounds_enable;
    property Depth_clamp_enable: IXMLDepth_clamp_enable read Get_Depth_clamp_enable;
    property Depth_test_enable: IXMLDepth_test_enable read Get_Depth_test_enable;
    property Dither_enable: IXMLDither_enable read Get_Dither_enable;
    property Fog_enable: IXMLFog_enable read Get_Fog_enable;
    property Light_model_local_viewer_enable: IXMLLight_model_local_viewer_enable read Get_Light_model_local_viewer_enable;
    property Light_model_two_side_enable: IXMLLight_model_two_side_enable read Get_Light_model_two_side_enable;
    property Line_smooth_enable: IXMLLine_smooth_enable read Get_Line_smooth_enable;
    property Line_stipple_enable: IXMLLine_stipple_enable read Get_Line_stipple_enable;
    property Logic_op_enable: IXMLLogic_op_enable read Get_Logic_op_enable;
    property Multisample_enable: IXMLMultisample_enable read Get_Multisample_enable;
    property Normalize_enable: IXMLNormalize_enable read Get_Normalize_enable;
    property Point_smooth_enable: IXMLPoint_smooth_enable read Get_Point_smooth_enable;
    property Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable read Get_Polygon_offset_fill_enable;
    property Polygon_offset_line_enable: IXMLPolygon_offset_line_enable read Get_Polygon_offset_line_enable;
    property Polygon_offset_point_enable: IXMLPolygon_offset_point_enable read Get_Polygon_offset_point_enable;
    property Polygon_smooth_enable: IXMLPolygon_smooth_enable read Get_Polygon_smooth_enable;
    property Polygon_stipple_enable: IXMLPolygon_stipple_enable read Get_Polygon_stipple_enable;
    property Rescale_normal_enable: IXMLRescale_normal_enable read Get_Rescale_normal_enable;
    property Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable read Get_Sample_alpha_to_coverage_enable;
    property Sample_alpha_to_one_enable: IXMLSample_alpha_to_one_enable read Get_Sample_alpha_to_one_enable;
    property Sample_coverage_enable: IXMLSample_coverage_enable read Get_Sample_coverage_enable;
    property Scissor_test_enable: IXMLScissor_test_enable read Get_Scissor_test_enable;
    property Stencil_test_enable: IXMLStencil_test_enable read Get_Stencil_test_enable;
  end;

{ IXMLCg_pass_type_program }

  IXMLCg_pass_type_program = interface(IXMLFilter)
    ['{C08A8BFF-44BD-419B-A001-644E85549108}']
    { Property Accessors }
    function Get_Shader(Index: Integer): IXMLCg_pass_type_program_shader;
    { Methods & Properties }
    function Add: IXMLCg_pass_type_program_shader;
    function Insert(const Index: Integer): IXMLCg_pass_type_program_shader;
    property Shader[Index: Integer]: IXMLCg_pass_type_program_shader read Get_Shader; default;
  end;

{ IXMLCg_pass_type_program_shader }

  IXMLCg_pass_type_program_shader = interface(IXML)
    ['{9DDEDC41-B263-4641-A554-3CF553B1AD14}']
    { Property Accessors }
    function Get_Stage: UnicodeString;
    function Get_Sources: IXMLCg_pass_type_program_shader_sources;
    function Get_Compiler: IXMLFx_target_typeList;
    function Get_Bind_uniform: IXMLCg_pass_type_program_shader_bind_uniformList;
    procedure Set_Stage(Value: UnicodeString);
    { Methods & Properties }
    property Stage: UnicodeString read Get_Stage write Set_Stage;
    property Sources: IXMLCg_pass_type_program_shader_sources read Get_Sources;
    property Compiler: IXMLFx_target_typeList read Get_Compiler;
    property Bind_uniform: IXMLCg_pass_type_program_shader_bind_uniformList read Get_Bind_uniform;
  end;

{ IXMLCg_pass_type_program_shader_sources }

  IXMLCg_pass_type_program_shader_sources = interface(IXMLFx_sources_type)
    ['{D6EE468B-743C-4FA0-90D8-D5B7D47282E4}']
    { Property Accessors }
    function Get_Entry: UnicodeString;
    procedure Set_Entry(Value: UnicodeString);
    { Methods & Properties }
    property Entry: UnicodeString read Get_Entry write Set_Entry;
  end;

{ IXMLCg_pass_type_program_shader_bind_uniform }

  IXMLCg_pass_type_program_shader_bind_uniform = interface(IXML)
    ['{555C0AEE-9DAD-436B-AA4B-7C3C1D2B2856}']
    { Property Accessors }
    function Get_Symbol: UnicodeString;
    function Get_Param: IXMLCg_pass_type_program_shader_bind_uniform_param;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Bool2x1: UnicodeString;
    function Get_Bool2x2: UnicodeString;
    function Get_Bool2x3: UnicodeString;
    function Get_Bool2x4: UnicodeString;
    function Get_Bool3x1: UnicodeString;
    function Get_Bool3x2: UnicodeString;
    function Get_Bool3x3: UnicodeString;
    function Get_Bool3x4: UnicodeString;
    function Get_Bool4x1: UnicodeString;
    function Get_Bool4x2: UnicodeString;
    function Get_Bool4x3: UnicodeString;
    function Get_Bool4x4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Int2x1: UnicodeString;
    function Get_Int2x2: UnicodeString;
    function Get_Int2x3: UnicodeString;
    function Get_Int2x4: UnicodeString;
    function Get_Int3x1: UnicodeString;
    function Get_Int3x2: UnicodeString;
    function Get_Int3x3: UnicodeString;
    function Get_Int3x4: UnicodeString;
    function Get_Int4x1: UnicodeString;
    function Get_Int4x2: UnicodeString;
    function Get_Int4x3: UnicodeString;
    function Get_Int4x4: UnicodeString;
    function Get_Half: Double;
    function Get_Half2: UnicodeString;
    function Get_Half3: UnicodeString;
    function Get_Half4: UnicodeString;
    function Get_Half2x1: UnicodeString;
    function Get_Half2x2: UnicodeString;
    function Get_Half2x3: UnicodeString;
    function Get_Half2x4: UnicodeString;
    function Get_Half3x1: UnicodeString;
    function Get_Half3x2: UnicodeString;
    function Get_Half3x3: UnicodeString;
    function Get_Half3x4: UnicodeString;
    function Get_Half4x1: UnicodeString;
    function Get_Half4x2: UnicodeString;
    function Get_Half4x3: UnicodeString;
    function Get_Half4x4: UnicodeString;
    function Get_Fixed: Double;
    function Get_Fixed2: UnicodeString;
    function Get_Fixed3: UnicodeString;
    function Get_Fixed4: UnicodeString;
    function Get_Fixed2x1: UnicodeString;
    function Get_Fixed2x2: UnicodeString;
    function Get_Fixed2x3: UnicodeString;
    function Get_Fixed2x4: UnicodeString;
    function Get_Fixed3x1: UnicodeString;
    function Get_Fixed3x2: UnicodeString;
    function Get_Fixed3x3: UnicodeString;
    function Get_Fixed3x4: UnicodeString;
    function Get_Fixed4x1: UnicodeString;
    function Get_Fixed4x2: UnicodeString;
    function Get_Fixed4x3: UnicodeString;
    function Get_Fixed4x4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_String_: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLCg_array_type;
    function Get_Usertype: IXMLCg_user_type;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Bool2x1(Value: UnicodeString);
    procedure Set_Bool2x2(Value: UnicodeString);
    procedure Set_Bool2x3(Value: UnicodeString);
    procedure Set_Bool2x4(Value: UnicodeString);
    procedure Set_Bool3x1(Value: UnicodeString);
    procedure Set_Bool3x2(Value: UnicodeString);
    procedure Set_Bool3x3(Value: UnicodeString);
    procedure Set_Bool3x4(Value: UnicodeString);
    procedure Set_Bool4x1(Value: UnicodeString);
    procedure Set_Bool4x2(Value: UnicodeString);
    procedure Set_Bool4x3(Value: UnicodeString);
    procedure Set_Bool4x4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Int2x1(Value: UnicodeString);
    procedure Set_Int2x2(Value: UnicodeString);
    procedure Set_Int2x3(Value: UnicodeString);
    procedure Set_Int2x4(Value: UnicodeString);
    procedure Set_Int3x1(Value: UnicodeString);
    procedure Set_Int3x2(Value: UnicodeString);
    procedure Set_Int3x3(Value: UnicodeString);
    procedure Set_Int3x4(Value: UnicodeString);
    procedure Set_Int4x1(Value: UnicodeString);
    procedure Set_Int4x2(Value: UnicodeString);
    procedure Set_Int4x3(Value: UnicodeString);
    procedure Set_Int4x4(Value: UnicodeString);
    procedure Set_Half(Value: Double);
    procedure Set_Half2(Value: UnicodeString);
    procedure Set_Half3(Value: UnicodeString);
    procedure Set_Half4(Value: UnicodeString);
    procedure Set_Half2x1(Value: UnicodeString);
    procedure Set_Half2x2(Value: UnicodeString);
    procedure Set_Half2x3(Value: UnicodeString);
    procedure Set_Half2x4(Value: UnicodeString);
    procedure Set_Half3x1(Value: UnicodeString);
    procedure Set_Half3x2(Value: UnicodeString);
    procedure Set_Half3x3(Value: UnicodeString);
    procedure Set_Half3x4(Value: UnicodeString);
    procedure Set_Half4x1(Value: UnicodeString);
    procedure Set_Half4x2(Value: UnicodeString);
    procedure Set_Half4x3(Value: UnicodeString);
    procedure Set_Half4x4(Value: UnicodeString);
    procedure Set_Fixed(Value: Double);
    procedure Set_Fixed2(Value: UnicodeString);
    procedure Set_Fixed3(Value: UnicodeString);
    procedure Set_Fixed4(Value: UnicodeString);
    procedure Set_Fixed2x1(Value: UnicodeString);
    procedure Set_Fixed2x2(Value: UnicodeString);
    procedure Set_Fixed2x3(Value: UnicodeString);
    procedure Set_Fixed2x4(Value: UnicodeString);
    procedure Set_Fixed3x1(Value: UnicodeString);
    procedure Set_Fixed3x2(Value: UnicodeString);
    procedure Set_Fixed3x3(Value: UnicodeString);
    procedure Set_Fixed3x4(Value: UnicodeString);
    procedure Set_Fixed4x1(Value: UnicodeString);
    procedure Set_Fixed4x2(Value: UnicodeString);
    procedure Set_Fixed4x3(Value: UnicodeString);
    procedure Set_Fixed4x4(Value: UnicodeString);
    procedure Set_String_(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Symbol: UnicodeString read Get_Symbol write Set_Symbol;
    property Param: IXMLCg_pass_type_program_shader_bind_uniform_param read Get_Param;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bool2: UnicodeString read Get_Bool2 write Set_Bool2;
    property Bool3: UnicodeString read Get_Bool3 write Set_Bool3;
    property Bool4: UnicodeString read Get_Bool4 write Set_Bool4;
    property Bool2x1: UnicodeString read Get_Bool2x1 write Set_Bool2x1;
    property Bool2x2: UnicodeString read Get_Bool2x2 write Set_Bool2x2;
    property Bool2x3: UnicodeString read Get_Bool2x3 write Set_Bool2x3;
    property Bool2x4: UnicodeString read Get_Bool2x4 write Set_Bool2x4;
    property Bool3x1: UnicodeString read Get_Bool3x1 write Set_Bool3x1;
    property Bool3x2: UnicodeString read Get_Bool3x2 write Set_Bool3x2;
    property Bool3x3: UnicodeString read Get_Bool3x3 write Set_Bool3x3;
    property Bool3x4: UnicodeString read Get_Bool3x4 write Set_Bool3x4;
    property Bool4x1: UnicodeString read Get_Bool4x1 write Set_Bool4x1;
    property Bool4x2: UnicodeString read Get_Bool4x2 write Set_Bool4x2;
    property Bool4x3: UnicodeString read Get_Bool4x3 write Set_Bool4x3;
    property Bool4x4: UnicodeString read Get_Bool4x4 write Set_Bool4x4;
    property Float: Double read Get_Float write Set_Float;
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Float3: UnicodeString read Get_Float3 write Set_Float3;
    property Float4: UnicodeString read Get_Float4 write Set_Float4;
    property Float2x1: UnicodeString read Get_Float2x1 write Set_Float2x1;
    property Float2x2: UnicodeString read Get_Float2x2 write Set_Float2x2;
    property Float2x3: UnicodeString read Get_Float2x3 write Set_Float2x3;
    property Float2x4: UnicodeString read Get_Float2x4 write Set_Float2x4;
    property Float3x1: UnicodeString read Get_Float3x1 write Set_Float3x1;
    property Float3x2: UnicodeString read Get_Float3x2 write Set_Float3x2;
    property Float3x3: UnicodeString read Get_Float3x3 write Set_Float3x3;
    property Float3x4: UnicodeString read Get_Float3x4 write Set_Float3x4;
    property Float4x1: UnicodeString read Get_Float4x1 write Set_Float4x1;
    property Float4x2: UnicodeString read Get_Float4x2 write Set_Float4x2;
    property Float4x3: UnicodeString read Get_Float4x3 write Set_Float4x3;
    property Float4x4: UnicodeString read Get_Float4x4 write Set_Float4x4;
    property Int: Int64 read Get_Int write Set_Int;
    property Int2: UnicodeString read Get_Int2 write Set_Int2;
    property Int3: UnicodeString read Get_Int3 write Set_Int3;
    property Int4: UnicodeString read Get_Int4 write Set_Int4;
    property Int2x1: UnicodeString read Get_Int2x1 write Set_Int2x1;
    property Int2x2: UnicodeString read Get_Int2x2 write Set_Int2x2;
    property Int2x3: UnicodeString read Get_Int2x3 write Set_Int2x3;
    property Int2x4: UnicodeString read Get_Int2x4 write Set_Int2x4;
    property Int3x1: UnicodeString read Get_Int3x1 write Set_Int3x1;
    property Int3x2: UnicodeString read Get_Int3x2 write Set_Int3x2;
    property Int3x3: UnicodeString read Get_Int3x3 write Set_Int3x3;
    property Int3x4: UnicodeString read Get_Int3x4 write Set_Int3x4;
    property Int4x1: UnicodeString read Get_Int4x1 write Set_Int4x1;
    property Int4x2: UnicodeString read Get_Int4x2 write Set_Int4x2;
    property Int4x3: UnicodeString read Get_Int4x3 write Set_Int4x3;
    property Int4x4: UnicodeString read Get_Int4x4 write Set_Int4x4;
    property Half: Double read Get_Half write Set_Half;
    property Half2: UnicodeString read Get_Half2 write Set_Half2;
    property Half3: UnicodeString read Get_Half3 write Set_Half3;
    property Half4: UnicodeString read Get_Half4 write Set_Half4;
    property Half2x1: UnicodeString read Get_Half2x1 write Set_Half2x1;
    property Half2x2: UnicodeString read Get_Half2x2 write Set_Half2x2;
    property Half2x3: UnicodeString read Get_Half2x3 write Set_Half2x3;
    property Half2x4: UnicodeString read Get_Half2x4 write Set_Half2x4;
    property Half3x1: UnicodeString read Get_Half3x1 write Set_Half3x1;
    property Half3x2: UnicodeString read Get_Half3x2 write Set_Half3x2;
    property Half3x3: UnicodeString read Get_Half3x3 write Set_Half3x3;
    property Half3x4: UnicodeString read Get_Half3x4 write Set_Half3x4;
    property Half4x1: UnicodeString read Get_Half4x1 write Set_Half4x1;
    property Half4x2: UnicodeString read Get_Half4x2 write Set_Half4x2;
    property Half4x3: UnicodeString read Get_Half4x3 write Set_Half4x3;
    property Half4x4: UnicodeString read Get_Half4x4 write Set_Half4x4;
    property Fixed: Double read Get_Fixed write Set_Fixed;
    property Fixed2: UnicodeString read Get_Fixed2 write Set_Fixed2;
    property Fixed3: UnicodeString read Get_Fixed3 write Set_Fixed3;
    property Fixed4: UnicodeString read Get_Fixed4 write Set_Fixed4;
    property Fixed2x1: UnicodeString read Get_Fixed2x1 write Set_Fixed2x1;
    property Fixed2x2: UnicodeString read Get_Fixed2x2 write Set_Fixed2x2;
    property Fixed2x3: UnicodeString read Get_Fixed2x3 write Set_Fixed2x3;
    property Fixed2x4: UnicodeString read Get_Fixed2x4 write Set_Fixed2x4;
    property Fixed3x1: UnicodeString read Get_Fixed3x1 write Set_Fixed3x1;
    property Fixed3x2: UnicodeString read Get_Fixed3x2 write Set_Fixed3x2;
    property Fixed3x3: UnicodeString read Get_Fixed3x3 write Set_Fixed3x3;
    property Fixed3x4: UnicodeString read Get_Fixed3x4 write Set_Fixed3x4;
    property Fixed4x1: UnicodeString read Get_Fixed4x1 write Set_Fixed4x1;
    property Fixed4x2: UnicodeString read Get_Fixed4x2 write Set_Fixed4x2;
    property Fixed4x3: UnicodeString read Get_Fixed4x3 write Set_Fixed4x3;
    property Fixed4x4: UnicodeString read Get_Fixed4x4 write Set_Fixed4x4;
    property Sampler1D: IXMLFx_sampler1D_type read Get_Sampler1D;
    property Sampler2D: IXMLFx_sampler2D_type read Get_Sampler2D;
    property Sampler3D: IXMLFx_sampler3D_type read Get_Sampler3D;
    property SamplerRECT: IXMLFx_samplerRECT_type read Get_SamplerRECT;
    property SamplerCUBE: IXMLFx_samplerCUBE_type read Get_SamplerCUBE;
    property SamplerDEPTH: IXMLFx_samplerDEPTH_type read Get_SamplerDEPTH;
    property String_: UnicodeString read Get_String_ write Set_String_;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
    property Array_: IXMLCg_array_type read Get_Array_;
    property Usertype: IXMLCg_user_type read Get_Usertype;
  end;

{ IXMLCg_pass_type_program_shader_bind_uniformList }

  IXMLCg_pass_type_program_shader_bind_uniformList = interface(IXMLFilter)
    ['{B77F4022-1452-49B9-B2A5-47311E38FDF8}']
    { Methods & Properties }
    function Add: IXMLCg_pass_type_program_shader_bind_uniform;
    function Insert(const Index: Integer): IXMLCg_pass_type_program_shader_bind_uniform;

    function Get_Item(Index: Integer): IXMLCg_pass_type_program_shader_bind_uniform;
    property Items[Index: Integer]: IXMLCg_pass_type_program_shader_bind_uniform read Get_Item; default;
  end;

{ IXMLCg_pass_type_program_shader_bind_uniform_param }

  IXMLCg_pass_type_program_shader_bind_uniform_param = interface(IXML)
    ['{6E5C3D86-8F9F-4102-AC04-A51541BC0338}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
  end;

{ IXMLCg_pass_type_evaluate }

  IXMLCg_pass_type_evaluate = interface(IXML)
    ['{E522CBBF-6FF3-4E31-BEB8-1DED9FEFBD2E}']
    { Property Accessors }
    function Get_Color_target: IXMLFx_colortarget_typeList;
    function Get_Depth_target: IXMLFx_depthtarget_typeList;
    function Get_Stencil_target: IXMLFx_stenciltarget_typeList;
    function Get_Color_clear: IXMLFx_clearcolor_typeList;
    function Get_Depth_clear: IXMLFx_cleardepth_typeList;
    function Get_Stencil_clear: IXMLFx_clearstencil_typeList;
    function Get_Draw: UnicodeString;
    procedure Set_Draw(Value: UnicodeString);
    { Methods & Properties }
    property Color_target: IXMLFx_colortarget_typeList read Get_Color_target;
    property Depth_target: IXMLFx_depthtarget_typeList read Get_Depth_target;
    property Stencil_target: IXMLFx_stenciltarget_typeList read Get_Stencil_target;
    property Color_clear: IXMLFx_clearcolor_typeList read Get_Color_clear;
    property Depth_clear: IXMLFx_cleardepth_typeList read Get_Depth_clear;
    property Stencil_clear: IXMLFx_clearstencil_typeList read Get_Stencil_clear;
    property Draw: UnicodeString read Get_Draw write Set_Draw;
  end;

{ IXMLProfile_gles_type }

  IXMLProfile_gles_type = interface(IXML)
    ['{C32571D7-6D03-4B83-A308-22F1C9D88408}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Platform: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Newparam: IXMLGles_newparam_typeList;
    function Get_Technique: IXMLProfile_gles_type_techniqueList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Platform(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Platform: UnicodeString read Get_Platform write Set_Platform;
    property Asset: IXMLAsset_type read Get_Asset;
    property Newparam: IXMLGles_newparam_typeList read Get_Newparam;
    property Technique: IXMLProfile_gles_type_techniqueList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLGles_newparam_type }

  IXMLGles_newparam_type = interface(IXML)
    ['{9F7C246F-0D7A-497A-821D-2D9AA168E3EB}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Semantic: UnicodeString;
    function Get_Modifier: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float1x1: Double;
    function Get_Float1x2: UnicodeString;
    function Get_Float1x3: UnicodeString;
    function Get_Float1x4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Sampler2D: IXMLGles_sampler_type;
    function Get_Enum: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Modifier(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float1x1(Value: Double);
    procedure Set_Float1x2(Value: UnicodeString);
    procedure Set_Float1x3(Value: UnicodeString);
    procedure Set_Float1x4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Modifier: UnicodeString read Get_Modifier write Set_Modifier;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bool2: UnicodeString read Get_Bool2 write Set_Bool2;
    property Bool3: UnicodeString read Get_Bool3 write Set_Bool3;
    property Bool4: UnicodeString read Get_Bool4 write Set_Bool4;
    property Int: Int64 read Get_Int write Set_Int;
    property Int2: UnicodeString read Get_Int2 write Set_Int2;
    property Int3: UnicodeString read Get_Int3 write Set_Int3;
    property Int4: UnicodeString read Get_Int4 write Set_Int4;
    property Float: Double read Get_Float write Set_Float;
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Float3: UnicodeString read Get_Float3 write Set_Float3;
    property Float4: UnicodeString read Get_Float4 write Set_Float4;
    property Float1x1: Double read Get_Float1x1 write Set_Float1x1;
    property Float1x2: UnicodeString read Get_Float1x2 write Set_Float1x2;
    property Float1x3: UnicodeString read Get_Float1x3 write Set_Float1x3;
    property Float1x4: UnicodeString read Get_Float1x4 write Set_Float1x4;
    property Float2x1: UnicodeString read Get_Float2x1 write Set_Float2x1;
    property Float2x2: UnicodeString read Get_Float2x2 write Set_Float2x2;
    property Float2x3: UnicodeString read Get_Float2x3 write Set_Float2x3;
    property Float2x4: UnicodeString read Get_Float2x4 write Set_Float2x4;
    property Float3x1: UnicodeString read Get_Float3x1 write Set_Float3x1;
    property Float3x2: UnicodeString read Get_Float3x2 write Set_Float3x2;
    property Float3x3: UnicodeString read Get_Float3x3 write Set_Float3x3;
    property Float3x4: UnicodeString read Get_Float3x4 write Set_Float3x4;
    property Float4x1: UnicodeString read Get_Float4x1 write Set_Float4x1;
    property Float4x2: UnicodeString read Get_Float4x2 write Set_Float4x2;
    property Float4x3: UnicodeString read Get_Float4x3 write Set_Float4x3;
    property Float4x4: UnicodeString read Get_Float4x4 write Set_Float4x4;
    property Sampler2D: IXMLGles_sampler_type read Get_Sampler2D;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
  end;

{ IXMLGles_newparam_typeList }

  IXMLGles_newparam_typeList = interface(IXMLFilter)
    ['{B4E15F98-8CF2-486D-A624-4A23945AF6E7}']
    { Methods & Properties }
    function Add: IXMLGles_newparam_type;
    function Insert(const Index: Integer): IXMLGles_newparam_type;

    function Get_Item(Index: Integer): IXMLGles_newparam_type;
    property Items[Index: Integer]: IXMLGles_newparam_type read Get_Item; default;
  end;

{ IXMLGles_sampler_type }

  IXMLGles_sampler_type = interface(IXML)
    ['{F321AD3C-9BD5-4BC1-91F1-7932647368DB}']
    { Property Accessors }
    function Get_Instance_image: IXMLInstance_image_type;
    function Get_Texcoord: IXMLGles_sampler_type_texcoord;
    function Get_Wrap_s: UnicodeString;
    function Get_Wrap_t: UnicodeString;
    function Get_Minfilter: UnicodeString;
    function Get_Magfilter: UnicodeString;
    function Get_Mipfilter: UnicodeString;
    function Get_Mip_max_level: Byte;
    function Get_Mip_bias: Single;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Wrap_s(Value: UnicodeString);
    procedure Set_Wrap_t(Value: UnicodeString);
    procedure Set_Minfilter(Value: UnicodeString);
    procedure Set_Magfilter(Value: UnicodeString);
    procedure Set_Mipfilter(Value: UnicodeString);
    procedure Set_Mip_max_level(Value: Byte);
    procedure Set_Mip_bias(Value: Single);
    { Methods & Properties }
    property Instance_image: IXMLInstance_image_type read Get_Instance_image;
    property Texcoord: IXMLGles_sampler_type_texcoord read Get_Texcoord;
    property Wrap_s: UnicodeString read Get_Wrap_s write Set_Wrap_s;
    property Wrap_t: UnicodeString read Get_Wrap_t write Set_Wrap_t;
    property Minfilter: UnicodeString read Get_Minfilter write Set_Minfilter;
    property Magfilter: UnicodeString read Get_Magfilter write Set_Magfilter;
    property Mipfilter: UnicodeString read Get_Mipfilter write Set_Mipfilter;
    property Mip_max_level: Byte read Get_Mip_max_level write Set_Mip_max_level;
    property Mip_bias: Single read Get_Mip_bias write Set_Mip_bias;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLGles_sampler_type_texcoord }

  IXMLGles_sampler_type_texcoord = interface(IXML)
    ['{4325C6B0-9CA7-4B31-8B00-0A2DDEA9E0B8}']
    { Property Accessors }
    function Get_Semantic: UnicodeString;
    procedure Set_Semantic(Value: UnicodeString);
    { Methods & Properties }
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
  end;

{ IXMLProfile_gles_type_technique }

  IXMLProfile_gles_type_technique = interface(IXML)
    ['{FF211325-BDDA-41F1-A1FE-73F5D6DB5430}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Pass: IXMLProfile_gles_type_technique_passList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Asset: IXMLAsset_type read Get_Asset;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property Pass: IXMLProfile_gles_type_technique_passList read Get_Pass;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLProfile_gles_type_techniqueList }

  IXMLProfile_gles_type_techniqueList = interface(IXMLFilter)
    ['{1822A2B6-BD9F-40F6-B9B4-6AC0624A7F6F}']
    { Methods & Properties }
    function Add: IXMLProfile_gles_type_technique;
    function Insert(const Index: Integer): IXMLProfile_gles_type_technique;

    function Get_Item(Index: Integer): IXMLProfile_gles_type_technique;
    property Items[Index: Integer]: IXMLProfile_gles_type_technique read Get_Item; default;
  end;

{ IXMLProfile_gles_type_technique_pass }

  IXMLProfile_gles_type_technique_pass = interface(IXML)
    ['{69DC8F82-73FE-4152-9790-634F5ECB562E}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_States: IXMLProfile_gles_type_technique_pass_states;
    function Get_Evaluate: IXMLProfile_gles_type_technique_pass_evaluate;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Annotate: IXMLFx_annotate_typeList read Get_Annotate;
    property States: IXMLProfile_gles_type_technique_pass_states read Get_States;
    property Evaluate: IXMLProfile_gles_type_technique_pass_evaluate read Get_Evaluate;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLProfile_gles_type_technique_passList }

  IXMLProfile_gles_type_technique_passList = interface(IXMLFilter)
    ['{18C47783-A687-457E-808C-1486D26ED40B}']
    { Methods & Properties }
    function Add: IXMLProfile_gles_type_technique_pass;
    function Insert(const Index: Integer): IXMLProfile_gles_type_technique_pass;

    function Get_Item(Index: Integer): IXMLProfile_gles_type_technique_pass;
    property Items[Index: Integer]: IXMLProfile_gles_type_technique_pass read Get_Item; default;
  end;

{ IXMLProfile_gles_type_technique_pass_states }

  IXMLProfile_gles_type_technique_pass_states = interface(IXML)
    ['{0A7CA7F3-21C2-449A-95B7-1003DB15FE10}']
    { Property Accessors }
    function Get_Alpha_func: IXMLAlpha_func;
    function Get_Blend_func: IXMLBlend_func;
    function Get_Clip_plane: IXMLClip_plane;
    function Get_Color_mask: IXMLColor_mask;
    function Get_Cull_face: IXMLCull_face;
    function Get_Depth_func: IXMLDepth_func;
    function Get_Depth_mask: IXMLDepth_mask;
    function Get_Depth_range: IXMLDepth_range;
    function Get_Fog_color: IXMLFog_color;
    function Get_Fog_density: IXMLFog_density;
    function Get_Fog_mode: IXMLFog_mode;
    function Get_Fog_start: IXMLFog_start;
    function Get_Fog_end: IXMLFog_end;
    function Get_Front_face: IXMLFront_face;
    function Get_Logic_op: IXMLLogic_op;
    function Get_Light_ambient: IXMLLight_ambient;
    function Get_Light_diffuse: IXMLLight_diffuse;
    function Get_Light_specular: IXMLLight_specular;
    function Get_Light_position: IXMLLight_position;
    function Get_Light_constant_attenuation: IXMLLight_constant_attenuation;
    function Get_Light_linear_attenuation: IXMLLight_linear_attenuation;
    function Get_Light_quadratic_attenuation: IXMLLight_quadratic_attenuation;
    function Get_Light_spot_cutoff: IXMLLight_spot_cutoff;
    function Get_Light_spot_direction: IXMLLight_spot_direction;
    function Get_Light_spot_exponent: IXMLLight_spot_exponent;
    function Get_Light_model_ambient: IXMLLight_model_ambient;
    function Get_Line_width: IXMLLine_width;
    function Get_Material_ambient: IXMLMaterial_ambient;
    function Get_Material_diffuse: IXMLMaterial_diffuse;
    function Get_Material_emission: IXMLMaterial_emission;
    function Get_Material_shininess: IXMLMaterial_shininess;
    function Get_Material_specular: IXMLMaterial_specular;
    function Get_Model_view_matrix: IXMLModel_view_matrix;
    function Get_Point_distance_attenuation: IXMLPoint_distance_attenuation;
    function Get_Point_fade_threshold_size: IXMLPoint_fade_threshold_size;
    function Get_Point_size: IXMLPoint_size;
    function Get_Point_size_min: IXMLPoint_size_min;
    function Get_Point_size_max: IXMLPoint_size_max;
    function Get_Polygon_offset: IXMLPolygon_offset;
    function Get_Projection_matrix: IXMLProjection_matrix;
    function Get_Scissor: IXMLScissor;
    function Get_Shade_model: IXMLShade_model;
    function Get_Stencil_func: IXMLStencil_func;
    function Get_Stencil_mask: IXMLStencil_mask;
    function Get_Stencil_op: IXMLStencil_op;
    function Get_Texture_pipeline: IXMLTexture_pipeline;
    function Get_Alpha_test_enable: IXMLAlpha_test_enable;
    function Get_Blend_enable: IXMLBlend_enable;
    function Get_Clip_plane_enable: IXMLClip_plane_enable;
    function Get_Color_logic_op_enable: IXMLColor_logic_op_enable;
    function Get_Color_material_enable: IXMLColor_material_enable;
    function Get_Cull_face_enable: IXMLCull_face_enable;
    function Get_Depth_test_enable: IXMLDepth_test_enable;
    function Get_Dither_enable: IXMLDither_enable;
    function Get_Fog_enable: IXMLFog_enable;
    function Get_Light_enable: IXMLLight_enable;
    function Get_Lighting_enable: IXMLLighting_enable;
    function Get_Light_model_two_side_enable: IXMLLight_model_two_side_enable;
    function Get_Line_smooth_enable: IXMLLine_smooth_enable;
    function Get_Multisample_enable: IXMLMultisample_enable;
    function Get_Normalize_enable: IXMLNormalize_enable;
    function Get_Point_smooth_enable: IXMLPoint_smooth_enable;
    function Get_Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable;
    function Get_Rescale_normal_enable: IXMLRescale_normal_enable;
    function Get_Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable;
    function Get_Sample_alpha_to_one_enable: IXMLSample_alpha_to_one_enable;
    function Get_Sample_coverage_enable: IXMLSample_coverage_enable;
    function Get_Scissor_test_enable: IXMLScissor_test_enable;
    function Get_Stencil_test_enable: IXMLStencil_test_enable;
    { Methods & Properties }
    property Alpha_func: IXMLAlpha_func read Get_Alpha_func;
    property Blend_func: IXMLBlend_func read Get_Blend_func;
    property Clip_plane: IXMLClip_plane read Get_Clip_plane;
    property Color_mask: IXMLColor_mask read Get_Color_mask;
    property Cull_face: IXMLCull_face read Get_Cull_face;
    property Depth_func: IXMLDepth_func read Get_Depth_func;
    property Depth_mask: IXMLDepth_mask read Get_Depth_mask;
    property Depth_range: IXMLDepth_range read Get_Depth_range;
    property Fog_color: IXMLFog_color read Get_Fog_color;
    property Fog_density: IXMLFog_density read Get_Fog_density;
    property Fog_mode: IXMLFog_mode read Get_Fog_mode;
    property Fog_start: IXMLFog_start read Get_Fog_start;
    property Fog_end: IXMLFog_end read Get_Fog_end;
    property Front_face: IXMLFront_face read Get_Front_face;
    property Logic_op: IXMLLogic_op read Get_Logic_op;
    property Light_ambient: IXMLLight_ambient read Get_Light_ambient;
    property Light_diffuse: IXMLLight_diffuse read Get_Light_diffuse;
    property Light_specular: IXMLLight_specular read Get_Light_specular;
    property Light_position: IXMLLight_position read Get_Light_position;
    property Light_constant_attenuation: IXMLLight_constant_attenuation read Get_Light_constant_attenuation;
    property Light_linear_attenuation: IXMLLight_linear_attenuation read Get_Light_linear_attenuation;
    property Light_quadratic_attenuation: IXMLLight_quadratic_attenuation read Get_Light_quadratic_attenuation;
    property Light_spot_cutoff: IXMLLight_spot_cutoff read Get_Light_spot_cutoff;
    property Light_spot_direction: IXMLLight_spot_direction read Get_Light_spot_direction;
    property Light_spot_exponent: IXMLLight_spot_exponent read Get_Light_spot_exponent;
    property Light_model_ambient: IXMLLight_model_ambient read Get_Light_model_ambient;
    property Line_width: IXMLLine_width read Get_Line_width;
    property Material_ambient: IXMLMaterial_ambient read Get_Material_ambient;
    property Material_diffuse: IXMLMaterial_diffuse read Get_Material_diffuse;
    property Material_emission: IXMLMaterial_emission read Get_Material_emission;
    property Material_shininess: IXMLMaterial_shininess read Get_Material_shininess;
    property Material_specular: IXMLMaterial_specular read Get_Material_specular;
    property Model_view_matrix: IXMLModel_view_matrix read Get_Model_view_matrix;
    property Point_distance_attenuation: IXMLPoint_distance_attenuation read Get_Point_distance_attenuation;
    property Point_fade_threshold_size: IXMLPoint_fade_threshold_size read Get_Point_fade_threshold_size;
    property Point_size: IXMLPoint_size read Get_Point_size;
    property Point_size_min: IXMLPoint_size_min read Get_Point_size_min;
    property Point_size_max: IXMLPoint_size_max read Get_Point_size_max;
    property Polygon_offset: IXMLPolygon_offset read Get_Polygon_offset;
    property Projection_matrix: IXMLProjection_matrix read Get_Projection_matrix;
    property Scissor: IXMLScissor read Get_Scissor;
    property Shade_model: IXMLShade_model read Get_Shade_model;
    property Stencil_func: IXMLStencil_func read Get_Stencil_func;
    property Stencil_mask: IXMLStencil_mask read Get_Stencil_mask;
    property Stencil_op: IXMLStencil_op read Get_Stencil_op;
    property Texture_pipeline: IXMLTexture_pipeline read Get_Texture_pipeline;
    property Alpha_test_enable: IXMLAlpha_test_enable read Get_Alpha_test_enable;
    property Blend_enable: IXMLBlend_enable read Get_Blend_enable;
    property Clip_plane_enable: IXMLClip_plane_enable read Get_Clip_plane_enable;
    property Color_logic_op_enable: IXMLColor_logic_op_enable read Get_Color_logic_op_enable;
    property Color_material_enable: IXMLColor_material_enable read Get_Color_material_enable;
    property Cull_face_enable: IXMLCull_face_enable read Get_Cull_face_enable;
    property Depth_test_enable: IXMLDepth_test_enable read Get_Depth_test_enable;
    property Dither_enable: IXMLDither_enable read Get_Dither_enable;
    property Fog_enable: IXMLFog_enable read Get_Fog_enable;
    property Light_enable: IXMLLight_enable read Get_Light_enable;
    property Lighting_enable: IXMLLighting_enable read Get_Lighting_enable;
    property Light_model_two_side_enable: IXMLLight_model_two_side_enable read Get_Light_model_two_side_enable;
    property Line_smooth_enable: IXMLLine_smooth_enable read Get_Line_smooth_enable;
    property Multisample_enable: IXMLMultisample_enable read Get_Multisample_enable;
    property Normalize_enable: IXMLNormalize_enable read Get_Normalize_enable;
    property Point_smooth_enable: IXMLPoint_smooth_enable read Get_Point_smooth_enable;
    property Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable read Get_Polygon_offset_fill_enable;
    property Rescale_normal_enable: IXMLRescale_normal_enable read Get_Rescale_normal_enable;
    property Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable read Get_Sample_alpha_to_coverage_enable;
    property Sample_alpha_to_one_enable: IXMLSample_alpha_to_one_enable read Get_Sample_alpha_to_one_enable;
    property Sample_coverage_enable: IXMLSample_coverage_enable read Get_Sample_coverage_enable;
    property Scissor_test_enable: IXMLScissor_test_enable read Get_Scissor_test_enable;
    property Stencil_test_enable: IXMLStencil_test_enable read Get_Stencil_test_enable;
  end;

{ IXMLTexture_pipeline }

  IXMLTexture_pipeline = interface(IXML)
    ['{08099160-26F3-4E1D-996D-0081D8C4A1E8}']
    { Property Accessors }
    function Get_Value: IXMLGles_texture_pipeline_type;
    { Methods & Properties }
    property Value: IXMLGles_texture_pipeline_type read Get_Value;
  end;

{ IXMLGles_texture_pipeline_type }

  IXMLGles_texture_pipeline_type = interface(IXML)
    ['{3A51F91F-E089-4C66-B12C-C68FBCE62924}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Texcombiner: IXMLGles_texcombiner_command_typeList;
    function Get_Texenv: IXMLGles_texenv_command_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Texcombiner: IXMLGles_texcombiner_command_typeList read Get_Texcombiner;
    property Texenv: IXMLGles_texenv_command_typeList read Get_Texenv;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLGles_texcombiner_command_type }

  IXMLGles_texcombiner_command_type = interface(IXML)
    ['{79416F43-9AA9-46A1-8B9D-D74661CE071C}']
    { Property Accessors }
    function Get_Constant: IXMLGles_texture_constant_type;
    function Get_RGB: IXMLGles_texcombiner_command_rgb_type;
    function Get_Alpha: IXMLGles_texcombiner_command_alpha_type;
    { Methods & Properties }
    property Constant: IXMLGles_texture_constant_type read Get_Constant;
    property RGB: IXMLGles_texcombiner_command_rgb_type read Get_RGB;
    property Alpha: IXMLGles_texcombiner_command_alpha_type read Get_Alpha;
  end;

{ IXMLGles_texcombiner_command_typeList }

  IXMLGles_texcombiner_command_typeList = interface(IXMLFilter)
    ['{E2C998D7-2C42-4E41-B881-04F8A3915AA6}']
    { Methods & Properties }
    function Add: IXMLGles_texcombiner_command_type;
    function Insert(const Index: Integer): IXMLGles_texcombiner_command_type;

    function Get_Item(Index: Integer): IXMLGles_texcombiner_command_type;
    property Items[Index: Integer]: IXMLGles_texcombiner_command_type read Get_Item; default;
  end;

{ IXMLGles_texture_constant_type }

  IXMLGles_texture_constant_type = interface(IXML)
    ['{975A18BC-10D2-4588-AAA3-6AFA3F0ACF6A}']
    { Property Accessors }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    { Methods & Properties }
    property Value: UnicodeString read Get_Value write Set_Value;
    property Param: UnicodeString read Get_Param write Set_Param;
  end;

{ IXMLGles_texcombiner_command_rgb_type }

  IXMLGles_texcombiner_command_rgb_type = interface(IXMLFilter)
    ['{0BFCFC20-E47B-42A9-9174-C8860E132D58}']
    { Property Accessors }
    function Get_Operator_: UnicodeString;
    function Get_Scale: Single;
    function Get_Argument(Index: Integer): IXMLGles_texcombiner_argument_rgb_type;
    procedure Set_Operator_(Value: UnicodeString);
    procedure Set_Scale(Value: Single);
    { Methods & Properties }
    function Add: IXMLGles_texcombiner_argument_rgb_type;
    function Insert(const Index: Integer): IXMLGles_texcombiner_argument_rgb_type;
    property Operator_: UnicodeString read Get_Operator_ write Set_Operator_;
    property Scale: Single read Get_Scale write Set_Scale;
    property Argument[Index: Integer]: IXMLGles_texcombiner_argument_rgb_type read Get_Argument; default;
  end;

{ IXMLGles_texcombiner_argument_rgb_type }

  IXMLGles_texcombiner_argument_rgb_type = interface(IXML)
    ['{ED7800A7-9A3F-4282-AAAE-1E4FDDE73A4C}']
    { Property Accessors }
    function Get_Source: UnicodeString;
    function Get_Operand: UnicodeString;
    function Get_Sampler: UnicodeString;
    procedure Set_Source(Value: UnicodeString);
    procedure Set_Operand(Value: UnicodeString);
    procedure Set_Sampler(Value: UnicodeString);
    { Methods & Properties }
    property Source: UnicodeString read Get_Source write Set_Source;
    property Operand: UnicodeString read Get_Operand write Set_Operand;
    property Sampler: UnicodeString read Get_Sampler write Set_Sampler;
  end;

{ IXMLGles_texcombiner_command_alpha_type }

  IXMLGles_texcombiner_command_alpha_type = interface(IXMLFilter)
    ['{C1D4C2AF-B501-4148-80A1-8DFF326616C9}']
    { Property Accessors }
    function Get_Operator_: UnicodeString;
    function Get_Scale: Single;
    function Get_Argument(Index: Integer): IXMLGles_texcombiner_argument_alpha_type;
    procedure Set_Operator_(Value: UnicodeString);
    procedure Set_Scale(Value: Single);
    { Methods & Properties }
    function Add: IXMLGles_texcombiner_argument_alpha_type;
    function Insert(const Index: Integer): IXMLGles_texcombiner_argument_alpha_type;
    property Operator_: UnicodeString read Get_Operator_ write Set_Operator_;
    property Scale: Single read Get_Scale write Set_Scale;
    property Argument[Index: Integer]: IXMLGles_texcombiner_argument_alpha_type read Get_Argument; default;
  end;

{ IXMLGles_texcombiner_argument_alpha_type }

  IXMLGles_texcombiner_argument_alpha_type = interface(IXML)
    ['{DCFBE34C-6143-4FA1-BD81-B08166353F54}']
    { Property Accessors }
    function Get_Source: UnicodeString;
    function Get_Operand: UnicodeString;
    function Get_Sampler: UnicodeString;
    procedure Set_Source(Value: UnicodeString);
    procedure Set_Operand(Value: UnicodeString);
    procedure Set_Sampler(Value: UnicodeString);
    { Methods & Properties }
    property Source: UnicodeString read Get_Source write Set_Source;
    property Operand: UnicodeString read Get_Operand write Set_Operand;
    property Sampler: UnicodeString read Get_Sampler write Set_Sampler;
  end;

{ IXMLGles_texenv_command_type }

  IXMLGles_texenv_command_type = interface(IXML)
    ['{E83C2ECA-AFEB-42F0-B932-D802E9D64CAB}']
    { Property Accessors }
    function Get_Operator_: UnicodeString;
    function Get_Sampler: UnicodeString;
    function Get_Constant: IXMLGles_texture_constant_type;
    procedure Set_Operator_(Value: UnicodeString);
    procedure Set_Sampler(Value: UnicodeString);
    { Methods & Properties }
    property Operator_: UnicodeString read Get_Operator_ write Set_Operator_;
    property Sampler: UnicodeString read Get_Sampler write Set_Sampler;
    property Constant: IXMLGles_texture_constant_type read Get_Constant;
  end;

{ IXMLGles_texenv_command_typeList }

  IXMLGles_texenv_command_typeList = interface(IXMLFilter)
    ['{ABA87D0A-FE26-47B2-99A2-BE93D5CEB9C6}']
    { Methods & Properties }
    function Add: IXMLGles_texenv_command_type;
    function Insert(const Index: Integer): IXMLGles_texenv_command_type;

    function Get_Item(Index: Integer): IXMLGles_texenv_command_type;
    property Items[Index: Integer]: IXMLGles_texenv_command_type read Get_Item; default;
  end;

{ IXMLProfile_gles_type_technique_pass_evaluate }

  IXMLProfile_gles_type_technique_pass_evaluate = interface(IXML)
    ['{6966DD0E-0953-4812-A4ED-CFE36C6A5D66}']
    { Property Accessors }
    function Get_Color_target: IXMLFx_colortarget_typeList;
    function Get_Depth_target: IXMLFx_depthtarget_typeList;
    function Get_Stencil_target: IXMLFx_stenciltarget_typeList;
    function Get_Color_clear: IXMLFx_clearcolor_typeList;
    function Get_Depth_clear: IXMLFx_cleardepth_typeList;
    function Get_Stencil_clear: IXMLFx_clearstencil_typeList;
    function Get_Draw: UnicodeString;
    procedure Set_Draw(Value: UnicodeString);
    { Methods & Properties }
    property Color_target: IXMLFx_colortarget_typeList read Get_Color_target;
    property Depth_target: IXMLFx_depthtarget_typeList read Get_Depth_target;
    property Stencil_target: IXMLFx_stenciltarget_typeList read Get_Stencil_target;
    property Color_clear: IXMLFx_clearcolor_typeList read Get_Color_clear;
    property Depth_clear: IXMLFx_cleardepth_typeList read Get_Depth_clear;
    property Stencil_clear: IXMLFx_clearstencil_typeList read Get_Stencil_clear;
    property Draw: UnicodeString read Get_Draw write Set_Draw;
  end;

{ IXMLLibrary_force_fields_type }

  IXMLLibrary_force_fields_type = interface(IXML)
    ['{C990092C-76CC-4FC2-B1A7-AA02CC645B06}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Force_field: IXMLForce_field_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Force_field: IXMLForce_field_typeList read Get_Force_field;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_force_fields_typeList }

  IXMLLibrary_force_fields_typeList = interface(IXMLFilter)
    ['{45D9FF3A-9BC7-4E5A-AFED-1F4F2E331156}']
    { Methods & Properties }
    function Add: IXMLLibrary_force_fields_type;
    function Insert(const Index: Integer): IXMLLibrary_force_fields_type;

    function Get_Item(Index: Integer): IXMLLibrary_force_fields_type;
    property Items[Index: Integer]: IXMLLibrary_force_fields_type read Get_Item; default;
  end;

{ IXMLForce_field_type }

  IXMLForce_field_type = interface(IXML)
    ['{05E9799B-36F8-45CB-B716-BC29D20F72E0}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLForce_field_typeList }

  IXMLForce_field_typeList = interface(IXMLFilter)
    ['{140FEEF5-ED8E-463B-8616-3E2665FA7621}']
    { Methods & Properties }
    function Add: IXMLForce_field_type;
    function Insert(const Index: Integer): IXMLForce_field_type;

    function Get_Item(Index: Integer): IXMLForce_field_type;
    property Items[Index: Integer]: IXMLForce_field_type read Get_Item; default;
  end;

{ IXMLLibrary_images_type }

  IXMLLibrary_images_type = interface(IXML)
    ['{510DB051-AFC9-4A0C-98EE-B5067AABFBA6}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Image: IXMLImage_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Image: IXMLImage_typeList read Get_Image;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_images_typeList }

  IXMLLibrary_images_typeList = interface(IXMLFilter)
    ['{6741D692-4C87-482B-A8DA-A4DE0847201B}']
    { Methods & Properties }
    function Add: IXMLLibrary_images_type;
    function Insert(const Index: Integer): IXMLLibrary_images_type;

    function Get_Item(Index: Integer): IXMLLibrary_images_type;
    property Items[Index: Integer]: IXMLLibrary_images_type read Get_Item; default;
  end;

{ IXMLImage_type }

  IXMLImage_type = interface(IXML)
    ['{52D3070B-519F-4A1A-8257-27CCC1DDD627}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Renderable: IXMLImage_type_renderable;
    function Get_Init_from: IXMLImage_type_init_from;
    function Get_Create_2d: IXMLImage_type_create_2d;
    function Get_Create_3d: IXMLImage_type_create_3d;
    function Get_Create_cube: IXMLImage_type_create_cube;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Renderable: IXMLImage_type_renderable read Get_Renderable;
    property Init_from: IXMLImage_type_init_from read Get_Init_from;
    property Create_2d: IXMLImage_type_create_2d read Get_Create_2d;
    property Create_3d: IXMLImage_type_create_3d read Get_Create_3d;
    property Create_cube: IXMLImage_type_create_cube read Get_Create_cube;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLImage_typeList }

  IXMLImage_typeList = interface(IXMLFilter)
    ['{F57D5CEB-667D-4E65-B49A-53FC3EFA28CB}']
    { Methods & Properties }
    function Add: IXMLImage_type;
    function Insert(const Index: Integer): IXMLImage_type;

    function Get_Item(Index: Integer): IXMLImage_type;
    property Items[Index: Integer]: IXMLImage_type read Get_Item; default;
  end;

{ IXMLImage_type_renderable }

  IXMLImage_type_renderable = interface(IXML)
    ['{AE6A6B01-3997-4E0A-9062-0C5F5F19CEF5}']
    { Property Accessors }
    function Get_Share: Boolean;
    procedure Set_Share(Value: Boolean);
    { Methods & Properties }
    property Share: Boolean read Get_Share write Set_Share;
  end;

{ IXMLImage_source_type }

  IXMLImage_source_type = interface(IXML)
    ['{71AF1F2D-4CF1-4896-824B-CEAD16E06548}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    function Get_Hex: IXMLImage_source_type_hex;
    procedure Set_Ref(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
    property Hex: IXMLImage_source_type_hex read Get_Hex;
  end;

{ IXMLImage_source_type_hex }

  IXMLImage_source_type_hex = interface(IXML)
    ['{6E8D015A-0E79-43B3-84E0-CBD1DEA92AA0}']
    { Property Accessors }
    function Get_Format: UnicodeString;
    procedure Set_Format(Value: UnicodeString);
    { Methods & Properties }
    property Format: UnicodeString read Get_Format write Set_Format;
  end;

{ IXMLImage_type_init_from }

  IXMLImage_type_init_from = interface(IXMLImage_source_type)
    ['{6C31F375-4242-4303-BD62-25411FAFDB2B}']
    { Property Accessors }
    function Get_Mips_generate: Boolean;
    procedure Set_Mips_generate(Value: Boolean);
    { Methods & Properties }
    property Mips_generate: Boolean read Get_Mips_generate write Set_Mips_generate;
  end;

{ IXMLImage_type_create_2d }

  IXMLImage_type_create_2d = interface(IXML)
    ['{DF1F607E-A5BF-4E99-859B-2B98BCF024E5}']
    { Property Accessors }
    function Get_Size_exact: IXMLImage_type_create_2d_size_exact;
    function Get_Size_ratio: IXMLImage_type_create_2d_size_ratio;
    function Get_Mips: IXMLImage_mips_type;
    function Get_Unnormalized: UnicodeString;
    function Get_Array_: IXMLImage_type_create_2d_array;
    function Get_Format: IXMLImage_type_create_2d_format;
    function Get_Init_from: IXMLImage_type_create_2d_init_fromList;
    procedure Set_Unnormalized(Value: UnicodeString);
    { Methods & Properties }
    property Size_exact: IXMLImage_type_create_2d_size_exact read Get_Size_exact;
    property Size_ratio: IXMLImage_type_create_2d_size_ratio read Get_Size_ratio;
    property Mips: IXMLImage_mips_type read Get_Mips;
    property Unnormalized: UnicodeString read Get_Unnormalized write Set_Unnormalized;
    property Array_: IXMLImage_type_create_2d_array read Get_Array_;
    property Format: IXMLImage_type_create_2d_format read Get_Format;
    property Init_from: IXMLImage_type_create_2d_init_fromList read Get_Init_from;
  end;

{ IXMLImage_type_create_2d_size_exact }

  IXMLImage_type_create_2d_size_exact = interface(IXML)
    ['{97DFB1E9-B612-4C83-8AA3-3E7E86AEC045}']
    { Property Accessors }
    function Get_Width: LongWord;
    function Get_Height: LongWord;
    procedure Set_Width(Value: LongWord);
    procedure Set_Height(Value: LongWord);
    { Methods & Properties }
    property Width: LongWord read Get_Width write Set_Width;
    property Height: LongWord read Get_Height write Set_Height;
  end;

{ IXMLImage_type_create_2d_size_ratio }

  IXMLImage_type_create_2d_size_ratio = interface(IXML)
    ['{9513B640-DC4F-46AD-BCC8-AB3F608DC2EE}']
    { Property Accessors }
    function Get_Width: Single;
    function Get_Height: Single;
    procedure Set_Width(Value: Single);
    procedure Set_Height(Value: Single);
    { Methods & Properties }
    property Width: Single read Get_Width write Set_Width;
    property Height: Single read Get_Height write Set_Height;
  end;

{ IXMLImage_mips_type }

  IXMLImage_mips_type = interface(IXML)
    ['{FDED55A3-8D7D-4053-AC52-C99EE417E2F7}']
    { Property Accessors }
    function Get_Levels: LongWord;
    function Get_Auto_generate: Boolean;
    procedure Set_Levels(Value: LongWord);
    procedure Set_Auto_generate(Value: Boolean);
    { Methods & Properties }
    property Levels: LongWord read Get_Levels write Set_Levels;
    property Auto_generate: Boolean read Get_Auto_generate write Set_Auto_generate;
  end;

{ IXMLImage_type_create_2d_array }

  IXMLImage_type_create_2d_array = interface(IXML)
    ['{96451CA1-1D9B-4F85-9840-1085E8A445A4}']
    { Property Accessors }
    function Get_Length: LongWord;
    procedure Set_Length(Value: LongWord);
    { Methods & Properties }
    property Length: LongWord read Get_Length write Set_Length;
  end;

{ IXMLImage_type_create_2d_format }

  IXMLImage_type_create_2d_format = interface(IXML)
    ['{53A3C0B7-A18C-43B1-83AC-A87E36429E0A}']
    { Property Accessors }
    function Get_Hint: IXMLImage_type_create_2d_format_hint;
    function Get_Exact: UnicodeString;
    procedure Set_Exact(Value: UnicodeString);
    { Methods & Properties }
    property Hint: IXMLImage_type_create_2d_format_hint read Get_Hint;
    property Exact: UnicodeString read Get_Exact write Set_Exact;
  end;

{ IXMLImage_type_create_2d_format_hint }

  IXMLImage_type_create_2d_format_hint = interface(IXML)
    ['{729F506A-4887-409D-B62A-1B5AF744B003}']
    { Property Accessors }
    function Get_Channels: UnicodeString;
    function Get_Range: UnicodeString;
    function Get_Precision: UnicodeString;
    function Get_Space: UnicodeString;
    procedure Set_Channels(Value: UnicodeString);
    procedure Set_Range(Value: UnicodeString);
    procedure Set_Precision(Value: UnicodeString);
    procedure Set_Space(Value: UnicodeString);
    { Methods & Properties }
    property Channels: UnicodeString read Get_Channels write Set_Channels;
    property Range: UnicodeString read Get_Range write Set_Range;
    property Precision: UnicodeString read Get_Precision write Set_Precision;
    property Space: UnicodeString read Get_Space write Set_Space;
  end;

{ IXMLImage_type_create_2d_init_from }

  IXMLImage_type_create_2d_init_from = interface(IXMLImage_source_type)
    ['{9C46984B-1167-4F22-99FB-9AB6EB1867AD}']
    { Property Accessors }
    function Get_Mip_index: LongWord;
    function Get_Array_index: LongWord;
    procedure Set_Mip_index(Value: LongWord);
    procedure Set_Array_index(Value: LongWord);
    { Methods & Properties }
    property Mip_index: LongWord read Get_Mip_index write Set_Mip_index;
    property Array_index: LongWord read Get_Array_index write Set_Array_index;
  end;

{ IXMLImage_type_create_2d_init_fromList }

  IXMLImage_type_create_2d_init_fromList = interface(IXMLFilter)
    ['{E1439912-D88F-48F2-ADD5-B14E0E78DA47}']
    { Methods & Properties }
    function Add: IXMLImage_type_create_2d_init_from;
    function Insert(const Index: Integer): IXMLImage_type_create_2d_init_from;

    function Get_Item(Index: Integer): IXMLImage_type_create_2d_init_from;
    property Items[Index: Integer]: IXMLImage_type_create_2d_init_from read Get_Item; default;
  end;

{ IXMLImage_type_create_3d }

  IXMLImage_type_create_3d = interface(IXML)
    ['{0850C6CB-33F2-4C56-B41D-E18F3C4B3249}']
    { Property Accessors }
    function Get_Size: IXMLImage_type_create_3d_size;
    function Get_Mips: IXMLImage_mips_type;
    function Get_Array_: IXMLImage_type_create_3d_array;
    function Get_Format: IXMLImage_type_create_3d_format;
    function Get_Init_from: IXMLImage_type_create_3d_init_fromList;
    { Methods & Properties }
    property Size: IXMLImage_type_create_3d_size read Get_Size;
    property Mips: IXMLImage_mips_type read Get_Mips;
    property Array_: IXMLImage_type_create_3d_array read Get_Array_;
    property Format: IXMLImage_type_create_3d_format read Get_Format;
    property Init_from: IXMLImage_type_create_3d_init_fromList read Get_Init_from;
  end;

{ IXMLImage_type_create_3d_size }

  IXMLImage_type_create_3d_size = interface(IXML)
    ['{02C6907F-320D-4213-8138-03F2C55BFCE0}']
    { Property Accessors }
    function Get_Width: LongWord;
    function Get_Height: LongWord;
    function Get_Depth: LongWord;
    procedure Set_Width(Value: LongWord);
    procedure Set_Height(Value: LongWord);
    procedure Set_Depth(Value: LongWord);
    { Methods & Properties }
    property Width: LongWord read Get_Width write Set_Width;
    property Height: LongWord read Get_Height write Set_Height;
    property Depth: LongWord read Get_Depth write Set_Depth;
  end;

{ IXMLImage_type_create_3d_array }

  IXMLImage_type_create_3d_array = interface(IXML)
    ['{0CF464F1-3A26-472D-86F2-4EFCF7B82EC3}']
    { Property Accessors }
    function Get_Length: LongWord;
    procedure Set_Length(Value: LongWord);
    { Methods & Properties }
    property Length: LongWord read Get_Length write Set_Length;
  end;

{ IXMLImage_type_create_3d_format }

  IXMLImage_type_create_3d_format = interface(IXML)
    ['{46458A4D-21E5-43F2-B177-0E70B08CC324}']
    { Property Accessors }
    function Get_Hint: IXMLImage_type_create_3d_format_hint;
    function Get_Exact: UnicodeString;
    procedure Set_Exact(Value: UnicodeString);
    { Methods & Properties }
    property Hint: IXMLImage_type_create_3d_format_hint read Get_Hint;
    property Exact: UnicodeString read Get_Exact write Set_Exact;
  end;

{ IXMLImage_type_create_3d_format_hint }

  IXMLImage_type_create_3d_format_hint = interface(IXML)
    ['{AD054115-61E3-406D-ADB5-1C979188DF83}']
    { Property Accessors }
    function Get_Channels: UnicodeString;
    function Get_Range: UnicodeString;
    function Get_Precision: UnicodeString;
    function Get_Space: UnicodeString;
    procedure Set_Channels(Value: UnicodeString);
    procedure Set_Range(Value: UnicodeString);
    procedure Set_Precision(Value: UnicodeString);
    procedure Set_Space(Value: UnicodeString);
    { Methods & Properties }
    property Channels: UnicodeString read Get_Channels write Set_Channels;
    property Range: UnicodeString read Get_Range write Set_Range;
    property Precision: UnicodeString read Get_Precision write Set_Precision;
    property Space: UnicodeString read Get_Space write Set_Space;
  end;

{ IXMLImage_type_create_3d_init_from }

  IXMLImage_type_create_3d_init_from = interface(IXMLImage_source_type)
    ['{2E6B33B8-C603-4442-9882-2F8967EAFEB9}']
    { Property Accessors }
    function Get_Depth: LongWord;
    function Get_Mip_index: LongWord;
    function Get_Array_index: LongWord;
    procedure Set_Depth(Value: LongWord);
    procedure Set_Mip_index(Value: LongWord);
    procedure Set_Array_index(Value: LongWord);
    { Methods & Properties }
    property Depth: LongWord read Get_Depth write Set_Depth;
    property Mip_index: LongWord read Get_Mip_index write Set_Mip_index;
    property Array_index: LongWord read Get_Array_index write Set_Array_index;
  end;

{ IXMLImage_type_create_3d_init_fromList }

  IXMLImage_type_create_3d_init_fromList = interface(IXMLFilter)
    ['{9C3EB80B-C872-443A-A7BC-FFB55FFA4529}']
    { Methods & Properties }
    function Add: IXMLImage_type_create_3d_init_from;
    function Insert(const Index: Integer): IXMLImage_type_create_3d_init_from;

    function Get_Item(Index: Integer): IXMLImage_type_create_3d_init_from;
    property Items[Index: Integer]: IXMLImage_type_create_3d_init_from read Get_Item; default;
  end;

{ IXMLImage_type_create_cube }

  IXMLImage_type_create_cube = interface(IXML)
    ['{787760FA-E758-42A0-AC90-B433A03E25B7}']
    { Property Accessors }
    function Get_Size: IXMLImage_type_create_cube_size;
    function Get_Mips: IXMLImage_mips_type;
    function Get_Array_: IXMLImage_type_create_cube_array;
    function Get_Format: IXMLImage_type_create_cube_format;
    function Get_Init_from: IXMLImage_type_create_cube_init_fromList;
    { Methods & Properties }
    property Size: IXMLImage_type_create_cube_size read Get_Size;
    property Mips: IXMLImage_mips_type read Get_Mips;
    property Array_: IXMLImage_type_create_cube_array read Get_Array_;
    property Format: IXMLImage_type_create_cube_format read Get_Format;
    property Init_from: IXMLImage_type_create_cube_init_fromList read Get_Init_from;
  end;

{ IXMLImage_type_create_cube_size }

  IXMLImage_type_create_cube_size = interface(IXML)
    ['{6F055695-C303-4D22-BBDC-BAB551C6CFF9}']
    { Property Accessors }
    function Get_Width: LongWord;
    procedure Set_Width(Value: LongWord);
    { Methods & Properties }
    property Width: LongWord read Get_Width write Set_Width;
  end;

{ IXMLImage_type_create_cube_array }

  IXMLImage_type_create_cube_array = interface(IXML)
    ['{C6F917EB-08F6-4215-9FD5-225706106F56}']
    { Property Accessors }
    function Get_Length: LongWord;
    procedure Set_Length(Value: LongWord);
    { Methods & Properties }
    property Length: LongWord read Get_Length write Set_Length;
  end;

{ IXMLImage_type_create_cube_format }

  IXMLImage_type_create_cube_format = interface(IXML)
    ['{7D0532E8-599B-4982-8E82-C72271E7DA91}']
    { Property Accessors }
    function Get_Hint: IXMLImage_type_create_cube_format_hint;
    function Get_Exact: UnicodeString;
    procedure Set_Exact(Value: UnicodeString);
    { Methods & Properties }
    property Hint: IXMLImage_type_create_cube_format_hint read Get_Hint;
    property Exact: UnicodeString read Get_Exact write Set_Exact;
  end;

{ IXMLImage_type_create_cube_format_hint }

  IXMLImage_type_create_cube_format_hint = interface(IXML)
    ['{357F87AA-A893-4C3B-AE79-7D69B1DBBDE2}']
    { Property Accessors }
    function Get_Channels: UnicodeString;
    function Get_Range: UnicodeString;
    function Get_Precision: UnicodeString;
    function Get_Space: UnicodeString;
    procedure Set_Channels(Value: UnicodeString);
    procedure Set_Range(Value: UnicodeString);
    procedure Set_Precision(Value: UnicodeString);
    procedure Set_Space(Value: UnicodeString);
    { Methods & Properties }
    property Channels: UnicodeString read Get_Channels write Set_Channels;
    property Range: UnicodeString read Get_Range write Set_Range;
    property Precision: UnicodeString read Get_Precision write Set_Precision;
    property Space: UnicodeString read Get_Space write Set_Space;
  end;

{ IXMLImage_type_create_cube_init_from }

  IXMLImage_type_create_cube_init_from = interface(IXMLImage_source_type)
    ['{534C02A6-2029-4217-949F-7A7B3CB3C4D9}']
    { Property Accessors }
    function Get_Face: UnicodeString;
    function Get_Mip_index: LongWord;
    function Get_Array_index: LongWord;
    procedure Set_Face(Value: UnicodeString);
    procedure Set_Mip_index(Value: LongWord);
    procedure Set_Array_index(Value: LongWord);
    { Methods & Properties }
    property Face: UnicodeString read Get_Face write Set_Face;
    property Mip_index: LongWord read Get_Mip_index write Set_Mip_index;
    property Array_index: LongWord read Get_Array_index write Set_Array_index;
  end;

{ IXMLImage_type_create_cube_init_fromList }

  IXMLImage_type_create_cube_init_fromList = interface(IXMLFilter)
    ['{1A3EBEF8-140F-45C6-BB7A-C61CEEFFEA23}']
    { Methods & Properties }
    function Add: IXMLImage_type_create_cube_init_from;
    function Insert(const Index: Integer): IXMLImage_type_create_cube_init_from;

    function Get_Item(Index: Integer): IXMLImage_type_create_cube_init_from;
    property Items[Index: Integer]: IXMLImage_type_create_cube_init_from read Get_Item; default;
  end;

{ IXMLLibrary_lights_type }

  IXMLLibrary_lights_type = interface(IXML)
    ['{32D4903B-E969-4559-92A6-71D0E919E2F8}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Light: IXMLLight_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Light: IXMLLight_typeList read Get_Light;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_lights_typeList }

  IXMLLibrary_lights_typeList = interface(IXMLFilter)
    ['{F9973F75-A1FD-435A-8784-11BB5B0FD695}']
    { Methods & Properties }
    function Add: IXMLLibrary_lights_type;
    function Insert(const Index: Integer): IXMLLibrary_lights_type;

    function Get_Item(Index: Integer): IXMLLibrary_lights_type;
    property Items[Index: Integer]: IXMLLibrary_lights_type read Get_Item; default;
  end;

{ IXMLLight_type }

  IXMLLight_type = interface(IXML)
    ['{9F6E9ABC-F55D-4807-B532-682898DED081}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Technique_common: IXMLLight_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Technique_common: IXMLLight_type_technique_common read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLight_typeList }

  IXMLLight_typeList = interface(IXMLFilter)
    ['{4AEF2D45-7DE8-4544-99ED-642F317B9082}']
    { Methods & Properties }
    function Add: IXMLLight_type;
    function Insert(const Index: Integer): IXMLLight_type;

    function Get_Item(Index: Integer): IXMLLight_type;
    property Items[Index: Integer]: IXMLLight_type read Get_Item; default;
  end;

{ IXMLLight_type_technique_common }

  IXMLLight_type_technique_common = interface(IXML)
    ['{CC60B330-FF32-46F5-B44F-812FA84E4AB2}']
    { Property Accessors }
    function Get_Ambient: IXMLLight_type_technique_common_ambient;
    function Get_Directional: IXMLLight_type_technique_common_directional;
    function Get_Point: IXMLLight_type_technique_common_point;
    function Get_Spot: IXMLLight_type_technique_common_spot;
    { Methods & Properties }
    property Ambient: IXMLLight_type_technique_common_ambient read Get_Ambient;
    property Directional: IXMLLight_type_technique_common_directional read Get_Directional;
    property Point: IXMLLight_type_technique_common_point read Get_Point;
    property Spot: IXMLLight_type_technique_common_spot read Get_Spot;
  end;

{ IXMLLight_type_technique_common_ambient }

  IXMLLight_type_technique_common_ambient = interface(IXML)
    ['{EF59023B-94E6-4A54-92BB-C93877A9ACD6}']
    { Property Accessors }
    function Get_Color: IXMLTargetable_float3_type;
    { Methods & Properties }
    property Color: IXMLTargetable_float3_type read Get_Color;
  end;

{ IXMLTargetable_float3_type }

  IXMLTargetable_float3_type = interface(IXML)
    ['{76A4C901-138D-4B03-974E-605AA4074A0C}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLLight_type_technique_common_directional }

  IXMLLight_type_technique_common_directional = interface(IXML)
    ['{DB61AF8C-86BC-428B-A45F-0E450FBEAA96}']
    { Property Accessors }
    function Get_Color: IXMLTargetable_float3_type;
    { Methods & Properties }
    property Color: IXMLTargetable_float3_type read Get_Color;
  end;

{ IXMLLight_type_technique_common_point }

  IXMLLight_type_technique_common_point = interface(IXML)
    ['{E805EF1B-F133-4D8E-A149-1E9580FE9FAA}']
    { Property Accessors }
    function Get_Color: IXMLTargetable_float3_type;
    function Get_Constant_attenuation: IXMLTargetable_float_type;
    function Get_Linear_attenuation: IXMLTargetable_float_type;
    function Get_Quadratic_attenuation: IXMLTargetable_float_type;
    { Methods & Properties }
    property Color: IXMLTargetable_float3_type read Get_Color;
    property Constant_attenuation: IXMLTargetable_float_type read Get_Constant_attenuation;
    property Linear_attenuation: IXMLTargetable_float_type read Get_Linear_attenuation;
    property Quadratic_attenuation: IXMLTargetable_float_type read Get_Quadratic_attenuation;
  end;

{ IXMLLight_type_technique_common_spot }

  IXMLLight_type_technique_common_spot = interface(IXML)
    ['{D7073D07-29FC-4D05-9E5E-3B77F0CAEE7D}']
    { Property Accessors }
    function Get_Color: IXMLTargetable_float3_type;
    function Get_Constant_attenuation: IXMLTargetable_float_type;
    function Get_Linear_attenuation: IXMLTargetable_float_type;
    function Get_Quadratic_attenuation: IXMLTargetable_float_type;
    function Get_Falloff_angle: IXMLTargetable_float_type;
    function Get_Falloff_exponent: IXMLTargetable_float_type;
    { Methods & Properties }
    property Color: IXMLTargetable_float3_type read Get_Color;
    property Constant_attenuation: IXMLTargetable_float_type read Get_Constant_attenuation;
    property Linear_attenuation: IXMLTargetable_float_type read Get_Linear_attenuation;
    property Quadratic_attenuation: IXMLTargetable_float_type read Get_Quadratic_attenuation;
    property Falloff_angle: IXMLTargetable_float_type read Get_Falloff_angle;
    property Falloff_exponent: IXMLTargetable_float_type read Get_Falloff_exponent;
  end;

{ IXMLLibrary_materials_type }

  IXMLLibrary_materials_type = interface(IXML)
    ['{DC404D52-91A6-40D8-ACA2-1F2DB1DB2DC1}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Material: IXMLMaterial_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Material: IXMLMaterial_typeList read Get_Material;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_materials_typeList }

  IXMLLibrary_materials_typeList = interface(IXMLFilter)
    ['{095A2657-D4CD-4DB2-A687-FFBFBE9E4BF8}']
    { Methods & Properties }
    function Add: IXMLLibrary_materials_type;
    function Insert(const Index: Integer): IXMLLibrary_materials_type;

    function Get_Item(Index: Integer): IXMLLibrary_materials_type;
    property Items[Index: Integer]: IXMLLibrary_materials_type read Get_Item; default;
  end;

{ IXMLMaterial_type }

  IXMLMaterial_type = interface(IXML)
    ['{7E2E2F2C-D985-4263-A41B-985FAEFCC2DE}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Instance_effect: IXMLInstance_effect_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Instance_effect: IXMLInstance_effect_type read Get_Instance_effect;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLMaterial_typeList }

  IXMLMaterial_typeList = interface(IXMLFilter)
    ['{ED4F63B1-0F45-40DF-886E-135C90AB75AF}']
    { Methods & Properties }
    function Add: IXMLMaterial_type;
    function Insert(const Index: Integer): IXMLMaterial_type;

    function Get_Item(Index: Integer): IXMLMaterial_type;
    property Items[Index: Integer]: IXMLMaterial_type read Get_Item; default;
  end;

{ IXMLInstance_effect_type }

  IXMLInstance_effect_type = interface(IXML)
    ['{2C4662CD-C723-4B45-AFCD-7C03C6CE9826}']
    { Property Accessors }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Technique_hint: IXMLInstance_effect_type_technique_hintList;
    function Get_Setparam: IXMLInstance_effect_type_setparamList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Url: UnicodeString read Get_Url write Set_Url;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Technique_hint: IXMLInstance_effect_type_technique_hintList read Get_Technique_hint;
    property Setparam: IXMLInstance_effect_type_setparamList read Get_Setparam;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_effect_type_technique_hint }

  IXMLInstance_effect_type_technique_hint = interface(IXML)
    ['{72FE3B81-287B-463E-9FC4-9E25CEEEEB67}']
    { Property Accessors }
    function Get_Platform: UnicodeString;
    function Get_Profile: UnicodeString;
    function Get_Ref: UnicodeString;
    procedure Set_Platform(Value: UnicodeString);
    procedure Set_Profile(Value: UnicodeString);
    procedure Set_Ref(Value: UnicodeString);
    { Methods & Properties }
    property Platform: UnicodeString read Get_Platform write Set_Platform;
    property Profile: UnicodeString read Get_Profile write Set_Profile;
    property Ref: UnicodeString read Get_Ref write Set_Ref;
  end;

{ IXMLInstance_effect_type_technique_hintList }

  IXMLInstance_effect_type_technique_hintList = interface(IXMLFilter)
    ['{F6DBE24A-3305-4D18-A02A-AF8728142B51}']
    { Methods & Properties }
    function Add: IXMLInstance_effect_type_technique_hint;
    function Insert(const Index: Integer): IXMLInstance_effect_type_technique_hint;

    function Get_Item(Index: Integer): IXMLInstance_effect_type_technique_hint;
    property Items[Index: Integer]: IXMLInstance_effect_type_technique_hint read Get_Item; default;
  end;

{ IXMLInstance_effect_type_setparam }

  IXMLInstance_effect_type_setparam = interface(IXML)
    ['{7A0926ED-96B4-4826-AD1B-20DC6891316E}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Sampler_image: IXMLInstance_image_type;
    function Get_Sampler_states: IXMLSampler_states;
    procedure Set_Ref(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Bool2: UnicodeString read Get_Bool2 write Set_Bool2;
    property Bool3: UnicodeString read Get_Bool3 write Set_Bool3;
    property Bool4: UnicodeString read Get_Bool4 write Set_Bool4;
    property Int: Int64 read Get_Int write Set_Int;
    property Int2: UnicodeString read Get_Int2 write Set_Int2;
    property Int3: UnicodeString read Get_Int3 write Set_Int3;
    property Int4: UnicodeString read Get_Int4 write Set_Int4;
    property Float: Double read Get_Float write Set_Float;
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Float3: UnicodeString read Get_Float3 write Set_Float3;
    property Float4: UnicodeString read Get_Float4 write Set_Float4;
    property Float2x1: UnicodeString read Get_Float2x1 write Set_Float2x1;
    property Float2x2: UnicodeString read Get_Float2x2 write Set_Float2x2;
    property Float2x3: UnicodeString read Get_Float2x3 write Set_Float2x3;
    property Float2x4: UnicodeString read Get_Float2x4 write Set_Float2x4;
    property Float3x1: UnicodeString read Get_Float3x1 write Set_Float3x1;
    property Float3x2: UnicodeString read Get_Float3x2 write Set_Float3x2;
    property Float3x3: UnicodeString read Get_Float3x3 write Set_Float3x3;
    property Float3x4: UnicodeString read Get_Float3x4 write Set_Float3x4;
    property Float4x1: UnicodeString read Get_Float4x1 write Set_Float4x1;
    property Float4x2: UnicodeString read Get_Float4x2 write Set_Float4x2;
    property Float4x3: UnicodeString read Get_Float4x3 write Set_Float4x3;
    property Float4x4: UnicodeString read Get_Float4x4 write Set_Float4x4;
    property Enum: UnicodeString read Get_Enum write Set_Enum;
    property Sampler_image: IXMLInstance_image_type read Get_Sampler_image;
    property Sampler_states: IXMLSampler_states read Get_Sampler_states;
  end;

{ IXMLInstance_effect_type_setparamList }

  IXMLInstance_effect_type_setparamList = interface(IXMLFilter)
    ['{EAA436A7-9D08-47AE-8688-95E3E755975A}']
    { Methods & Properties }
    function Add: IXMLInstance_effect_type_setparam;
    function Insert(const Index: Integer): IXMLInstance_effect_type_setparam;

    function Get_Item(Index: Integer): IXMLInstance_effect_type_setparam;
    property Items[Index: Integer]: IXMLInstance_effect_type_setparam read Get_Item; default;
  end;

{ IXMLSampler_states }

  IXMLSampler_states = interface(IXML)
    ['{7BD6FF60-5023-46EF-BBF7-4CD8F1068BF8}']
    { Property Accessors }
    function Get_Wrap_s: UnicodeString;
    function Get_Wrap_t: UnicodeString;
    function Get_Wrap_p: UnicodeString;
    function Get_Minfilter: UnicodeString;
    function Get_Magfilter: UnicodeString;
    function Get_Mipfilter: UnicodeString;
    function Get_Border_color: UnicodeString;
    function Get_Mip_max_level: Byte;
    function Get_Mip_min_level: Byte;
    function Get_Mip_bias: Single;
    function Get_Max_anisotropy: LongWord;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Wrap_s(Value: UnicodeString);
    procedure Set_Wrap_t(Value: UnicodeString);
    procedure Set_Wrap_p(Value: UnicodeString);
    procedure Set_Minfilter(Value: UnicodeString);
    procedure Set_Magfilter(Value: UnicodeString);
    procedure Set_Mipfilter(Value: UnicodeString);
    procedure Set_Border_color(Value: UnicodeString);
    procedure Set_Mip_max_level(Value: Byte);
    procedure Set_Mip_min_level(Value: Byte);
    procedure Set_Mip_bias(Value: Single);
    procedure Set_Max_anisotropy(Value: LongWord);
    { Methods & Properties }
    property Wrap_s: UnicodeString read Get_Wrap_s write Set_Wrap_s;
    property Wrap_t: UnicodeString read Get_Wrap_t write Set_Wrap_t;
    property Wrap_p: UnicodeString read Get_Wrap_p write Set_Wrap_p;
    property Minfilter: UnicodeString read Get_Minfilter write Set_Minfilter;
    property Magfilter: UnicodeString read Get_Magfilter write Set_Magfilter;
    property Mipfilter: UnicodeString read Get_Mipfilter write Set_Mipfilter;
    property Border_color: UnicodeString read Get_Border_color write Set_Border_color;
    property Mip_max_level: Byte read Get_Mip_max_level write Set_Mip_max_level;
    property Mip_min_level: Byte read Get_Mip_min_level write Set_Mip_min_level;
    property Mip_bias: Single read Get_Mip_bias write Set_Mip_bias;
    property Max_anisotropy: LongWord read Get_Max_anisotropy write Set_Max_anisotropy;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_nodes_type }

  IXMLLibrary_nodes_type = interface(IXML)
    ['{A86ADD10-5CDD-4582-A1E5-E1B32460BB6B}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Node: IXMLNode_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Node: IXMLNode_typeList read Get_Node;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_nodes_typeList }

  IXMLLibrary_nodes_typeList = interface(IXMLFilter)
    ['{D5C5A734-21C0-4C52-A2F7-62ACCC8E2CCC}']
    { Methods & Properties }
    function Add: IXMLLibrary_nodes_type;
    function Insert(const Index: Integer): IXMLLibrary_nodes_type;

    function Get_Item(Index: Integer): IXMLLibrary_nodes_type;
    property Items[Index: Integer]: IXMLLibrary_nodes_type read Get_Item; default;
  end;

{ IXMLNode_type }

  IXMLNode_type = interface(IXML)
    ['{80D9A4D0-86ED-4A97-86C4-9B9269BF2950}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Type_: UnicodeString;
    function Get_Layer: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Lookat: IXMLLookat_typeList;
    function Get_Matrix: IXMLMatrix_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Scale: IXMLScale_typeList;
    function Get_Skew: IXMLSkew_typeList;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Instance_camera: IXMLInstance_camera_typeList;
    function Get_Instance_controller: IXMLInstance_controller_typeList;
    function Get_Instance_geometry: IXMLInstance_geometry_typeList;
    function Get_Instance_light: IXMLInstance_light_typeList;
    function Get_Instance_node: IXMLInstance_node_typeList;
    function Get_Node: IXMLNode_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Layer(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Type_: UnicodeString read Get_Type_ write Set_Type_;
    property Layer: UnicodeString read Get_Layer write Set_Layer;
    property Asset: IXMLAsset_type read Get_Asset;
    property Lookat: IXMLLookat_typeList read Get_Lookat;
    property Matrix: IXMLMatrix_typeList read Get_Matrix;
    property Rotate: IXMLRotate_typeList read Get_Rotate;
    property Scale: IXMLScale_typeList read Get_Scale;
    property Skew: IXMLSkew_typeList read Get_Skew;
    property Translate: IXMLTranslate_typeList read Get_Translate;
    property Instance_camera: IXMLInstance_camera_typeList read Get_Instance_camera;
    property Instance_controller: IXMLInstance_controller_typeList read Get_Instance_controller;
    property Instance_geometry: IXMLInstance_geometry_typeList read Get_Instance_geometry;
    property Instance_light: IXMLInstance_light_typeList read Get_Instance_light;
    property Instance_node: IXMLInstance_node_typeList read Get_Instance_node;
    property Node: IXMLNode_typeList read Get_Node;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLNode_typeList }

  IXMLNode_typeList = interface(IXMLFilter)
    ['{484AE685-C0A4-4BB2-AA7B-0C8DFFA7B983}']
    { Methods & Properties }
    function Add: IXMLNode_type;
    function Insert(const Index: Integer): IXMLNode_type;

    function Get_Item(Index: Integer): IXMLNode_type;
    property Items[Index: Integer]: IXMLNode_type read Get_Item; default;
  end;

{ IXMLLookat_type }

  IXMLLookat_type = interface(IXML)
    ['{B0F811E7-06DD-46CE-9383-1034213EF3E8}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLLookat_typeList }

  IXMLLookat_typeList = interface(IXMLFilter)
    ['{DDCAD133-55DC-40AD-BF4A-361B31BCFC62}']
    { Methods & Properties }
    function Add: IXMLLookat_type;
    function Insert(const Index: Integer): IXMLLookat_type;

    function Get_Item(Index: Integer): IXMLLookat_type;
    property Items[Index: Integer]: IXMLLookat_type read Get_Item; default;
  end;

{ IXMLMatrix_type }

  IXMLMatrix_type = interface(IXML)
    ['{AB98A022-39FF-42FB-8EAA-F3C77AA3A7F5}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLMatrix_typeList }

  IXMLMatrix_typeList = interface(IXMLFilter)
    ['{F666417E-2448-4DA7-B31D-F5BE2C663A40}']
    { Methods & Properties }
    function Add: IXMLMatrix_type;
    function Insert(const Index: Integer): IXMLMatrix_type;

    function Get_Item(Index: Integer): IXMLMatrix_type;
    property Items[Index: Integer]: IXMLMatrix_type read Get_Item; default;
  end;

{ IXMLRotate_type }

  IXMLRotate_type = interface(IXML)
    ['{ABAB85B5-04AD-42FF-8057-73F98EE21F06}']
  end;

{ IXMLRotate_typeList }

  IXMLRotate_typeList = interface(IXMLFilter)
    ['{AB442D8F-D134-4F41-B1B6-F0448B21BDC5}']
    { Methods & Properties }
    function Add: IXMLRotate_type;
    function Insert(const Index: Integer): IXMLRotate_type;

    function Get_Item(Index: Integer): IXMLRotate_type;
    property Items[Index: Integer]: IXMLRotate_type read Get_Item; default;
  end;

{ IXMLScale_type }

  IXMLScale_type = interface(IXML)
    ['{CEE38DC3-6539-4881-96BC-D3955224C1CD}']
  end;

{ IXMLScale_typeList }

  IXMLScale_typeList = interface(IXMLFilter)
    ['{8356967F-64EA-467E-BF0E-A7CD6E0222B0}']
    { Methods & Properties }
    function Add: IXMLScale_type;
    function Insert(const Index: Integer): IXMLScale_type;

    function Get_Item(Index: Integer): IXMLScale_type;
    property Items[Index: Integer]: IXMLScale_type read Get_Item; default;
  end;

{ IXMLSkew_type }

  IXMLSkew_type = interface(IXML)
    ['{E65D77D8-DF02-4E8B-9E8A-10A0BCDE1141}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLSkew_typeList }

  IXMLSkew_typeList = interface(IXMLFilter)
    ['{C0D3BB54-7196-4111-AA35-1C837F4B478B}']
    { Methods & Properties }
    function Add: IXMLSkew_type;
    function Insert(const Index: Integer): IXMLSkew_type;

    function Get_Item(Index: Integer): IXMLSkew_type;
    property Items[Index: Integer]: IXMLSkew_type read Get_Item; default;
  end;

{ IXMLTranslate_type }

  IXMLTranslate_type = interface(IXML)
    ['{1AE85197-4A7B-4DDB-868E-2BD840EEFA7A}']
  end;

{ IXMLTranslate_typeList }

  IXMLTranslate_typeList = interface(IXMLFilter)
    ['{E86E701F-6580-47FE-8879-57C998A4A5DF}']
    { Methods & Properties }
    function Add: IXMLTranslate_type;
    function Insert(const Index: Integer): IXMLTranslate_type;

    function Get_Item(Index: Integer): IXMLTranslate_type;
    property Items[Index: Integer]: IXMLTranslate_type read Get_Item; default;
  end;

{ IXMLInstance_camera_type }

  IXMLInstance_camera_type = interface(IXMLInstance_with_extra_type)
    ['{57967E5D-E5C0-4120-86FF-959C4261230A}']
  end;

{ IXMLInstance_camera_typeList }

  IXMLInstance_camera_typeList = interface(IXMLFilter)
    ['{887B2444-9B95-4E42-95BD-3CBC04617D50}']
    { Methods & Properties }
    function Add: IXMLInstance_camera_type;
    function Insert(const Index: Integer): IXMLInstance_camera_type;

    function Get_Item(Index: Integer): IXMLInstance_camera_type;
    property Items[Index: Integer]: IXMLInstance_camera_type read Get_Item; default;
  end;

{ IXMLInstance_controller_type }

  IXMLInstance_controller_type = interface(IXML)
    ['{2DD11C69-7114-4CE0-B0BF-2D884D64FFD1}']
    { Property Accessors }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Skeleton: IXMLAnyURIList;
    function Get_Bind_material: IXMLBind_material_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Url: UnicodeString read Get_Url write Set_Url;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Skeleton: IXMLAnyURIList read Get_Skeleton;
    property Bind_material: IXMLBind_material_type read Get_Bind_material;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_controller_typeList }

  IXMLInstance_controller_typeList = interface(IXMLFilter)
    ['{1EC7CCCB-EAD2-4179-98BD-59F576026E71}']
    { Methods & Properties }
    function Add: IXMLInstance_controller_type;
    function Insert(const Index: Integer): IXMLInstance_controller_type;

    function Get_Item(Index: Integer): IXMLInstance_controller_type;
    property Items[Index: Integer]: IXMLInstance_controller_type read Get_Item; default;
  end;

{ IXMLBind_material_type }

  IXMLBind_material_type = interface(IXML)
    ['{57182ABE-6B99-4E82-A256-94D372D6BCDA}']
    { Property Accessors }
    function Get_Param: IXMLParam_typeList;
    function Get_Technique_common: IXMLBind_material_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Param: IXMLParam_typeList read Get_Param;
    property Technique_common: IXMLBind_material_type_technique_common read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLBind_material_type_technique_common }

  IXMLBind_material_type_technique_common = interface(IXMLFilter)
    ['{D3D840AC-A22D-466B-84BB-C07F0949EA57}']
    { Property Accessors }
    function Get_Instance_material(Index: Integer): IXMLInstance_material_type;
    { Methods & Properties }
    function Add: IXMLInstance_material_type;
    function Insert(const Index: Integer): IXMLInstance_material_type;
    property Instance_material[Index: Integer]: IXMLInstance_material_type read Get_Instance_material; default;
  end;

{ IXMLInstance_material_type }

  IXMLInstance_material_type = interface(IXML)
    ['{F7A205C0-E2FA-4289-9799-1F5ECCD400FB}']
    { Property Accessors }
    function Get_Symbol: UnicodeString;
    function Get_Target: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Bind: IXMLInstance_material_type_bindList;
    function Get_Bind_vertex_input: IXMLInstance_material_type_bind_vertex_inputList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Target(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Symbol: UnicodeString read Get_Symbol write Set_Symbol;
    property Target: UnicodeString read Get_Target write Set_Target;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Bind: IXMLInstance_material_type_bindList read Get_Bind;
    property Bind_vertex_input: IXMLInstance_material_type_bind_vertex_inputList read Get_Bind_vertex_input;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_material_type_bind }

  IXMLInstance_material_type_bind = interface(IXML)
    ['{E6B47FD8-FB46-450E-952F-E7A12BEED941}']
    { Property Accessors }
    function Get_Semantic: UnicodeString;
    function Get_Target: UnicodeString;
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Target(Value: UnicodeString);
    { Methods & Properties }
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Target: UnicodeString read Get_Target write Set_Target;
  end;

{ IXMLInstance_material_type_bindList }

  IXMLInstance_material_type_bindList = interface(IXMLFilter)
    ['{841E1982-5295-4FE1-9574-C7EF39C3EEE9}']
    { Methods & Properties }
    function Add: IXMLInstance_material_type_bind;
    function Insert(const Index: Integer): IXMLInstance_material_type_bind;

    function Get_Item(Index: Integer): IXMLInstance_material_type_bind;
    property Items[Index: Integer]: IXMLInstance_material_type_bind read Get_Item; default;
  end;

{ IXMLInstance_material_type_bind_vertex_input }

  IXMLInstance_material_type_bind_vertex_input = interface(IXML)
    ['{B83DA7B3-AE96-4EE1-B4A2-1CC4319BF5A9}']
    { Property Accessors }
    function Get_Semantic: UnicodeString;
    function Get_Input_semantic: UnicodeString;
    function Get_Input_set: Int64;
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Input_semantic(Value: UnicodeString);
    procedure Set_Input_set(Value: Int64);
    { Methods & Properties }
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Input_semantic: UnicodeString read Get_Input_semantic write Set_Input_semantic;
    property Input_set: Int64 read Get_Input_set write Set_Input_set;
  end;

{ IXMLInstance_material_type_bind_vertex_inputList }

  IXMLInstance_material_type_bind_vertex_inputList = interface(IXMLFilter)
    ['{D816B776-7AB7-471B-A172-EB9286C2C768}']
    { Methods & Properties }
    function Add: IXMLInstance_material_type_bind_vertex_input;
    function Insert(const Index: Integer): IXMLInstance_material_type_bind_vertex_input;

    function Get_Item(Index: Integer): IXMLInstance_material_type_bind_vertex_input;
    property Items[Index: Integer]: IXMLInstance_material_type_bind_vertex_input read Get_Item; default;
  end;

{ IXMLInstance_geometry_type }

  IXMLInstance_geometry_type = interface(IXML)
    ['{A094D438-12A5-45BB-B3BB-11CD1A279BDE}']
    { Property Accessors }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Bind_material: IXMLBind_material_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Url: UnicodeString read Get_Url write Set_Url;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Bind_material: IXMLBind_material_type read Get_Bind_material;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_geometry_typeList }

  IXMLInstance_geometry_typeList = interface(IXMLFilter)
    ['{73A91257-91DF-4729-BA1F-4E9D0417DACF}']
    { Methods & Properties }
    function Add: IXMLInstance_geometry_type;
    function Insert(const Index: Integer): IXMLInstance_geometry_type;

    function Get_Item(Index: Integer): IXMLInstance_geometry_type;
    property Items[Index: Integer]: IXMLInstance_geometry_type read Get_Item; default;
  end;

{ IXMLInstance_light_type }

  IXMLInstance_light_type = interface(IXMLInstance_with_extra_type)
    ['{1FCC5574-BF72-470E-B16F-F80D993E08C8}']
  end;

{ IXMLInstance_light_typeList }

  IXMLInstance_light_typeList = interface(IXMLFilter)
    ['{9957EC14-ABD0-46C3-93D7-9CFE6C607EE2}']
    { Methods & Properties }
    function Add: IXMLInstance_light_type;
    function Insert(const Index: Integer): IXMLInstance_light_type;

    function Get_Item(Index: Integer): IXMLInstance_light_type;
    property Items[Index: Integer]: IXMLInstance_light_type read Get_Item; default;
  end;

{ IXMLInstance_node_type }

  IXMLInstance_node_type = interface(IXMLInstance_with_extra_type)
    ['{B94FA60E-71CE-431B-B27B-8399FB0F59F6}']
    { Property Accessors }
    function Get_Proxy: UnicodeString;
    procedure Set_Proxy(Value: UnicodeString);
    { Methods & Properties }
    property Proxy: UnicodeString read Get_Proxy write Set_Proxy;
  end;

{ IXMLInstance_node_typeList }

  IXMLInstance_node_typeList = interface(IXMLFilter)
    ['{AB84CC73-29D3-4917-89E0-A4FC4F50858B}']
    { Methods & Properties }
    function Add: IXMLInstance_node_type;
    function Insert(const Index: Integer): IXMLInstance_node_type;

    function Get_Item(Index: Integer): IXMLInstance_node_type;
    property Items[Index: Integer]: IXMLInstance_node_type read Get_Item; default;
  end;

{ IXMLLibrary_physics_materials_type }

  IXMLLibrary_physics_materials_type = interface(IXML)
    ['{24F93830-9D11-4309-B5D1-C67190B1074D}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Physics_material: IXMLPhysics_material_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Physics_material: IXMLPhysics_material_typeList read Get_Physics_material;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_physics_materials_typeList }

  IXMLLibrary_physics_materials_typeList = interface(IXMLFilter)
    ['{C6D23C00-48C3-43BE-9C34-5587FF453544}']
    { Methods & Properties }
    function Add: IXMLLibrary_physics_materials_type;
    function Insert(const Index: Integer): IXMLLibrary_physics_materials_type;

    function Get_Item(Index: Integer): IXMLLibrary_physics_materials_type;
    property Items[Index: Integer]: IXMLLibrary_physics_materials_type read Get_Item; default;
  end;

{ IXMLPhysics_material_type }

  IXMLPhysics_material_type = interface(IXML)
    ['{1E4E39E3-01AB-45C9-B427-F5CB73E35A17}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Technique_common: IXMLPhysics_material_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Technique_common: IXMLPhysics_material_type_technique_common read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLPhysics_material_typeList }

  IXMLPhysics_material_typeList = interface(IXMLFilter)
    ['{3001DCBB-6B8C-491F-9EC9-50FD8EBB3925}']
    { Methods & Properties }
    function Add: IXMLPhysics_material_type;
    function Insert(const Index: Integer): IXMLPhysics_material_type;

    function Get_Item(Index: Integer): IXMLPhysics_material_type;
    property Items[Index: Integer]: IXMLPhysics_material_type read Get_Item; default;
  end;

{ IXMLPhysics_material_type_technique_common }

  IXMLPhysics_material_type_technique_common = interface(IXML)
    ['{0E043F9C-ACCA-4F5E-A2C3-124E43360817}']
    { Property Accessors }
    function Get_Dynamic_friction: IXMLTargetable_float_type;
    function Get_Restitution: IXMLTargetable_float_type;
    function Get_Static_friction: IXMLTargetable_float_type;
    { Methods & Properties }
    property Dynamic_friction: IXMLTargetable_float_type read Get_Dynamic_friction;
    property Restitution: IXMLTargetable_float_type read Get_Restitution;
    property Static_friction: IXMLTargetable_float_type read Get_Static_friction;
  end;

{ IXMLLibrary_physics_models_type }

  IXMLLibrary_physics_models_type = interface(IXML)
    ['{4D72FE82-EB9A-4788-866D-293F9505FDF4}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Physics_model: IXMLPhysics_model_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Physics_model: IXMLPhysics_model_typeList read Get_Physics_model;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_physics_models_typeList }

  IXMLLibrary_physics_models_typeList = interface(IXMLFilter)
    ['{54560EED-E8A3-4A60-A815-EDAADD9EA759}']
    { Methods & Properties }
    function Add: IXMLLibrary_physics_models_type;
    function Insert(const Index: Integer): IXMLLibrary_physics_models_type;

    function Get_Item(Index: Integer): IXMLLibrary_physics_models_type;
    property Items[Index: Integer]: IXMLLibrary_physics_models_type read Get_Item; default;
  end;

{ IXMLPhysics_model_type }

  IXMLPhysics_model_type = interface(IXML)
    ['{F91567C3-DA4C-4087-AED8-C2ED03A59958}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Rigid_body: IXMLRigid_body_typeList;
    function Get_Rigid_constraint: IXMLRigid_constraint_typeList;
    function Get_Instance_physics_model: IXMLInstance_physics_model_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Rigid_body: IXMLRigid_body_typeList read Get_Rigid_body;
    property Rigid_constraint: IXMLRigid_constraint_typeList read Get_Rigid_constraint;
    property Instance_physics_model: IXMLInstance_physics_model_typeList read Get_Instance_physics_model;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLPhysics_model_typeList }

  IXMLPhysics_model_typeList = interface(IXMLFilter)
    ['{0A82128E-1E20-4192-8FA5-CFAD28314E83}']
    { Methods & Properties }
    function Add: IXMLPhysics_model_type;
    function Insert(const Index: Integer): IXMLPhysics_model_type;

    function Get_Item(Index: Integer): IXMLPhysics_model_type;
    property Items[Index: Integer]: IXMLPhysics_model_type read Get_Item; default;
  end;

{ IXMLRigid_body_type }

  IXMLRigid_body_type = interface(IXML)
    ['{36317B44-DE69-4D62-B9BC-EF1EA2470B36}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Technique_common: IXMLRigid_body_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Technique_common: IXMLRigid_body_type_technique_common read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLRigid_body_typeList }

  IXMLRigid_body_typeList = interface(IXMLFilter)
    ['{CA85938E-3C17-4C2A-BFC2-5CD0263F2735}']
    { Methods & Properties }
    function Add: IXMLRigid_body_type;
    function Insert(const Index: Integer): IXMLRigid_body_type;

    function Get_Item(Index: Integer): IXMLRigid_body_type;
    property Items[Index: Integer]: IXMLRigid_body_type read Get_Item; default;
  end;

{ IXMLRigid_body_type_technique_common }

  IXMLRigid_body_type_technique_common = interface(IXML)
    ['{EC8A548F-3B8D-4F6B-B422-908B64D1481C}']
    { Property Accessors }
    function Get_Dynamic: IXMLRigid_body_type_technique_common_dynamic;
    function Get_Mass: IXMLTargetable_float_type;
    function Get_Mass_frame: IXMLRigid_body_type_technique_common_mass_frame;
    function Get_Inertia: IXMLTargetable_float3_type;
    function Get_Instance_physics_material: IXMLInstance_physics_material_type;
    function Get_Physics_material: IXMLPhysics_material_type;
    function Get_Shape: IXMLRigid_body_type_technique_common_shapeList;
    { Methods & Properties }
    property Dynamic: IXMLRigid_body_type_technique_common_dynamic read Get_Dynamic;
    property Mass: IXMLTargetable_float_type read Get_Mass;
    property Mass_frame: IXMLRigid_body_type_technique_common_mass_frame read Get_Mass_frame;
    property Inertia: IXMLTargetable_float3_type read Get_Inertia;
    property Instance_physics_material: IXMLInstance_physics_material_type read Get_Instance_physics_material;
    property Physics_material: IXMLPhysics_material_type read Get_Physics_material;
    property Shape: IXMLRigid_body_type_technique_common_shapeList read Get_Shape;
  end;

{ IXMLRigid_body_type_technique_common_dynamic }

  IXMLRigid_body_type_technique_common_dynamic = interface(IXML)
    ['{245219C6-BDBB-4AB2-8AB0-23C9345AC4FB}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLRigid_body_type_technique_common_mass_frame }

  IXMLRigid_body_type_technique_common_mass_frame = interface(IXML)
    ['{24F6F5F0-7138-4557-8A32-C5F4791DEB6F}']
    { Property Accessors }
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    { Methods & Properties }
    property Translate: IXMLTranslate_typeList read Get_Translate;
    property Rotate: IXMLRotate_typeList read Get_Rotate;
  end;

{ IXMLInstance_physics_material_type }

  IXMLInstance_physics_material_type = interface(IXMLInstance_with_extra_type)
    ['{D527CF24-3210-4037-96CD-9411F58D0D58}']
  end;

{ IXMLRigid_body_type_technique_common_shape }

  IXMLRigid_body_type_technique_common_shape = interface(IXML)
    ['{CCDA060C-F3B2-48BB-99A5-B79D306FB2C6}']
    { Property Accessors }
    function Get_Hollow: IXMLRigid_body_type_technique_common_shape_hollow;
    function Get_Mass: IXMLTargetable_float_type;
    function Get_Density: IXMLTargetable_float_type;
    function Get_Instance_physics_material: IXMLInstance_physics_material_type;
    function Get_Physics_material: IXMLPhysics_material_type;
    function Get_Instance_geometry: IXMLInstance_geometry_type;
    function Get_Plane: IXMLPlane_type;
    function Get_Box: IXMLBox_type;
    function Get_Sphere: IXMLSphere_type;
    function Get_Cylinder: IXMLCylinder_type;
    function Get_Capsule: IXMLCapsule_type;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Hollow: IXMLRigid_body_type_technique_common_shape_hollow read Get_Hollow;
    property Mass: IXMLTargetable_float_type read Get_Mass;
    property Density: IXMLTargetable_float_type read Get_Density;
    property Instance_physics_material: IXMLInstance_physics_material_type read Get_Instance_physics_material;
    property Physics_material: IXMLPhysics_material_type read Get_Physics_material;
    property Instance_geometry: IXMLInstance_geometry_type read Get_Instance_geometry;
    property Plane: IXMLPlane_type read Get_Plane;
    property Box: IXMLBox_type read Get_Box;
    property Sphere: IXMLSphere_type read Get_Sphere;
    property Cylinder: IXMLCylinder_type read Get_Cylinder;
    property Capsule: IXMLCapsule_type read Get_Capsule;
    property Translate: IXMLTranslate_typeList read Get_Translate;
    property Rotate: IXMLRotate_typeList read Get_Rotate;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLRigid_body_type_technique_common_shapeList }

  IXMLRigid_body_type_technique_common_shapeList = interface(IXMLFilter)
    ['{C45ABAA1-7147-4676-8992-B463606B7A1A}']
    { Methods & Properties }
    function Add: IXMLRigid_body_type_technique_common_shape;
    function Insert(const Index: Integer): IXMLRigid_body_type_technique_common_shape;

    function Get_Item(Index: Integer): IXMLRigid_body_type_technique_common_shape;
    property Items[Index: Integer]: IXMLRigid_body_type_technique_common_shape read Get_Item; default;
  end;

{ IXMLRigid_body_type_technique_common_shape_hollow }

  IXMLRigid_body_type_technique_common_shape_hollow = interface(IXML)
    ['{21CE7379-A0B2-4EF0-9102-92A0B04C1DD9}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLBox_type }

  IXMLBox_type = interface(IXML)
    ['{C4EB7FA1-2C80-4D15-91F6-F4085ED7489D}']
    { Property Accessors }
    function Get_Half_extents: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Half_extents(Value: UnicodeString);
    { Methods & Properties }
    property Half_extents: UnicodeString read Get_Half_extents write Set_Half_extents;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLCylinder_type }

  IXMLCylinder_type = interface(IXML)
    ['{BB8DC5A1-00B0-4D69-A5CC-9BC82A477209}']
    { Property Accessors }
    function Get_Height: Double;
    function Get_Radius: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Height(Value: Double);
    procedure Set_Radius(Value: UnicodeString);
    { Methods & Properties }
    property Height: Double read Get_Height write Set_Height;
    property Radius: UnicodeString read Get_Radius write Set_Radius;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLCapsule_type }

  IXMLCapsule_type = interface(IXML)
    ['{A507C6C4-9FD4-4EB4-81FA-87204176C287}']
    { Property Accessors }
    function Get_Height: Double;
    function Get_Radius: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Height(Value: Double);
    procedure Set_Radius(Value: UnicodeString);
    { Methods & Properties }
    property Height: Double read Get_Height write Set_Height;
    property Radius: UnicodeString read Get_Radius write Set_Radius;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLRigid_constraint_type }

  IXMLRigid_constraint_type = interface(IXML)
    ['{BDB16885-8C19-44B7-98F5-218553A9B847}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Ref_attachment: IXMLRigid_constraint_type_ref_attachment;
    function Get_Attachment: IXMLRigid_constraint_type_attachment;
    function Get_Technique_common: IXMLRigid_constraint_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Ref_attachment: IXMLRigid_constraint_type_ref_attachment read Get_Ref_attachment;
    property Attachment: IXMLRigid_constraint_type_attachment read Get_Attachment;
    property Technique_common: IXMLRigid_constraint_type_technique_common read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLRigid_constraint_typeList }

  IXMLRigid_constraint_typeList = interface(IXMLFilter)
    ['{A7DE783D-FA02-41B9-9827-0E6A5FCB61C6}']
    { Methods & Properties }
    function Add: IXMLRigid_constraint_type;
    function Insert(const Index: Integer): IXMLRigid_constraint_type;

    function Get_Item(Index: Integer): IXMLRigid_constraint_type;
    property Items[Index: Integer]: IXMLRigid_constraint_type read Get_Item; default;
  end;

{ IXMLRigid_constraint_type_ref_attachment }

  IXMLRigid_constraint_type_ref_attachment = interface(IXML)
    ['{1DBD9467-E1B1-4149-9836-2A86E6EF4EE7}']
    { Property Accessors }
    function Get_Rigid_body: UnicodeString;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Rigid_body(Value: UnicodeString);
    { Methods & Properties }
    property Rigid_body: UnicodeString read Get_Rigid_body write Set_Rigid_body;
    property Translate: IXMLTranslate_typeList read Get_Translate;
    property Rotate: IXMLRotate_typeList read Get_Rotate;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLRigid_constraint_type_attachment }

  IXMLRigid_constraint_type_attachment = interface(IXML)
    ['{34826EE1-E4F0-4681-A228-501DE46C149B}']
    { Property Accessors }
    function Get_Rigid_body: UnicodeString;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Rigid_body(Value: UnicodeString);
    { Methods & Properties }
    property Rigid_body: UnicodeString read Get_Rigid_body write Set_Rigid_body;
    property Translate: IXMLTranslate_typeList read Get_Translate;
    property Rotate: IXMLRotate_typeList read Get_Rotate;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLRigid_constraint_type_technique_common }

  IXMLRigid_constraint_type_technique_common = interface(IXML)
    ['{C1B893CF-EC4D-496C-A88E-146F991F50F8}']
    { Property Accessors }
    function Get_Enabled: IXMLRigid_constraint_type_technique_common_enabled;
    function Get_Interpenetrate: IXMLRigid_constraint_type_technique_common_interpenetrate;
    function Get_Limits: IXMLRigid_constraint_type_technique_common_limits;
    function Get_Spring: IXMLRigid_constraint_type_technique_common_spring;
    { Methods & Properties }
    property Enabled: IXMLRigid_constraint_type_technique_common_enabled read Get_Enabled;
    property Interpenetrate: IXMLRigid_constraint_type_technique_common_interpenetrate read Get_Interpenetrate;
    property Limits: IXMLRigid_constraint_type_technique_common_limits read Get_Limits;
    property Spring: IXMLRigid_constraint_type_technique_common_spring read Get_Spring;
  end;

{ IXMLRigid_constraint_type_technique_common_enabled }

  IXMLRigid_constraint_type_technique_common_enabled = interface(IXML)
    ['{2982F54A-C07E-4F7B-AC4F-C8A48FC53278}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLRigid_constraint_type_technique_common_interpenetrate }

  IXMLRigid_constraint_type_technique_common_interpenetrate = interface(IXML)
    ['{1CD2FE43-4A62-4D92-95EE-AA88926BAF0B}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLRigid_constraint_type_technique_common_limits }

  IXMLRigid_constraint_type_technique_common_limits = interface(IXML)
    ['{F34CAABA-5EAD-4AF7-B2A8-A1850AC45465}']
    { Property Accessors }
    function Get_Swing_cone_and_twist: IXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist;
    function Get_Linear: IXMLRigid_constraint_type_technique_common_limits_linear;
    { Methods & Properties }
    property Swing_cone_and_twist: IXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist read Get_Swing_cone_and_twist;
    property Linear: IXMLRigid_constraint_type_technique_common_limits_linear read Get_Linear;
  end;

{ IXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist }

  IXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist = interface(IXML)
    ['{BFFB1247-9A6A-4C14-8163-9D00276CD3E5}']
    { Property Accessors }
    function Get_Min: IXMLTargetable_float3_type;
    function Get_Max: IXMLTargetable_float3_type;
    { Methods & Properties }
    property Min: IXMLTargetable_float3_type read Get_Min;
    property Max: IXMLTargetable_float3_type read Get_Max;
  end;

{ IXMLRigid_constraint_type_technique_common_limits_linear }

  IXMLRigid_constraint_type_technique_common_limits_linear = interface(IXML)
    ['{0D511563-68E3-4517-AA56-69881C7D2C2C}']
    { Property Accessors }
    function Get_Min: IXMLTargetable_float3_type;
    function Get_Max: IXMLTargetable_float3_type;
    { Methods & Properties }
    property Min: IXMLTargetable_float3_type read Get_Min;
    property Max: IXMLTargetable_float3_type read Get_Max;
  end;

{ IXMLRigid_constraint_type_technique_common_spring }

  IXMLRigid_constraint_type_technique_common_spring = interface(IXML)
    ['{0FF683F7-AC1A-48FB-88B7-E57A30813195}']
    { Property Accessors }
    function Get_Angular: IXMLRigid_constraint_type_technique_common_spring_angular;
    function Get_Linear: IXMLRigid_constraint_type_technique_common_spring_linear;
    { Methods & Properties }
    property Angular: IXMLRigid_constraint_type_technique_common_spring_angular read Get_Angular;
    property Linear: IXMLRigid_constraint_type_technique_common_spring_linear read Get_Linear;
  end;

{ IXMLRigid_constraint_type_technique_common_spring_angular }

  IXMLRigid_constraint_type_technique_common_spring_angular = interface(IXML)
    ['{EDCA2642-840A-4A7A-9F56-67236B6D7FE6}']
    { Property Accessors }
    function Get_Stiffness: IXMLTargetable_float_type;
    function Get_Damping: IXMLTargetable_float_type;
    function Get_Target_value: IXMLTargetable_float_type;
    { Methods & Properties }
    property Stiffness: IXMLTargetable_float_type read Get_Stiffness;
    property Damping: IXMLTargetable_float_type read Get_Damping;
    property Target_value: IXMLTargetable_float_type read Get_Target_value;
  end;

{ IXMLRigid_constraint_type_technique_common_spring_linear }

  IXMLRigid_constraint_type_technique_common_spring_linear = interface(IXML)
    ['{714D2603-8A4F-461E-AFBF-335FC53F8A24}']
    { Property Accessors }
    function Get_Stiffness: IXMLTargetable_float_type;
    function Get_Damping: IXMLTargetable_float_type;
    function Get_Target_value: IXMLTargetable_float_type;
    { Methods & Properties }
    property Stiffness: IXMLTargetable_float_type read Get_Stiffness;
    property Damping: IXMLTargetable_float_type read Get_Damping;
    property Target_value: IXMLTargetable_float_type read Get_Target_value;
  end;

{ IXMLInstance_physics_model_type }

  IXMLInstance_physics_model_type = interface(IXML)
    ['{2440C978-ECC2-4BB2-AB32-07E636BBCE6E}']
    { Property Accessors }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Parent: UnicodeString;
    function Get_Instance_force_field: IXMLInstance_force_field_typeList;
    function Get_Instance_rigid_body: IXMLInstance_rigid_body_typeList;
    function Get_Instance_rigid_constraint: IXMLInstance_rigid_constraint_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Parent(Value: UnicodeString);
    { Methods & Properties }
    property Url: UnicodeString read Get_Url write Set_Url;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Parent: UnicodeString read Get_Parent write Set_Parent;
    property Instance_force_field: IXMLInstance_force_field_typeList read Get_Instance_force_field;
    property Instance_rigid_body: IXMLInstance_rigid_body_typeList read Get_Instance_rigid_body;
    property Instance_rigid_constraint: IXMLInstance_rigid_constraint_typeList read Get_Instance_rigid_constraint;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_physics_model_typeList }

  IXMLInstance_physics_model_typeList = interface(IXMLFilter)
    ['{F2472D51-CF3A-4682-898E-5CCA83D1B34C}']
    { Methods & Properties }
    function Add: IXMLInstance_physics_model_type;
    function Insert(const Index: Integer): IXMLInstance_physics_model_type;

    function Get_Item(Index: Integer): IXMLInstance_physics_model_type;
    property Items[Index: Integer]: IXMLInstance_physics_model_type read Get_Item; default;
  end;

{ IXMLInstance_force_field_type }

  IXMLInstance_force_field_type = interface(IXMLInstance_with_extra_type)
    ['{7ED9765B-E20D-4428-B54C-17957FC79126}']
  end;

{ IXMLInstance_force_field_typeList }

  IXMLInstance_force_field_typeList = interface(IXMLFilter)
    ['{C628CA92-0C20-4EF4-BA1F-71260B7287A0}']
    { Methods & Properties }
    function Add: IXMLInstance_force_field_type;
    function Insert(const Index: Integer): IXMLInstance_force_field_type;

    function Get_Item(Index: Integer): IXMLInstance_force_field_type;
    property Items[Index: Integer]: IXMLInstance_force_field_type read Get_Item; default;
  end;

{ IXMLInstance_rigid_body_type }

  IXMLInstance_rigid_body_type = interface(IXML)
    ['{84B956DF-3D6E-47E8-A633-7722C39919BC}']
    { Property Accessors }
    function Get_Body: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Target: UnicodeString;
    function Get_Technique_common: IXMLInstance_rigid_body_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Body(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Target(Value: UnicodeString);
    { Methods & Properties }
    property Body: UnicodeString read Get_Body write Set_Body;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Target: UnicodeString read Get_Target write Set_Target;
    property Technique_common: IXMLInstance_rigid_body_type_technique_common read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_rigid_body_typeList }

  IXMLInstance_rigid_body_typeList = interface(IXMLFilter)
    ['{5BF138B8-BD6A-4348-9A9C-324C82FD9F40}']
    { Methods & Properties }
    function Add: IXMLInstance_rigid_body_type;
    function Insert(const Index: Integer): IXMLInstance_rigid_body_type;

    function Get_Item(Index: Integer): IXMLInstance_rigid_body_type;
    property Items[Index: Integer]: IXMLInstance_rigid_body_type read Get_Item; default;
  end;

{ IXMLInstance_rigid_body_type_technique_common }

  IXMLInstance_rigid_body_type_technique_common = interface(IXML)
    ['{C0D0AFAD-9324-4F6F-9154-0FA4C92EEA32}']
    { Property Accessors }
    function Get_Angular_velocity: UnicodeString;
    function Get_Velocity: UnicodeString;
    function Get_Dynamic: IXMLInstance_rigid_body_type_technique_common_dynamic;
    function Get_Mass: IXMLTargetable_float_type;
    function Get_Mass_frame: IXMLInstance_rigid_body_type_technique_common_mass_frame;
    function Get_Inertia: IXMLTargetable_float3_type;
    function Get_Instance_physics_material: IXMLInstance_physics_material_type;
    function Get_Physics_material: IXMLPhysics_material_type;
    function Get_Shape: IXMLInstance_rigid_body_type_technique_common_shapeList;
    procedure Set_Angular_velocity(Value: UnicodeString);
    procedure Set_Velocity(Value: UnicodeString);
    { Methods & Properties }
    property Angular_velocity: UnicodeString read Get_Angular_velocity write Set_Angular_velocity;
    property Velocity: UnicodeString read Get_Velocity write Set_Velocity;
    property Dynamic: IXMLInstance_rigid_body_type_technique_common_dynamic read Get_Dynamic;
    property Mass: IXMLTargetable_float_type read Get_Mass;
    property Mass_frame: IXMLInstance_rigid_body_type_technique_common_mass_frame read Get_Mass_frame;
    property Inertia: IXMLTargetable_float3_type read Get_Inertia;
    property Instance_physics_material: IXMLInstance_physics_material_type read Get_Instance_physics_material;
    property Physics_material: IXMLPhysics_material_type read Get_Physics_material;
    property Shape: IXMLInstance_rigid_body_type_technique_common_shapeList read Get_Shape;
  end;

{ IXMLInstance_rigid_body_type_technique_common_dynamic }

  IXMLInstance_rigid_body_type_technique_common_dynamic = interface(IXML)
    ['{2EB6015A-8A2D-48FB-9EC0-4C1756AE3B98}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLInstance_rigid_body_type_technique_common_mass_frame }

  IXMLInstance_rigid_body_type_technique_common_mass_frame = interface(IXML)
    ['{8EDF54D1-BDBD-49D0-A15B-787B37990AB9}']
    { Property Accessors }
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    { Methods & Properties }
    property Translate: IXMLTranslate_typeList read Get_Translate;
    property Rotate: IXMLRotate_typeList read Get_Rotate;
  end;

{ IXMLInstance_rigid_body_type_technique_common_shape }

  IXMLInstance_rigid_body_type_technique_common_shape = interface(IXML)
    ['{B4AA8286-1889-4235-B94B-46A352743259}']
    { Property Accessors }
    function Get_Hollow: IXMLInstance_rigid_body_type_technique_common_shape_hollow;
    function Get_Mass: IXMLTargetable_float_type;
    function Get_Density: IXMLTargetable_float_type;
    function Get_Instance_physics_material: IXMLInstance_physics_material_type;
    function Get_Physics_material: IXMLPhysics_material_type;
    function Get_Instance_geometry: IXMLInstance_geometry_type;
    function Get_Plane: IXMLPlane_type;
    function Get_Box: IXMLBox_type;
    function Get_Sphere: IXMLSphere_type;
    function Get_Cylinder: IXMLCylinder_type;
    function Get_Capsule: IXMLCapsule_type;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Hollow: IXMLInstance_rigid_body_type_technique_common_shape_hollow read Get_Hollow;
    property Mass: IXMLTargetable_float_type read Get_Mass;
    property Density: IXMLTargetable_float_type read Get_Density;
    property Instance_physics_material: IXMLInstance_physics_material_type read Get_Instance_physics_material;
    property Physics_material: IXMLPhysics_material_type read Get_Physics_material;
    property Instance_geometry: IXMLInstance_geometry_type read Get_Instance_geometry;
    property Plane: IXMLPlane_type read Get_Plane;
    property Box: IXMLBox_type read Get_Box;
    property Sphere: IXMLSphere_type read Get_Sphere;
    property Cylinder: IXMLCylinder_type read Get_Cylinder;
    property Capsule: IXMLCapsule_type read Get_Capsule;
    property Translate: IXMLTranslate_typeList read Get_Translate;
    property Rotate: IXMLRotate_typeList read Get_Rotate;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_rigid_body_type_technique_common_shapeList }

  IXMLInstance_rigid_body_type_technique_common_shapeList = interface(IXMLFilter)
    ['{386D9DD2-FB93-4A91-B3B2-F12CD4C930D8}']
    { Methods & Properties }
    function Add: IXMLInstance_rigid_body_type_technique_common_shape;
    function Insert(const Index: Integer): IXMLInstance_rigid_body_type_technique_common_shape;

    function Get_Item(Index: Integer): IXMLInstance_rigid_body_type_technique_common_shape;
    property Items[Index: Integer]: IXMLInstance_rigid_body_type_technique_common_shape read Get_Item; default;
  end;

{ IXMLInstance_rigid_body_type_technique_common_shape_hollow }

  IXMLInstance_rigid_body_type_technique_common_shape_hollow = interface(IXML)
    ['{D2AA3837-552A-47A8-B2A1-6CA544C115B8}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLInstance_rigid_constraint_type }

  IXMLInstance_rigid_constraint_type = interface(IXMLFilter)
    ['{19591973-BCA9-40A6-B2A2-DB7ECA9B3E0B}']
    { Property Accessors }
    function Get_Constraint: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Extra(Index: Integer): IXMLExtra_type;
    procedure Set_Constraint(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    function Add: IXMLExtra_type;
    function Insert(const Index: Integer): IXMLExtra_type;
    property Constraint: UnicodeString read Get_Constraint write Set_Constraint;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Extra[Index: Integer]: IXMLExtra_type read Get_Extra; default;
  end;

{ IXMLInstance_rigid_constraint_typeList }

  IXMLInstance_rigid_constraint_typeList = interface(IXMLFilter)
    ['{A953D189-D85B-476D-81E1-C5E35EA5C4C1}']
    { Methods & Properties }
    function Add: IXMLInstance_rigid_constraint_type;
    function Insert(const Index: Integer): IXMLInstance_rigid_constraint_type;

    function Get_Item(Index: Integer): IXMLInstance_rigid_constraint_type;
    property Items[Index: Integer]: IXMLInstance_rigid_constraint_type read Get_Item; default;
  end;

{ IXMLLibrary_physics_scenes_type }

  IXMLLibrary_physics_scenes_type = interface(IXML)
    ['{A6204C37-07D0-441E-B26E-E7C70F1AE123}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Physics_scene: IXMLPhysics_scene_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Physics_scene: IXMLPhysics_scene_typeList read Get_Physics_scene;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_physics_scenes_typeList }

  IXMLLibrary_physics_scenes_typeList = interface(IXMLFilter)
    ['{871C7616-E7C8-4D9D-BA35-7ACC79C2ED5A}']
    { Methods & Properties }
    function Add: IXMLLibrary_physics_scenes_type;
    function Insert(const Index: Integer): IXMLLibrary_physics_scenes_type;

    function Get_Item(Index: Integer): IXMLLibrary_physics_scenes_type;
    property Items[Index: Integer]: IXMLLibrary_physics_scenes_type read Get_Item; default;
  end;

{ IXMLPhysics_scene_type }

  IXMLPhysics_scene_type = interface(IXML)
    ['{44456666-C635-4CC1-95A5-BDC2E5DAA15C}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Instance_force_field: IXMLInstance_force_field_typeList;
    function Get_Instance_physics_model: IXMLInstance_physics_model_typeList;
    function Get_Technique_common: IXMLPhysics_scene_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Instance_force_field: IXMLInstance_force_field_typeList read Get_Instance_force_field;
    property Instance_physics_model: IXMLInstance_physics_model_typeList read Get_Instance_physics_model;
    property Technique_common: IXMLPhysics_scene_type_technique_common read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLPhysics_scene_typeList }

  IXMLPhysics_scene_typeList = interface(IXMLFilter)
    ['{E78DEFAC-A13A-4B85-B2AA-B40FDC0C2615}']
    { Methods & Properties }
    function Add: IXMLPhysics_scene_type;
    function Insert(const Index: Integer): IXMLPhysics_scene_type;

    function Get_Item(Index: Integer): IXMLPhysics_scene_type;
    property Items[Index: Integer]: IXMLPhysics_scene_type read Get_Item; default;
  end;

{ IXMLPhysics_scene_type_technique_common }

  IXMLPhysics_scene_type_technique_common = interface(IXML)
    ['{4E599D32-3EE3-44BC-B5DB-D6FC766525C9}']
    { Property Accessors }
    function Get_Gravity: IXMLTargetable_float3_type;
    function Get_Time_step: IXMLTargetable_float_type;
    { Methods & Properties }
    property Gravity: IXMLTargetable_float3_type read Get_Gravity;
    property Time_step: IXMLTargetable_float_type read Get_Time_step;
  end;

{ IXMLLibrary_visual_scenes_type }

  IXMLLibrary_visual_scenes_type = interface(IXML)
    ['{C7E104AB-373D-4D5E-BDD8-4B125A8542BF}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Visual_scene: IXMLVisual_scene_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Visual_scene: IXMLVisual_scene_typeList read Get_Visual_scene;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_visual_scenes_typeList }

  IXMLLibrary_visual_scenes_typeList = interface(IXMLFilter)
    ['{31D19CE1-E239-4171-80AE-8A46D5E1C5DE}']
    { Methods & Properties }
    function Add: IXMLLibrary_visual_scenes_type;
    function Insert(const Index: Integer): IXMLLibrary_visual_scenes_type;

    function Get_Item(Index: Integer): IXMLLibrary_visual_scenes_type;
    property Items[Index: Integer]: IXMLLibrary_visual_scenes_type read Get_Item; default;
  end;

{ IXMLVisual_scene_type }

  IXMLVisual_scene_type = interface(IXML)
    ['{EEAFE37F-3123-4329-BF24-C1E2D01FE0A3}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Node: IXMLNode_typeList;
    function Get_Evaluate_scene: IXMLVisual_scene_type_evaluate_sceneList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Node: IXMLNode_typeList read Get_Node;
    property Evaluate_scene: IXMLVisual_scene_type_evaluate_sceneList read Get_Evaluate_scene;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLVisual_scene_typeList }

  IXMLVisual_scene_typeList = interface(IXMLFilter)
    ['{CE492611-FB51-4365-AAD3-4AF59143574E}']
    { Methods & Properties }
    function Add: IXMLVisual_scene_type;
    function Insert(const Index: Integer): IXMLVisual_scene_type;

    function Get_Item(Index: Integer): IXMLVisual_scene_type;
    property Items[Index: Integer]: IXMLVisual_scene_type read Get_Item; default;
  end;

{ IXMLVisual_scene_type_evaluate_scene }

  IXMLVisual_scene_type_evaluate_scene = interface(IXML)
    ['{E38A921A-9D6F-4C4E-8660-ED9AD5695279}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Enable: Boolean;
    function Get_Asset: IXMLAsset_type;
    function Get_Render: IXMLVisual_scene_type_evaluate_scene_renderList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Enable(Value: Boolean);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Enable: Boolean read Get_Enable write Set_Enable;
    property Asset: IXMLAsset_type read Get_Asset;
    property Render: IXMLVisual_scene_type_evaluate_scene_renderList read Get_Render;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLVisual_scene_type_evaluate_sceneList }

  IXMLVisual_scene_type_evaluate_sceneList = interface(IXMLFilter)
    ['{21F4AEFB-A10C-40F3-A7FF-43C7033180AD}']
    { Methods & Properties }
    function Add: IXMLVisual_scene_type_evaluate_scene;
    function Insert(const Index: Integer): IXMLVisual_scene_type_evaluate_scene;

    function Get_Item(Index: Integer): IXMLVisual_scene_type_evaluate_scene;
    property Items[Index: Integer]: IXMLVisual_scene_type_evaluate_scene read Get_Item; default;
  end;

{ IXMLVisual_scene_type_evaluate_scene_render }

  IXMLVisual_scene_type_evaluate_scene_render = interface(IXML)
    ['{9A2F20D2-01FA-4BB3-8820-C1317BED2F0C}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Camera_node: UnicodeString;
    function Get_Layer: IXMLNCNameList;
    function Get_Instance_material: IXMLVisual_scene_type_evaluate_scene_render_instance_material;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Camera_node(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Camera_node: UnicodeString read Get_Camera_node write Set_Camera_node;
    property Layer: IXMLNCNameList read Get_Layer;
    property Instance_material: IXMLVisual_scene_type_evaluate_scene_render_instance_material read Get_Instance_material;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLVisual_scene_type_evaluate_scene_renderList }

  IXMLVisual_scene_type_evaluate_scene_renderList = interface(IXMLFilter)
    ['{BE011F81-D4BE-4B18-B4E0-4EA41F6BB63D}']
    { Methods & Properties }
    function Add: IXMLVisual_scene_type_evaluate_scene_render;
    function Insert(const Index: Integer): IXMLVisual_scene_type_evaluate_scene_render;

    function Get_Item(Index: Integer): IXMLVisual_scene_type_evaluate_scene_render;
    property Items[Index: Integer]: IXMLVisual_scene_type_evaluate_scene_render read Get_Item; default;
  end;

{ IXMLVisual_scene_type_evaluate_scene_render_instance_material }

  IXMLVisual_scene_type_evaluate_scene_render_instance_material = interface(IXML)
    ['{865A9178-2E6C-4EE3-8094-FBDA55096805}']
    { Property Accessors }
    function Get_Url: UnicodeString;
    function Get_Technique_override: IXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override;
    function Get_Bind: IXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    { Methods & Properties }
    property Url: UnicodeString read Get_Url write Set_Url;
    property Technique_override: IXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override read Get_Technique_override;
    property Bind: IXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList read Get_Bind;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override }

  IXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override = interface(IXML)
    ['{C43DDEEF-BD1B-4522-BC29-79AA0DA4E5E5}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    function Get_Pass: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
    procedure Set_Pass(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
    property Pass: UnicodeString read Get_Pass write Set_Pass;
  end;

{ IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind }

  IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind = interface(IXML)
    ['{B15C9B35-A651-47CA-8F14-BC1F0A5A4DAE}']
    { Property Accessors }
    function Get_Semantic: UnicodeString;
    function Get_Target: UnicodeString;
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Target(Value: UnicodeString);
    { Methods & Properties }
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Target: UnicodeString read Get_Target write Set_Target;
  end;

{ IXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList }

  IXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList = interface(IXMLFilter)
    ['{A2892DFE-3061-426A-9CAB-A67D71F9FFA6}']
    { Methods & Properties }
    function Add: IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind;
    function Insert(const Index: Integer): IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind;

    function Get_Item(Index: Integer): IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind;
    property Items[Index: Integer]: IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind read Get_Item; default;
  end;

{ IXMLLibrary_joints_type }

  IXMLLibrary_joints_type = interface(IXML)
    ['{ED8FA84E-00BD-4800-99F5-22AAFE5834B8}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Joint: IXMLJoint_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Joint: IXMLJoint_typeList read Get_Joint;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_joints_typeList }

  IXMLLibrary_joints_typeList = interface(IXMLFilter)
    ['{24F8D0A7-31E0-4D5B-A4E1-52A86102A063}']
    { Methods & Properties }
    function Add: IXMLLibrary_joints_type;
    function Insert(const Index: Integer): IXMLLibrary_joints_type;

    function Get_Item(Index: Integer): IXMLLibrary_joints_type;
    property Items[Index: Integer]: IXMLLibrary_joints_type read Get_Item; default;
  end;

{ IXMLJoint_type }

  IXMLJoint_type = interface(IXML)
    ['{670E9C32-6877-40C9-9A12-C38150DAF7F4}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Prismatic: IXMLAxis_constraint_typeList;
    function Get_Revolute: IXMLAxis_constraint_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Prismatic: IXMLAxis_constraint_typeList read Get_Prismatic;
    property Revolute: IXMLAxis_constraint_typeList read Get_Revolute;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLJoint_typeList }

  IXMLJoint_typeList = interface(IXMLFilter)
    ['{F716CA4F-80F4-4761-ADC0-60C711648CA4}']
    { Methods & Properties }
    function Add: IXMLJoint_type;
    function Insert(const Index: Integer): IXMLJoint_type;

    function Get_Item(Index: Integer): IXMLJoint_type;
    property Items[Index: Integer]: IXMLJoint_type read Get_Item; default;
  end;

{ IXMLAxis_constraint_type }

  IXMLAxis_constraint_type = interface(IXML)
    ['{87B2105F-C921-442D-AF75-3D607D7DF2E3}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Axis: IXMLAxis_type;
    function Get_Limits: IXMLJoint_limits_type;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Axis: IXMLAxis_type read Get_Axis;
    property Limits: IXMLJoint_limits_type read Get_Limits;
  end;

{ IXMLAxis_constraint_typeList }

  IXMLAxis_constraint_typeList = interface(IXMLFilter)
    ['{07DA52C3-AF35-4074-866C-10B427C556B4}']
    { Methods & Properties }
    function Add: IXMLAxis_constraint_type;
    function Insert(const Index: Integer): IXMLAxis_constraint_type;

    function Get_Item(Index: Integer): IXMLAxis_constraint_type;
    property Items[Index: Integer]: IXMLAxis_constraint_type read Get_Item; default;
  end;

{ IXMLAxis_type }

  IXMLAxis_type = interface(IXML)
    ['{2E144147-B6E9-48DB-B608-80D96EA22D43}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
  end;

{ IXMLJoint_limits_type }

  IXMLJoint_limits_type = interface(IXML)
    ['{DCDC3030-C738-4FFD-A15D-4F6867DBB700}']
    { Property Accessors }
    function Get_Min: IXMLMinmax_type;
    function Get_Max: IXMLMinmax_type;
    { Methods & Properties }
    property Min: IXMLMinmax_type read Get_Min;
    property Max: IXMLMinmax_type read Get_Max;
  end;

{ IXMLMinmax_type }

  IXMLMinmax_type = interface(IXML)
    ['{39EB6FD7-911F-4815-A1CC-D0EF470D7FB7}']
    { Property Accessors }
    function Get_Name: UnicodeString;
    function Get_Sid: UnicodeString;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Name: UnicodeString read Get_Name write Set_Name;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLLibrary_kinematics_models_type }

  IXMLLibrary_kinematics_models_type = interface(IXML)
    ['{777FA9AC-4CAD-40FD-A39B-CC198C787C8C}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Kinematics_model: IXMLKinematics_model_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Kinematics_model: IXMLKinematics_model_typeList read Get_Kinematics_model;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_kinematics_models_typeList }

  IXMLLibrary_kinematics_models_typeList = interface(IXMLFilter)
    ['{27B9AE42-AD88-4FCA-BCDB-8E03BE7828A2}']
    { Methods & Properties }
    function Add: IXMLLibrary_kinematics_models_type;
    function Insert(const Index: Integer): IXMLLibrary_kinematics_models_type;

    function Get_Item(Index: Integer): IXMLLibrary_kinematics_models_type;
    property Items[Index: Integer]: IXMLLibrary_kinematics_models_type read Get_Item; default;
  end;

{ IXMLKinematics_model_type }

  IXMLKinematics_model_type = interface(IXML)
    ['{5725FC77-93FE-4DFF-A0CF-00A80F1B3180}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Technique_common: IXMLKinematics_model_technique_type;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Technique_common: IXMLKinematics_model_technique_type read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLKinematics_model_typeList }

  IXMLKinematics_model_typeList = interface(IXMLFilter)
    ['{C433C8D7-F3E1-422B-8137-FE4261CA06E7}']
    { Methods & Properties }
    function Add: IXMLKinematics_model_type;
    function Insert(const Index: Integer): IXMLKinematics_model_type;

    function Get_Item(Index: Integer): IXMLKinematics_model_type;
    property Items[Index: Integer]: IXMLKinematics_model_type read Get_Item; default;
  end;

{ IXMLKinematics_model_technique_type }

  IXMLKinematics_model_technique_type = interface(IXML)
    ['{82786F72-C817-482B-BEB3-F9E0EB5821A2}']
    { Property Accessors }
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Instance_joint: IXMLInstance_joint_typeList;
    function Get_Joint: IXMLJoint_typeList;
    function Get_Link: IXMLLink_typeList;
    function Get_Formula: IXMLFormula_typeList;
    function Get_Instance_formula: IXMLInstance_formula_typeList;
    { Methods & Properties }
    property Newparam: IXMLKinematics_newparam_typeList read Get_Newparam;
    property Instance_joint: IXMLInstance_joint_typeList read Get_Instance_joint;
    property Joint: IXMLJoint_typeList read Get_Joint;
    property Link: IXMLLink_typeList read Get_Link;
    property Formula: IXMLFormula_typeList read Get_Formula;
    property Instance_formula: IXMLInstance_formula_typeList read Get_Instance_formula;
  end;

{ IXMLKinematics_newparam_type }

  IXMLKinematics_newparam_type = interface(IXML)
    ['{8114161C-80CF-4E2B-9D29-2493BB50544C}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Float: Double;
    function Get_Int: Int64;
    function Get_SIDREF: UnicodeString;
    function Get_Bool: Boolean;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Int(Value: Int64);
    procedure Set_SIDREF(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Float: Double read Get_Float write Set_Float;
    property Int: Int64 read Get_Int write Set_Int;
    property SIDREF: UnicodeString read Get_SIDREF write Set_SIDREF;
    property Bool: Boolean read Get_Bool write Set_Bool;
  end;

{ IXMLKinematics_newparam_typeList }

  IXMLKinematics_newparam_typeList = interface(IXMLFilter)
    ['{1081A336-6187-463C-85BA-476B81612457}']
    { Methods & Properties }
    function Add: IXMLKinematics_newparam_type;
    function Insert(const Index: Integer): IXMLKinematics_newparam_type;

    function Get_Item(Index: Integer): IXMLKinematics_newparam_type;
    property Items[Index: Integer]: IXMLKinematics_newparam_type read Get_Item; default;
  end;

{ IXMLInstance_joint_type }

  IXMLInstance_joint_type = interface(IXMLInstance_with_extra_type)
    ['{5C5685E5-E1FB-4F08-A9DA-1966782E1196}']
  end;

{ IXMLInstance_joint_typeList }

  IXMLInstance_joint_typeList = interface(IXMLFilter)
    ['{A76664CE-B5C5-437B-BBFF-9998AD43FEC3}']
    { Methods & Properties }
    function Add: IXMLInstance_joint_type;
    function Insert(const Index: Integer): IXMLInstance_joint_type;

    function Get_Item(Index: Integer): IXMLInstance_joint_type;
    property Items[Index: Integer]: IXMLInstance_joint_type read Get_Item; default;
  end;

{ IXMLLink_type }

  IXMLLink_type = interface(IXML)
    ['{2B475BF0-4DB0-41B8-A214-11EBC645B6C7}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Attachment_full: IXMLLink_type_attachment_fullList;
    function Get_Attachment_start: IXMLLink_type_attachment_startList;
    function Get_Attachment_end: IXMLLink_type_attachment_endList;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Rotate: IXMLRotate_typeList read Get_Rotate;
    property Translate: IXMLTranslate_typeList read Get_Translate;
    property Attachment_full: IXMLLink_type_attachment_fullList read Get_Attachment_full;
    property Attachment_start: IXMLLink_type_attachment_startList read Get_Attachment_start;
    property Attachment_end: IXMLLink_type_attachment_endList read Get_Attachment_end;
  end;

{ IXMLLink_typeList }

  IXMLLink_typeList = interface(IXMLFilter)
    ['{924BBC92-2DA6-45D5-A912-0D4A11B6C22C}']
    { Methods & Properties }
    function Add: IXMLLink_type;
    function Insert(const Index: Integer): IXMLLink_type;

    function Get_Item(Index: Integer): IXMLLink_type;
    property Items[Index: Integer]: IXMLLink_type read Get_Item; default;
  end;

{ IXMLLink_type_attachment_full }

  IXMLLink_type_attachment_full = interface(IXML)
    ['{42C0B3FF-51C5-4A57-AC11-439F5FBCA8DC}']
    { Property Accessors }
    function Get_Joint: UnicodeString;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Link: IXMLLink_type;
    procedure Set_Joint(Value: UnicodeString);
    { Methods & Properties }
    property Joint: UnicodeString read Get_Joint write Set_Joint;
    property Rotate: IXMLRotate_typeList read Get_Rotate;
    property Translate: IXMLTranslate_typeList read Get_Translate;
    property Link: IXMLLink_type read Get_Link;
  end;

{ IXMLLink_type_attachment_fullList }

  IXMLLink_type_attachment_fullList = interface(IXMLFilter)
    ['{0D6F6566-DBCA-4FFD-B6C8-5CC2D3E016C1}']
    { Methods & Properties }
    function Add: IXMLLink_type_attachment_full;
    function Insert(const Index: Integer): IXMLLink_type_attachment_full;

    function Get_Item(Index: Integer): IXMLLink_type_attachment_full;
    property Items[Index: Integer]: IXMLLink_type_attachment_full read Get_Item; default;
  end;

{ IXMLLink_type_attachment_start }

  IXMLLink_type_attachment_start = interface(IXML)
    ['{91DED9A4-9AF9-4217-AF3E-1176F6CE2601}']
    { Property Accessors }
    function Get_Joint: UnicodeString;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Translate: IXMLTranslate_typeList;
    procedure Set_Joint(Value: UnicodeString);
    { Methods & Properties }
    property Joint: UnicodeString read Get_Joint write Set_Joint;
    property Rotate: IXMLRotate_typeList read Get_Rotate;
    property Translate: IXMLTranslate_typeList read Get_Translate;
  end;

{ IXMLLink_type_attachment_startList }

  IXMLLink_type_attachment_startList = interface(IXMLFilter)
    ['{E82BD051-BE8F-41D0-A85D-4041880D6BBF}']
    { Methods & Properties }
    function Add: IXMLLink_type_attachment_start;
    function Insert(const Index: Integer): IXMLLink_type_attachment_start;

    function Get_Item(Index: Integer): IXMLLink_type_attachment_start;
    property Items[Index: Integer]: IXMLLink_type_attachment_start read Get_Item; default;
  end;

{ IXMLLink_type_attachment_end }

  IXMLLink_type_attachment_end = interface(IXML)
    ['{1D1509DA-1D20-4AC5-BD2A-6BA99C6DB157}']
    { Property Accessors }
    function Get_Joint: UnicodeString;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Translate: IXMLTranslate_typeList;
    procedure Set_Joint(Value: UnicodeString);
    { Methods & Properties }
    property Joint: UnicodeString read Get_Joint write Set_Joint;
    property Rotate: IXMLRotate_typeList read Get_Rotate;
    property Translate: IXMLTranslate_typeList read Get_Translate;
  end;

{ IXMLLink_type_attachment_endList }

  IXMLLink_type_attachment_endList = interface(IXMLFilter)
    ['{ABAC4D73-42C4-41A3-8589-4611993D6D74}']
    { Methods & Properties }
    function Add: IXMLLink_type_attachment_end;
    function Insert(const Index: Integer): IXMLLink_type_attachment_end;

    function Get_Item(Index: Integer): IXMLLink_type_attachment_end;
    property Items[Index: Integer]: IXMLLink_type_attachment_end read Get_Item; default;
  end;

{ IXMLFormula_type }

  IXMLFormula_type = interface(IXML)
    ['{8DE101CD-61B1-4DDB-B84B-EA06A61A21AB}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Newparam: IXMLFormula_newparam_typeList;
    function Get_Target: IXMLCommon_float_or_param_type;
    function Get_Technique_common: IXMLFormula_technique_type;
    function Get_Technique: IXMLTechnique_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Newparam: IXMLFormula_newparam_typeList read Get_Newparam;
    property Target: IXMLCommon_float_or_param_type read Get_Target;
    property Technique_common: IXMLFormula_technique_type read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
  end;

{ IXMLFormula_typeList }

  IXMLFormula_typeList = interface(IXMLFilter)
    ['{A5CBCF87-F45C-4CEC-8877-34160A3181EB}']
    { Methods & Properties }
    function Add: IXMLFormula_type;
    function Insert(const Index: Integer): IXMLFormula_type;

    function Get_Item(Index: Integer): IXMLFormula_type;
    property Items[Index: Integer]: IXMLFormula_type read Get_Item; default;
  end;

{ IXMLFormula_newparam_type }

  IXMLFormula_newparam_type = interface(IXML)
    ['{8D4DD678-52D6-47F8-843F-158B763B0CD4}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Float: Double;
    function Get_Int: Int64;
    function Get_SIDREF: UnicodeString;
    function Get_Bool: Boolean;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Int(Value: Int64);
    procedure Set_SIDREF(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Float: Double read Get_Float write Set_Float;
    property Int: Int64 read Get_Int write Set_Int;
    property SIDREF: UnicodeString read Get_SIDREF write Set_SIDREF;
    property Bool: Boolean read Get_Bool write Set_Bool;
  end;

{ IXMLFormula_newparam_typeList }

  IXMLFormula_newparam_typeList = interface(IXMLFilter)
    ['{0A000FDA-DF8F-48EB-9659-9EF0D06054A6}']
    { Methods & Properties }
    function Add: IXMLFormula_newparam_type;
    function Insert(const Index: Integer): IXMLFormula_newparam_type;

    function Get_Item(Index: Integer): IXMLFormula_newparam_type;
    property Items[Index: Integer]: IXMLFormula_newparam_type read Get_Item; default;
  end;

{ IXMLCommon_float_or_param_type }

  IXMLCommon_float_or_param_type = interface(IXML)
    ['{841116F1-00CA-46E1-9114-30E83A5AEB3A}']
    { Property Accessors }
    function Get_Float: Double;
    function Get_Param: IXMLCommon_param_type;
    procedure Set_Float(Value: Double);
    { Methods & Properties }
    property Float: Double read Get_Float write Set_Float;
    property Param: IXMLCommon_param_type read Get_Param;
  end;

{ IXMLCommon_param_type }

  IXMLCommon_param_type = interface(IXML)
    ['{CD972393-BB06-4B8E-BDED-852983EA8384}']
  end;

{ IXMLFormula_technique_type }

  IXMLFormula_technique_type = interface(IXML)
    ['{069E1232-260B-4816-AF3C-2F38492975BD}']
    { Property Accessors }
    function Get_Math: IXMLMathtype;
    { Methods & Properties }
    property Math: IXMLMathtype read Get_Math;
  end;

{ IXMLMathtype }

  IXMLMathtype = interface(IXML)
    ['{337BB8DF-F405-48B9-BD1B-C12E83656C7B}']
    { Property Accessors }
    function Get_Baseline: UnicodeString;
    function Get_Overflow: UnicodeString;
    function Get_Altimg: UnicodeString;
    function Get_Alttext: UnicodeString;
    function Get_Type_: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Height: UnicodeString;
    function Get_Width: UnicodeString;
    function Get_Macros: UnicodeString;
    function Get_Display: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Baseline(Value: UnicodeString);
    procedure Set_Overflow(Value: UnicodeString);
    procedure Set_Altimg(Value: UnicodeString);
    procedure Set_Alttext(Value: UnicodeString);
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Height(Value: UnicodeString);
    procedure Set_Width(Value: UnicodeString);
    procedure Set_Macros(Value: UnicodeString);
    procedure Set_Display(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Baseline: UnicodeString read Get_Baseline write Set_Baseline;
    property Overflow: UnicodeString read Get_Overflow write Set_Overflow;
    property Altimg: UnicodeString read Get_Altimg write Set_Altimg;
    property Alttext: UnicodeString read Get_Alttext write Set_Alttext;
    property Type_: UnicodeString read Get_Type_ write Set_Type_;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Height: UnicodeString read Get_Height write Set_Height;
    property Width: UnicodeString read Get_Width write Set_Width;
    property Macros: UnicodeString read Get_Macros write Set_Macros;
    property Display: UnicodeString read Get_Display write Set_Display;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMitype }

  IXMLMitype = interface(IXML)
    ['{49988FB4-0F8B-4829-AE05-97B6A752048F}']
    { Property Accessors }
    function Get_Mathvariant: UnicodeString;
    function Get_Mathsize: UnicodeString;
    function Get_Mathcolor: UnicodeString;
    function Get_Mathbackground: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mglyph: IXMLMglyphtype;
    procedure Set_Mathvariant(Value: UnicodeString);
    procedure Set_Mathsize(Value: UnicodeString);
    procedure Set_Mathcolor(Value: UnicodeString);
    procedure Set_Mathbackground(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Mathvariant: UnicodeString read Get_Mathvariant write Set_Mathvariant;
    property Mathsize: UnicodeString read Get_Mathsize write Set_Mathsize;
    property Mathcolor: UnicodeString read Get_Mathcolor write Set_Mathcolor;
    property Mathbackground: UnicodeString read Get_Mathbackground write Set_Mathbackground;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mglyph: IXMLMglyphtype read Get_Mglyph;
  end;

{ IXMLMalignmarktype }

  IXMLMalignmarktype = interface(IXML)
    ['{93E38C0A-2FE6-45D2-8175-99D411C36F5C}']
    { Property Accessors }
    function Get_Edge: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Edge(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Edge: UnicodeString read Get_Edge write Set_Edge;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLMglyphtype }

  IXMLMglyphtype = interface(IXML)
    ['{154BD82E-8B3B-4D7E-A55D-712168B47292}']
    { Property Accessors }
    function Get_Alt: UnicodeString;
    function Get_Fontfamily: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Alt(Value: UnicodeString);
    procedure Set_Fontfamily(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
    { Methods & Properties }
    property Alt: UnicodeString read Get_Alt write Set_Alt;
    property Fontfamily: UnicodeString read Get_Fontfamily write Set_Fontfamily;
    property Index: LongWord read Get_Index write Set_Index;
  end;

{ IXMLMotype }

  IXMLMotype = interface(IXML)
    ['{ED91392D-9F2C-4AF8-8127-4D1DAAAA5287}']
    { Property Accessors }
    function Get_Form: UnicodeString;
    function Get_Lspace: UnicodeString;
    function Get_Rspace: UnicodeString;
    function Get_Fence: Boolean;
    function Get_Separator: Boolean;
    function Get_Stretchy: Boolean;
    function Get_Symmetric: Boolean;
    function Get_Movablelimits: Boolean;
    function Get_Accent: Boolean;
    function Get_Largeop: Boolean;
    function Get_Minsize: UnicodeString;
    function Get_Maxsize: UnicodeString;
    function Get_Mathvariant: UnicodeString;
    function Get_Mathsize: UnicodeString;
    function Get_Mathcolor: UnicodeString;
    function Get_Mathbackground: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mglyph: IXMLMglyphtype;
    procedure Set_Form(Value: UnicodeString);
    procedure Set_Lspace(Value: UnicodeString);
    procedure Set_Rspace(Value: UnicodeString);
    procedure Set_Fence(Value: Boolean);
    procedure Set_Separator(Value: Boolean);
    procedure Set_Stretchy(Value: Boolean);
    procedure Set_Symmetric(Value: Boolean);
    procedure Set_Movablelimits(Value: Boolean);
    procedure Set_Accent(Value: Boolean);
    procedure Set_Largeop(Value: Boolean);
    procedure Set_Minsize(Value: UnicodeString);
    procedure Set_Maxsize(Value: UnicodeString);
    procedure Set_Mathvariant(Value: UnicodeString);
    procedure Set_Mathsize(Value: UnicodeString);
    procedure Set_Mathcolor(Value: UnicodeString);
    procedure Set_Mathbackground(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Form: UnicodeString read Get_Form write Set_Form;
    property Lspace: UnicodeString read Get_Lspace write Set_Lspace;
    property Rspace: UnicodeString read Get_Rspace write Set_Rspace;
    property Fence: Boolean read Get_Fence write Set_Fence;
    property Separator: Boolean read Get_Separator write Set_Separator;
    property Stretchy: Boolean read Get_Stretchy write Set_Stretchy;
    property Symmetric: Boolean read Get_Symmetric write Set_Symmetric;
    property Movablelimits: Boolean read Get_Movablelimits write Set_Movablelimits;
    property Accent: Boolean read Get_Accent write Set_Accent;
    property Largeop: Boolean read Get_Largeop write Set_Largeop;
    property Minsize: UnicodeString read Get_Minsize write Set_Minsize;
    property Maxsize: UnicodeString read Get_Maxsize write Set_Maxsize;
    property Mathvariant: UnicodeString read Get_Mathvariant write Set_Mathvariant;
    property Mathsize: UnicodeString read Get_Mathsize write Set_Mathsize;
    property Mathcolor: UnicodeString read Get_Mathcolor write Set_Mathcolor;
    property Mathbackground: UnicodeString read Get_Mathbackground write Set_Mathbackground;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mglyph: IXMLMglyphtype read Get_Mglyph;
  end;

{ IXMLMntype }

  IXMLMntype = interface(IXML)
    ['{5EE9B05A-3BB0-4235-8D10-D0ED50FE31B6}']
    { Property Accessors }
    function Get_Mathvariant: UnicodeString;
    function Get_Mathsize: UnicodeString;
    function Get_Mathcolor: UnicodeString;
    function Get_Mathbackground: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mglyph: IXMLMglyphtype;
    procedure Set_Mathvariant(Value: UnicodeString);
    procedure Set_Mathsize(Value: UnicodeString);
    procedure Set_Mathcolor(Value: UnicodeString);
    procedure Set_Mathbackground(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Mathvariant: UnicodeString read Get_Mathvariant write Set_Mathvariant;
    property Mathsize: UnicodeString read Get_Mathsize write Set_Mathsize;
    property Mathcolor: UnicodeString read Get_Mathcolor write Set_Mathcolor;
    property Mathbackground: UnicodeString read Get_Mathbackground write Set_Mathbackground;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mglyph: IXMLMglyphtype read Get_Mglyph;
  end;

{ IXMLMtexttype }

  IXMLMtexttype = interface(IXML)
    ['{365376A2-D9E0-45AE-8F9B-2F2D33C085B6}']
    { Property Accessors }
    function Get_Mathvariant: UnicodeString;
    function Get_Mathsize: UnicodeString;
    function Get_Mathcolor: UnicodeString;
    function Get_Mathbackground: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mglyph: IXMLMglyphtype;
    procedure Set_Mathvariant(Value: UnicodeString);
    procedure Set_Mathsize(Value: UnicodeString);
    procedure Set_Mathcolor(Value: UnicodeString);
    procedure Set_Mathbackground(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Mathvariant: UnicodeString read Get_Mathvariant write Set_Mathvariant;
    property Mathsize: UnicodeString read Get_Mathsize write Set_Mathsize;
    property Mathcolor: UnicodeString read Get_Mathcolor write Set_Mathcolor;
    property Mathbackground: UnicodeString read Get_Mathbackground write Set_Mathbackground;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mglyph: IXMLMglyphtype read Get_Mglyph;
  end;

{ IXMLMstype }

  IXMLMstype = interface(IXML)
    ['{B59F0524-7174-4C6A-8B81-0675F7E500A3}']
    { Property Accessors }
    function Get_Lquote: UnicodeString;
    function Get_Rquote: UnicodeString;
    function Get_Mathvariant: UnicodeString;
    function Get_Mathsize: UnicodeString;
    function Get_Mathcolor: UnicodeString;
    function Get_Mathbackground: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mglyph: IXMLMglyphtype;
    procedure Set_Lquote(Value: UnicodeString);
    procedure Set_Rquote(Value: UnicodeString);
    procedure Set_Mathvariant(Value: UnicodeString);
    procedure Set_Mathsize(Value: UnicodeString);
    procedure Set_Mathcolor(Value: UnicodeString);
    procedure Set_Mathbackground(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Lquote: UnicodeString read Get_Lquote write Set_Lquote;
    property Rquote: UnicodeString read Get_Rquote write Set_Rquote;
    property Mathvariant: UnicodeString read Get_Mathvariant write Set_Mathvariant;
    property Mathsize: UnicodeString read Get_Mathsize write Set_Mathsize;
    property Mathcolor: UnicodeString read Get_Mathcolor write Set_Mathcolor;
    property Mathbackground: UnicodeString read Get_Mathbackground write Set_Mathbackground;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mglyph: IXMLMglyphtype read Get_Mglyph;
  end;

{ IXMLMrowtype }

  IXMLMrowtype = interface(IXML)
    ['{8EE1DA11-94E9-44F4-97AA-0CB0E3119196}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMfractype }

  IXMLMfractype = interface(IXML)
    ['{40B8B54C-74FF-4FBE-82E2-E6FDDD2ACC81}']
    { Property Accessors }
    function Get_Bevelled: Boolean;
    function Get_Denomalign: UnicodeString;
    function Get_Numalign: UnicodeString;
    function Get_Linethickness: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Bevelled(Value: Boolean);
    procedure Set_Denomalign(Value: UnicodeString);
    procedure Set_Numalign(Value: UnicodeString);
    procedure Set_Linethickness(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Bevelled: Boolean read Get_Bevelled write Set_Bevelled;
    property Denomalign: UnicodeString read Get_Denomalign write Set_Denomalign;
    property Numalign: UnicodeString read Get_Numalign write Set_Numalign;
    property Linethickness: UnicodeString read Get_Linethickness write Set_Linethickness;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMsqrttype }

  IXMLMsqrttype = interface(IXML)
    ['{36C22EAC-2287-46A1-AB45-580F5A56EF8B}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMroottype }

  IXMLMroottype = interface(IXML)
    ['{B96A4585-E484-496B-9D5B-8B70073009AB}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMpaddedtype }

  IXMLMpaddedtype = interface(IXML)
    ['{FC70989D-9E7B-4CAF-B074-C65EE411BF30}']
    { Property Accessors }
    function Get_Width: UnicodeString;
    function Get_Lspace: UnicodeString;
    function Get_Height: UnicodeString;
    function Get_Depth: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Width(Value: UnicodeString);
    procedure Set_Lspace(Value: UnicodeString);
    procedure Set_Height(Value: UnicodeString);
    procedure Set_Depth(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Width: UnicodeString read Get_Width write Set_Width;
    property Lspace: UnicodeString read Get_Lspace write Set_Lspace;
    property Height: UnicodeString read Get_Height write Set_Height;
    property Depth: UnicodeString read Get_Depth write Set_Depth;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMphantomtype }

  IXMLMphantomtype = interface(IXML)
    ['{00CD8448-C51D-4E58-BD8E-EBE3D0141E70}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMfencedtype }

  IXMLMfencedtype = interface(IXML)
    ['{C4748004-B034-407E-8CCD-2C6832CAD4F9}']
    { Property Accessors }
    function Get_Open: UnicodeString;
    function Get_Close: UnicodeString;
    function Get_Separators: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Open(Value: UnicodeString);
    procedure Set_Close(Value: UnicodeString);
    procedure Set_Separators(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Open: UnicodeString read Get_Open write Set_Open;
    property Close: UnicodeString read Get_Close write Set_Close;
    property Separators: UnicodeString read Get_Separators write Set_Separators;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMenclosetype }

  IXMLMenclosetype = interface(IXML)
    ['{8C347EC6-198D-49C3-868A-04396D1DA424}']
    { Property Accessors }
    function Get_Notation: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Notation(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Notation: UnicodeString read Get_Notation write Set_Notation;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMsubtype }

  IXMLMsubtype = interface(IXML)
    ['{D59F2EF3-A5A6-4E48-801A-1875D7981F9A}']
    { Property Accessors }
    function Get_Subscriptshift: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Subscriptshift(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Subscriptshift: UnicodeString read Get_Subscriptshift write Set_Subscriptshift;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMsuptype }

  IXMLMsuptype = interface(IXML)
    ['{D363DDB9-8073-44A0-B767-D6EA626114D1}']
    { Property Accessors }
    function Get_Superscriptshift: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Superscriptshift(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Superscriptshift: UnicodeString read Get_Superscriptshift write Set_Superscriptshift;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMsubsuptype }

  IXMLMsubsuptype = interface(IXML)
    ['{9754F480-98CC-42F5-A09C-39D3415D1E0C}']
    { Property Accessors }
    function Get_Subscriptshift: UnicodeString;
    function Get_Superscriptshift: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Subscriptshift(Value: UnicodeString);
    procedure Set_Superscriptshift(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Subscriptshift: UnicodeString read Get_Subscriptshift write Set_Subscriptshift;
    property Superscriptshift: UnicodeString read Get_Superscriptshift write Set_Superscriptshift;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMundertype }

  IXMLMundertype = interface(IXML)
    ['{9841AFA2-366E-4155-B2FB-5C356839A1FC}']
    { Property Accessors }
    function Get_Accentunder: Boolean;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Accentunder(Value: Boolean);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Accentunder: Boolean read Get_Accentunder write Set_Accentunder;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMovertype }

  IXMLMovertype = interface(IXML)
    ['{AD829139-E75E-4C68-AB8F-EDAA448537AF}']
    { Property Accessors }
    function Get_Accent: Boolean;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Accent(Value: Boolean);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Accent: Boolean read Get_Accent write Set_Accent;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMunderovertype }

  IXMLMunderovertype = interface(IXML)
    ['{8AD19D33-1457-4850-9574-45C2F4A0D1C9}']
    { Property Accessors }
    function Get_Accent: Boolean;
    function Get_Accentunder: Boolean;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Accent(Value: Boolean);
    procedure Set_Accentunder(Value: Boolean);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Accent: Boolean read Get_Accent write Set_Accent;
    property Accentunder: Boolean read Get_Accentunder write Set_Accentunder;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMmultiscriptstype }

  IXMLMmultiscriptstype = interface(IXML)
    ['{FE938F74-80B4-4769-A3DF-6D42B0D26A57}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_None: IXMLNonetype;
    function Get_Mprescripts: IXMLMprescriptstype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property None: IXMLNonetype read Get_None;
    property Mprescripts: IXMLMprescriptstype read Get_Mprescripts;
  end;

{ IXMLMtabletype }

  IXMLMtabletype = interface(IXML)
    ['{FB8FA5D4-802B-4265-812C-CC9132819702}']
    { Property Accessors }
    function Get_Rowalign: UnicodeString;
    function Get_Columnalign: UnicodeString;
    function Get_Groupalign: UnicodeString;
    function Get_Align: UnicodeString;
    function Get_Alignmentscope: UnicodeString;
    function Get_Columnwidth: UnicodeString;
    function Get_Width: UnicodeString;
    function Get_Rowspacing: UnicodeString;
    function Get_Columnspacing: UnicodeString;
    function Get_Rowlines: UnicodeString;
    function Get_Columnlines: UnicodeString;
    function Get_Frame: UnicodeString;
    function Get_Framespacing: UnicodeString;
    function Get_Equalrows: Boolean;
    function Get_Equalcolumns: Boolean;
    function Get_Displaystyle: Boolean;
    function Get_Side: UnicodeString;
    function Get_Minlabelspacing: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mtr: IXMLMtrtype;
    function Get_Mlabeledtr: IXMLMlabeledtrtype;
    procedure Set_Rowalign(Value: UnicodeString);
    procedure Set_Columnalign(Value: UnicodeString);
    procedure Set_Groupalign(Value: UnicodeString);
    procedure Set_Align(Value: UnicodeString);
    procedure Set_Alignmentscope(Value: UnicodeString);
    procedure Set_Columnwidth(Value: UnicodeString);
    procedure Set_Width(Value: UnicodeString);
    procedure Set_Rowspacing(Value: UnicodeString);
    procedure Set_Columnspacing(Value: UnicodeString);
    procedure Set_Rowlines(Value: UnicodeString);
    procedure Set_Columnlines(Value: UnicodeString);
    procedure Set_Frame(Value: UnicodeString);
    procedure Set_Framespacing(Value: UnicodeString);
    procedure Set_Equalrows(Value: Boolean);
    procedure Set_Equalcolumns(Value: Boolean);
    procedure Set_Displaystyle(Value: Boolean);
    procedure Set_Side(Value: UnicodeString);
    procedure Set_Minlabelspacing(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Rowalign: UnicodeString read Get_Rowalign write Set_Rowalign;
    property Columnalign: UnicodeString read Get_Columnalign write Set_Columnalign;
    property Groupalign: UnicodeString read Get_Groupalign write Set_Groupalign;
    property Align: UnicodeString read Get_Align write Set_Align;
    property Alignmentscope: UnicodeString read Get_Alignmentscope write Set_Alignmentscope;
    property Columnwidth: UnicodeString read Get_Columnwidth write Set_Columnwidth;
    property Width: UnicodeString read Get_Width write Set_Width;
    property Rowspacing: UnicodeString read Get_Rowspacing write Set_Rowspacing;
    property Columnspacing: UnicodeString read Get_Columnspacing write Set_Columnspacing;
    property Rowlines: UnicodeString read Get_Rowlines write Set_Rowlines;
    property Columnlines: UnicodeString read Get_Columnlines write Set_Columnlines;
    property Frame: UnicodeString read Get_Frame write Set_Frame;
    property Framespacing: UnicodeString read Get_Framespacing write Set_Framespacing;
    property Equalrows: Boolean read Get_Equalrows write Set_Equalrows;
    property Equalcolumns: Boolean read Get_Equalcolumns write Set_Equalcolumns;
    property Displaystyle: Boolean read Get_Displaystyle write Set_Displaystyle;
    property Side: UnicodeString read Get_Side write Set_Side;
    property Minlabelspacing: UnicodeString read Get_Minlabelspacing write Set_Minlabelspacing;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mtr: IXMLMtrtype read Get_Mtr;
    property Mlabeledtr: IXMLMlabeledtrtype read Get_Mlabeledtr;
  end;

{ IXMLMtrtype }

  IXMLMtrtype = interface(IXML)
    ['{76EF35AE-236F-4687-8C12-408DB68F79FD}']
    { Property Accessors }
    function Get_Rowalign: UnicodeString;
    function Get_Columnalign: UnicodeString;
    function Get_Groupalign: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mtd: IXMLMtdtype;
    procedure Set_Rowalign(Value: UnicodeString);
    procedure Set_Columnalign(Value: UnicodeString);
    procedure Set_Groupalign(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Rowalign: UnicodeString read Get_Rowalign write Set_Rowalign;
    property Columnalign: UnicodeString read Get_Columnalign write Set_Columnalign;
    property Groupalign: UnicodeString read Get_Groupalign write Set_Groupalign;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mtd: IXMLMtdtype read Get_Mtd;
  end;

{ IXMLMtdtype }

  IXMLMtdtype = interface(IXML)
    ['{E6D36B27-A226-463A-B40E-5058A910FF73}']
    { Property Accessors }
    function Get_Rowalign: UnicodeString;
    function Get_Columnalign: UnicodeString;
    function Get_Groupalign: UnicodeString;
    function Get_Columnspan: LongWord;
    function Get_Rowspan: LongWord;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Rowalign(Value: UnicodeString);
    procedure Set_Columnalign(Value: UnicodeString);
    procedure Set_Groupalign(Value: UnicodeString);
    procedure Set_Columnspan(Value: LongWord);
    procedure Set_Rowspan(Value: LongWord);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Rowalign: UnicodeString read Get_Rowalign write Set_Rowalign;
    property Columnalign: UnicodeString read Get_Columnalign write Set_Columnalign;
    property Groupalign: UnicodeString read Get_Groupalign write Set_Groupalign;
    property Columnspan: LongWord read Get_Columnspan write Set_Columnspan;
    property Rowspan: LongWord read Get_Rowspan write Set_Rowspan;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMaligngrouptype }

  IXMLMaligngrouptype = interface(IXML)
    ['{ED0F38FE-F547-4754-9EE7-9D4DAE3F8C45}']
    { Property Accessors }
    function Get_Groupalign: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Groupalign(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Groupalign: UnicodeString read Get_Groupalign write Set_Groupalign;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLMspacetype }

  IXMLMspacetype = interface(IXML)
    ['{369DBECA-BADA-4BB4-83E7-5A283A970D29}']
    { Property Accessors }
    function Get_Width: UnicodeString;
    function Get_Height: UnicodeString;
    function Get_Depth: UnicodeString;
    function Get_Linebreak: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Width(Value: UnicodeString);
    procedure Set_Height(Value: UnicodeString);
    procedure Set_Depth(Value: UnicodeString);
    procedure Set_Linebreak(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Width: UnicodeString read Get_Width write Set_Width;
    property Height: UnicodeString read Get_Height write Set_Height;
    property Depth: UnicodeString read Get_Depth write Set_Depth;
    property Linebreak: UnicodeString read Get_Linebreak write Set_Linebreak;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLMactiontype }

  IXMLMactiontype = interface(IXML)
    ['{DD8EF6FF-1437-4237-BFCB-A008FDA72E6F}']
    { Property Accessors }
    function Get_Actiontype: UnicodeString;
    function Get_Selection: LongWord;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Actiontype(Value: UnicodeString);
    procedure Set_Selection(Value: LongWord);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Actiontype: UnicodeString read Get_Actiontype write Set_Actiontype;
    property Selection: LongWord read Get_Selection write Set_Selection;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMerrortype }

  IXMLMerrortype = interface(IXML)
    ['{D6FDC2E0-7F30-44B9-85CF-9B750FFADE3B}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLMstyletype }

  IXMLMstyletype = interface(IXML)
    ['{29BD8FAA-AB3F-456A-85A5-30A128AA2070}']
    { Property Accessors }
    function Get_Scriptlevel: Integer;
    function Get_Displaystyle: Boolean;
    function Get_Scriptsizemultiplier: UnicodeString;
    function Get_Scriptminsize: UnicodeString;
    function Get_Color: UnicodeString;
    function Get_Background: UnicodeString;
    function Get_Veryverythinmathspace: UnicodeString;
    function Get_Verythinmathspace: UnicodeString;
    function Get_Thinmathspace: UnicodeString;
    function Get_Mediummathspace: UnicodeString;
    function Get_Thickmathspace: UnicodeString;
    function Get_Verythickmathspace: UnicodeString;
    function Get_Veryverythickmathspace: UnicodeString;
    function Get_Linethickness: UnicodeString;
    function Get_Form: UnicodeString;
    function Get_Lspace: UnicodeString;
    function Get_Rspace: UnicodeString;
    function Get_Fence: Boolean;
    function Get_Separator: Boolean;
    function Get_Stretchy: Boolean;
    function Get_Symmetric: Boolean;
    function Get_Movablelimits: Boolean;
    function Get_Accent: Boolean;
    function Get_Largeop: Boolean;
    function Get_Minsize: UnicodeString;
    function Get_Maxsize: UnicodeString;
    function Get_Mathvariant: UnicodeString;
    function Get_Mathsize: UnicodeString;
    function Get_Mathcolor: UnicodeString;
    function Get_Mathbackground: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Scriptlevel(Value: Integer);
    procedure Set_Displaystyle(Value: Boolean);
    procedure Set_Scriptsizemultiplier(Value: UnicodeString);
    procedure Set_Scriptminsize(Value: UnicodeString);
    procedure Set_Color(Value: UnicodeString);
    procedure Set_Background(Value: UnicodeString);
    procedure Set_Veryverythinmathspace(Value: UnicodeString);
    procedure Set_Verythinmathspace(Value: UnicodeString);
    procedure Set_Thinmathspace(Value: UnicodeString);
    procedure Set_Mediummathspace(Value: UnicodeString);
    procedure Set_Thickmathspace(Value: UnicodeString);
    procedure Set_Verythickmathspace(Value: UnicodeString);
    procedure Set_Veryverythickmathspace(Value: UnicodeString);
    procedure Set_Linethickness(Value: UnicodeString);
    procedure Set_Form(Value: UnicodeString);
    procedure Set_Lspace(Value: UnicodeString);
    procedure Set_Rspace(Value: UnicodeString);
    procedure Set_Fence(Value: Boolean);
    procedure Set_Separator(Value: Boolean);
    procedure Set_Stretchy(Value: Boolean);
    procedure Set_Symmetric(Value: Boolean);
    procedure Set_Movablelimits(Value: Boolean);
    procedure Set_Accent(Value: Boolean);
    procedure Set_Largeop(Value: Boolean);
    procedure Set_Minsize(Value: UnicodeString);
    procedure Set_Maxsize(Value: UnicodeString);
    procedure Set_Mathvariant(Value: UnicodeString);
    procedure Set_Mathsize(Value: UnicodeString);
    procedure Set_Mathcolor(Value: UnicodeString);
    procedure Set_Mathbackground(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Scriptlevel: Integer read Get_Scriptlevel write Set_Scriptlevel;
    property Displaystyle: Boolean read Get_Displaystyle write Set_Displaystyle;
    property Scriptsizemultiplier: UnicodeString read Get_Scriptsizemultiplier write Set_Scriptsizemultiplier;
    property Scriptminsize: UnicodeString read Get_Scriptminsize write Set_Scriptminsize;
    property Color: UnicodeString read Get_Color write Set_Color;
    property Background: UnicodeString read Get_Background write Set_Background;
    property Veryverythinmathspace: UnicodeString read Get_Veryverythinmathspace write Set_Veryverythinmathspace;
    property Verythinmathspace: UnicodeString read Get_Verythinmathspace write Set_Verythinmathspace;
    property Thinmathspace: UnicodeString read Get_Thinmathspace write Set_Thinmathspace;
    property Mediummathspace: UnicodeString read Get_Mediummathspace write Set_Mediummathspace;
    property Thickmathspace: UnicodeString read Get_Thickmathspace write Set_Thickmathspace;
    property Verythickmathspace: UnicodeString read Get_Verythickmathspace write Set_Verythickmathspace;
    property Veryverythickmathspace: UnicodeString read Get_Veryverythickmathspace write Set_Veryverythickmathspace;
    property Linethickness: UnicodeString read Get_Linethickness write Set_Linethickness;
    property Form: UnicodeString read Get_Form write Set_Form;
    property Lspace: UnicodeString read Get_Lspace write Set_Lspace;
    property Rspace: UnicodeString read Get_Rspace write Set_Rspace;
    property Fence: Boolean read Get_Fence write Set_Fence;
    property Separator: Boolean read Get_Separator write Set_Separator;
    property Stretchy: Boolean read Get_Stretchy write Set_Stretchy;
    property Symmetric: Boolean read Get_Symmetric write Set_Symmetric;
    property Movablelimits: Boolean read Get_Movablelimits write Set_Movablelimits;
    property Accent: Boolean read Get_Accent write Set_Accent;
    property Largeop: Boolean read Get_Largeop write Set_Largeop;
    property Minsize: UnicodeString read Get_Minsize write Set_Minsize;
    property Maxsize: UnicodeString read Get_Maxsize write Set_Maxsize;
    property Mathvariant: UnicodeString read Get_Mathvariant write Set_Mathvariant;
    property Mathsize: UnicodeString read Get_Mathsize write Set_Mathsize;
    property Mathcolor: UnicodeString read Get_Mathcolor write Set_Mathcolor;
    property Mathbackground: UnicodeString read Get_Mathbackground write Set_Mathbackground;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLCntype }

  IXMLCntype = interface(IXML)
    ['{FDF1A3F3-378D-4E2D-88C0-AD7878C86453}']
    { Property Accessors }
    function Get_Base: LongWord;
    function Get_Type_: UnicodeString;
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Sep: IXMLSeptype;
    procedure Set_Base(Value: LongWord);
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Base: LongWord read Get_Base write Set_Base;
    property Type_: UnicodeString read Get_Type_ write Set_Type_;
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Sep: IXMLSeptype read Get_Sep;
  end;

{ IXMLCitype }

  IXMLCitype = interface(IXML)
    ['{7AF55407-3608-4FE7-99B2-25A8CA9D492A}']
    { Property Accessors }
    function Get_Type_: UnicodeString;
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Type_: UnicodeString read Get_Type_ write Set_Type_;
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLCsymboltype }

  IXMLCsymboltype = interface(IXML)
    ['{41B9A5B8-68A3-4E4B-A6A2-13142E962986}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
  end;

{ IXMLArithtype }

  IXMLArithtype = interface(IXML)
    ['{937C3B97-5D51-4D69-9066-775C83D23FAD}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLFunctionstype }

  IXMLFunctionstype = interface(IXML)
    ['{0D5420A8-3CE0-4D6F-ABE7-9C1E358185B8}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLDomainofapplicationtype }

  IXMLDomainofapplicationtype = interface(IXML)
    ['{9FFBFABE-B60D-40BE-B871-71ECC146B610}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLElementaryfunctionstype }

  IXMLElementaryfunctionstype = interface(IXML)
    ['{AB7D5AD3-F699-45C4-A3AD-1B851382C7F7}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLLogictype }

  IXMLLogictype = interface(IXML)
    ['{9D6DEF5E-2FE1-4C6E-9C18-26ECAA3C67D0}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLConstanttype }

  IXMLConstanttype = interface(IXML)
    ['{52C1F7DD-27F4-4E93-A1E2-D4C4CA1C50F9}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLSettype }

  IXMLSettype = interface(IXML)
    ['{5B53CDA6-39C6-407B-AC66-7E9414EB0F24}']
    { Property Accessors }
    function Get_Type_: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Type_: UnicodeString read Get_Type_ write Set_Type_;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLListtype }

  IXMLListtype = interface(IXML)
    ['{B8D60DC6-5167-45FA-8A25-E05C8102FD27}']
    { Property Accessors }
    function Get_Order: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Order(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Order: UnicodeString read Get_Order write Set_Order;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLUniontype }

  IXMLUniontype = interface(IXML)
    ['{6ADE744E-934C-48F8-B83B-E76B28AE1B70}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLIntersecttype }

  IXMLIntersecttype = interface(IXML)
    ['{D32BD9C6-089E-4FAA-99EB-3F2D7FBEB41C}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLIntype }

  IXMLIntype = interface(IXML)
    ['{FAF31FD6-08FF-47CF-A1F0-BA7BF14B95A2}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLNotintype }

  IXMLNotintype = interface(IXML)
    ['{8BF0E351-8B6F-4E0F-9096-E4D14EB2897A}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLSubsettype }

  IXMLSubsettype = interface(IXML)
    ['{130D4ADF-D0FA-4021-8907-FA5DA031F2BD}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLPrsubsettype }

  IXMLPrsubsettype = interface(IXML)
    ['{6C51915C-765E-4587-B521-2B0AD5B26279}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLNotsubsettype }

  IXMLNotsubsettype = interface(IXML)
    ['{BF88E6D6-89D5-464D-96F5-97FFE997147F}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLNotprsubsettype }

  IXMLNotprsubsettype = interface(IXML)
    ['{57A27FDF-CCB3-493B-9A41-670D765311D5}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLSetdifftype }

  IXMLSetdifftype = interface(IXML)
    ['{5A6DDB1E-D67E-4030-9796-5B35A45B798A}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLCardtype }

  IXMLCardtype = interface(IXML)
    ['{4F7BA931-6F5F-48D5-A303-D523B550A900}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLCartesianproducttype }

  IXMLCartesianproducttype = interface(IXML)
    ['{B20FA65B-C5A8-4F8B-A2CD-0E130A614154}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLRelationstype }

  IXMLRelationstype = interface(IXML)
    ['{77472DD2-2365-4535-9529-E729330F0652}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLLogbasetype }

  IXMLLogbasetype = interface(IXML)
    ['{D2A7BB14-8DB1-45F9-9865-A9493932B80D}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLInttype }

  IXMLInttype = interface(IXML)
    ['{5470ECF6-2FB5-476B-9029-F116511E71C4}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLDifftype }

  IXMLDifftype = interface(IXML)
    ['{8EFDE52D-BB9E-4326-963D-DAAA15AE3870}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLPartialdifftype }

  IXMLPartialdifftype = interface(IXML)
    ['{2C79973F-5FAB-411E-8DAC-F33393D25AC2}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLLimittype }

  IXMLLimittype = interface(IXML)
    ['{F6545294-EB5A-4C56-8EB1-D90012CCDC51}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLLowlimittype }

  IXMLLowlimittype = interface(IXML)
    ['{8679DEE1-270A-4222-A68D-53BA777CD2B8}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLUplimittype }

  IXMLUplimittype = interface(IXML)
    ['{A00EE2F0-ACB2-4F05-8C97-6C2EFD0DA952}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLTendstotype }

  IXMLTendstotype = interface(IXML)
    ['{5DBE89BE-A96B-4326-AEEC-95660E5B00CA}']
    { Property Accessors }
    function Get_Type_: UnicodeString;
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Type_: UnicodeString read Get_Type_ write Set_Type_;
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLVectortype }

  IXMLVectortype = interface(IXML)
    ['{B2907662-965E-4639-9623-51AB566D6C74}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLMatrixtype }

  IXMLMatrixtype = interface(IXML)
    ['{1A5B7553-13F6-41C1-B124-03A68F902302}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Matrixrow: IXMLMatrixrowtype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Matrixrow: IXMLMatrixrowtype read Get_Matrixrow;
  end;

{ IXMLMatrixrowtype }

  IXMLMatrixrowtype = interface(IXML)
    ['{987AB460-4312-4B28-BB4D-1F7D8CC30514}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLDeterminanttype }

  IXMLDeterminanttype = interface(IXML)
    ['{221645B7-38EE-4021-A443-EBD8698B568A}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLTransposetype }

  IXMLTransposetype = interface(IXML)
    ['{69C7B094-17D8-4C21-9C21-0F19FF8E8808}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLSelectortype }

  IXMLSelectortype = interface(IXML)
    ['{9F1FB806-5131-4F4C-9D52-D02A63507F05}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLVectorproducttype }

  IXMLVectorproducttype = interface(IXML)
    ['{160A73D3-91E9-4EE1-B252-F8291C5641EB}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLScalarproducttype }

  IXMLScalarproducttype = interface(IXML)
    ['{5F6A1876-CBFF-4E6E-A8E5-975E819BFFDE}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLOuterproducttype }

  IXMLOuterproducttype = interface(IXML)
    ['{22115DD3-3398-4752-814D-07015019F577}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLDivergencetype }

  IXMLDivergencetype = interface(IXML)
    ['{F1A1629B-38D3-4AF6-BF7D-5C2053EBF106}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLGradtype }

  IXMLGradtype = interface(IXML)
    ['{96E31FB8-8B3F-43AE-9730-EF2FBD2CCB8F}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLCurltype }

  IXMLCurltype = interface(IXML)
    ['{4C808ADA-B841-4EBA-9846-39C3FC852A9E}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLLaplaciantype }

  IXMLLaplaciantype = interface(IXML)
    ['{8DBA7C42-3A47-4140-A215-90FA11D4D2E7}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLMeantype }

  IXMLMeantype = interface(IXML)
    ['{78B27B9D-0EFD-4F8F-B7E6-B98BC1AC528A}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLSdevtype }

  IXMLSdevtype = interface(IXML)
    ['{E28A31A3-E8DA-43B7-899B-95F810364B66}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLVariancetype }

  IXMLVariancetype = interface(IXML)
    ['{25B7A56C-72A9-4AFD-8572-924FA7995201}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLMediantype }

  IXMLMediantype = interface(IXML)
    ['{F6A25B5E-7C31-4919-B67C-A39CD13B779C}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLModetype }

  IXMLModetype = interface(IXML)
    ['{FC24E4AE-099C-40C6-A595-08E637FAD436}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLMomenttype }

  IXMLMomenttype = interface(IXML)
    ['{EA5660FA-C12A-48CA-81B7-0EB141B7D0F1}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLMomentabouttype }

  IXMLMomentabouttype = interface(IXML)
    ['{B5484C17-E378-4045-A97C-A8C7CF65DA39}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLApplytype }

  IXMLApplytype = interface(IXML)
    ['{0C9700E6-AE82-4052-8274-1B2A64BA2EAE}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLIntervaltype }

  IXMLIntervaltype = interface(IXML)
    ['{71A5B2F3-DBBF-4E76-B494-4310E33326E5}']
    { Property Accessors }
    function Get_Closure: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Closure(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Closure: UnicodeString read Get_Closure write Set_Closure;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLInversetype }

  IXMLInversetype = interface(IXML)
    ['{829B3E65-0206-45D3-A1DB-6DEF5F63C513}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLConditiontype }

  IXMLConditiontype = interface(IXML)
    ['{1733F1D4-D4C2-4F1B-B77C-BD4ADDCFEA2A}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLDeclaretype }

  IXMLDeclaretype = interface(IXML)
    ['{0B9B9897-3302-4E49-9D5B-1F07936B8D5A}']
    { Property Accessors }
    function Get_Type_: UnicodeString;
    function Get_Scope: UnicodeString;
    function Get_Nargs: LongWord;
    function Get_Occurrence: UnicodeString;
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Scope(Value: UnicodeString);
    procedure Set_Nargs(Value: LongWord);
    procedure Set_Occurrence(Value: UnicodeString);
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    { Methods & Properties }
    property Type_: UnicodeString read Get_Type_ write Set_Type_;
    property Scope: UnicodeString read Get_Scope write Set_Scope;
    property Nargs: LongWord read Get_Nargs write Set_Nargs;
    property Occurrence: UnicodeString read Get_Occurrence write Set_Occurrence;
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLLambdatype }

  IXMLLambdatype = interface(IXML)
    ['{B29B62B5-9AB8-4123-BCF1-749E097D7B4B}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLPiecewisetype }

  IXMLPiecewisetype = interface(IXML)
    ['{A3CC5297-8548-4A72-BFC8-52BC2D91EF52}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Piece: IXMLPiecetypeList;
    function Get_Otherwise: IXMLOtherwisetype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Piece: IXMLPiecetypeList read Get_Piece;
    property Otherwise: IXMLOtherwisetype read Get_Otherwise;
  end;

{ IXMLPiecetype }

  IXMLPiecetype = interface(IXML)
    ['{467C5616-C325-4F81-B23E-B6E5D8377FE4}']
    { Property Accessors }
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    { Methods & Properties }
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLPiecetypeList }

  IXMLPiecetypeList = interface(IXMLFilter)
    ['{47E4B8DE-AED3-41EC-A115-307D816DE798}']
    { Methods & Properties }
    function Add: IXMLPiecetype;
    function Insert(const Index: Integer): IXMLPiecetype;

    function Get_Item(Index: Integer): IXMLPiecetype;
    property Items[Index: Integer]: IXMLPiecetype read Get_Item; default;
  end;

{ IXMLBvartype }

  IXMLBvartype = interface(IXML)
    ['{B8300813-6910-4817-852E-EFCE514417E9}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLDegreetype }

  IXMLDegreetype = interface(IXML)
    ['{67A47C41-3695-4741-AE06-C66E00146208}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLSemanticstype }

  IXMLSemanticstype = interface(IXML)
    ['{D02E1563-3E50-450F-A7F4-D66B591A2D48}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Annotation: IXMLAnnotationtype;
    function Get_Annotationxml: IXMLAnnotationxmltype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property DefinitionURL: UnicodeString read Get_DefinitionURL write Set_DefinitionURL;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
    property Annotation: IXMLAnnotationtype read Get_Annotation;
    property Annotationxml: IXMLAnnotationxmltype read Get_Annotationxml;
  end;

{ IXMLAnnotationtype }

  IXMLAnnotationtype = interface(IXML)
    ['{F36F3372-64F3-4638-9356-B4F9A6327C0D}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLAnnotationxmltype }

  IXMLAnnotationxmltype = interface(IXML)
    ['{BF8C1B1B-1ECD-4DF4-BDBE-BCBEC0CA988B}']
    { Property Accessors }
    function Get_Encoding: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Encoding: UnicodeString read Get_Encoding write Set_Encoding;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
  end;

{ IXMLOtherwisetype }

  IXMLOtherwisetype = interface(IXML)
    ['{0695B244-CCD9-438D-8DFC-C878870202FD}']
    { Property Accessors }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Cn: IXMLCntype read Get_Cn;
    property Ci: IXMLCitype read Get_Ci;
    property Csymbol: IXMLCsymboltype read Get_Csymbol;
    property Abs: IXMLArithtype read Get_Abs;
    property Conjugate: IXMLArithtype read Get_Conjugate;
    property Factorial: IXMLArithtype read Get_Factorial;
    property Arg: IXMLArithtype read Get_Arg;
    property Real: IXMLArithtype read Get_Real;
    property Imaginary: IXMLArithtype read Get_Imaginary;
    property Floor: IXMLArithtype read Get_Floor;
    property Ceiling: IXMLArithtype read Get_Ceiling;
    property Quotient: IXMLArithtype read Get_Quotient;
    property Divide: IXMLArithtype read Get_Divide;
    property Rem: IXMLArithtype read Get_Rem;
    property Minus: IXMLArithtype read Get_Minus;
    property Plus: IXMLArithtype read Get_Plus;
    property Times: IXMLArithtype read Get_Times;
    property Power: IXMLArithtype read Get_Power;
    property Root: IXMLArithtype read Get_Root;
    property Max: IXMLArithtype read Get_Max;
    property Min: IXMLArithtype read Get_Min;
    property Gcd: IXMLArithtype read Get_Gcd;
    property Lcm: IXMLArithtype read Get_Lcm;
    property Sum: IXMLArithtype read Get_Sum;
    property Product: IXMLArithtype read Get_Product;
    property Compose: IXMLFunctionstype read Get_Compose;
    property Domain: IXMLFunctionstype read Get_Domain;
    property Codomain: IXMLFunctionstype read Get_Codomain;
    property Image: IXMLFunctionstype read Get_Image;
    property Domainofapplication: IXMLDomainofapplicationtype read Get_Domainofapplication;
    property Ident: IXMLFunctionstype read Get_Ident;
    property And_: IXMLElementaryfunctionstype read Get_And_;
    property Or_: IXMLLogictype read Get_Or_;
    property Xor_: IXMLLogictype read Get_Xor_;
    property Not_: IXMLLogictype read Get_Not_;
    property Exists: IXMLLogictype read Get_Exists;
    property Forall: IXMLLogictype read Get_Forall;
    property Implies: IXMLLogictype read Get_Implies;
    property Naturalnumbers: IXMLConstanttype read Get_Naturalnumbers;
    property Primes: IXMLConstanttype read Get_Primes;
    property Integers: IXMLConstanttype read Get_Integers;
    property Rationals: IXMLConstanttype read Get_Rationals;
    property Reals: IXMLConstanttype read Get_Reals;
    property Complexes: IXMLConstanttype read Get_Complexes;
    property Emptyset: IXMLConstanttype read Get_Emptyset;
    property Exponentiale: IXMLConstanttype read Get_Exponentiale;
    property Imaginaryi: IXMLConstanttype read Get_Imaginaryi;
    property Pi: IXMLConstanttype read Get_Pi;
    property Eulergamma: IXMLConstanttype read Get_Eulergamma;
    property True: IXMLConstanttype read Get_True;
    property False: IXMLConstanttype read Get_False;
    property Infinity: IXMLConstanttype read Get_Infinity;
    property Notanumber: IXMLConstanttype read Get_Notanumber;
    property Set_: IXMLSettype read Get_Set_;
    property List: IXMLListtype read Get_List;
    property Union: IXMLUniontype read Get_Union;
    property Intersect: IXMLIntersecttype read Get_Intersect;
    property In_: IXMLIntype read Get_In_;
    property Notin: IXMLNotintype read Get_Notin;
    property Subset: IXMLSubsettype read Get_Subset;
    property Prsubset: IXMLPrsubsettype read Get_Prsubset;
    property Notsubset: IXMLNotsubsettype read Get_Notsubset;
    property Notprsubset: IXMLNotprsubsettype read Get_Notprsubset;
    property Setdiff: IXMLSetdifftype read Get_Setdiff;
    property Card: IXMLCardtype read Get_Card;
    property Cartesianproduct: IXMLCartesianproducttype read Get_Cartesianproduct;
    property Eq: IXMLRelationstype read Get_Eq;
    property Neq: IXMLRelationstype read Get_Neq;
    property Leq: IXMLRelationstype read Get_Leq;
    property Lt: IXMLRelationstype read Get_Lt;
    property Geq: IXMLRelationstype read Get_Geq;
    property Gt: IXMLRelationstype read Get_Gt;
    property Equivalent: IXMLRelationstype read Get_Equivalent;
    property Approx: IXMLRelationstype read Get_Approx;
    property Factorof: IXMLRelationstype read Get_Factorof;
    property Exp: IXMLElementaryfunctionstype read Get_Exp;
    property Ln: IXMLElementaryfunctionstype read Get_Ln;
    property Log: IXMLElementaryfunctionstype read Get_Log;
    property Logbase: IXMLLogbasetype read Get_Logbase;
    property Sin: IXMLElementaryfunctionstype read Get_Sin;
    property Cos: IXMLElementaryfunctionstype read Get_Cos;
    property Tan: IXMLElementaryfunctionstype read Get_Tan;
    property Sec: IXMLElementaryfunctionstype read Get_Sec;
    property Csc: IXMLElementaryfunctionstype read Get_Csc;
    property Cot: IXMLElementaryfunctionstype read Get_Cot;
    property Arcsin: IXMLElementaryfunctionstype read Get_Arcsin;
    property Arccos: IXMLElementaryfunctionstype read Get_Arccos;
    property Arctan: IXMLElementaryfunctionstype read Get_Arctan;
    property Arcsec: IXMLElementaryfunctionstype read Get_Arcsec;
    property Arccsc: IXMLElementaryfunctionstype read Get_Arccsc;
    property Arccot: IXMLElementaryfunctionstype read Get_Arccot;
    property Sinh: IXMLElementaryfunctionstype read Get_Sinh;
    property Cosh: IXMLElementaryfunctionstype read Get_Cosh;
    property Tanh: IXMLElementaryfunctionstype read Get_Tanh;
    property Sech: IXMLElementaryfunctionstype read Get_Sech;
    property Csch: IXMLElementaryfunctionstype read Get_Csch;
    property Coth: IXMLElementaryfunctionstype read Get_Coth;
    property Arccosh: IXMLElementaryfunctionstype read Get_Arccosh;
    property Arccoth: IXMLElementaryfunctionstype read Get_Arccoth;
    property Arccsch: IXMLElementaryfunctionstype read Get_Arccsch;
    property Arcsech: IXMLElementaryfunctionstype read Get_Arcsech;
    property Arcsinh: IXMLElementaryfunctionstype read Get_Arcsinh;
    property Arctanh: IXMLElementaryfunctionstype read Get_Arctanh;
    property Int: IXMLInttype read Get_Int;
    property Diff: IXMLDifftype read Get_Diff;
    property Partialdiff: IXMLPartialdifftype read Get_Partialdiff;
    property Limit: IXMLLimittype read Get_Limit;
    property Lowlimit: IXMLLowlimittype read Get_Lowlimit;
    property Uplimit: IXMLUplimittype read Get_Uplimit;
    property Tendsto: IXMLTendstotype read Get_Tendsto;
    property Vector: IXMLVectortype read Get_Vector;
    property Matrix: IXMLMatrixtype read Get_Matrix;
    property Determinant: IXMLDeterminanttype read Get_Determinant;
    property Transpose: IXMLTransposetype read Get_Transpose;
    property Selector: IXMLSelectortype read Get_Selector;
    property Vectorproduct: IXMLVectorproducttype read Get_Vectorproduct;
    property Scalarproduct: IXMLScalarproducttype read Get_Scalarproduct;
    property Outerproduct: IXMLOuterproducttype read Get_Outerproduct;
    property Divergence: IXMLDivergencetype read Get_Divergence;
    property Grad: IXMLGradtype read Get_Grad;
    property Curl: IXMLCurltype read Get_Curl;
    property Laplacian: IXMLLaplaciantype read Get_Laplacian;
    property Mean: IXMLMeantype read Get_Mean;
    property Sdev: IXMLSdevtype read Get_Sdev;
    property Variance: IXMLVariancetype read Get_Variance;
    property Median: IXMLMediantype read Get_Median;
    property Mode: IXMLModetype read Get_Mode;
    property Moment: IXMLMomenttype read Get_Moment;
    property Momentabout: IXMLMomentabouttype read Get_Momentabout;
    property Apply: IXMLApplytype read Get_Apply;
    property Interval: IXMLIntervaltype read Get_Interval;
    property Inverse: IXMLInversetype read Get_Inverse;
    property Condition: IXMLConditiontype read Get_Condition;
    property Declare: IXMLDeclaretype read Get_Declare;
    property Lambda: IXMLLambdatype read Get_Lambda;
    property Piecewise: IXMLPiecewisetype read Get_Piecewise;
    property Bvar: IXMLBvartype read Get_Bvar;
    property Degree: IXMLDegreetype read Get_Degree;
    property Semantics: IXMLSemanticstype read Get_Semantics;
    property Mi: IXMLMitype read Get_Mi;
    property Mo: IXMLMotype read Get_Mo;
    property Mn: IXMLMntype read Get_Mn;
    property Mtext: IXMLMtexttype read Get_Mtext;
    property Ms: IXMLMstype read Get_Ms;
    property Mrow: IXMLMrowtype read Get_Mrow;
    property Mfrac: IXMLMfractype read Get_Mfrac;
    property Msqrt: IXMLMsqrttype read Get_Msqrt;
    property Mroot: IXMLMroottype read Get_Mroot;
    property Mpadded: IXMLMpaddedtype read Get_Mpadded;
    property Mphantom: IXMLMphantomtype read Get_Mphantom;
    property Mfenced: IXMLMfencedtype read Get_Mfenced;
    property Menclose: IXMLMenclosetype read Get_Menclose;
    property Msub: IXMLMsubtype read Get_Msub;
    property Msup: IXMLMsuptype read Get_Msup;
    property Msubsup: IXMLMsubsuptype read Get_Msubsup;
    property Munder: IXMLMundertype read Get_Munder;
    property Mover: IXMLMovertype read Get_Mover;
    property Munderover: IXMLMunderovertype read Get_Munderover;
    property Mmultiscripts: IXMLMmultiscriptstype read Get_Mmultiscripts;
    property Mtable: IXMLMtabletype read Get_Mtable;
    property Maligngroup: IXMLMaligngrouptype read Get_Maligngroup;
    property Malignmark: IXMLMalignmarktype read Get_Malignmark;
    property Mspace: IXMLMspacetype read Get_Mspace;
    property Maction: IXMLMactiontype read Get_Maction;
    property Merror: IXMLMerrortype read Get_Merror;
    property Mstyle: IXMLMstyletype read Get_Mstyle;
  end;

{ IXMLSeptype }

  IXMLSeptype = interface(IXML)
    ['{3F5D8FFF-0E7E-412B-A5BE-316679E8CF5F}']
  end;

{ IXMLMlabeledtrtype }

  IXMLMlabeledtrtype = interface(IXML)
    ['{261A77DF-4174-4B6F-96A4-4E8196A414DE}']
    { Property Accessors }
    function Get_Rowalign: UnicodeString;
    function Get_Columnalign: UnicodeString;
    function Get_Groupalign: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mtd: IXMLMtdtype;
    procedure Set_Rowalign(Value: UnicodeString);
    procedure Set_Columnalign(Value: UnicodeString);
    procedure Set_Groupalign(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
    { Methods & Properties }
    property Rowalign: UnicodeString read Get_Rowalign write Set_Rowalign;
    property Columnalign: UnicodeString read Get_Columnalign write Set_Columnalign;
    property Groupalign: UnicodeString read Get_Groupalign write Set_Groupalign;
    property Class_: UnicodeString read Get_Class_ write Set_Class_;
    property Style: UnicodeString read Get_Style write Set_Style;
    property Xref: UnicodeString read Get_Xref write Set_Xref;
    property Id: UnicodeString read Get_Id write Set_Id;
    property Href: UnicodeString read Get_Href write Set_Href;
    property Mtd: IXMLMtdtype read Get_Mtd;
  end;

{ IXMLNonetype }

  IXMLNonetype = interface(IXML)
    ['{11B79F7A-69A0-4050-82B6-BFB32C25393E}']
  end;

{ IXMLMprescriptstype }

  IXMLMprescriptstype = interface(IXML)
    ['{9C4FF3FF-E8B1-4B0A-A068-FB9EB66F6246}']
  end;

{ IXMLLibrary_articulated_systems_type }

  IXMLLibrary_articulated_systems_type = interface(IXML)
    ['{9126A5B0-937D-43F2-BE59-FEFF09C97DF1}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Articulated_system: IXMLArticulated_system_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Articulated_system: IXMLArticulated_system_typeList read Get_Articulated_system;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_articulated_systems_typeList }

  IXMLLibrary_articulated_systems_typeList = interface(IXMLFilter)
    ['{3A238278-CE27-487A-9FC9-C2B01CEC7890}']
    { Methods & Properties }
    function Add: IXMLLibrary_articulated_systems_type;
    function Insert(const Index: Integer): IXMLLibrary_articulated_systems_type;

    function Get_Item(Index: Integer): IXMLLibrary_articulated_systems_type;
    property Items[Index: Integer]: IXMLLibrary_articulated_systems_type read Get_Item; default;
  end;

{ IXMLArticulated_system_type }

  IXMLArticulated_system_type = interface(IXML)
    ['{798E61BC-6AF3-4182-85FA-5FB1AFF64E53}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Kinematics: IXMLKinematics_type;
    function Get_Motion: IXMLMotion_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Kinematics: IXMLKinematics_type read Get_Kinematics;
    property Motion: IXMLMotion_type read Get_Motion;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLArticulated_system_typeList }

  IXMLArticulated_system_typeList = interface(IXMLFilter)
    ['{1ADD6853-E2C3-4BD0-88F4-DAA5F1ECFE92}']
    { Methods & Properties }
    function Add: IXMLArticulated_system_type;
    function Insert(const Index: Integer): IXMLArticulated_system_type;

    function Get_Item(Index: Integer): IXMLArticulated_system_type;
    property Items[Index: Integer]: IXMLArticulated_system_type read Get_Item; default;
  end;

{ IXMLKinematics_type }

  IXMLKinematics_type = interface(IXML)
    ['{BCEF73BF-E425-4722-B084-650AE7946FA5}']
    { Property Accessors }
    function Get_Instance_kinematics_model: IXMLInstance_kinematics_model_typeList;
    function Get_Technique_common: IXMLKinematics_technique_type;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Instance_kinematics_model: IXMLInstance_kinematics_model_typeList read Get_Instance_kinematics_model;
    property Technique_common: IXMLKinematics_technique_type read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_kinematics_model_type }

  IXMLInstance_kinematics_model_type = interface(IXML)
    ['{BE74C65D-6396-4259-89E4-7335C1810C59}']
    { Property Accessors }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Bind: IXMLKinematics_bind_typeList;
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Setparam: IXMLKinematics_setparam_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Url: UnicodeString read Get_Url write Set_Url;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Bind: IXMLKinematics_bind_typeList read Get_Bind;
    property Newparam: IXMLKinematics_newparam_typeList read Get_Newparam;
    property Setparam: IXMLKinematics_setparam_typeList read Get_Setparam;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_kinematics_model_typeList }

  IXMLInstance_kinematics_model_typeList = interface(IXMLFilter)
    ['{A9DCECA7-B524-4BE2-8B08-D69F46D9D583}']
    { Methods & Properties }
    function Add: IXMLInstance_kinematics_model_type;
    function Insert(const Index: Integer): IXMLInstance_kinematics_model_type;

    function Get_Item(Index: Integer): IXMLInstance_kinematics_model_type;
    property Items[Index: Integer]: IXMLInstance_kinematics_model_type read Get_Item; default;
  end;

{ IXMLKinematics_bind_type }

  IXMLKinematics_bind_type = interface(IXML)
    ['{D9716396-B4DD-4ECC-A0B3-7B67AE32EDE0}']
    { Property Accessors }
    function Get_Symbol: UnicodeString;
    function Get_Param: IXMLKinematics_param_type;
    function Get_Bool: Boolean;
    function Get_Float: Double;
    function Get_Int: Int64;
    function Get_SIDREF: UnicodeString;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Float(Value: Double);
    procedure Set_Int(Value: Int64);
    procedure Set_SIDREF(Value: UnicodeString);
    { Methods & Properties }
    property Symbol: UnicodeString read Get_Symbol write Set_Symbol;
    property Param: IXMLKinematics_param_type read Get_Param;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Float: Double read Get_Float write Set_Float;
    property Int: Int64 read Get_Int write Set_Int;
    property SIDREF: UnicodeString read Get_SIDREF write Set_SIDREF;
  end;

{ IXMLKinematics_bind_typeList }

  IXMLKinematics_bind_typeList = interface(IXMLFilter)
    ['{F4181527-8F3A-4816-928E-96362D25FABA}']
    { Methods & Properties }
    function Add: IXMLKinematics_bind_type;
    function Insert(const Index: Integer): IXMLKinematics_bind_type;

    function Get_Item(Index: Integer): IXMLKinematics_bind_type;
    property Items[Index: Integer]: IXMLKinematics_bind_type read Get_Item; default;
  end;

{ IXMLKinematics_param_type }

  IXMLKinematics_param_type = interface(IXML)
    ['{2A2BE256-1F28-4C7B-95CA-AB8E3CE75C58}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
  end;

{ IXMLKinematics_setparam_type }

  IXMLKinematics_setparam_type = interface(IXML)
    ['{8413DFCD-532A-46A7-8C58-D19D5B41BC77}']
    { Property Accessors }
    function Get_Ref: UnicodeString;
    function Get_Float: Double;
    function Get_Int: Int64;
    function Get_SIDREF: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Connect_param: IXMLKinematics_connect_param_type;
    procedure Set_Ref(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Int(Value: Int64);
    procedure Set_SIDREF(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    { Methods & Properties }
    property Ref: UnicodeString read Get_Ref write Set_Ref;
    property Float: Double read Get_Float write Set_Float;
    property Int: Int64 read Get_Int write Set_Int;
    property SIDREF: UnicodeString read Get_SIDREF write Set_SIDREF;
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Connect_param: IXMLKinematics_connect_param_type read Get_Connect_param;
  end;

{ IXMLKinematics_setparam_typeList }

  IXMLKinematics_setparam_typeList = interface(IXMLFilter)
    ['{AC068131-85A7-4EF8-82BE-4EF69B4F60E3}']
    { Methods & Properties }
    function Add: IXMLKinematics_setparam_type;
    function Insert(const Index: Integer): IXMLKinematics_setparam_type;

    function Get_Item(Index: Integer): IXMLKinematics_setparam_type;
    property Items[Index: Integer]: IXMLKinematics_setparam_type read Get_Item; default;
  end;

{ IXMLKinematics_technique_type }

  IXMLKinematics_technique_type = interface(IXML)
    ['{149CBCDB-269B-4020-B32F-D0D0D931A936}']
    { Property Accessors }
    function Get_Axis_info: IXMLKinematics_axis_info_typeList;
    function Get_Frame_origin: IXMLKinematics_frame_type;
    function Get_Frame_tip: IXMLKinematics_frame_type;
    function Get_Frame_tcp: IXMLKinematics_frame_type;
    function Get_Frame_object: IXMLKinematics_frame_type;
    { Methods & Properties }
    property Axis_info: IXMLKinematics_axis_info_typeList read Get_Axis_info;
    property Frame_origin: IXMLKinematics_frame_type read Get_Frame_origin;
    property Frame_tip: IXMLKinematics_frame_type read Get_Frame_tip;
    property Frame_tcp: IXMLKinematics_frame_type read Get_Frame_tcp;
    property Frame_object: IXMLKinematics_frame_type read Get_Frame_object;
  end;

{ IXMLKinematics_axis_info_type }

  IXMLKinematics_axis_info_type = interface(IXML)
    ['{D0A7FB0F-CD5A-410E-AB4D-B459AC15C650}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Axis: UnicodeString;
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Active: IXMLCommon_bool_or_param_type;
    function Get_Locked: IXMLCommon_bool_or_param_type;
    function Get_Index: IXMLKinematics_index_typeList;
    function Get_Limits: IXMLKinematics_limits_type;
    function Get_Formula: IXMLFormula_typeList;
    function Get_Instance_formula: IXMLInstance_formula_typeList;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Axis(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Axis: UnicodeString read Get_Axis write Set_Axis;
    property Newparam: IXMLKinematics_newparam_typeList read Get_Newparam;
    property Active: IXMLCommon_bool_or_param_type read Get_Active;
    property Locked: IXMLCommon_bool_or_param_type read Get_Locked;
    property Index: IXMLKinematics_index_typeList read Get_Index;
    property Limits: IXMLKinematics_limits_type read Get_Limits;
    property Formula: IXMLFormula_typeList read Get_Formula;
    property Instance_formula: IXMLInstance_formula_typeList read Get_Instance_formula;
  end;

{ IXMLKinematics_axis_info_typeList }

  IXMLKinematics_axis_info_typeList = interface(IXMLFilter)
    ['{464B984E-903F-4511-BF8A-3FCF53B59512}']
    { Methods & Properties }
    function Add: IXMLKinematics_axis_info_type;
    function Insert(const Index: Integer): IXMLKinematics_axis_info_type;

    function Get_Item(Index: Integer): IXMLKinematics_axis_info_type;
    property Items[Index: Integer]: IXMLKinematics_axis_info_type read Get_Item; default;
  end;

{ IXMLCommon_bool_or_param_type }

  IXMLCommon_bool_or_param_type = interface(IXML)
    ['{074763FA-D391-41D1-88E3-6317E45B406C}']
    { Property Accessors }
    function Get_Bool: Boolean;
    function Get_Param: IXMLCommon_param_type;
    procedure Set_Bool(Value: Boolean);
    { Methods & Properties }
    property Bool: Boolean read Get_Bool write Set_Bool;
    property Param: IXMLCommon_param_type read Get_Param;
  end;

{ IXMLCommon_int_or_param_type }

  IXMLCommon_int_or_param_type = interface(IXML)
    ['{45757872-3193-4D0D-B6ED-8F08B836E222}']
    { Property Accessors }
    function Get_Int: Int64;
    function Get_Param: IXMLCommon_param_type;
    procedure Set_Int(Value: Int64);
    { Methods & Properties }
    property Int: Int64 read Get_Int write Set_Int;
    property Param: IXMLCommon_param_type read Get_Param;
  end;

{ IXMLKinematics_index_type }

  IXMLKinematics_index_type = interface(IXMLCommon_int_or_param_type)
    ['{5CBC1796-137C-4F2D-8AE2-FAD6F761FA5B}']
    { Property Accessors }
    function Get_Semantic: UnicodeString;
    procedure Set_Semantic(Value: UnicodeString);
    { Methods & Properties }
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
  end;

{ IXMLKinematics_index_typeList }

  IXMLKinematics_index_typeList = interface(IXMLFilter)
    ['{74B22F00-7D6E-4332-90EB-D9853D7BF556}']
    { Methods & Properties }
    function Add: IXMLKinematics_index_type;
    function Insert(const Index: Integer): IXMLKinematics_index_type;

    function Get_Item(Index: Integer): IXMLKinematics_index_type;
    property Items[Index: Integer]: IXMLKinematics_index_type read Get_Item; default;
  end;

{ IXMLKinematics_limits_type }

  IXMLKinematics_limits_type = interface(IXML)
    ['{7B751B4C-61E4-49B9-A391-B73DBC7AB56C}']
    { Property Accessors }
    function Get_Min: IXMLCommon_float_or_param_type;
    function Get_Max: IXMLCommon_float_or_param_type;
    { Methods & Properties }
    property Min: IXMLCommon_float_or_param_type read Get_Min;
    property Max: IXMLCommon_float_or_param_type read Get_Max;
  end;

{ IXMLKinematics_frame_type }

  IXMLKinematics_frame_type = interface(IXML)
    ['{3590E686-75C8-4D66-A8AD-9D07471F240B}']
    { Property Accessors }
    function Get_Link: UnicodeString;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    procedure Set_Link(Value: UnicodeString);
    { Methods & Properties }
    property Link: UnicodeString read Get_Link write Set_Link;
    property Translate: IXMLTranslate_typeList read Get_Translate;
    property Rotate: IXMLRotate_typeList read Get_Rotate;
  end;

{ IXMLMotion_type }

  IXMLMotion_type = interface(IXML)
    ['{0BE92A7F-9BF8-461C-8AF1-FAB0D5316FF0}']
    { Property Accessors }
    function Get_Instance_articulated_system: IXMLInstance_articulated_system_type;
    function Get_Technique_common: IXMLMotion_technique_type;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Instance_articulated_system: IXMLInstance_articulated_system_type read Get_Instance_articulated_system;
    property Technique_common: IXMLMotion_technique_type read Get_Technique_common;
    property Technique: IXMLTechnique_typeList read Get_Technique;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_articulated_system_type }

  IXMLInstance_articulated_system_type = interface(IXML)
    ['{12F0F416-E297-4092-B183-54FFBB76B642}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Url: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Bind: IXMLKinematics_bind_typeList;
    function Get_Setparam: IXMLKinematics_setparam_typeList;
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Url: UnicodeString read Get_Url write Set_Url;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Bind: IXMLKinematics_bind_typeList read Get_Bind;
    property Setparam: IXMLKinematics_setparam_typeList read Get_Setparam;
    property Newparam: IXMLKinematics_newparam_typeList read Get_Newparam;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_articulated_system_typeList }

  IXMLInstance_articulated_system_typeList = interface(IXMLFilter)
    ['{32B467C8-DD36-47AC-9110-36AEEBF7FE73}']
    { Methods & Properties }
    function Add: IXMLInstance_articulated_system_type;
    function Insert(const Index: Integer): IXMLInstance_articulated_system_type;

    function Get_Item(Index: Integer): IXMLInstance_articulated_system_type;
    property Items[Index: Integer]: IXMLInstance_articulated_system_type read Get_Item; default;
  end;

{ IXMLMotion_technique_type }

  IXMLMotion_technique_type = interface(IXML)
    ['{9F112DA7-AB5C-4FF1-AB7C-53E7A76BD76D}']
    { Property Accessors }
    function Get_Axis_info: IXMLMotion_axis_info_typeList;
    function Get_Effector_info: IXMLMotion_effector_info_type;
    { Methods & Properties }
    property Axis_info: IXMLMotion_axis_info_typeList read Get_Axis_info;
    property Effector_info: IXMLMotion_effector_info_type read Get_Effector_info;
  end;

{ IXMLMotion_axis_info_type }

  IXMLMotion_axis_info_type = interface(IXML)
    ['{7B5FBE84-F3EE-49D1-8E3A-086FBEA54983}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Axis: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Bind: IXMLKinematics_bind_typeList;
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Setparam: IXMLKinematics_setparam_typeList;
    function Get_Speed: IXMLCommon_float_or_param_type;
    function Get_Acceleration: IXMLCommon_float_or_param_type;
    function Get_Deceleration: IXMLCommon_float_or_param_type;
    function Get_Jerk: IXMLCommon_float_or_param_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Axis(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Axis: UnicodeString read Get_Axis write Set_Axis;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Bind: IXMLKinematics_bind_typeList read Get_Bind;
    property Newparam: IXMLKinematics_newparam_typeList read Get_Newparam;
    property Setparam: IXMLKinematics_setparam_typeList read Get_Setparam;
    property Speed: IXMLCommon_float_or_param_type read Get_Speed;
    property Acceleration: IXMLCommon_float_or_param_type read Get_Acceleration;
    property Deceleration: IXMLCommon_float_or_param_type read Get_Deceleration;
    property Jerk: IXMLCommon_float_or_param_type read Get_Jerk;
  end;

{ IXMLMotion_axis_info_typeList }

  IXMLMotion_axis_info_typeList = interface(IXMLFilter)
    ['{D8122DBF-1D81-4F45-A050-7F9A6FEBC8C4}']
    { Methods & Properties }
    function Add: IXMLMotion_axis_info_type;
    function Insert(const Index: Integer): IXMLMotion_axis_info_type;

    function Get_Item(Index: Integer): IXMLMotion_axis_info_type;
    property Items[Index: Integer]: IXMLMotion_axis_info_type read Get_Item; default;
  end;

{ IXMLMotion_effector_info_type }

  IXMLMotion_effector_info_type = interface(IXML)
    ['{3BF57723-7589-4CF6-87A4-DB3BF901A618}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Bind: IXMLKinematics_bind_typeList;
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Setparam: IXMLKinematics_setparam_typeList;
    function Get_Speed: IXMLCommon_float2_or_param_type;
    function Get_Acceleration: IXMLCommon_float2_or_param_type;
    function Get_Deceleration: IXMLCommon_float2_or_param_type;
    function Get_Jerk: IXMLCommon_float2_or_param_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Bind: IXMLKinematics_bind_typeList read Get_Bind;
    property Newparam: IXMLKinematics_newparam_typeList read Get_Newparam;
    property Setparam: IXMLKinematics_setparam_typeList read Get_Setparam;
    property Speed: IXMLCommon_float2_or_param_type read Get_Speed;
    property Acceleration: IXMLCommon_float2_or_param_type read Get_Acceleration;
    property Deceleration: IXMLCommon_float2_or_param_type read Get_Deceleration;
    property Jerk: IXMLCommon_float2_or_param_type read Get_Jerk;
  end;

{ IXMLCommon_float2_or_param_type }

  IXMLCommon_float2_or_param_type = interface(IXML)
    ['{0BC36916-B5BC-4C34-843D-BA910437D36B}']
    { Property Accessors }
    function Get_Float2: UnicodeString;
    function Get_Param: IXMLCommon_param_type;
    procedure Set_Float2(Value: UnicodeString);
    { Methods & Properties }
    property Float2: UnicodeString read Get_Float2 write Set_Float2;
    property Param: IXMLCommon_param_type read Get_Param;
  end;

{ IXMLLibrary_kinematics_scenes_type }

  IXMLLibrary_kinematics_scenes_type = interface(IXML)
    ['{B2B36DAF-EE29-48F7-BD85-F3BDE1682F0D}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Kinematics_scene: IXMLKinematics_scene_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Kinematics_scene: IXMLKinematics_scene_typeList read Get_Kinematics_scene;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_kinematics_scenes_typeList }

  IXMLLibrary_kinematics_scenes_typeList = interface(IXMLFilter)
    ['{835ACB60-37EB-49AF-AA90-DFC557879DBE}']
    { Methods & Properties }
    function Add: IXMLLibrary_kinematics_scenes_type;
    function Insert(const Index: Integer): IXMLLibrary_kinematics_scenes_type;

    function Get_Item(Index: Integer): IXMLLibrary_kinematics_scenes_type;
    property Items[Index: Integer]: IXMLLibrary_kinematics_scenes_type read Get_Item; default;
  end;

{ IXMLKinematics_scene_type }

  IXMLKinematics_scene_type = interface(IXML)
    ['{819B18E0-1187-4120-98D2-E4017006F76D}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Instance_kinematics_model: IXMLInstance_kinematics_model_typeList;
    function Get_Instance_articulated_system: IXMLInstance_articulated_system_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Instance_kinematics_model: IXMLInstance_kinematics_model_typeList read Get_Instance_kinematics_model;
    property Instance_articulated_system: IXMLInstance_articulated_system_typeList read Get_Instance_articulated_system;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLKinematics_scene_typeList }

  IXMLKinematics_scene_typeList = interface(IXMLFilter)
    ['{C25CAD61-9BDE-4393-8CE1-93032CB85190}']
    { Methods & Properties }
    function Add: IXMLKinematics_scene_type;
    function Insert(const Index: Integer): IXMLKinematics_scene_type;

    function Get_Item(Index: Integer): IXMLKinematics_scene_type;
    property Items[Index: Integer]: IXMLKinematics_scene_type read Get_Item; default;
  end;

{ IXMLLibrary_formulas_type }

  IXMLLibrary_formulas_type = interface(IXML)
    ['{6ADB3914-8E2F-42BB-A256-A87B52C5A4CB}']
    { Property Accessors }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Formula: IXMLFormula_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Id: UnicodeString read Get_Id write Set_Id;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Formula: IXMLFormula_typeList read Get_Formula;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLLibrary_formulas_typeList }

  IXMLLibrary_formulas_typeList = interface(IXMLFilter)
    ['{F639FA70-A751-404B-A260-671AAF2FDD82}']
    { Methods & Properties }
    function Add: IXMLLibrary_formulas_type;
    function Insert(const Index: Integer): IXMLLibrary_formulas_type;

    function Get_Item(Index: Integer): IXMLLibrary_formulas_type;
    property Items[Index: Integer]: IXMLLibrary_formulas_type read Get_Item; default;
  end;

{ IXMLCOLLADA_scene }

  IXMLCOLLADA_scene = interface(IXML)
    ['{5702540E-87D7-42C1-8D8E-26798BCD236E}']
    { Property Accessors }
    function Get_Instance_physics_scene: IXMLInstance_with_extra_typeList;
    function Get_Instance_visual_scene: IXMLInstance_with_extra_type;
    function Get_Instance_kinematics_scene: IXMLInstance_kinematics_scene_typeList;
    function Get_Extra: IXMLExtra_typeList;
    { Methods & Properties }
    property Instance_physics_scene: IXMLInstance_with_extra_typeList read Get_Instance_physics_scene;
    property Instance_visual_scene: IXMLInstance_with_extra_type read Get_Instance_visual_scene;
    property Instance_kinematics_scene: IXMLInstance_kinematics_scene_typeList read Get_Instance_kinematics_scene;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_kinematics_scene_type }

  IXMLInstance_kinematics_scene_type = interface(IXML)
    ['{A5E6550A-94FF-4297-AC85-3B700C88E7B9}']
    { Property Accessors }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Setparam: IXMLKinematics_setparam_typeList;
    function Get_Bind_kinematics_model: IXMLBind_kinematics_model_typeList;
    function Get_Bind_joint_axis: IXMLBind_joint_axis_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    { Methods & Properties }
    property Url: UnicodeString read Get_Url write Set_Url;
    property Sid: UnicodeString read Get_Sid write Set_Sid;
    property Name: UnicodeString read Get_Name write Set_Name;
    property Asset: IXMLAsset_type read Get_Asset;
    property Newparam: IXMLKinematics_newparam_typeList read Get_Newparam;
    property Setparam: IXMLKinematics_setparam_typeList read Get_Setparam;
    property Bind_kinematics_model: IXMLBind_kinematics_model_typeList read Get_Bind_kinematics_model;
    property Bind_joint_axis: IXMLBind_joint_axis_typeList read Get_Bind_joint_axis;
    property Extra: IXMLExtra_typeList read Get_Extra;
  end;

{ IXMLInstance_kinematics_scene_typeList }

  IXMLInstance_kinematics_scene_typeList = interface(IXMLFilter)
    ['{B24CD20B-D8B4-4AFD-93F7-F3B5E46CBB7D}']
    { Methods & Properties }
    function Add: IXMLInstance_kinematics_scene_type;
    function Insert(const Index: Integer): IXMLInstance_kinematics_scene_type;

    function Get_Item(Index: Integer): IXMLInstance_kinematics_scene_type;
    property Items[Index: Integer]: IXMLInstance_kinematics_scene_type read Get_Item; default;
  end;

{ IXMLCommon_sidref_or_param_type }

  IXMLCommon_sidref_or_param_type = interface(IXML)
    ['{04BDABC8-1AC5-4CF0-890E-64019E66C547}']
    { Property Accessors }
    function Get_SIDREF: UnicodeString;
    function Get_Param: IXMLCommon_param_type;
    procedure Set_SIDREF(Value: UnicodeString);
    { Methods & Properties }
    property SIDREF: UnicodeString read Get_SIDREF write Set_SIDREF;
    property Param: IXMLCommon_param_type read Get_Param;
  end;

{ IXMLBind_kinematics_model_type }

  IXMLBind_kinematics_model_type = interface(IXMLCommon_sidref_or_param_type)
    ['{19AF9625-7603-422A-9BAC-B47C7DC92615}']
    { Property Accessors }
    function Get_Node: UnicodeString;
    procedure Set_Node(Value: UnicodeString);
    { Methods & Properties }
    property Node: UnicodeString read Get_Node write Set_Node;
  end;

{ IXMLBind_kinematics_model_typeList }

  IXMLBind_kinematics_model_typeList = interface(IXMLFilter)
    ['{62082C76-30E6-4860-A78D-38EA959000FB}']
    { Methods & Properties }
    function Add: IXMLBind_kinematics_model_type;
    function Insert(const Index: Integer): IXMLBind_kinematics_model_type;

    function Get_Item(Index: Integer): IXMLBind_kinematics_model_type;
    property Items[Index: Integer]: IXMLBind_kinematics_model_type read Get_Item; default;
  end;

{ IXMLBind_joint_axis_type }

  IXMLBind_joint_axis_type = interface(IXML)
    ['{0F2FD46F-F52E-4D4C-8123-7C39B74A71AD}']
    { Property Accessors }
    function Get_Target: UnicodeString;
    function Get_Axis: IXMLCommon_sidref_or_param_type;
    function Get_Value: IXMLCommon_float_or_param_type;
    procedure Set_Target(Value: UnicodeString);
    { Methods & Properties }
    property Target: UnicodeString read Get_Target write Set_Target;
    property Axis: IXMLCommon_sidref_or_param_type read Get_Axis;
    property Value: IXMLCommon_float_or_param_type read Get_Value;
  end;

{ IXMLBind_joint_axis_typeList }

  IXMLBind_joint_axis_typeList = interface(IXMLFilter)
    ['{74208069-AEDA-40F0-8655-3F239BEC99F2}']
    { Methods & Properties }
    function Add: IXMLBind_joint_axis_type;
    function Insert(const Index: Integer): IXMLBind_joint_axis_type;

    function Get_Item(Index: Integer): IXMLBind_joint_axis_type;
    property Items[Index: Integer]: IXMLBind_joint_axis_type read Get_Item; default;
  end;

{ IXMLInput_global_type }

  IXMLInput_global_type = interface(IXML)
    ['{362238C1-C779-49AB-835C-75C37C8F2452}']
    { Property Accessors }
    function Get_Semantic: UnicodeString;
    function Get_Source: UnicodeString;
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Source(Value: UnicodeString);
    { Methods & Properties }
    property Semantic: UnicodeString read Get_Semantic write Set_Semantic;
    property Source: UnicodeString read Get_Source write Set_Source;
  end;

{ IXMLEllipsoid_type }

  IXMLEllipsoid_type = interface(IXML)
    ['{75D9FBAE-565D-4084-B2C7-AE5917C50BFB}']
    { Property Accessors }
    function Get_Size: UnicodeString;
    procedure Set_Size(Value: UnicodeString);
    { Methods & Properties }
    property Size: UnicodeString read Get_Size write Set_Size;
  end;

{ IXMLLimits_sub_type }

  IXMLLimits_sub_type = interface(IXML)
    ['{B2A60E13-04B6-4E0C-9E74-DF18F2E4BA29}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLTargetable_float4_type }

  IXMLTargetable_float4_type = interface(IXML)
    ['{2106F456-9CE8-41BD-A045-AB544B5C10F0}']
    { Property Accessors }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    { Methods & Properties }
    property Sid: UnicodeString read Get_Sid write Set_Sid;
  end;

{ IXMLList_of_uints_typeList }

  IXMLList_of_uints_typeList = interface(IXMLFilter)
    ['{B4A9F255-C214-4E94-BE57-69D471B93723}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXML;
    function Insert(const Index: Integer; const Value: UnicodeString): IXML;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ IXMLAnyURIList }

  IXMLAnyURIList = interface(IXMLFilter)
    ['{A731B061-0ED7-40C6-BAEF-2949BBDEB54F}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXML;
    function Insert(const Index: Integer; const Value: UnicodeString): IXML;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ IXMLString_List }

  IXMLString_List = interface(IXMLFilter)
    ['{D4C163D2-215B-4CDD-BB6C-3FC09451359C}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXML;
    function Insert(const Index: Integer; const Value: UnicodeString): IXML;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ IXMLNCNameList }

  IXMLNCNameList = interface(IXMLFilter)
    ['{2A0921D6-C018-4B86-A20D-A2FC3BFEF4DD}']
    { Methods & Properties }
    function Add(const Value: UnicodeString): IXML;
    function Insert(const Index: Integer; const Value: UnicodeString): IXML;

    function Get_Item(Index: Integer): UnicodeString;
    property Items[Index: Integer]: UnicodeString read Get_Item; default;
  end;

{ Forward Decls }

  TXMLCOLLADA = class;
  TXMLAsset_type = class;
  TXMLAsset_type_contributor = class;
  TXMLAsset_type_contributorList = class;
  TXMLAsset_type_coverage = class;
  TXMLAsset_type_coverage_geographic_location = class;
  TXMLAsset_type_coverage_geographic_location_altitude = class;
  TXMLAsset_type_unit = class;
  TXMLExtra_type = class;
  TXMLExtra_typeList = class;
  TXMLTechnique_type = class;
  TXMLTechnique_typeList = class;
  TXMLLibrary_animations_type = class;
  TXMLLibrary_animations_typeList = class;
  TXMLAnimation_type = class;
  TXMLAnimation_typeList = class;
  TXMLSource_type = class;
  TXMLSource_typeList = class;
  TXMLToken_array_type = class;
  TXMLIdref_array_type = class;
  TXMLName_array_type = class;
  TXMLBool_array_type = class;
  TXMLFloat_array_type = class;
  TXMLInt_array_type = class;
  TXMLSidref_array_type = class;
  TXMLSource_type_technique_common = class;
  TXMLAccessor_type = class;
  TXMLParam_type = class;
  TXMLParam_typeList = class;
  TXMLSampler_type = class;
  TXMLSampler_typeList = class;
  TXMLInput_local_type = class;
  TXMLInput_local_typeList = class;
  TXMLChannel_type = class;
  TXMLChannel_typeList = class;
  TXMLLibrary_animation_clips_type = class;
  TXMLLibrary_animation_clips_typeList = class;
  TXMLAnimation_clip_type = class;
  TXMLAnimation_clip_typeList = class;
  TXMLInstance_with_extra_type = class;
  TXMLInstance_with_extra_typeList = class;
  TXMLInstance_formula_type = class;
  TXMLInstance_formula_typeList = class;
  TXMLFormula_setparam_type = class;
  TXMLKinematics_connect_param_type = class;
  TXMLLibrary_cameras_type = class;
  TXMLLibrary_cameras_typeList = class;
  TXMLCamera_type = class;
  TXMLCamera_typeList = class;
  TXMLCamera_type_optics = class;
  TXMLCamera_type_optics_technique_common = class;
  TXMLCamera_type_optics_technique_common_orthographic = class;
  TXMLTargetable_float_type = class;
  TXMLCamera_type_optics_technique_common_perspective = class;
  TXMLCamera_type_imager = class;
  TXMLLibrary_controllers_type = class;
  TXMLLibrary_controllers_typeList = class;
  TXMLController_type = class;
  TXMLController_typeList = class;
  TXMLSkin_type = class;
  TXMLSkin_type_joints = class;
  TXMLSkin_type_vertex_weights = class;
  TXMLInput_local_offset_type = class;
  TXMLInput_local_offset_typeList = class;
  TXMLMorph_type = class;
  TXMLMorph_type_targets = class;
  TXMLLibrary_geometries_type = class;
  TXMLLibrary_geometries_typeList = class;
  TXMLGeometry_type = class;
  TXMLGeometry_typeList = class;
  TXMLConvex_mesh_type = class;
  TXMLVertices_type = class;
  TXMLLines_type = class;
  TXMLLines_typeList = class;
  TXMLP_type = class;
  TXMLP_typeList = class;
  TXMLLinestrips_type = class;
  TXMLLinestrips_typeList = class;
  TXMLPolygons_type = class;
  TXMLPolygons_typeList = class;
  TXMLPolygons_type_ph = class;
  TXMLPolygons_type_phList = class;
  TXMLPolylist_type = class;
  TXMLPolylist_typeList = class;
  TXMLTriangles_type = class;
  TXMLTriangles_typeList = class;
  TXMLTrifans_type = class;
  TXMLTrifans_typeList = class;
  TXMLTristrips_type = class;
  TXMLTristrips_typeList = class;
  TXMLMesh_type = class;
  TXMLSpline_type = class;
  TXMLSpline_type_control_vertices = class;
  TXMLBrep_type = class;
  TXMLCurves_type = class;
  TXMLCurve_type = class;
  TXMLCurve_typeList = class;
  TXMLLine_type = class;
  TXMLCircle_type = class;
  TXMLEllipse_type = class;
  TXMLParabola_type = class;
  TXMLHyperbola_type = class;
  TXMLNurbs_type = class;
  TXMLNurbs_type_control_vertices = class;
  TXMLOrient_type = class;
  TXMLOrient_typeList = class;
  TXMLOrigin_type = class;
  TXMLSurface_curves_type = class;
  TXMLSurfaces_type = class;
  TXMLSurface_type = class;
  TXMLSurface_typeList = class;
  TXMLPlane_type = class;
  TXMLSphere_type = class;
  TXMLTorus_type = class;
  TXMLSwept_surface_type = class;
  TXMLNurbs_surface_type = class;
  TXMLNurbs_surface_type_control_vertices = class;
  TXMLCone_type = class;
  TXMLSurface_type_cylinder = class;
  TXMLEdges_type = class;
  TXMLWires_type = class;
  TXMLFaces_type = class;
  TXMLPcurves_type = class;
  TXMLShells_type = class;
  TXMLSolids_type = class;
  TXMLLibrary_effects_type = class;
  TXMLLibrary_effects_typeList = class;
  TXMLEffect_type = class;
  TXMLEffect_typeList = class;
  TXMLFx_annotate_type = class;
  TXMLFx_annotate_typeList = class;
  TXMLFx_newparam_type = class;
  TXMLFx_newparam_typeList = class;
  TXMLFx_sampler_type = class;
  TXMLInstance_image_type = class;
  TXMLFx_sampler1D_type = class;
  TXMLFx_sampler2D_type = class;
  TXMLFx_sampler3D_type = class;
  TXMLFx_samplerCUBE_type = class;
  TXMLFx_samplerRECT_type = class;
  TXMLFx_samplerDEPTH_type = class;
  TXMLProfile_common_type = class;
  TXMLFx_common_newparam_type = class;
  TXMLFx_common_newparam_typeList = class;
  TXMLProfile_common_type_technique = class;
  TXMLProfile_common_type_technique_constant = class;
  TXMLFx_common_color_or_texture_type = class;
  TXMLFx_common_color_or_texture_type_color = class;
  TXMLFx_common_color_or_texture_type_param = class;
  TXMLFx_common_color_or_texture_type_texture = class;
  TXMLFx_common_float_or_param_type = class;
  TXMLFx_common_float_or_param_type_float = class;
  TXMLFx_common_float_or_param_type_param = class;
  TXMLFx_common_transparent_type = class;
  TXMLProfile_common_type_technique_lambert = class;
  TXMLProfile_common_type_technique_phong = class;
  TXMLProfile_common_type_technique_blinn = class;
  TXMLProfile_bridge_type = class;
  TXMLProfile_gles2_type = class;
  TXMLFx_include_type = class;
  TXMLFx_include_typeList = class;
  TXMLFx_code_type = class;
  TXMLFx_code_typeList = class;
  TXMLGles2_newparam_type = class;
  TXMLUsertype = class;
  TXMLUsertype_setparam = class;
  TXMLArray_ = class;
  TXMLProfile_gles2_type_newparam = class;
  TXMLProfile_gles2_type_newparamList = class;
  TXMLProfile_gles2_type_technique = class;
  TXMLProfile_gles2_type_techniqueList = class;
  TXMLGles2_pass_type = class;
  TXMLGles2_pass_typeList = class;
  TXMLGles2_pass_type_states = class;
  TXMLBlend_color = class;
  TXMLBlend_equation = class;
  TXMLBlend_equation_separate = class;
  TXMLBlend_equation_separate_rgb = class;
  TXMLBlend_equation_separate_alpha = class;
  TXMLBlend_func = class;
  TXMLBlend_func_src = class;
  TXMLBlend_func_dest = class;
  TXMLBlend_func_separate = class;
  TXMLBlend_func_separate_src_rgb = class;
  TXMLBlend_func_separate_dest_rgb = class;
  TXMLBlend_func_separate_src_alpha = class;
  TXMLBlend_func_separate_dest_alpha = class;
  TXMLColor_mask = class;
  TXMLCull_face = class;
  TXMLDepth_func = class;
  TXMLDepth_mask = class;
  TXMLDepth_range = class;
  TXMLFront_face = class;
  TXMLLine_width = class;
  TXMLPolygon_offset = class;
  TXMLPoint_size = class;
  TXMLSample_coverage = class;
  TXMLSample_coverage_value = class;
  TXMLSample_coverage_invert = class;
  TXMLScissor = class;
  TXMLStencil_func = class;
  TXMLStencil_func_func = class;
  TXMLStencil_func_ref = class;
  TXMLStencil_func_mask = class;
  TXMLStencil_func_separate = class;
  TXMLStencil_func_separate_front = class;
  TXMLStencil_func_separate_back = class;
  TXMLStencil_func_separate_ref = class;
  TXMLStencil_func_separate_mask = class;
  TXMLStencil_mask = class;
  TXMLStencil_mask_separate = class;
  TXMLStencil_mask_separate_face = class;
  TXMLStencil_mask_separate_mask = class;
  TXMLStencil_op = class;
  TXMLStencil_op_fail = class;
  TXMLStencil_op_zfail = class;
  TXMLStencil_op_zpass = class;
  TXMLStencil_op_separate = class;
  TXMLStencil_op_separate_face = class;
  TXMLStencil_op_separate_fail = class;
  TXMLStencil_op_separate_zfail = class;
  TXMLStencil_op_separate_zpass = class;
  TXMLBlend_enable = class;
  TXMLCull_face_enable = class;
  TXMLDepth_test_enable = class;
  TXMLDither_enable = class;
  TXMLPolygon_offset_fill_enable = class;
  TXMLPoint_size_enable = class;
  TXMLSample_alpha_to_coverage_enable = class;
  TXMLSample_coverage_enable = class;
  TXMLScissor_test_enable = class;
  TXMLStencil_test_enable = class;
  TXMLGles2_program_type = class;
  TXMLGles2_shader_type = class;
  TXMLGles2_shader_typeList = class;
  TXMLFx_sources_type = class;
  TXMLFx_sources_type_import = class;
  TXMLFx_sources_type_importList = class;
  TXMLGles2_shader_type_sources = class;
  TXMLFx_target_type = class;
  TXMLFx_target_typeList = class;
  TXMLFx_target_type_binary = class;
  TXMLFx_target_type_binary_hex = class;
  TXMLGles2_program_type_bind_attribute = class;
  TXMLGles2_program_type_bind_attributeList = class;
  TXMLGles2_program_type_bind_uniform = class;
  TXMLGles2_program_type_bind_uniformList = class;
  TXMLGles2_program_type_bind_uniform_param = class;
  TXMLGles2_pass_type_evaluate = class;
  TXMLFx_rendertarget_type = class;
  TXMLFx_rendertarget_type_param = class;
  TXMLFx_colortarget_type = class;
  TXMLFx_colortarget_typeList = class;
  TXMLFx_depthtarget_type = class;
  TXMLFx_depthtarget_typeList = class;
  TXMLFx_stenciltarget_type = class;
  TXMLFx_stenciltarget_typeList = class;
  TXMLFx_clearcolor_type = class;
  TXMLFx_clearcolor_typeList = class;
  TXMLFx_clearstencil_type = class;
  TXMLFx_clearstencil_typeList = class;
  TXMLFx_cleardepth_type = class;
  TXMLFx_cleardepth_typeList = class;
  TXMLProfile_glsl_type = class;
  TXMLGlsl_newparam_type = class;
  TXMLGlsl_newparam_typeList = class;
  TXMLGlsl_array_type = class;
  TXMLProfile_glsl_type_technique = class;
  TXMLProfile_glsl_type_techniqueList = class;
  TXMLProfile_glsl_type_technique_pass = class;
  TXMLProfile_glsl_type_technique_passList = class;
  TXMLProfile_glsl_type_technique_pass_states = class;
  TXMLAlpha_func = class;
  TXMLAlpha_func_func = class;
  TXMLAlpha_func_value = class;
  TXMLColor_material = class;
  TXMLColor_material_face = class;
  TXMLColor_material_mode = class;
  TXMLFog_mode = class;
  TXMLFog_coord_src = class;
  TXMLLight_model_color_control = class;
  TXMLLogic_op = class;
  TXMLPolygon_mode = class;
  TXMLPolygon_mode_face = class;
  TXMLPolygon_mode_mode = class;
  TXMLShade_model = class;
  TXMLLight_enable = class;
  TXMLLight_ambient = class;
  TXMLLight_diffuse = class;
  TXMLLight_specular = class;
  TXMLLight_position = class;
  TXMLLight_constant_attenuation = class;
  TXMLLight_linear_attenuation = class;
  TXMLLight_quadratic_attenuation = class;
  TXMLLight_spot_cutoff = class;
  TXMLLight_spot_direction = class;
  TXMLLight_spot_exponent = class;
  TXMLTexture1D = class;
  TXMLTexture2D = class;
  TXMLTexture3D = class;
  TXMLTextureCUBE = class;
  TXMLTextureRECT = class;
  TXMLTextureDEPTH = class;
  TXMLTexture1D_enable = class;
  TXMLTexture2D_enable = class;
  TXMLTexture3D_enable = class;
  TXMLTextureCUBE_enable = class;
  TXMLTextureRECT_enable = class;
  TXMLTextureDEPTH_enable = class;
  TXMLTexture_env_color = class;
  TXMLTexture_env_mode = class;
  TXMLClip_plane = class;
  TXMLClip_plane_enable = class;
  TXMLDepth_bounds = class;
  TXMLFog_density = class;
  TXMLFog_start = class;
  TXMLFog_end = class;
  TXMLFog_color = class;
  TXMLLight_model_ambient = class;
  TXMLLighting_enable = class;
  TXMLLine_stipple = class;
  TXMLMaterial_ambient = class;
  TXMLMaterial_diffuse = class;
  TXMLMaterial_emission = class;
  TXMLMaterial_shininess = class;
  TXMLMaterial_specular = class;
  TXMLModel_view_matrix = class;
  TXMLPoint_distance_attenuation = class;
  TXMLPoint_fade_threshold_size = class;
  TXMLPoint_size_min = class;
  TXMLPoint_size_max = class;
  TXMLProjection_matrix = class;
  TXMLAlpha_test_enable = class;
  TXMLColor_logic_op_enable = class;
  TXMLColor_material_enable = class;
  TXMLDepth_bounds_enable = class;
  TXMLDepth_clamp_enable = class;
  TXMLFog_enable = class;
  TXMLLight_model_local_viewer_enable = class;
  TXMLLight_model_two_side_enable = class;
  TXMLLine_smooth_enable = class;
  TXMLLine_stipple_enable = class;
  TXMLLogic_op_enable = class;
  TXMLMultisample_enable = class;
  TXMLNormalize_enable = class;
  TXMLPoint_smooth_enable = class;
  TXMLPolygon_offset_line_enable = class;
  TXMLPolygon_offset_point_enable = class;
  TXMLPolygon_smooth_enable = class;
  TXMLPolygon_stipple_enable = class;
  TXMLRescale_normal_enable = class;
  TXMLSample_alpha_to_one_enable = class;
  TXMLGlsl_program_type = class;
  TXMLGlsl_shader_type = class;
  TXMLGlsl_shader_typeList = class;
  TXMLGlsl_program_type_bind_attribute = class;
  TXMLGlsl_program_type_bind_attributeList = class;
  TXMLGlsl_program_type_bind_uniform = class;
  TXMLGlsl_program_type_bind_uniformList = class;
  TXMLGlsl_program_type_bind_uniform_param = class;
  TXMLProfile_glsl_type_technique_pass_evaluate = class;
  TXMLProfile_cg_type = class;
  TXMLCg_newparam_type = class;
  TXMLCg_newparam_typeList = class;
  TXMLCg_array_type = class;
  TXMLCg_user_type = class;
  TXMLCg_setparam_type = class;
  TXMLProfile_cg_type_technique = class;
  TXMLProfile_cg_type_techniqueList = class;
  TXMLCg_pass_type = class;
  TXMLCg_pass_typeList = class;
  TXMLCg_pass_type_states = class;
  TXMLCg_pass_type_program = class;
  TXMLCg_pass_type_program_shader = class;
  TXMLCg_pass_type_program_shader_sources = class;
  TXMLCg_pass_type_program_shader_bind_uniform = class;
  TXMLCg_pass_type_program_shader_bind_uniformList = class;
  TXMLCg_pass_type_program_shader_bind_uniform_param = class;
  TXMLCg_pass_type_evaluate = class;
  TXMLProfile_gles_type = class;
  TXMLGles_newparam_type = class;
  TXMLGles_newparam_typeList = class;
  TXMLGles_sampler_type = class;
  TXMLGles_sampler_type_texcoord = class;
  TXMLProfile_gles_type_technique = class;
  TXMLProfile_gles_type_techniqueList = class;
  TXMLProfile_gles_type_technique_pass = class;
  TXMLProfile_gles_type_technique_passList = class;
  TXMLProfile_gles_type_technique_pass_states = class;
  TXMLTexture_pipeline = class;
  TXMLGles_texture_pipeline_type = class;
  TXMLGles_texcombiner_command_type = class;
  TXMLGles_texcombiner_command_typeList = class;
  TXMLGles_texture_constant_type = class;
  TXMLGles_texcombiner_command_rgb_type = class;
  TXMLGles_texcombiner_argument_rgb_type = class;
  TXMLGles_texcombiner_command_alpha_type = class;
  TXMLGles_texcombiner_argument_alpha_type = class;
  TXMLGles_texenv_command_type = class;
  TXMLGles_texenv_command_typeList = class;
  TXMLProfile_gles_type_technique_pass_evaluate = class;
  TXMLLibrary_force_fields_type = class;
  TXMLLibrary_force_fields_typeList = class;
  TXMLForce_field_type = class;
  TXMLForce_field_typeList = class;
  TXMLLibrary_images_type = class;
  TXMLLibrary_images_typeList = class;
  TXMLImage_type = class;
  TXMLImage_typeList = class;
  TXMLImage_type_renderable = class;
  TXMLImage_source_type = class;
  TXMLImage_source_type_hex = class;
  TXMLImage_type_init_from = class;
  TXMLImage_type_create_2d = class;
  TXMLImage_type_create_2d_size_exact = class;
  TXMLImage_type_create_2d_size_ratio = class;
  TXMLImage_mips_type = class;
  TXMLImage_type_create_2d_array = class;
  TXMLImage_type_create_2d_format = class;
  TXMLImage_type_create_2d_format_hint = class;
  TXMLImage_type_create_2d_init_from = class;
  TXMLImage_type_create_2d_init_fromList = class;
  TXMLImage_type_create_3d = class;
  TXMLImage_type_create_3d_size = class;
  TXMLImage_type_create_3d_array = class;
  TXMLImage_type_create_3d_format = class;
  TXMLImage_type_create_3d_format_hint = class;
  TXMLImage_type_create_3d_init_from = class;
  TXMLImage_type_create_3d_init_fromList = class;
  TXMLImage_type_create_cube = class;
  TXMLImage_type_create_cube_size = class;
  TXMLImage_type_create_cube_array = class;
  TXMLImage_type_create_cube_format = class;
  TXMLImage_type_create_cube_format_hint = class;
  TXMLImage_type_create_cube_init_from = class;
  TXMLImage_type_create_cube_init_fromList = class;
  TXMLLibrary_lights_type = class;
  TXMLLibrary_lights_typeList = class;
  TXMLLight_type = class;
  TXMLLight_typeList = class;
  TXMLLight_type_technique_common = class;
  TXMLLight_type_technique_common_ambient = class;
  TXMLTargetable_float3_type = class;
  TXMLLight_type_technique_common_directional = class;
  TXMLLight_type_technique_common_point = class;
  TXMLLight_type_technique_common_spot = class;
  TXMLLibrary_materials_type = class;
  TXMLLibrary_materials_typeList = class;
  TXMLMaterial_type = class;
  TXMLMaterial_typeList = class;
  TXMLInstance_effect_type = class;
  TXMLInstance_effect_type_technique_hint = class;
  TXMLInstance_effect_type_technique_hintList = class;
  TXMLInstance_effect_type_setparam = class;
  TXMLInstance_effect_type_setparamList = class;
  TXMLSampler_states = class;
  TXMLLibrary_nodes_type = class;
  TXMLLibrary_nodes_typeList = class;
  TXMLNode_type = class;
  TXMLNode_typeList = class;
  TXMLLookat_type = class;
  TXMLLookat_typeList = class;
  TXMLMatrix_type = class;
  TXMLMatrix_typeList = class;
  TXMLRotate_type = class;
  TXMLRotate_typeList = class;
  TXMLScale_type = class;
  TXMLScale_typeList = class;
  TXMLSkew_type = class;
  TXMLSkew_typeList = class;
  TXMLTranslate_type = class;
  TXMLTranslate_typeList = class;
  TXMLInstance_camera_type = class;
  TXMLInstance_camera_typeList = class;
  TXMLInstance_controller_type = class;
  TXMLInstance_controller_typeList = class;
  TXMLBind_material_type = class;
  TXMLBind_material_type_technique_common = class;
  TXMLInstance_material_type = class;
  TXMLInstance_material_type_bind = class;
  TXMLInstance_material_type_bindList = class;
  TXMLInstance_material_type_bind_vertex_input = class;
  TXMLInstance_material_type_bind_vertex_inputList = class;
  TXMLInstance_geometry_type = class;
  TXMLInstance_geometry_typeList = class;
  TXMLInstance_light_type = class;
  TXMLInstance_light_typeList = class;
  TXMLInstance_node_type = class;
  TXMLInstance_node_typeList = class;
  TXMLLibrary_physics_materials_type = class;
  TXMLLibrary_physics_materials_typeList = class;
  TXMLPhysics_material_type = class;
  TXMLPhysics_material_typeList = class;
  TXMLPhysics_material_type_technique_common = class;
  TXMLLibrary_physics_models_type = class;
  TXMLLibrary_physics_models_typeList = class;
  TXMLPhysics_model_type = class;
  TXMLPhysics_model_typeList = class;
  TXMLRigid_body_type = class;
  TXMLRigid_body_typeList = class;
  TXMLRigid_body_type_technique_common = class;
  TXMLRigid_body_type_technique_common_dynamic = class;
  TXMLRigid_body_type_technique_common_mass_frame = class;
  TXMLInstance_physics_material_type = class;
  TXMLRigid_body_type_technique_common_shape = class;
  TXMLRigid_body_type_technique_common_shapeList = class;
  TXMLRigid_body_type_technique_common_shape_hollow = class;
  TXMLBox_type = class;
  TXMLCylinder_type = class;
  TXMLCapsule_type = class;
  TXMLRigid_constraint_type = class;
  TXMLRigid_constraint_typeList = class;
  TXMLRigid_constraint_type_ref_attachment = class;
  TXMLRigid_constraint_type_attachment = class;
  TXMLRigid_constraint_type_technique_common = class;
  TXMLRigid_constraint_type_technique_common_enabled = class;
  TXMLRigid_constraint_type_technique_common_interpenetrate = class;
  TXMLRigid_constraint_type_technique_common_limits = class;
  TXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist = class;
  TXMLRigid_constraint_type_technique_common_limits_linear = class;
  TXMLRigid_constraint_type_technique_common_spring = class;
  TXMLRigid_constraint_type_technique_common_spring_angular = class;
  TXMLRigid_constraint_type_technique_common_spring_linear = class;
  TXMLInstance_physics_model_type = class;
  TXMLInstance_physics_model_typeList = class;
  TXMLInstance_force_field_type = class;
  TXMLInstance_force_field_typeList = class;
  TXMLInstance_rigid_body_type = class;
  TXMLInstance_rigid_body_typeList = class;
  TXMLInstance_rigid_body_type_technique_common = class;
  TXMLInstance_rigid_body_type_technique_common_dynamic = class;
  TXMLInstance_rigid_body_type_technique_common_mass_frame = class;
  TXMLInstance_rigid_body_type_technique_common_shape = class;
  TXMLInstance_rigid_body_type_technique_common_shapeList = class;
  TXMLInstance_rigid_body_type_technique_common_shape_hollow = class;
  TXMLInstance_rigid_constraint_type = class;
  TXMLInstance_rigid_constraint_typeList = class;
  TXMLLibrary_physics_scenes_type = class;
  TXMLLibrary_physics_scenes_typeList = class;
  TXMLPhysics_scene_type = class;
  TXMLPhysics_scene_typeList = class;
  TXMLPhysics_scene_type_technique_common = class;
  TXMLLibrary_visual_scenes_type = class;
  TXMLLibrary_visual_scenes_typeList = class;
  TXMLVisual_scene_type = class;
  TXMLVisual_scene_typeList = class;
  TXMLVisual_scene_type_evaluate_scene = class;
  TXMLVisual_scene_type_evaluate_sceneList = class;
  TXMLVisual_scene_type_evaluate_scene_render = class;
  TXMLVisual_scene_type_evaluate_scene_renderList = class;
  TXMLVisual_scene_type_evaluate_scene_render_instance_material = class;
  TXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override = class;
  TXMLVisual_scene_type_evaluate_scene_render_instance_material_bind = class;
  TXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList = class;
  TXMLLibrary_joints_type = class;
  TXMLLibrary_joints_typeList = class;
  TXMLJoint_type = class;
  TXMLJoint_typeList = class;
  TXMLAxis_constraint_type = class;
  TXMLAxis_constraint_typeList = class;
  TXMLAxis_type = class;
  TXMLJoint_limits_type = class;
  TXMLMinmax_type = class;
  TXMLLibrary_kinematics_models_type = class;
  TXMLLibrary_kinematics_models_typeList = class;
  TXMLKinematics_model_type = class;
  TXMLKinematics_model_typeList = class;
  TXMLKinematics_model_technique_type = class;
  TXMLKinematics_newparam_type = class;
  TXMLKinematics_newparam_typeList = class;
  TXMLInstance_joint_type = class;
  TXMLInstance_joint_typeList = class;
  TXMLLink_type = class;
  TXMLLink_typeList = class;
  TXMLLink_type_attachment_full = class;
  TXMLLink_type_attachment_fullList = class;
  TXMLLink_type_attachment_start = class;
  TXMLLink_type_attachment_startList = class;
  TXMLLink_type_attachment_end = class;
  TXMLLink_type_attachment_endList = class;
  TXMLFormula_type = class;
  TXMLFormula_typeList = class;
  TXMLFormula_newparam_type = class;
  TXMLFormula_newparam_typeList = class;
  TXMLCommon_float_or_param_type = class;
  TXMLCommon_param_type = class;
  TXMLFormula_technique_type = class;
  TXMLMathtype = class;
  TXMLMitype = class;
  TXMLMalignmarktype = class;
  TXMLMglyphtype = class;
  TXMLMotype = class;
  TXMLMntype = class;
  TXMLMtexttype = class;
  TXMLMstype = class;
  TXMLMrowtype = class;
  TXMLMfractype = class;
  TXMLMsqrttype = class;
  TXMLMroottype = class;
  TXMLMpaddedtype = class;
  TXMLMphantomtype = class;
  TXMLMfencedtype = class;
  TXMLMenclosetype = class;
  TXMLMsubtype = class;
  TXMLMsuptype = class;
  TXMLMsubsuptype = class;
  TXMLMundertype = class;
  TXMLMovertype = class;
  TXMLMunderovertype = class;
  TXMLMmultiscriptstype = class;
  TXMLMtabletype = class;
  TXMLMtrtype = class;
  TXMLMtdtype = class;
  TXMLMaligngrouptype = class;
  TXMLMspacetype = class;
  TXMLMactiontype = class;
  TXMLMerrortype = class;
  TXMLMstyletype = class;
  TXMLCntype = class;
  TXMLCitype = class;
  TXMLCsymboltype = class;
  TXMLArithtype = class;
  TXMLFunctionstype = class;
  TXMLDomainofapplicationtype = class;
  TXMLElementaryfunctionstype = class;
  TXMLLogictype = class;
  TXMLConstanttype = class;
  TXMLSettype = class;
  TXMLListtype = class;
  TXMLUniontype = class;
  TXMLIntersecttype = class;
  TXMLIntype = class;
  TXMLNotintype = class;
  TXMLSubsettype = class;
  TXMLPrsubsettype = class;
  TXMLNotsubsettype = class;
  TXMLNotprsubsettype = class;
  TXMLSetdifftype = class;
  TXMLCardtype = class;
  TXMLCartesianproducttype = class;
  TXMLRelationstype = class;
  TXMLLogbasetype = class;
  TXMLInttype = class;
  TXMLDifftype = class;
  TXMLPartialdifftype = class;
  TXMLLimittype = class;
  TXMLLowlimittype = class;
  TXMLUplimittype = class;
  TXMLTendstotype = class;
  TXMLVectortype = class;
  TXMLMatrixtype = class;
  TXMLMatrixrowtype = class;
  TXMLDeterminanttype = class;
  TXMLTransposetype = class;
  TXMLSelectortype = class;
  TXMLVectorproducttype = class;
  TXMLScalarproducttype = class;
  TXMLOuterproducttype = class;
  TXMLDivergencetype = class;
  TXMLGradtype = class;
  TXMLCurltype = class;
  TXMLLaplaciantype = class;
  TXMLMeantype = class;
  TXMLSdevtype = class;
  TXMLVariancetype = class;
  TXMLMediantype = class;
  TXMLModetype = class;
  TXMLMomenttype = class;
  TXMLMomentabouttype = class;
  TXMLApplytype = class;
  TXMLIntervaltype = class;
  TXMLInversetype = class;
  TXMLConditiontype = class;
  TXMLDeclaretype = class;
  TXMLLambdatype = class;
  TXMLPiecewisetype = class;
  TXMLPiecetype = class;
  TXMLPiecetypeList = class;
  TXMLBvartype = class;
  TXMLDegreetype = class;
  TXMLSemanticstype = class;
  TXMLAnnotationtype = class;
  TXMLAnnotationxmltype = class;
  TXMLOtherwisetype = class;
  TXMLSeptype = class;
  TXMLMlabeledtrtype = class;
  TXMLNonetype = class;
  TXMLMprescriptstype = class;
  TXMLLibrary_articulated_systems_type = class;
  TXMLLibrary_articulated_systems_typeList = class;
  TXMLArticulated_system_type = class;
  TXMLArticulated_system_typeList = class;
  TXMLKinematics_type = class;
  TXMLInstance_kinematics_model_type = class;
  TXMLInstance_kinematics_model_typeList = class;
  TXMLKinematics_bind_type = class;
  TXMLKinematics_bind_typeList = class;
  TXMLKinematics_param_type = class;
  TXMLKinematics_setparam_type = class;
  TXMLKinematics_setparam_typeList = class;
  TXMLKinematics_technique_type = class;
  TXMLKinematics_axis_info_type = class;
  TXMLKinematics_axis_info_typeList = class;
  TXMLCommon_bool_or_param_type = class;
  TXMLCommon_int_or_param_type = class;
  TXMLKinematics_index_type = class;
  TXMLKinematics_index_typeList = class;
  TXMLKinematics_limits_type = class;
  TXMLKinematics_frame_type = class;
  TXMLMotion_type = class;
  TXMLInstance_articulated_system_type = class;
  TXMLInstance_articulated_system_typeList = class;
  TXMLMotion_technique_type = class;
  TXMLMotion_axis_info_type = class;
  TXMLMotion_axis_info_typeList = class;
  TXMLMotion_effector_info_type = class;
  TXMLCommon_float2_or_param_type = class;
  TXMLLibrary_kinematics_scenes_type = class;
  TXMLLibrary_kinematics_scenes_typeList = class;
  TXMLKinematics_scene_type = class;
  TXMLKinematics_scene_typeList = class;
  TXMLLibrary_formulas_type = class;
  TXMLLibrary_formulas_typeList = class;
  TXMLCOLLADA_scene = class;
  TXMLInstance_kinematics_scene_type = class;
  TXMLInstance_kinematics_scene_typeList = class;
  TXMLCommon_sidref_or_param_type = class;
  TXMLBind_kinematics_model_type = class;
  TXMLBind_kinematics_model_typeList = class;
  TXMLBind_joint_axis_type = class;
  TXMLBind_joint_axis_typeList = class;
  TXMLInput_global_type = class;
  TXMLEllipsoid_type = class;
  TXMLLimits_sub_type = class;
  TXMLTargetable_float4_type = class;
  TXMLList_of_uints_typeList = class;
  TXMLAnyURIList = class;
  TXMLString_List = class;
  TXMLNCNameList = class;

  { TXMLCOLLADA }

  TXMLCOLLADA = class(TXML, IXMLCOLLADA)
  private
    FLibrary_animations: IXMLLibrary_animations_typeList;
    FLibrary_animation_clips: IXMLLibrary_animation_clips_typeList;
    FLibrary_cameras: IXMLLibrary_cameras_typeList;
    FLibrary_controllers: IXMLLibrary_controllers_typeList;
    FLibrary_geometries: IXMLLibrary_geometries_typeList;
    FLibrary_effects: IXMLLibrary_effects_typeList;
    FLibrary_force_fields: IXMLLibrary_force_fields_typeList;
    FLibrary_images: IXMLLibrary_images_typeList;
    FLibrary_lights: IXMLLibrary_lights_typeList;
    FLibrary_materials: IXMLLibrary_materials_typeList;
    FLibrary_nodes: IXMLLibrary_nodes_typeList;
    FLibrary_physics_materials: IXMLLibrary_physics_materials_typeList;
    FLibrary_physics_models: IXMLLibrary_physics_models_typeList;
    FLibrary_physics_scenes: IXMLLibrary_physics_scenes_typeList;
    FLibrary_visual_scenes: IXMLLibrary_visual_scenes_typeList;
    FLibrary_joints: IXMLLibrary_joints_typeList;
    FLibrary_kinematics_models: IXMLLibrary_kinematics_models_typeList;
    FLibrary_articulated_systems: IXMLLibrary_articulated_systems_typeList;
    FLibrary_kinematics_scenes: IXMLLibrary_kinematics_scenes_typeList;
    FLibrary_formulas: IXMLLibrary_formulas_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLCOLLADA }
    function Get_Version: UnicodeString;
    function Get_Base: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Library_animations: IXMLLibrary_animations_typeList;
    function Get_Library_animation_clips: IXMLLibrary_animation_clips_typeList;
    function Get_Library_cameras: IXMLLibrary_cameras_typeList;
    function Get_Library_controllers: IXMLLibrary_controllers_typeList;
    function Get_Library_geometries: IXMLLibrary_geometries_typeList;
    function Get_Library_effects: IXMLLibrary_effects_typeList;
    function Get_Library_force_fields: IXMLLibrary_force_fields_typeList;
    function Get_Library_images: IXMLLibrary_images_typeList;
    function Get_Library_lights: IXMLLibrary_lights_typeList;
    function Get_Library_materials: IXMLLibrary_materials_typeList;
    function Get_Library_nodes: IXMLLibrary_nodes_typeList;
    function Get_Library_physics_materials: IXMLLibrary_physics_materials_typeList;
    function Get_Library_physics_models: IXMLLibrary_physics_models_typeList;
    function Get_Library_physics_scenes: IXMLLibrary_physics_scenes_typeList;
    function Get_Library_visual_scenes: IXMLLibrary_visual_scenes_typeList;
    function Get_Library_joints: IXMLLibrary_joints_typeList;
    function Get_Library_kinematics_models: IXMLLibrary_kinematics_models_typeList;
    function Get_Library_articulated_systems: IXMLLibrary_articulated_systems_typeList;
    function Get_Library_kinematics_scenes: IXMLLibrary_kinematics_scenes_typeList;
    function Get_Library_formulas: IXMLLibrary_formulas_typeList;
    function Get_Scene: IXMLCOLLADA_scene;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Version(Value: UnicodeString);
    procedure Set_Base(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLAsset_type }

  TXMLAsset_type = class(TXML, IXMLAsset_type)
  private
    FContributor: IXMLAsset_type_contributorList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLAsset_type }
    function Get_Contributor: IXMLAsset_type_contributorList;
    function Get_Coverage: IXMLAsset_type_coverage;
    function Get_Created: UnicodeString;
    function Get_Keywords: UnicodeString;
    function Get_Modified: UnicodeString;
    function Get_Revision: UnicodeString;
    function Get_Subject: UnicodeString;
    function Get_Title: UnicodeString;
    function Get_Unit_: IXMLAsset_type_unit;
    function Get_Up_axis: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Created(Value: UnicodeString);
    procedure Set_Keywords(Value: UnicodeString);
    procedure Set_Modified(Value: UnicodeString);
    procedure Set_Revision(Value: UnicodeString);
    procedure Set_Subject(Value: UnicodeString);
    procedure Set_Title(Value: UnicodeString);
    procedure Set_Up_axis(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLAsset_type_contributor }

  TXMLAsset_type_contributor = class(TXML, IXMLAsset_type_contributor)
  protected
    { IXMLAsset_type_contributor }
    function Get_Author: UnicodeString;
    function Get_Author_email: UnicodeString;
    function Get_Author_website: UnicodeString;
    function Get_Authoring_tool: UnicodeString;
    function Get_Comments: UnicodeString;
    function Get_Copyright: UnicodeString;
    function Get_Source_data: UnicodeString;
    procedure Set_Author(Value: UnicodeString);
    procedure Set_Author_email(Value: UnicodeString);
    procedure Set_Author_website(Value: UnicodeString);
    procedure Set_Authoring_tool(Value: UnicodeString);
    procedure Set_Comments(Value: UnicodeString);
    procedure Set_Copyright(Value: UnicodeString);
    procedure Set_Source_data(Value: UnicodeString);
  end;

{ TXMLAsset_type_contributorList }

  TXMLAsset_type_contributorList = class(TXMLFilter, IXMLAsset_type_contributorList)
  protected
    { IXMLAsset_type_contributorList }
    function Add: IXMLAsset_type_contributor;
    function Insert(const Index: Integer): IXMLAsset_type_contributor;

    function Get_Item(Index: Integer): IXMLAsset_type_contributor;
  end;

{ TXMLAsset_type_coverage }

  TXMLAsset_type_coverage = class(TXML, IXMLAsset_type_coverage)
  protected
    { IXMLAsset_type_coverage }
    function Get_Geographic_location: IXMLAsset_type_coverage_geographic_location;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLAsset_type_coverage_geographic_location }

  TXMLAsset_type_coverage_geographic_location = class(TXML, IXMLAsset_type_coverage_geographic_location)
  protected
    { IXMLAsset_type_coverage_geographic_location }
    function Get_Longitude: Single;
    function Get_Latitude: Single;
    function Get_Altitude: IXMLAsset_type_coverage_geographic_location_altitude;
    procedure Set_Longitude(Value: Single);
    procedure Set_Latitude(Value: Single);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLAsset_type_coverage_geographic_location_altitude }

  TXMLAsset_type_coverage_geographic_location_altitude = class(TXML, IXMLAsset_type_coverage_geographic_location_altitude)
  protected
    { IXMLAsset_type_coverage_geographic_location_altitude }
    function Get_Mode: UnicodeString;
    procedure Set_Mode(Value: UnicodeString);
  end;

{ TXMLAsset_type_unit }

  TXMLAsset_type_unit = class(TXML, IXMLAsset_type_unit)
  protected
    { IXMLAsset_type_unit }
    function Get_Meter: Double;
    function Get_Name: UnicodeString;
    procedure Set_Meter(Value: Double);
    procedure Set_Name(Value: UnicodeString);
  end;

{ TXMLExtra_type }

  TXMLExtra_type = class(TXML, IXMLExtra_type)
  private
    FTechnique: IXMLTechnique_typeList;
  protected
    { IXMLExtra_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Type_: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Technique: IXMLTechnique_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Type_(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLExtra_typeList }

  TXMLExtra_typeList = class(TXMLFilter, IXMLExtra_typeList)
  protected
    { IXMLExtra_typeList }
    function Add: IXMLExtra_type;
    function Insert(const Index: Integer): IXMLExtra_type;

    function Get_Item(Index: Integer): IXMLExtra_type;
  end;

{ TXMLTechnique_type }

  TXMLTechnique_type = class(TXML, IXMLTechnique_type)
  protected
    { IXMLTechnique_type }
    function Get_Profile: UnicodeString;
    procedure Set_Profile(Value: UnicodeString);
  end;

{ TXMLTechnique_typeList }

  TXMLTechnique_typeList = class(TXMLFilter, IXMLTechnique_typeList)
  protected
    { IXMLTechnique_typeList }
    function Add: IXMLTechnique_type;
    function Insert(const Index: Integer): IXMLTechnique_type;

    function Get_Item(Index: Integer): IXMLTechnique_type;
  end;

{ TXMLLibrary_animations_type }

  TXMLLibrary_animations_type = class(TXML, IXMLLibrary_animations_type)
  private
    FAnimation: IXMLAnimation_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_animations_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Animation: IXMLAnimation_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_animations_typeList }

  TXMLLibrary_animations_typeList = class(TXMLFilter, IXMLLibrary_animations_typeList)
  protected
    { IXMLLibrary_animations_typeList }
    function Add: IXMLLibrary_animations_type;
    function Insert(const Index: Integer): IXMLLibrary_animations_type;

    function Get_Item(Index: Integer): IXMLLibrary_animations_type;
  end;

{ TXMLAnimation_type }

  TXMLAnimation_type = class(TXML, IXMLAnimation_type)
  private
    FSource: IXMLSource_typeList;
    FSampler: IXMLSampler_typeList;
    FChannel: IXMLChannel_typeList;
    FAnimation: IXMLAnimation_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLAnimation_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Source: IXMLSource_typeList;
    function Get_Sampler: IXMLSampler_typeList;
    function Get_Channel: IXMLChannel_typeList;
    function Get_Animation: IXMLAnimation_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLAnimation_typeList }

  TXMLAnimation_typeList = class(TXMLFilter, IXMLAnimation_typeList)
  protected
    { IXMLAnimation_typeList }
    function Add: IXMLAnimation_type;
    function Insert(const Index: Integer): IXMLAnimation_type;

    function Get_Item(Index: Integer): IXMLAnimation_type;
  end;

{ TXMLSource_type }

  TXMLSource_type = class(TXML, IXMLSource_type)
  private
    FTechnique: IXMLTechnique_typeList;
  protected
    { IXMLSource_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Token_array: IXMLToken_array_type;
    function Get_IDREF_array: IXMLIdref_array_type;
    function Get_Name_array: IXMLName_array_type;
    function Get_Bool_array: IXMLBool_array_type;
    function Get_Float_array: IXMLFloat_array_type;
    function Get_Int_array: IXMLInt_array_type;
    function Get_SIDREF_array: IXMLSidref_array_type;
    function Get_Technique_common: IXMLSource_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSource_typeList }

  TXMLSource_typeList = class(TXMLFilter, IXMLSource_typeList)
  protected
    { IXMLSource_typeList }
    function Add: IXMLSource_type;
    function Insert(const Index: Integer): IXMLSource_type;

    function Get_Item(Index: Integer): IXMLSource_type;
  end;

{ TXMLToken_array_type }

  TXMLToken_array_type = class(TXML, IXMLToken_array_type)
  protected
    { IXMLToken_array_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
  end;

{ TXMLIdref_array_type }

  TXMLIdref_array_type = class(TXML, IXMLIdref_array_type)
  protected
    { IXMLIdref_array_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
  end;

{ TXMLName_array_type }

  TXMLName_array_type = class(TXML, IXMLName_array_type)
  protected
    { IXMLName_array_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
  end;

{ TXMLBool_array_type }

  TXMLBool_array_type = class(TXML, IXMLBool_array_type)
  protected
    { IXMLBool_array_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
  end;

{ TXMLFloat_array_type }

  TXMLFloat_array_type = class(TXML, IXMLFloat_array_type)
  protected
    { IXMLFloat_array_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Digits: Byte;
    function Get_Magnitude: SmallInt;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Digits(Value: Byte);
    procedure Set_Magnitude(Value: SmallInt);
  end;

{ TXMLInt_array_type }

  TXMLInt_array_type = class(TXML, IXMLInt_array_type)
  protected
    { IXMLInt_array_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_MinInclusive: Integer;
    function Get_MaxInclusive: Integer;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_MinInclusive(Value: Integer);
    procedure Set_MaxInclusive(Value: Integer);
  end;

{ TXMLSidref_array_type }

  TXMLSidref_array_type = class(TXML, IXMLSidref_array_type)
  protected
    { IXMLSidref_array_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
  end;

{ TXMLSource_type_technique_common }

  TXMLSource_type_technique_common = class(TXML, IXMLSource_type_technique_common)
  protected
    { IXMLSource_type_technique_common }
    function Get_Accessor: IXMLAccessor_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLAccessor_type }

  TXMLAccessor_type = class(TXMLFilter, IXMLAccessor_type)
  protected
    { IXMLAccessor_type }
    function Get_Count: Int64;
    function Get_Offset: Int64;
    function Get_Source: UnicodeString;
    function Get_Stride: Int64;
    function Get_Param(Index: Integer): IXMLParam_type;
    procedure Set_Count(Value: Int64);
    procedure Set_Offset(Value: Int64);
    procedure Set_Source(Value: UnicodeString);
    procedure Set_Stride(Value: Int64);
    function Add: IXMLParam_type;
    function Insert(const Index: Integer): IXMLParam_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLParam_type }

  TXMLParam_type = class(TXML, IXMLParam_type)
  protected
    { IXMLParam_type }
    function Get_Name: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Semantic: UnicodeString;
    function Get_Type_: UnicodeString;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Type_(Value: UnicodeString);
  end;

{ TXMLParam_typeList }

  TXMLParam_typeList = class(TXMLFilter, IXMLParam_typeList)
  protected
    { IXMLParam_typeList }
    function Add: IXMLParam_type;
    function Insert(const Index: Integer): IXMLParam_type;

    function Get_Item(Index: Integer): IXMLParam_type;
  end;

{ TXMLSampler_type }

  TXMLSampler_type = class(TXMLFilter, IXMLSampler_type)
  protected
    { IXMLSampler_type }
    function Get_Id: UnicodeString;
    function Get_Pre_behavior: UnicodeString;
    function Get_Post_behavior: UnicodeString;
    function Get_Input(Index: Integer): IXMLInput_local_type;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Pre_behavior(Value: UnicodeString);
    procedure Set_Post_behavior(Value: UnicodeString);
    function Add: IXMLInput_local_type;
    function Insert(const Index: Integer): IXMLInput_local_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSampler_typeList }

  TXMLSampler_typeList = class(TXMLFilter, IXMLSampler_typeList)
  protected
    { IXMLSampler_typeList }
    function Add: IXMLSampler_type;
    function Insert(const Index: Integer): IXMLSampler_type;

    function Get_Item(Index: Integer): IXMLSampler_type;
  end;

{ TXMLInput_local_type }

  TXMLInput_local_type = class(TXML, IXMLInput_local_type)
  protected
    { IXMLInput_local_type }
    function Get_Semantic: UnicodeString;
    function Get_Source: UnicodeString;
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Source(Value: UnicodeString);
  end;

{ TXMLInput_local_typeList }

  TXMLInput_local_typeList = class(TXMLFilter, IXMLInput_local_typeList)
  protected
    { IXMLInput_local_typeList }
    function Add: IXMLInput_local_type;
    function Insert(const Index: Integer): IXMLInput_local_type;

    function Get_Item(Index: Integer): IXMLInput_local_type;
  end;

{ TXMLChannel_type }

  TXMLChannel_type = class(TXML, IXMLChannel_type)
  protected
    { IXMLChannel_type }
    function Get_Source: UnicodeString;
    function Get_Target: UnicodeString;
    procedure Set_Source(Value: UnicodeString);
    procedure Set_Target(Value: UnicodeString);
  end;

{ TXMLChannel_typeList }

  TXMLChannel_typeList = class(TXMLFilter, IXMLChannel_typeList)
  protected
    { IXMLChannel_typeList }
    function Add: IXMLChannel_type;
    function Insert(const Index: Integer): IXMLChannel_type;

    function Get_Item(Index: Integer): IXMLChannel_type;
  end;

{ TXMLLibrary_animation_clips_type }

  TXMLLibrary_animation_clips_type = class(TXML, IXMLLibrary_animation_clips_type)
  private
    FAnimation_clip: IXMLAnimation_clip_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_animation_clips_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Animation_clip: IXMLAnimation_clip_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_animation_clips_typeList }

  TXMLLibrary_animation_clips_typeList = class(TXMLFilter, IXMLLibrary_animation_clips_typeList)
  protected
    { IXMLLibrary_animation_clips_typeList }
    function Add: IXMLLibrary_animation_clips_type;
    function Insert(const Index: Integer): IXMLLibrary_animation_clips_type;

    function Get_Item(Index: Integer): IXMLLibrary_animation_clips_type;
  end;

{ TXMLAnimation_clip_type }

  TXMLAnimation_clip_type = class(TXML, IXMLAnimation_clip_type)
  private
    FInstance_animation: IXMLInstance_with_extra_typeList;
    FInstance_formula: IXMLInstance_formula_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLAnimation_clip_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Start: Double;
    function Get_End_: Double;
    function Get_Asset: IXMLAsset_type;
    function Get_Instance_animation: IXMLInstance_with_extra_typeList;
    function Get_Instance_formula: IXMLInstance_formula_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Start(Value: Double);
    procedure Set_End_(Value: Double);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLAnimation_clip_typeList }

  TXMLAnimation_clip_typeList = class(TXMLFilter, IXMLAnimation_clip_typeList)
  protected
    { IXMLAnimation_clip_typeList }
    function Add: IXMLAnimation_clip_type;
    function Insert(const Index: Integer): IXMLAnimation_clip_type;

    function Get_Item(Index: Integer): IXMLAnimation_clip_type;
  end;

{ TXMLInstance_with_extra_type }

  TXMLInstance_with_extra_type = class(TXMLFilter, IXMLInstance_with_extra_type)
  protected
    { IXMLInstance_with_extra_type }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Extra(Index: Integer): IXMLExtra_type;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    function Add: IXMLExtra_type;
    function Insert(const Index: Integer): IXMLExtra_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_with_extra_typeList }

  TXMLInstance_with_extra_typeList = class(TXMLFilter, IXMLInstance_with_extra_typeList)
  protected
    { IXMLInstance_with_extra_typeList }
    function Add: IXMLInstance_with_extra_type;
    function Insert(const Index: Integer): IXMLInstance_with_extra_type;

    function Get_Item(Index: Integer): IXMLInstance_with_extra_type;
  end;

{ TXMLInstance_formula_type }

  TXMLInstance_formula_type = class(TXMLFilter, IXMLInstance_formula_type)
  protected
    { IXMLInstance_formula_type }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Url: UnicodeString;
    function Get_Setparam(Index: Integer): IXMLFormula_setparam_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Url(Value: UnicodeString);
    function Add: IXMLFormula_setparam_type;
    function Insert(const Index: Integer): IXMLFormula_setparam_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_formula_typeList }

  TXMLInstance_formula_typeList = class(TXMLFilter, IXMLInstance_formula_typeList)
  protected
    { IXMLInstance_formula_typeList }
    function Add: IXMLInstance_formula_type;
    function Insert(const Index: Integer): IXMLInstance_formula_type;

    function Get_Item(Index: Integer): IXMLInstance_formula_type;
  end;

{ TXMLFormula_setparam_type }

  TXMLFormula_setparam_type = class(TXML, IXMLFormula_setparam_type)
  protected
    { IXMLFormula_setparam_type }
    function Get_Ref: UnicodeString;
    function Get_Float: Double;
    function Get_Int: Int64;
    function Get_SIDREF: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Connect_param: IXMLKinematics_connect_param_type;
    procedure Set_Ref(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Int(Value: Int64);
    procedure Set_SIDREF(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLKinematics_connect_param_type }

  TXMLKinematics_connect_param_type = class(TXML, IXMLKinematics_connect_param_type)
  protected
    { IXMLKinematics_connect_param_type }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
  end;

{ TXMLLibrary_cameras_type }

  TXMLLibrary_cameras_type = class(TXML, IXMLLibrary_cameras_type)
  private
    FCamera: IXMLCamera_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_cameras_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Camera: IXMLCamera_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_cameras_typeList }

  TXMLLibrary_cameras_typeList = class(TXMLFilter, IXMLLibrary_cameras_typeList)
  protected
    { IXMLLibrary_cameras_typeList }
    function Add: IXMLLibrary_cameras_type;
    function Insert(const Index: Integer): IXMLLibrary_cameras_type;

    function Get_Item(Index: Integer): IXMLLibrary_cameras_type;
  end;

{ TXMLCamera_type }

  TXMLCamera_type = class(TXML, IXMLCamera_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLCamera_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Optics: IXMLCamera_type_optics;
    function Get_Imager: IXMLCamera_type_imager;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCamera_typeList }

  TXMLCamera_typeList = class(TXMLFilter, IXMLCamera_typeList)
  protected
    { IXMLCamera_typeList }
    function Add: IXMLCamera_type;
    function Insert(const Index: Integer): IXMLCamera_type;

    function Get_Item(Index: Integer): IXMLCamera_type;
  end;

{ TXMLCamera_type_optics }

  TXMLCamera_type_optics = class(TXML, IXMLCamera_type_optics)
  private
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLCamera_type_optics }
    function Get_Technique_common: IXMLCamera_type_optics_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCamera_type_optics_technique_common }

  TXMLCamera_type_optics_technique_common = class(TXML, IXMLCamera_type_optics_technique_common)
  protected
    { IXMLCamera_type_optics_technique_common }
    function Get_Orthographic: IXMLCamera_type_optics_technique_common_orthographic;
    function Get_Perspective: IXMLCamera_type_optics_technique_common_perspective;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCamera_type_optics_technique_common_orthographic }

  TXMLCamera_type_optics_technique_common_orthographic = class(TXML, IXMLCamera_type_optics_technique_common_orthographic)
  protected
    { IXMLCamera_type_optics_technique_common_orthographic }
    function Get_Xmag: IXMLTargetable_float_type;
    function Get_Ymag: IXMLTargetable_float_type;
    function Get_Aspect_ratio: IXMLTargetable_float_type;
    function Get_Znear: IXMLTargetable_float_type;
    function Get_Zfar: IXMLTargetable_float_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTargetable_float_type }

  TXMLTargetable_float_type = class(TXML, IXMLTargetable_float_type)
  protected
    { IXMLTargetable_float_type }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLCamera_type_optics_technique_common_perspective }

  TXMLCamera_type_optics_technique_common_perspective = class(TXML, IXMLCamera_type_optics_technique_common_perspective)
  protected
    { IXMLCamera_type_optics_technique_common_perspective }
    function Get_Xfov: IXMLTargetable_float_type;
    function Get_Yfov: IXMLTargetable_float_type;
    function Get_Aspect_ratio: IXMLTargetable_float_type;
    function Get_Znear: IXMLTargetable_float_type;
    function Get_Zfar: IXMLTargetable_float_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCamera_type_imager }

  TXMLCamera_type_imager = class(TXML, IXMLCamera_type_imager)
  private
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLCamera_type_imager }
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_controllers_type }

  TXMLLibrary_controllers_type = class(TXML, IXMLLibrary_controllers_type)
  private
    FController: IXMLController_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_controllers_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Controller: IXMLController_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_controllers_typeList }

  TXMLLibrary_controllers_typeList = class(TXMLFilter, IXMLLibrary_controllers_typeList)
  protected
    { IXMLLibrary_controllers_typeList }
    function Add: IXMLLibrary_controllers_type;
    function Insert(const Index: Integer): IXMLLibrary_controllers_type;

    function Get_Item(Index: Integer): IXMLLibrary_controllers_type;
  end;

{ TXMLController_type }

  TXMLController_type = class(TXML, IXMLController_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLController_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Skin: IXMLSkin_type;
    function Get_Morph: IXMLMorph_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLController_typeList }

  TXMLController_typeList = class(TXMLFilter, IXMLController_typeList)
  protected
    { IXMLController_typeList }
    function Add: IXMLController_type;
    function Insert(const Index: Integer): IXMLController_type;

    function Get_Item(Index: Integer): IXMLController_type;
  end;

{ TXMLSkin_type }

  TXMLSkin_type = class(TXML, IXMLSkin_type)
  private
    FSourceList: IXMLSource_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLSkin_type }
    function Get_Source: UnicodeString;
    function Get_Bind_shape_matrix: UnicodeString;
    function Get_SourceList: IXMLSource_typeList;
    function Get_Joints: IXMLSkin_type_joints;
    function Get_Vertex_weights: IXMLSkin_type_vertex_weights;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Source(Value: UnicodeString);
    procedure Set_Bind_shape_matrix(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSkin_type_joints }

  TXMLSkin_type_joints = class(TXML, IXMLSkin_type_joints)
  private
    FInput: IXMLInput_local_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLSkin_type_joints }
    function Get_Input: IXMLInput_local_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSkin_type_vertex_weights }

  TXMLSkin_type_vertex_weights = class(TXML, IXMLSkin_type_vertex_weights)
  private
    FInput: IXMLInput_local_offset_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLSkin_type_vertex_weights }
    function Get_Count: Int64;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_V: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Count(Value: Int64);
    procedure Set_Vcount(Value: UnicodeString);
    procedure Set_V(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInput_local_offset_type }

  TXMLInput_local_offset_type = class(TXML, IXMLInput_local_offset_type)
  protected
    { IXMLInput_local_offset_type }
    function Get_Offset: Int64;
    function Get_Semantic: UnicodeString;
    function Get_Source: UnicodeString;
    function Get_Set_: Int64;
    procedure Set_Offset(Value: Int64);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Source(Value: UnicodeString);
    procedure Set_Set_(Value: Int64);
  end;

{ TXMLInput_local_offset_typeList }

  TXMLInput_local_offset_typeList = class(TXMLFilter, IXMLInput_local_offset_typeList)
  protected
    { IXMLInput_local_offset_typeList }
    function Add: IXMLInput_local_offset_type;
    function Insert(const Index: Integer): IXMLInput_local_offset_type;

    function Get_Item(Index: Integer): IXMLInput_local_offset_type;
  end;

{ TXMLMorph_type }

  TXMLMorph_type = class(TXML, IXMLMorph_type)
  private
    FSourceList: IXMLSource_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLMorph_type }
    function Get_Method: UnicodeString;
    function Get_Source: UnicodeString;
    function Get_SourceList: IXMLSource_typeList;
    function Get_Targets: IXMLMorph_type_targets;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Method(Value: UnicodeString);
    procedure Set_Source(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMorph_type_targets }

  TXMLMorph_type_targets = class(TXML, IXMLMorph_type_targets)
  private
    FInput: IXMLInput_local_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLMorph_type_targets }
    function Get_Input: IXMLInput_local_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_geometries_type }

  TXMLLibrary_geometries_type = class(TXML, IXMLLibrary_geometries_type)
  private
    FGeometry: IXMLGeometry_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_geometries_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Geometry: IXMLGeometry_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
    destructor Destroy; override;
  end;

{ TXMLLibrary_geometries_typeList }

  TXMLLibrary_geometries_typeList = class(TXMLFilter, IXMLLibrary_geometries_typeList)
  protected
    { IXMLLibrary_geometries_typeList }
    function Add: IXMLLibrary_geometries_type;
    function Insert(const Index: Integer): IXMLLibrary_geometries_type;

    function Get_Item(Index: Integer): IXMLLibrary_geometries_type;
  end;

{ TXMLGeometry_type }

  TXMLGeometry_type = class(TXML, IXMLGeometry_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLGeometry_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Convex_mesh: IXMLConvex_mesh_type;
    function Get_Mesh: IXMLMesh_type;
    function Get_Spline: IXMLSpline_type;
    function Get_Brep: IXMLBrep_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
    destructor Destroy; override;
  end;

{ TXMLGeometry_typeList }

  TXMLGeometry_typeList = class(TXMLFilter, IXMLGeometry_typeList)
  protected
    { IXMLGeometry_typeList }
    function Add: IXMLGeometry_type;
    function Insert(const Index: Integer): IXMLGeometry_type;

    function Get_Item(Index: Integer): IXMLGeometry_type;
  end;

{ TXMLConvex_mesh_type }

  TXMLConvex_mesh_type = class(TXML, IXMLConvex_mesh_type)
  private
    FSource: IXMLSource_typeList;
    FLines: IXMLLines_typeList;
    FLinestrips: IXMLLinestrips_typeList;
    FPolygons: IXMLPolygons_typeList;
    FPolylist: IXMLPolylist_typeList;
    FTriangles: IXMLTriangles_typeList;
    FTrifans: IXMLTrifans_typeList;
    FTristrips: IXMLTristrips_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLConvex_mesh_type }
    function Get_Convex_hull_of: UnicodeString;
    function Get_Source: IXMLSource_typeList;
    function Get_Vertices: IXMLVertices_type;
    function Get_Lines: IXMLLines_typeList;
    function Get_Linestrips: IXMLLinestrips_typeList;
    function Get_Polygons: IXMLPolygons_typeList;
    function Get_Polylist: IXMLPolylist_typeList;
    function Get_Triangles: IXMLTriangles_typeList;
    function Get_Trifans: IXMLTrifans_typeList;
    function Get_Tristrips: IXMLTristrips_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Convex_hull_of(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLVertices_type }

  TXMLVertices_type = class(TXML, IXMLVertices_type)
  private
    FInput: IXMLInput_local_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLVertices_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Input: IXMLInput_local_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLines_type }

  TXMLLines_type = class(TXML, IXMLLines_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLines_type }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLines_typeList }

  TXMLLines_typeList = class(TXMLFilter, IXMLLines_typeList)
  protected
    { IXMLLines_typeList }
    function Add: IXMLLines_type;
    function Insert(const Index: Integer): IXMLLines_type;

    function Get_Item(Index: Integer): IXMLLines_type;
  end;

{ TXMLP_type }

  TXMLP_type = class(TXML, IXMLP_type)
  protected
    { IXMLP_type }
  end;

{ TXMLP_typeList }

  TXMLP_typeList = class(TXMLFilter, IXMLP_typeList)
  protected
    { IXMLP_typeList }
    function Add: IXMLP_type;
    function Insert(const Index: Integer): IXMLP_type;

    function Get_Item(Index: Integer): IXMLP_type;
  end;

{ TXMLLinestrips_type }

  TXMLLinestrips_type = class(TXML, IXMLLinestrips_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FP: IXMLP_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLinestrips_type }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLinestrips_typeList }

  TXMLLinestrips_typeList = class(TXMLFilter, IXMLLinestrips_typeList)
  protected
    { IXMLLinestrips_typeList }
    function Add: IXMLLinestrips_type;
    function Insert(const Index: Integer): IXMLLinestrips_type;

    function Get_Item(Index: Integer): IXMLLinestrips_type;
  end;

{ TXMLPolygons_type }

  TXMLPolygons_type = class(TXML, IXMLPolygons_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FP: IXMLP_typeList;
    FPh: IXMLPolygons_type_phList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLPolygons_type }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_typeList;
    function Get_Ph: IXMLPolygons_type_phList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLPolygons_typeList }

  TXMLPolygons_typeList = class(TXMLFilter, IXMLPolygons_typeList)
  protected
    { IXMLPolygons_typeList }
    function Add: IXMLPolygons_type;
    function Insert(const Index: Integer): IXMLPolygons_type;

    function Get_Item(Index: Integer): IXMLPolygons_type;
  end;

{ TXMLPolygons_type_ph }

  TXMLPolygons_type_ph = class(TXML, IXMLPolygons_type_ph)
  private
    FH: IXMLList_of_uints_typeList;
  protected
    { IXMLPolygons_type_ph }
    function Get_P: IXMLP_type;
    function Get_H: IXMLList_of_uints_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLPolygons_type_phList }

  TXMLPolygons_type_phList = class(TXMLFilter, IXMLPolygons_type_phList)
  protected
    { IXMLPolygons_type_phList }
    function Add: IXMLPolygons_type_ph;
    function Insert(const Index: Integer): IXMLPolygons_type_ph;

    function Get_Item(Index: Integer): IXMLPolygons_type_ph;
  end;

{ TXMLPolylist_type }

  TXMLPolylist_type = class(TXML, IXMLPolylist_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLPolylist_type }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
    procedure Set_Vcount(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLPolylist_typeList }

  TXMLPolylist_typeList = class(TXMLFilter, IXMLPolylist_typeList)
  protected
    { IXMLPolylist_typeList }
    function Add: IXMLPolylist_type;
    function Insert(const Index: Integer): IXMLPolylist_type;

    function Get_Item(Index: Integer): IXMLPolylist_type;
  end;

{ TXMLTriangles_type }

  TXMLTriangles_type = class(TXML, IXMLTriangles_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLTriangles_type }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTriangles_typeList }

  TXMLTriangles_typeList = class(TXMLFilter, IXMLTriangles_typeList)
  protected
    { IXMLTriangles_typeList }
    function Add: IXMLTriangles_type;
    function Insert(const Index: Integer): IXMLTriangles_type;

    function Get_Item(Index: Integer): IXMLTriangles_type;
  end;

{ TXMLTrifans_type }

  TXMLTrifans_type = class(TXML, IXMLTrifans_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FP: IXMLP_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLTrifans_type }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTrifans_typeList }

  TXMLTrifans_typeList = class(TXMLFilter, IXMLTrifans_typeList)
  protected
    { IXMLTrifans_typeList }
    function Add: IXMLTrifans_type;
    function Insert(const Index: Integer): IXMLTrifans_type;

    function Get_Item(Index: Integer): IXMLTrifans_type;
  end;

{ TXMLTristrips_type }

  TXMLTristrips_type = class(TXML, IXMLTristrips_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FP: IXMLP_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLTristrips_type }
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Material: UnicodeString;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Material(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTristrips_typeList }

  TXMLTristrips_typeList = class(TXMLFilter, IXMLTristrips_typeList)
  protected
    { IXMLTristrips_typeList }
    function Add: IXMLTristrips_type;
    function Insert(const Index: Integer): IXMLTristrips_type;

    function Get_Item(Index: Integer): IXMLTristrips_type;
  end;

{ TXMLMesh_type }

  TXMLMesh_type = class(TXML, IXMLMesh_type)
  private
    FSource: IXMLSource_typeList;
    FLines: IXMLLines_typeList;
    FLinestrips: IXMLLinestrips_typeList;
    FPolygons: IXMLPolygons_typeList;
    FPolylist: IXMLPolylist_typeList;
    FTriangles: IXMLTriangles_typeList;
    FTrifans: IXMLTrifans_typeList;
    FTristrips: IXMLTristrips_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLMesh_type }
    function Get_Source: IXMLSource_typeList;
    function Get_Vertices: IXMLVertices_type;
    function Get_Lines: IXMLLines_typeList;
    function Get_Linestrips: IXMLLinestrips_typeList;
    function Get_Polygons: IXMLPolygons_typeList;
    function Get_Polylist: IXMLPolylist_typeList;
    function Get_Triangles: IXMLTriangles_typeList;
    function Get_Trifans: IXMLTrifans_typeList;
    function Get_Tristrips: IXMLTristrips_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSpline_type }

  TXMLSpline_type = class(TXML, IXMLSpline_type)
  private
    FSource: IXMLSource_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLSpline_type }
    function Get_Closed: Boolean;
    function Get_Source: IXMLSource_typeList;
    function Get_Control_vertices: IXMLSpline_type_control_vertices;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Closed(Value: Boolean);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSpline_type_control_vertices }

  TXMLSpline_type_control_vertices = class(TXML, IXMLSpline_type_control_vertices)
  private
    FInput: IXMLInput_local_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLSpline_type_control_vertices }
    function Get_Input: IXMLInput_local_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLBrep_type }

  TXMLBrep_type = class(TXML, IXMLBrep_type)
  private
    FSource: IXMLSource_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLBrep_type }
    function Get_Curves: IXMLCurves_type;
    function Get_Surface_curves: IXMLSurface_curves_type;
    function Get_Surfaces: IXMLSurfaces_type;
    function Get_Source: IXMLSource_typeList;
    function Get_Vertices: IXMLVertices_type;
    function Get_Edges: IXMLEdges_type;
    function Get_Wires: IXMLWires_type;
    function Get_Faces: IXMLFaces_type;
    function Get_Pcurves: IXMLPcurves_type;
    function Get_Shells: IXMLShells_type;
    function Get_Solids: IXMLSolids_type;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCurves_type }

  TXMLCurves_type = class(TXML, IXMLCurves_type)
  private
    FCurve: IXMLCurve_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLCurves_type }
    function Get_Curve: IXMLCurve_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCurve_type }

  TXMLCurve_type = class(TXML, IXMLCurve_type)
  private
    FOrient: IXMLOrient_typeList;
  protected
    { IXMLCurve_type }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Line: IXMLLine_type;
    function Get_Circle: IXMLCircle_type;
    function Get_Ellipse: IXMLEllipse_type;
    function Get_Parabola: IXMLParabola_type;
    function Get_Hyperbola: IXMLHyperbola_type;
    function Get_Nurbs: IXMLNurbs_type;
    function Get_Orient: IXMLOrient_typeList;
    function Get_Origin: IXMLOrigin_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCurve_typeList }

  TXMLCurve_typeList = class(TXMLFilter, IXMLCurve_typeList)
  protected
    { IXMLCurve_typeList }
    function Add: IXMLCurve_type;
    function Insert(const Index: Integer): IXMLCurve_type;

    function Get_Item(Index: Integer): IXMLCurve_type;
  end;

{ TXMLLine_type }

  TXMLLine_type = class(TXML, IXMLLine_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLine_type }
    function Get_Origin: UnicodeString;
    function Get_Direction: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Origin(Value: UnicodeString);
    procedure Set_Direction(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCircle_type }

  TXMLCircle_type = class(TXML, IXMLCircle_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLCircle_type }
    function Get_Radius: Double;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: Double);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLEllipse_type }

  TXMLEllipse_type = class(TXML, IXMLEllipse_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLEllipse_type }
    function Get_Radius: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLParabola_type }

  TXMLParabola_type = class(TXML, IXMLParabola_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLParabola_type }
    function Get_Focal: Double;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Focal(Value: Double);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLHyperbola_type }

  TXMLHyperbola_type = class(TXML, IXMLHyperbola_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLHyperbola_type }
    function Get_Radius: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLNurbs_type }

  TXMLNurbs_type = class(TXML, IXMLNurbs_type)
  private
    FSource: IXMLSource_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLNurbs_type }
    function Get_Degree: Int64;
    function Get_Closed: Boolean;
    function Get_Source: IXMLSource_typeList;
    function Get_Control_vertices: IXMLNurbs_type_control_vertices;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Degree(Value: Int64);
    procedure Set_Closed(Value: Boolean);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLNurbs_type_control_vertices }

  TXMLNurbs_type_control_vertices = class(TXML, IXMLNurbs_type_control_vertices)
  private
    FInput: IXMLInput_local_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLNurbs_type_control_vertices }
    function Get_Input: IXMLInput_local_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLOrient_type }

  TXMLOrient_type = class(TXML, IXMLOrient_type)
  protected
    { IXMLOrient_type }
  end;

{ TXMLOrient_typeList }

  TXMLOrient_typeList = class(TXMLFilter, IXMLOrient_typeList)
  protected
    { IXMLOrient_typeList }
    function Add: IXMLOrient_type;
    function Insert(const Index: Integer): IXMLOrient_type;

    function Get_Item(Index: Integer): IXMLOrient_type;
  end;

{ TXMLOrigin_type }

  TXMLOrigin_type = class(TXML, IXMLOrigin_type)
  protected
    { IXMLOrigin_type }
  end;

{ TXMLSurface_curves_type }

  TXMLSurface_curves_type = class(TXML, IXMLSurface_curves_type)
  private
    FCurve: IXMLCurve_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLSurface_curves_type }
    function Get_Curve: IXMLCurve_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSurfaces_type }

  TXMLSurfaces_type = class(TXML, IXMLSurfaces_type)
  private
    FSurface: IXMLSurface_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLSurfaces_type }
    function Get_Surface: IXMLSurface_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSurface_type }

  TXMLSurface_type = class(TXML, IXMLSurface_type)
  private
    FOrient: IXMLOrient_typeList;
  protected
    { IXMLSurface_type }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Plane: IXMLPlane_type;
    function Get_Sphere: IXMLSphere_type;
    function Get_Torus: IXMLTorus_type;
    function Get_Swept_surface: IXMLSwept_surface_type;
    function Get_Nurbs_surface: IXMLNurbs_surface_type;
    function Get_Cone: IXMLCone_type;
    function Get_Cylinder: IXMLSurface_type_cylinder;
    function Get_Orient: IXMLOrient_typeList;
    function Get_Origin: IXMLOrigin_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSurface_typeList }

  TXMLSurface_typeList = class(TXMLFilter, IXMLSurface_typeList)
  protected
    { IXMLSurface_typeList }
    function Add: IXMLSurface_type;
    function Insert(const Index: Integer): IXMLSurface_type;

    function Get_Item(Index: Integer): IXMLSurface_type;
  end;

{ TXMLPlane_type }

  TXMLPlane_type = class(TXML, IXMLPlane_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLPlane_type }
    function Get_Equation: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Equation(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSphere_type }

  TXMLSphere_type = class(TXML, IXMLSphere_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLSphere_type }
    function Get_Radius: Double;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: Double);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTorus_type }

  TXMLTorus_type = class(TXML, IXMLTorus_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLTorus_type }
    function Get_Radius: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSwept_surface_type }

  TXMLSwept_surface_type = class(TXML, IXMLSwept_surface_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLSwept_surface_type }
    function Get_Curve: IXMLCurve_type;
    function Get_Direction: UnicodeString;
    function Get_Origin: UnicodeString;
    function Get_Axis: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Direction(Value: UnicodeString);
    procedure Set_Origin(Value: UnicodeString);
    procedure Set_Axis(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLNurbs_surface_type }

  TXMLNurbs_surface_type = class(TXML, IXMLNurbs_surface_type)
  private
    FSource: IXMLSource_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLNurbs_surface_type }
    function Get_Degree_u: Int64;
    function Get_Closed_u: Boolean;
    function Get_Degree_v: Int64;
    function Get_Closed_v: Boolean;
    function Get_Source: IXMLSource_typeList;
    function Get_Control_vertices: IXMLNurbs_surface_type_control_vertices;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Degree_u(Value: Int64);
    procedure Set_Closed_u(Value: Boolean);
    procedure Set_Degree_v(Value: Int64);
    procedure Set_Closed_v(Value: Boolean);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLNurbs_surface_type_control_vertices }

  TXMLNurbs_surface_type_control_vertices = class(TXML, IXMLNurbs_surface_type_control_vertices)
  private
    FInput: IXMLInput_local_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLNurbs_surface_type_control_vertices }
    function Get_Input: IXMLInput_local_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCone_type }

  TXMLCone_type = class(TXML, IXMLCone_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLCone_type }
    function Get_Radius: Double;
    function Get_Angle: Single;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: Double);
    procedure Set_Angle(Value: Single);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSurface_type_cylinder }

  TXMLSurface_type_cylinder = class(TXML, IXMLSurface_type_cylinder)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLSurface_type_cylinder }
    function Get_Radius: Double;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Radius(Value: Double);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLEdges_type }

  TXMLEdges_type = class(TXML, IXMLEdges_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLEdges_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Integer;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Integer);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLWires_type }

  TXMLWires_type = class(TXML, IXMLWires_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLWires_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Vcount(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFaces_type }

  TXMLFaces_type = class(TXML, IXMLFaces_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLFaces_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Vcount(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLPcurves_type }

  TXMLPcurves_type = class(TXML, IXMLPcurves_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLPcurves_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Vcount(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLShells_type }

  TXMLShells_type = class(TXML, IXMLShells_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLShells_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Vcount(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSolids_type }

  TXMLSolids_type = class(TXML, IXMLSolids_type)
  private
    FInput: IXMLInput_local_offset_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLSolids_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Count: Int64;
    function Get_Input: IXMLInput_local_offset_typeList;
    function Get_Vcount: UnicodeString;
    function Get_P: IXMLP_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Count(Value: Int64);
    procedure Set_Vcount(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_effects_type }

  TXMLLibrary_effects_type = class(TXML, IXMLLibrary_effects_type)
  private
    FEffect: IXMLEffect_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_effects_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Effect: IXMLEffect_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_effects_typeList }

  TXMLLibrary_effects_typeList = class(TXMLFilter, IXMLLibrary_effects_typeList)
  protected
    { IXMLLibrary_effects_typeList }
    function Add: IXMLLibrary_effects_type;
    function Insert(const Index: Integer): IXMLLibrary_effects_type;

    function Get_Item(Index: Integer): IXMLLibrary_effects_type;
  end;

{ TXMLEffect_type }

  TXMLEffect_type = class(TXML, IXMLEffect_type)
  private
    FAnnotate: IXMLFx_annotate_typeList;
    FNewparam: IXMLFx_newparam_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLEffect_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Newparam: IXMLFx_newparam_typeList;
    function Get_Profile_COMMON: IXMLProfile_common_type;
    function Get_Profile_BRIDGE: IXMLProfile_bridge_type;
    function Get_Profile_GLES2: IXMLProfile_gles2_type;
    function Get_Profile_GLSL: IXMLProfile_glsl_type;
    function Get_Profile_CG: IXMLProfile_cg_type;
    function Get_Profile_GLES: IXMLProfile_gles_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLEffect_typeList }

  TXMLEffect_typeList = class(TXMLFilter, IXMLEffect_typeList)
  protected
    { IXMLEffect_typeList }
    function Add: IXMLEffect_type;
    function Insert(const Index: Integer): IXMLEffect_type;

    function Get_Item(Index: Integer): IXMLEffect_type;
  end;

{ TXMLFx_annotate_type }

  TXMLFx_annotate_type = class(TXML, IXMLFx_annotate_type)
  protected
    { IXMLFx_annotate_type }
    function Get_Name: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_String_: UnicodeString;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_String_(Value: UnicodeString);
  end;

{ TXMLFx_annotate_typeList }

  TXMLFx_annotate_typeList = class(TXMLFilter, IXMLFx_annotate_typeList)
  protected
    { IXMLFx_annotate_typeList }
    function Add: IXMLFx_annotate_type;
    function Insert(const Index: Integer): IXMLFx_annotate_type;

    function Get_Item(Index: Integer): IXMLFx_annotate_type;
  end;

{ TXMLFx_newparam_type }

  TXMLFx_newparam_type = class(TXML, IXMLFx_newparam_type)
  private
    FAnnotate: IXMLFx_annotate_typeList;
  protected
    { IXMLFx_newparam_type }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Semantic: UnicodeString;
    function Get_Modifier: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Enum: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Modifier(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_newparam_typeList }

  TXMLFx_newparam_typeList = class(TXMLFilter, IXMLFx_newparam_typeList)
  protected
    { IXMLFx_newparam_typeList }
    function Add: IXMLFx_newparam_type;
    function Insert(const Index: Integer): IXMLFx_newparam_type;

    function Get_Item(Index: Integer): IXMLFx_newparam_type;
  end;

{ TXMLFx_sampler_type }

  TXMLFx_sampler_type = class(TXML, IXMLFx_sampler_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLFx_sampler_type }
    function Get_Instance_image: IXMLInstance_image_type;
    function Get_Wrap_s: UnicodeString;
    function Get_Wrap_t: UnicodeString;
    function Get_Wrap_p: UnicodeString;
    function Get_Minfilter: UnicodeString;
    function Get_Magfilter: UnicodeString;
    function Get_Mipfilter: UnicodeString;
    function Get_Border_color: UnicodeString;
    function Get_Mip_max_level: Byte;
    function Get_Mip_min_level: Byte;
    function Get_Mip_bias: Single;
    function Get_Max_anisotropy: LongWord;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Wrap_s(Value: UnicodeString);
    procedure Set_Wrap_t(Value: UnicodeString);
    procedure Set_Wrap_p(Value: UnicodeString);
    procedure Set_Minfilter(Value: UnicodeString);
    procedure Set_Magfilter(Value: UnicodeString);
    procedure Set_Mipfilter(Value: UnicodeString);
    procedure Set_Border_color(Value: UnicodeString);
    procedure Set_Mip_max_level(Value: Byte);
    procedure Set_Mip_min_level(Value: Byte);
    procedure Set_Mip_bias(Value: Single);
    procedure Set_Max_anisotropy(Value: LongWord);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_image_type }

  TXMLInstance_image_type = class(TXMLInstance_with_extra_type, IXMLInstance_image_type)
  protected
    { IXMLInstance_image_type }
  end;

{ TXMLFx_sampler1D_type }

  TXMLFx_sampler1D_type = class(TXMLFx_sampler_type, IXMLFx_sampler1D_type)
  protected
    { IXMLFx_sampler1D_type }
  end;

{ TXMLFx_sampler2D_type }

  TXMLFx_sampler2D_type = class(TXMLFx_sampler_type, IXMLFx_sampler2D_type)
  protected
    { IXMLFx_sampler2D_type }
  end;

{ TXMLFx_sampler3D_type }

  TXMLFx_sampler3D_type = class(TXMLFx_sampler_type, IXMLFx_sampler3D_type)
  protected
    { IXMLFx_sampler3D_type }
  end;

{ TXMLFx_samplerCUBE_type }

  TXMLFx_samplerCUBE_type = class(TXMLFx_sampler_type, IXMLFx_samplerCUBE_type)
  protected
    { IXMLFx_samplerCUBE_type }
  end;

{ TXMLFx_samplerRECT_type }

  TXMLFx_samplerRECT_type = class(TXMLFx_sampler_type, IXMLFx_samplerRECT_type)
  protected
    { IXMLFx_samplerRECT_type }
  end;

{ TXMLFx_samplerDEPTH_type }

  TXMLFx_samplerDEPTH_type = class(TXMLFx_sampler_type, IXMLFx_samplerDEPTH_type)
  protected
    { IXMLFx_samplerDEPTH_type }
  end;

{ TXMLProfile_common_type }

  TXMLProfile_common_type = class(TXML, IXMLProfile_common_type)
  private
    FNewparam: IXMLFx_common_newparam_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_common_type }
    function Get_Id: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Newparam: IXMLFx_common_newparam_typeList;
    function Get_Technique: IXMLProfile_common_type_technique;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_common_newparam_type }

  TXMLFx_common_newparam_type = class(TXML, IXMLFx_common_newparam_type)
  protected
    { IXMLFx_common_newparam_type }
    function Get_Sid: UnicodeString;
    function Get_Semantic: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_common_newparam_typeList }

  TXMLFx_common_newparam_typeList = class(TXMLFilter, IXMLFx_common_newparam_typeList)
  protected
    { IXMLFx_common_newparam_typeList }
    function Add: IXMLFx_common_newparam_type;
    function Insert(const Index: Integer): IXMLFx_common_newparam_type;

    function Get_Item(Index: Integer): IXMLFx_common_newparam_type;
  end;

{ TXMLProfile_common_type_technique }

  TXMLProfile_common_type_technique = class(TXML, IXMLProfile_common_type_technique)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_common_type_technique }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Constant: IXMLProfile_common_type_technique_constant;
    function Get_Lambert: IXMLProfile_common_type_technique_lambert;
    function Get_Phong: IXMLProfile_common_type_technique_phong;
    function Get_Blinn: IXMLProfile_common_type_technique_blinn;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_common_type_technique_constant }

  TXMLProfile_common_type_technique_constant = class(TXML, IXMLProfile_common_type_technique_constant)
  protected
    { IXMLProfile_common_type_technique_constant }
    function Get_Emission: IXMLFx_common_color_or_texture_type;
    function Get_Reflective: IXMLFx_common_color_or_texture_type;
    function Get_Reflectivity: IXMLFx_common_float_or_param_type;
    function Get_Transparent: IXMLFx_common_transparent_type;
    function Get_Transparency: IXMLFx_common_float_or_param_type;
    function Get_Index_of_refraction: IXMLFx_common_float_or_param_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_common_color_or_texture_type }

  TXMLFx_common_color_or_texture_type = class(TXML, IXMLFx_common_color_or_texture_type)
  protected
    { IXMLFx_common_color_or_texture_type }
    function Get_Color: IXMLFx_common_color_or_texture_type_color;
    function Get_Param: IXMLFx_common_color_or_texture_type_param;
    function Get_Texture: IXMLFx_common_color_or_texture_type_texture;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_common_color_or_texture_type_color }

  TXMLFx_common_color_or_texture_type_color = class(TXML, IXMLFx_common_color_or_texture_type_color)
  protected
    { IXMLFx_common_color_or_texture_type_color }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLFx_common_color_or_texture_type_param }

  TXMLFx_common_color_or_texture_type_param = class(TXML, IXMLFx_common_color_or_texture_type_param)
  protected
    { IXMLFx_common_color_or_texture_type_param }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
  end;

{ TXMLFx_common_color_or_texture_type_texture }

  TXMLFx_common_color_or_texture_type_texture = class(TXMLFilter, IXMLFx_common_color_or_texture_type_texture)
  protected
    { IXMLFx_common_color_or_texture_type_texture }
    function Get_Texture: UnicodeString;
    function Get_Texcoord: UnicodeString;
    function Get_Extra(Index: Integer): IXMLExtra_type;
    procedure Set_Texture(Value: UnicodeString);
    procedure Set_Texcoord(Value: UnicodeString);
    function Add: IXMLExtra_type;
    function Insert(const Index: Integer): IXMLExtra_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_common_float_or_param_type }

  TXMLFx_common_float_or_param_type = class(TXML, IXMLFx_common_float_or_param_type)
  protected
    { IXMLFx_common_float_or_param_type }
    function Get_Float: IXMLFx_common_float_or_param_type_float;
    function Get_Param: IXMLFx_common_float_or_param_type_param;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_common_float_or_param_type_float }

  TXMLFx_common_float_or_param_type_float = class(TXML, IXMLFx_common_float_or_param_type_float)
  protected
    { IXMLFx_common_float_or_param_type_float }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLFx_common_float_or_param_type_param }

  TXMLFx_common_float_or_param_type_param = class(TXML, IXMLFx_common_float_or_param_type_param)
  protected
    { IXMLFx_common_float_or_param_type_param }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
  end;

{ TXMLFx_common_transparent_type }

  TXMLFx_common_transparent_type = class(TXMLFx_common_color_or_texture_type, IXMLFx_common_transparent_type)
  protected
    { IXMLFx_common_transparent_type }
    function Get_Opaque: UnicodeString;
    procedure Set_Opaque(Value: UnicodeString);
  end;

{ TXMLProfile_common_type_technique_lambert }

  TXMLProfile_common_type_technique_lambert = class(TXML, IXMLProfile_common_type_technique_lambert)
  protected
    { IXMLProfile_common_type_technique_lambert }
    function Get_Emission: IXMLFx_common_color_or_texture_type;
    function Get_Ambient: IXMLFx_common_color_or_texture_type;
    function Get_Diffuse: IXMLFx_common_color_or_texture_type;
    function Get_Reflective: IXMLFx_common_color_or_texture_type;
    function Get_Reflectivity: IXMLFx_common_float_or_param_type;
    function Get_Transparent: IXMLFx_common_transparent_type;
    function Get_Transparency: IXMLFx_common_float_or_param_type;
    function Get_Index_of_refraction: IXMLFx_common_float_or_param_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_common_type_technique_phong }

  TXMLProfile_common_type_technique_phong = class(TXML, IXMLProfile_common_type_technique_phong)
  protected
    { IXMLProfile_common_type_technique_phong }
    function Get_Emission: IXMLFx_common_color_or_texture_type;
    function Get_Ambient: IXMLFx_common_color_or_texture_type;
    function Get_Diffuse: IXMLFx_common_color_or_texture_type;
    function Get_Specular: IXMLFx_common_color_or_texture_type;
    function Get_Shininess: IXMLFx_common_float_or_param_type;
    function Get_Reflective: IXMLFx_common_color_or_texture_type;
    function Get_Reflectivity: IXMLFx_common_float_or_param_type;
    function Get_Transparent: IXMLFx_common_transparent_type;
    function Get_Transparency: IXMLFx_common_float_or_param_type;
    function Get_Index_of_refraction: IXMLFx_common_float_or_param_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_common_type_technique_blinn }

  TXMLProfile_common_type_technique_blinn = class(TXML, IXMLProfile_common_type_technique_blinn)
  protected
    { IXMLProfile_common_type_technique_blinn }
    function Get_Emission: IXMLFx_common_color_or_texture_type;
    function Get_Ambient: IXMLFx_common_color_or_texture_type;
    function Get_Diffuse: IXMLFx_common_color_or_texture_type;
    function Get_Specular: IXMLFx_common_color_or_texture_type;
    function Get_Shininess: IXMLFx_common_float_or_param_type;
    function Get_Reflective: IXMLFx_common_color_or_texture_type;
    function Get_Reflectivity: IXMLFx_common_float_or_param_type;
    function Get_Transparent: IXMLFx_common_transparent_type;
    function Get_Transparency: IXMLFx_common_float_or_param_type;
    function Get_Index_of_refraction: IXMLFx_common_float_or_param_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_bridge_type }

  TXMLProfile_bridge_type = class(TXML, IXMLProfile_bridge_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_bridge_type }
    function Get_Id: UnicodeString;
    function Get_Platform: UnicodeString;
    function Get_Url: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Platform(Value: UnicodeString);
    procedure Set_Url(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_gles2_type }

  TXMLProfile_gles2_type = class(TXML, IXMLProfile_gles2_type)
  private
    FInclude: IXMLFx_include_typeList;
    FCode: IXMLFx_code_typeList;
    FNewparam: IXMLProfile_gles2_type_newparamList;
    FTechnique: IXMLProfile_gles2_type_techniqueList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_gles2_type }
    function Get_Id: UnicodeString;
    function Get_Language: UnicodeString;
    function Get_Platforms: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Include: IXMLFx_include_typeList;
    function Get_Code: IXMLFx_code_typeList;
    function Get_Newparam: IXMLProfile_gles2_type_newparamList;
    function Get_Technique: IXMLProfile_gles2_type_techniqueList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Language(Value: UnicodeString);
    procedure Set_Platforms(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_include_type }

  TXMLFx_include_type = class(TXML, IXMLFx_include_type)
  protected
    { IXMLFx_include_type }
    function Get_Sid: UnicodeString;
    function Get_Url: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Url(Value: UnicodeString);
  end;

{ TXMLFx_include_typeList }

  TXMLFx_include_typeList = class(TXMLFilter, IXMLFx_include_typeList)
  protected
    { IXMLFx_include_typeList }
    function Add: IXMLFx_include_type;
    function Insert(const Index: Integer): IXMLFx_include_type;

    function Get_Item(Index: Integer): IXMLFx_include_type;
  end;

{ TXMLFx_code_type }

  TXMLFx_code_type = class(TXML, IXMLFx_code_type)
  protected
    { IXMLFx_code_type }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLFx_code_typeList }

  TXMLFx_code_typeList = class(TXMLFilter, IXMLFx_code_typeList)
  protected
    { IXMLFx_code_typeList }
    function Add: IXMLFx_code_type;
    function Insert(const Index: Integer): IXMLFx_code_type;

    function Get_Item(Index: Integer): IXMLFx_code_type;
  end;

{ TXMLGles2_newparam_type }

  TXMLGles2_newparam_type = class(TXML, IXMLGles2_newparam_type)
  private
    FAnnotate: IXMLFx_annotate_typeList;
  protected
    { IXMLGles2_newparam_type }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Semantic: UnicodeString;
    function Get_Modifier: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bvec2: UnicodeString;
    function Get_Bvec3: UnicodeString;
    function Get_Bvec4: UnicodeString;
    function Get_Float: Double;
    function Get_Vec2: UnicodeString;
    function Get_Vec3: UnicodeString;
    function Get_Vec4: UnicodeString;
    function Get_Mat2: UnicodeString;
    function Get_Mat3: UnicodeString;
    function Get_Mat4: UnicodeString;
    function Get_Int: Int64;
    function Get_Ivec2: UnicodeString;
    function Get_Ivec3: UnicodeString;
    function Get_Ivec4: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Usertype: IXMLUsertype;
    function Get_Array_: IXMLArray_;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Modifier(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bvec2(Value: UnicodeString);
    procedure Set_Bvec3(Value: UnicodeString);
    procedure Set_Bvec4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Vec2(Value: UnicodeString);
    procedure Set_Vec3(Value: UnicodeString);
    procedure Set_Vec4(Value: UnicodeString);
    procedure Set_Mat2(Value: UnicodeString);
    procedure Set_Mat3(Value: UnicodeString);
    procedure Set_Mat4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Ivec2(Value: UnicodeString);
    procedure Set_Ivec3(Value: UnicodeString);
    procedure Set_Ivec4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLUsertype }

  TXMLUsertype = class(TXMLFilter, IXMLUsertype)
  protected
    { IXMLUsertype }
    function Get_Typename: UnicodeString;
    function Get_Setparam(Index: Integer): IXMLUsertype_setparam;
    procedure Set_Typename(Value: UnicodeString);
    function Add: IXMLUsertype_setparam;
    function Insert(const Index: Integer): IXMLUsertype_setparam;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLUsertype_setparam }

  TXMLUsertype_setparam = class(TXML, IXMLUsertype_setparam)
  protected
    { IXMLUsertype_setparam }
    function Get_Ref: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bvec2: UnicodeString;
    function Get_Bvec3: UnicodeString;
    function Get_Bvec4: UnicodeString;
    function Get_Float: Double;
    function Get_Vec2: UnicodeString;
    function Get_Vec3: UnicodeString;
    function Get_Vec4: UnicodeString;
    function Get_Mat2: UnicodeString;
    function Get_Mat3: UnicodeString;
    function Get_Mat4: UnicodeString;
    function Get_Int: Int64;
    function Get_Ivec2: UnicodeString;
    function Get_Ivec3: UnicodeString;
    function Get_Ivec4: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Usertype: IXMLUsertype;
    function Get_Array_: IXMLArray_;
    procedure Set_Ref(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bvec2(Value: UnicodeString);
    procedure Set_Bvec3(Value: UnicodeString);
    procedure Set_Bvec4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Vec2(Value: UnicodeString);
    procedure Set_Vec3(Value: UnicodeString);
    procedure Set_Vec4(Value: UnicodeString);
    procedure Set_Mat2(Value: UnicodeString);
    procedure Set_Mat3(Value: UnicodeString);
    procedure Set_Mat4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Ivec2(Value: UnicodeString);
    procedure Set_Ivec3(Value: UnicodeString);
    procedure Set_Ivec4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLArray_ }

  TXMLArray_ = class(TXML, IXMLArray_)
  protected
    { IXMLArray_ }
    function Get_Length: LongWord;
    function Get_Bool: Boolean;
    function Get_Bvec2: UnicodeString;
    function Get_Bvec3: UnicodeString;
    function Get_Bvec4: UnicodeString;
    function Get_Float: Double;
    function Get_Vec2: UnicodeString;
    function Get_Vec3: UnicodeString;
    function Get_Vec4: UnicodeString;
    function Get_Mat2: UnicodeString;
    function Get_Mat3: UnicodeString;
    function Get_Mat4: UnicodeString;
    function Get_Int: Int64;
    function Get_Ivec2: UnicodeString;
    function Get_Ivec3: UnicodeString;
    function Get_Ivec4: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Usertype: IXMLUsertype;
    function Get_Array_: IXMLArray_;
    procedure Set_Length(Value: LongWord);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bvec2(Value: UnicodeString);
    procedure Set_Bvec3(Value: UnicodeString);
    procedure Set_Bvec4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Vec2(Value: UnicodeString);
    procedure Set_Vec3(Value: UnicodeString);
    procedure Set_Vec4(Value: UnicodeString);
    procedure Set_Mat2(Value: UnicodeString);
    procedure Set_Mat3(Value: UnicodeString);
    procedure Set_Mat4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Ivec2(Value: UnicodeString);
    procedure Set_Ivec3(Value: UnicodeString);
    procedure Set_Ivec4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_gles2_type_newparam }

  TXMLProfile_gles2_type_newparam = class(TXMLGles2_newparam_type, IXMLProfile_gles2_type_newparam)
  protected
    { IXMLProfile_gles2_type_newparam }
  end;

{ TXMLProfile_gles2_type_newparamList }

  TXMLProfile_gles2_type_newparamList = class(TXMLFilter, IXMLProfile_gles2_type_newparamList)
  protected
    { IXMLProfile_gles2_type_newparamList }
    function Add: IXMLProfile_gles2_type_newparam;
    function Insert(const Index: Integer): IXMLProfile_gles2_type_newparam;

    function Get_Item(Index: Integer): IXMLProfile_gles2_type_newparam;
  end;

{ TXMLProfile_gles2_type_technique }

  TXMLProfile_gles2_type_technique = class(TXML, IXMLProfile_gles2_type_technique)
  private
    FAnnotate: IXMLFx_annotate_typeList;
    FPass: IXMLGles2_pass_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_gles2_type_technique }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Pass: IXMLGles2_pass_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_gles2_type_techniqueList }

  TXMLProfile_gles2_type_techniqueList = class(TXMLFilter, IXMLProfile_gles2_type_techniqueList)
  protected
    { IXMLProfile_gles2_type_techniqueList }
    function Add: IXMLProfile_gles2_type_technique;
    function Insert(const Index: Integer): IXMLProfile_gles2_type_technique;

    function Get_Item(Index: Integer): IXMLProfile_gles2_type_technique;
  end;

{ TXMLGles2_pass_type }

  TXMLGles2_pass_type = class(TXML, IXMLGles2_pass_type)
  private
    FAnnotate: IXMLFx_annotate_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLGles2_pass_type }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_States: IXMLGles2_pass_type_states;
    function Get_Program_: IXMLGles2_program_type;
    function Get_Evaluate: IXMLGles2_pass_type_evaluate;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles2_pass_typeList }

  TXMLGles2_pass_typeList = class(TXMLFilter, IXMLGles2_pass_typeList)
  protected
    { IXMLGles2_pass_typeList }
    function Add: IXMLGles2_pass_type;
    function Insert(const Index: Integer): IXMLGles2_pass_type;

    function Get_Item(Index: Integer): IXMLGles2_pass_type;
  end;

{ TXMLGles2_pass_type_states }

  TXMLGles2_pass_type_states = class(TXML, IXMLGles2_pass_type_states)
  protected
    { IXMLGles2_pass_type_states }
    function Get_Blend_color: IXMLBlend_color;
    function Get_Blend_equation: IXMLBlend_equation;
    function Get_Blend_equation_separate: IXMLBlend_equation_separate;
    function Get_Blend_func: IXMLBlend_func;
    function Get_Blend_func_separate: IXMLBlend_func_separate;
    function Get_Color_mask: IXMLColor_mask;
    function Get_Cull_face: IXMLCull_face;
    function Get_Depth_func: IXMLDepth_func;
    function Get_Depth_mask: IXMLDepth_mask;
    function Get_Depth_range: IXMLDepth_range;
    function Get_Front_face: IXMLFront_face;
    function Get_Line_width: IXMLLine_width;
    function Get_Polygon_offset: IXMLPolygon_offset;
    function Get_Point_size: IXMLPoint_size;
    function Get_Sample_coverage: IXMLSample_coverage;
    function Get_Scissor: IXMLScissor;
    function Get_Stencil_func: IXMLStencil_func;
    function Get_Stencil_func_separate: IXMLStencil_func_separate;
    function Get_Stencil_mask: IXMLStencil_mask;
    function Get_Stencil_mask_separate: IXMLStencil_mask_separate;
    function Get_Stencil_op: IXMLStencil_op;
    function Get_Stencil_op_separate: IXMLStencil_op_separate;
    function Get_Blend_enable: IXMLBlend_enable;
    function Get_Cull_face_enable: IXMLCull_face_enable;
    function Get_Depth_test_enable: IXMLDepth_test_enable;
    function Get_Dither_enable: IXMLDither_enable;
    function Get_Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable;
    function Get_Point_size_enable: IXMLPoint_size_enable;
    function Get_Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable;
    function Get_Sample_coverage_enable: IXMLSample_coverage_enable;
    function Get_Scissor_test_enable: IXMLScissor_test_enable;
    function Get_Stencil_test_enable: IXMLStencil_test_enable;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLBlend_color }

  TXMLBlend_color = class(TXML, IXMLBlend_color)
  protected
    { IXMLBlend_color }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLBlend_equation }

  TXMLBlend_equation = class(TXML, IXMLBlend_equation)
  protected
    { IXMLBlend_equation }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLBlend_equation_separate }

  TXMLBlend_equation_separate = class(TXML, IXMLBlend_equation_separate)
  protected
    { IXMLBlend_equation_separate }
    function Get_Rgb: IXMLBlend_equation_separate_rgb;
    function Get_Alpha: IXMLBlend_equation_separate_alpha;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLBlend_equation_separate_rgb }

  TXMLBlend_equation_separate_rgb = class(TXML, IXMLBlend_equation_separate_rgb)
  protected
    { IXMLBlend_equation_separate_rgb }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLBlend_equation_separate_alpha }

  TXMLBlend_equation_separate_alpha = class(TXML, IXMLBlend_equation_separate_alpha)
  protected
    { IXMLBlend_equation_separate_alpha }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLBlend_func }

  TXMLBlend_func = class(TXML, IXMLBlend_func)
  protected
    { IXMLBlend_func }
    function Get_Src: IXMLBlend_func_src;
    function Get_Dest: IXMLBlend_func_dest;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLBlend_func_src }

  TXMLBlend_func_src = class(TXML, IXMLBlend_func_src)
  protected
    { IXMLBlend_func_src }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLBlend_func_dest }

  TXMLBlend_func_dest = class(TXML, IXMLBlend_func_dest)
  protected
    { IXMLBlend_func_dest }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLBlend_func_separate }

  TXMLBlend_func_separate = class(TXML, IXMLBlend_func_separate)
  protected
    { IXMLBlend_func_separate }
    function Get_Src_rgb: IXMLBlend_func_separate_src_rgb;
    function Get_Dest_rgb: IXMLBlend_func_separate_dest_rgb;
    function Get_Src_alpha: IXMLBlend_func_separate_src_alpha;
    function Get_Dest_alpha: IXMLBlend_func_separate_dest_alpha;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLBlend_func_separate_src_rgb }

  TXMLBlend_func_separate_src_rgb = class(TXML, IXMLBlend_func_separate_src_rgb)
  protected
    { IXMLBlend_func_separate_src_rgb }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLBlend_func_separate_dest_rgb }

  TXMLBlend_func_separate_dest_rgb = class(TXML, IXMLBlend_func_separate_dest_rgb)
  protected
    { IXMLBlend_func_separate_dest_rgb }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLBlend_func_separate_src_alpha }

  TXMLBlend_func_separate_src_alpha = class(TXML, IXMLBlend_func_separate_src_alpha)
  protected
    { IXMLBlend_func_separate_src_alpha }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLBlend_func_separate_dest_alpha }

  TXMLBlend_func_separate_dest_alpha = class(TXML, IXMLBlend_func_separate_dest_alpha)
  protected
    { IXMLBlend_func_separate_dest_alpha }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLColor_mask }

  TXMLColor_mask = class(TXML, IXMLColor_mask)
  protected
    { IXMLColor_mask }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLCull_face }

  TXMLCull_face = class(TXML, IXMLCull_face)
  protected
    { IXMLCull_face }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLDepth_func }

  TXMLDepth_func = class(TXML, IXMLDepth_func)
  protected
    { IXMLDepth_func }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLDepth_mask }

  TXMLDepth_mask = class(TXML, IXMLDepth_mask)
  protected
    { IXMLDepth_mask }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLDepth_range }

  TXMLDepth_range = class(TXML, IXMLDepth_range)
  protected
    { IXMLDepth_range }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLFront_face }

  TXMLFront_face = class(TXML, IXMLFront_face)
  protected
    { IXMLFront_face }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLLine_width }

  TXMLLine_width = class(TXML, IXMLLine_width)
  protected
    { IXMLLine_width }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPolygon_offset }

  TXMLPolygon_offset = class(TXML, IXMLPolygon_offset)
  protected
    { IXMLPolygon_offset }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPoint_size }

  TXMLPoint_size = class(TXML, IXMLPoint_size)
  protected
    { IXMLPoint_size }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLSample_coverage }

  TXMLSample_coverage = class(TXML, IXMLSample_coverage)
  protected
    { IXMLSample_coverage }
    function Get_Value: IXMLSample_coverage_value;
    function Get_Invert: IXMLSample_coverage_invert;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSample_coverage_value }

  TXMLSample_coverage_value = class(TXML, IXMLSample_coverage_value)
  protected
    { IXMLSample_coverage_value }
    function Get_Value: Single;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Single);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLSample_coverage_invert }

  TXMLSample_coverage_invert = class(TXML, IXMLSample_coverage_invert)
  protected
    { IXMLSample_coverage_invert }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLScissor }

  TXMLScissor = class(TXML, IXMLScissor)
  protected
    { IXMLScissor }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_func }

  TXMLStencil_func = class(TXML, IXMLStencil_func)
  protected
    { IXMLStencil_func }
    function Get_Func: IXMLStencil_func_func;
    function Get_Ref: IXMLStencil_func_ref;
    function Get_Mask: IXMLStencil_func_mask;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLStencil_func_func }

  TXMLStencil_func_func = class(TXML, IXMLStencil_func_func)
  protected
    { IXMLStencil_func_func }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_func_ref }

  TXMLStencil_func_ref = class(TXML, IXMLStencil_func_ref)
  protected
    { IXMLStencil_func_ref }
    function Get_Value: Byte;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Byte);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_func_mask }

  TXMLStencil_func_mask = class(TXML, IXMLStencil_func_mask)
  protected
    { IXMLStencil_func_mask }
    function Get_Value: Byte;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Byte);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_func_separate }

  TXMLStencil_func_separate = class(TXML, IXMLStencil_func_separate)
  protected
    { IXMLStencil_func_separate }
    function Get_Front: IXMLStencil_func_separate_front;
    function Get_Back: IXMLStencil_func_separate_back;
    function Get_Ref: IXMLStencil_func_separate_ref;
    function Get_Mask: IXMLStencil_func_separate_mask;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLStencil_func_separate_front }

  TXMLStencil_func_separate_front = class(TXML, IXMLStencil_func_separate_front)
  protected
    { IXMLStencil_func_separate_front }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_func_separate_back }

  TXMLStencil_func_separate_back = class(TXML, IXMLStencil_func_separate_back)
  protected
    { IXMLStencil_func_separate_back }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_func_separate_ref }

  TXMLStencil_func_separate_ref = class(TXML, IXMLStencil_func_separate_ref)
  protected
    { IXMLStencil_func_separate_ref }
    function Get_Value: Byte;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Byte);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_func_separate_mask }

  TXMLStencil_func_separate_mask = class(TXML, IXMLStencil_func_separate_mask)
  protected
    { IXMLStencil_func_separate_mask }
    function Get_Value: Byte;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Byte);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_mask }

  TXMLStencil_mask = class(TXML, IXMLStencil_mask)
  protected
    { IXMLStencil_mask }
    function Get_Value: Int64;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Int64);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_mask_separate }

  TXMLStencil_mask_separate = class(TXML, IXMLStencil_mask_separate)
  protected
    { IXMLStencil_mask_separate }
    function Get_Face: IXMLStencil_mask_separate_face;
    function Get_Mask: IXMLStencil_mask_separate_mask;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLStencil_mask_separate_face }

  TXMLStencil_mask_separate_face = class(TXML, IXMLStencil_mask_separate_face)
  protected
    { IXMLStencil_mask_separate_face }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_mask_separate_mask }

  TXMLStencil_mask_separate_mask = class(TXML, IXMLStencil_mask_separate_mask)
  protected
    { IXMLStencil_mask_separate_mask }
    function Get_Value: Byte;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Byte);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_op }

  TXMLStencil_op = class(TXML, IXMLStencil_op)
  protected
    { IXMLStencil_op }
    function Get_Fail: IXMLStencil_op_fail;
    function Get_Zfail: IXMLStencil_op_zfail;
    function Get_Zpass: IXMLStencil_op_zpass;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLStencil_op_fail }

  TXMLStencil_op_fail = class(TXML, IXMLStencil_op_fail)
  protected
    { IXMLStencil_op_fail }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_op_zfail }

  TXMLStencil_op_zfail = class(TXML, IXMLStencil_op_zfail)
  protected
    { IXMLStencil_op_zfail }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_op_zpass }

  TXMLStencil_op_zpass = class(TXML, IXMLStencil_op_zpass)
  protected
    { IXMLStencil_op_zpass }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_op_separate }

  TXMLStencil_op_separate = class(TXML, IXMLStencil_op_separate)
  protected
    { IXMLStencil_op_separate }
    function Get_Face: IXMLStencil_op_separate_face;
    function Get_Fail: IXMLStencil_op_separate_fail;
    function Get_Zfail: IXMLStencil_op_separate_zfail;
    function Get_Zpass: IXMLStencil_op_separate_zpass;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLStencil_op_separate_face }

  TXMLStencil_op_separate_face = class(TXML, IXMLStencil_op_separate_face)
  protected
    { IXMLStencil_op_separate_face }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_op_separate_fail }

  TXMLStencil_op_separate_fail = class(TXML, IXMLStencil_op_separate_fail)
  protected
    { IXMLStencil_op_separate_fail }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_op_separate_zfail }

  TXMLStencil_op_separate_zfail = class(TXML, IXMLStencil_op_separate_zfail)
  protected
    { IXMLStencil_op_separate_zfail }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_op_separate_zpass }

  TXMLStencil_op_separate_zpass = class(TXML, IXMLStencil_op_separate_zpass)
  protected
    { IXMLStencil_op_separate_zpass }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLBlend_enable }

  TXMLBlend_enable = class(TXML, IXMLBlend_enable)
  protected
    { IXMLBlend_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLCull_face_enable }

  TXMLCull_face_enable = class(TXML, IXMLCull_face_enable)
  protected
    { IXMLCull_face_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLDepth_test_enable }

  TXMLDepth_test_enable = class(TXML, IXMLDepth_test_enable)
  protected
    { IXMLDepth_test_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLDither_enable }

  TXMLDither_enable = class(TXML, IXMLDither_enable)
  protected
    { IXMLDither_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPolygon_offset_fill_enable }

  TXMLPolygon_offset_fill_enable = class(TXML, IXMLPolygon_offset_fill_enable)
  protected
    { IXMLPolygon_offset_fill_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPoint_size_enable }

  TXMLPoint_size_enable = class(TXML, IXMLPoint_size_enable)
  protected
    { IXMLPoint_size_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLSample_alpha_to_coverage_enable }

  TXMLSample_alpha_to_coverage_enable = class(TXML, IXMLSample_alpha_to_coverage_enable)
  protected
    { IXMLSample_alpha_to_coverage_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLSample_coverage_enable }

  TXMLSample_coverage_enable = class(TXML, IXMLSample_coverage_enable)
  protected
    { IXMLSample_coverage_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLScissor_test_enable }

  TXMLScissor_test_enable = class(TXML, IXMLScissor_test_enable)
  protected
    { IXMLScissor_test_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLStencil_test_enable }

  TXMLStencil_test_enable = class(TXML, IXMLStencil_test_enable)
  protected
    { IXMLStencil_test_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLGles2_program_type }

  TXMLGles2_program_type = class(TXML, IXMLGles2_program_type)
  private
    FShader: IXMLGles2_shader_typeList;
    FLinker: IXMLFx_target_typeList;
    FBind_attribute: IXMLGles2_program_type_bind_attributeList;
    FBind_uniform: IXMLGles2_program_type_bind_uniformList;
  protected
    { IXMLGles2_program_type }
    function Get_Shader: IXMLGles2_shader_typeList;
    function Get_Linker: IXMLFx_target_typeList;
    function Get_Bind_attribute: IXMLGles2_program_type_bind_attributeList;
    function Get_Bind_uniform: IXMLGles2_program_type_bind_uniformList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles2_shader_type }

  TXMLGles2_shader_type = class(TXML, IXMLGles2_shader_type)
  private
    FCompiler: IXMLFx_target_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLGles2_shader_type }
    function Get_Stage: UnicodeString;
    function Get_Sources: IXMLGles2_shader_type_sources;
    function Get_Compiler: IXMLFx_target_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Stage(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles2_shader_typeList }

  TXMLGles2_shader_typeList = class(TXMLFilter, IXMLGles2_shader_typeList)
  protected
    { IXMLGles2_shader_typeList }
    function Add: IXMLGles2_shader_type;
    function Insert(const Index: Integer): IXMLGles2_shader_type;

    function Get_Item(Index: Integer): IXMLGles2_shader_type;
  end;

{ TXMLFx_sources_type }

  TXMLFx_sources_type = class(TXML, IXMLFx_sources_type)
  private
    FInline_: IXMLString_List;
    FImport: IXMLFx_sources_type_importList;
  protected
    { IXMLFx_sources_type }
    function Get_Inline_: IXMLString_List;
    function Get_Import: IXMLFx_sources_type_importList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_sources_type_import }

  TXMLFx_sources_type_import = class(TXML, IXMLFx_sources_type_import)
  protected
    { IXMLFx_sources_type_import }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
  end;

{ TXMLFx_sources_type_importList }

  TXMLFx_sources_type_importList = class(TXMLFilter, IXMLFx_sources_type_importList)
  protected
    { IXMLFx_sources_type_importList }
    function Add: IXMLFx_sources_type_import;
    function Insert(const Index: Integer): IXMLFx_sources_type_import;

    function Get_Item(Index: Integer): IXMLFx_sources_type_import;
  end;

{ TXMLGles2_shader_type_sources }

  TXMLGles2_shader_type_sources = class(TXMLFx_sources_type, IXMLGles2_shader_type_sources)
  protected
    { IXMLGles2_shader_type_sources }
    function Get_Entry: UnicodeString;
    procedure Set_Entry(Value: UnicodeString);
  end;

{ TXMLFx_target_type }

  TXMLFx_target_type = class(TXML, IXMLFx_target_type)
  protected
    { IXMLFx_target_type }
    function Get_Platform: UnicodeString;
    function Get_Target: UnicodeString;
    function Get_Options: UnicodeString;
    function Get_Binary: IXMLFx_target_type_binary;
    procedure Set_Platform(Value: UnicodeString);
    procedure Set_Target(Value: UnicodeString);
    procedure Set_Options(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_target_typeList }

  TXMLFx_target_typeList = class(TXMLFilter, IXMLFx_target_typeList)
  protected
    { IXMLFx_target_typeList }
    function Add: IXMLFx_target_type;
    function Insert(const Index: Integer): IXMLFx_target_type;

    function Get_Item(Index: Integer): IXMLFx_target_type;
  end;

{ TXMLFx_target_type_binary }

  TXMLFx_target_type_binary = class(TXML, IXMLFx_target_type_binary)
  protected
    { IXMLFx_target_type_binary }
    function Get_Ref: UnicodeString;
    function Get_Hex: IXMLFx_target_type_binary_hex;
    procedure Set_Ref(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_target_type_binary_hex }

  TXMLFx_target_type_binary_hex = class(TXML, IXMLFx_target_type_binary_hex)
  protected
    { IXMLFx_target_type_binary_hex }
    function Get_Format: UnicodeString;
    procedure Set_Format(Value: UnicodeString);
  end;

{ TXMLGles2_program_type_bind_attribute }

  TXMLGles2_program_type_bind_attribute = class(TXML, IXMLGles2_program_type_bind_attribute)
  protected
    { IXMLGles2_program_type_bind_attribute }
    function Get_Symbol: UnicodeString;
    function Get_Semantic: UnicodeString;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
  end;

{ TXMLGles2_program_type_bind_attributeList }

  TXMLGles2_program_type_bind_attributeList = class(TXMLFilter, IXMLGles2_program_type_bind_attributeList)
  protected
    { IXMLGles2_program_type_bind_attributeList }
    function Add: IXMLGles2_program_type_bind_attribute;
    function Insert(const Index: Integer): IXMLGles2_program_type_bind_attribute;

    function Get_Item(Index: Integer): IXMLGles2_program_type_bind_attribute;
  end;

{ TXMLGles2_program_type_bind_uniform }

  TXMLGles2_program_type_bind_uniform = class(TXML, IXMLGles2_program_type_bind_uniform)
  protected
    { IXMLGles2_program_type_bind_uniform }
    function Get_Symbol: UnicodeString;
    function Get_Param: IXMLGles2_program_type_bind_uniform_param;
    function Get_Bool: Boolean;
    function Get_Bvec2: UnicodeString;
    function Get_Bvec3: UnicodeString;
    function Get_Bvec4: UnicodeString;
    function Get_Float: Double;
    function Get_Vec2: UnicodeString;
    function Get_Vec3: UnicodeString;
    function Get_Vec4: UnicodeString;
    function Get_Mat2: UnicodeString;
    function Get_Mat3: UnicodeString;
    function Get_Mat4: UnicodeString;
    function Get_Int: Int64;
    function Get_Ivec2: UnicodeString;
    function Get_Ivec3: UnicodeString;
    function Get_Ivec4: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Usertype: IXMLUsertype;
    function Get_Array_: IXMLArray_;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bvec2(Value: UnicodeString);
    procedure Set_Bvec3(Value: UnicodeString);
    procedure Set_Bvec4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Vec2(Value: UnicodeString);
    procedure Set_Vec3(Value: UnicodeString);
    procedure Set_Vec4(Value: UnicodeString);
    procedure Set_Mat2(Value: UnicodeString);
    procedure Set_Mat3(Value: UnicodeString);
    procedure Set_Mat4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Ivec2(Value: UnicodeString);
    procedure Set_Ivec3(Value: UnicodeString);
    procedure Set_Ivec4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles2_program_type_bind_uniformList }

  TXMLGles2_program_type_bind_uniformList = class(TXMLFilter, IXMLGles2_program_type_bind_uniformList)
  protected
    { IXMLGles2_program_type_bind_uniformList }
    function Add: IXMLGles2_program_type_bind_uniform;
    function Insert(const Index: Integer): IXMLGles2_program_type_bind_uniform;

    function Get_Item(Index: Integer): IXMLGles2_program_type_bind_uniform;
  end;

{ TXMLGles2_program_type_bind_uniform_param }

  TXMLGles2_program_type_bind_uniform_param = class(TXML, IXMLGles2_program_type_bind_uniform_param)
  protected
    { IXMLGles2_program_type_bind_uniform_param }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
  end;

{ TXMLGles2_pass_type_evaluate }

  TXMLGles2_pass_type_evaluate = class(TXML, IXMLGles2_pass_type_evaluate)
  private
    FColor_target: IXMLFx_colortarget_typeList;
    FDepth_target: IXMLFx_depthtarget_typeList;
    FStencil_target: IXMLFx_stenciltarget_typeList;
    FColor_clear: IXMLFx_clearcolor_typeList;
    FStencil_clear: IXMLFx_clearstencil_typeList;
    FDepth_clear: IXMLFx_cleardepth_typeList;
  protected
    { IXMLGles2_pass_type_evaluate }
    function Get_Color_target: IXMLFx_colortarget_typeList;
    function Get_Depth_target: IXMLFx_depthtarget_typeList;
    function Get_Stencil_target: IXMLFx_stenciltarget_typeList;
    function Get_Color_clear: IXMLFx_clearcolor_typeList;
    function Get_Stencil_clear: IXMLFx_clearstencil_typeList;
    function Get_Depth_clear: IXMLFx_cleardepth_typeList;
    function Get_Draw: UnicodeString;
    procedure Set_Draw(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_rendertarget_type }

  TXMLFx_rendertarget_type = class(TXML, IXMLFx_rendertarget_type)
  protected
    { IXMLFx_rendertarget_type }
    function Get_Index: LongWord;
    function Get_Mip: LongWord;
    function Get_Face: UnicodeString;
    function Get_Slice: LongWord;
    function Get_Param: IXMLFx_rendertarget_type_param;
    function Get_Instance_image: IXMLInstance_image_type;
    procedure Set_Index(Value: LongWord);
    procedure Set_Mip(Value: LongWord);
    procedure Set_Face(Value: UnicodeString);
    procedure Set_Slice(Value: LongWord);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFx_rendertarget_type_param }

  TXMLFx_rendertarget_type_param = class(TXML, IXMLFx_rendertarget_type_param)
  protected
    { IXMLFx_rendertarget_type_param }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
  end;

{ TXMLFx_colortarget_type }

  TXMLFx_colortarget_type = class(TXMLFx_rendertarget_type, IXMLFx_colortarget_type)
  protected
    { IXMLFx_colortarget_type }
  end;

{ TXMLFx_colortarget_typeList }

  TXMLFx_colortarget_typeList = class(TXMLFilter, IXMLFx_colortarget_typeList)
  protected
    { IXMLFx_colortarget_typeList }
    function Add: IXMLFx_colortarget_type;
    function Insert(const Index: Integer): IXMLFx_colortarget_type;

    function Get_Item(Index: Integer): IXMLFx_colortarget_type;
  end;

{ TXMLFx_depthtarget_type }

  TXMLFx_depthtarget_type = class(TXMLFx_rendertarget_type, IXMLFx_depthtarget_type)
  protected
    { IXMLFx_depthtarget_type }
  end;

{ TXMLFx_depthtarget_typeList }

  TXMLFx_depthtarget_typeList = class(TXMLFilter, IXMLFx_depthtarget_typeList)
  protected
    { IXMLFx_depthtarget_typeList }
    function Add: IXMLFx_depthtarget_type;
    function Insert(const Index: Integer): IXMLFx_depthtarget_type;

    function Get_Item(Index: Integer): IXMLFx_depthtarget_type;
  end;

{ TXMLFx_stenciltarget_type }

  TXMLFx_stenciltarget_type = class(TXMLFx_rendertarget_type, IXMLFx_stenciltarget_type)
  protected
    { IXMLFx_stenciltarget_type }
  end;

{ TXMLFx_stenciltarget_typeList }

  TXMLFx_stenciltarget_typeList = class(TXMLFilter, IXMLFx_stenciltarget_typeList)
  protected
    { IXMLFx_stenciltarget_typeList }
    function Add: IXMLFx_stenciltarget_type;
    function Insert(const Index: Integer): IXMLFx_stenciltarget_type;

    function Get_Item(Index: Integer): IXMLFx_stenciltarget_type;
  end;

{ TXMLFx_clearcolor_type }

  TXMLFx_clearcolor_type = class(TXML, IXMLFx_clearcolor_type)
  protected
    { IXMLFx_clearcolor_type }
    function Get_Index: LongWord;
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLFx_clearcolor_typeList }

  TXMLFx_clearcolor_typeList = class(TXMLFilter, IXMLFx_clearcolor_typeList)
  protected
    { IXMLFx_clearcolor_typeList }
    function Add: IXMLFx_clearcolor_type;
    function Insert(const Index: Integer): IXMLFx_clearcolor_type;

    function Get_Item(Index: Integer): IXMLFx_clearcolor_type;
  end;

{ TXMLFx_clearstencil_type }

  TXMLFx_clearstencil_type = class(TXML, IXMLFx_clearstencil_type)
  protected
    { IXMLFx_clearstencil_type }
    function Get_Index: LongWord;
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLFx_clearstencil_typeList }

  TXMLFx_clearstencil_typeList = class(TXMLFilter, IXMLFx_clearstencil_typeList)
  protected
    { IXMLFx_clearstencil_typeList }
    function Add: IXMLFx_clearstencil_type;
    function Insert(const Index: Integer): IXMLFx_clearstencil_type;

    function Get_Item(Index: Integer): IXMLFx_clearstencil_type;
  end;

{ TXMLFx_cleardepth_type }

  TXMLFx_cleardepth_type = class(TXML, IXMLFx_cleardepth_type)
  protected
    { IXMLFx_cleardepth_type }
    function Get_Index: LongWord;
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLFx_cleardepth_typeList }

  TXMLFx_cleardepth_typeList = class(TXMLFilter, IXMLFx_cleardepth_typeList)
  protected
    { IXMLFx_cleardepth_typeList }
    function Add: IXMLFx_cleardepth_type;
    function Insert(const Index: Integer): IXMLFx_cleardepth_type;

    function Get_Item(Index: Integer): IXMLFx_cleardepth_type;
  end;

{ TXMLProfile_glsl_type }

  TXMLProfile_glsl_type = class(TXML, IXMLProfile_glsl_type)
  private
    FCode: IXMLFx_code_typeList;
    FInclude: IXMLFx_include_typeList;
    FNewparam: IXMLGlsl_newparam_typeList;
    FTechnique: IXMLProfile_glsl_type_techniqueList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_glsl_type }
    function Get_Id: UnicodeString;
    function Get_Platform: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Code: IXMLFx_code_typeList;
    function Get_Include: IXMLFx_include_typeList;
    function Get_Newparam: IXMLGlsl_newparam_typeList;
    function Get_Technique: IXMLProfile_glsl_type_techniqueList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Platform(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGlsl_newparam_type }

  TXMLGlsl_newparam_type = class(TXML, IXMLGlsl_newparam_type)
  private
    FAnnotate: IXMLFx_annotate_typeList;
  protected
    { IXMLGlsl_newparam_type }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Semantic: UnicodeString;
    function Get_Modifier: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLGlsl_array_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Modifier(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGlsl_newparam_typeList }

  TXMLGlsl_newparam_typeList = class(TXMLFilter, IXMLGlsl_newparam_typeList)
  protected
    { IXMLGlsl_newparam_typeList }
    function Add: IXMLGlsl_newparam_type;
    function Insert(const Index: Integer): IXMLGlsl_newparam_type;

    function Get_Item(Index: Integer): IXMLGlsl_newparam_type;
  end;

{ TXMLGlsl_array_type }

  TXMLGlsl_array_type = class(TXML, IXMLGlsl_array_type)
  protected
    { IXMLGlsl_array_type }
    function Get_Length: LongWord;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLGlsl_array_type;
    procedure Set_Length(Value: LongWord);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_glsl_type_technique }

  TXMLProfile_glsl_type_technique = class(TXML, IXMLProfile_glsl_type_technique)
  private
    FAnnotate: IXMLFx_annotate_typeList;
    FPass: IXMLProfile_glsl_type_technique_passList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_glsl_type_technique }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Pass: IXMLProfile_glsl_type_technique_passList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_glsl_type_techniqueList }

  TXMLProfile_glsl_type_techniqueList = class(TXMLFilter, IXMLProfile_glsl_type_techniqueList)
  protected
    { IXMLProfile_glsl_type_techniqueList }
    function Add: IXMLProfile_glsl_type_technique;
    function Insert(const Index: Integer): IXMLProfile_glsl_type_technique;

    function Get_Item(Index: Integer): IXMLProfile_glsl_type_technique;
  end;

{ TXMLProfile_glsl_type_technique_pass }

  TXMLProfile_glsl_type_technique_pass = class(TXML, IXMLProfile_glsl_type_technique_pass)
  private
    FAnnotate: IXMLFx_annotate_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_glsl_type_technique_pass }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_States: IXMLProfile_glsl_type_technique_pass_states;
    function Get_Program_: IXMLGlsl_program_type;
    function Get_Evaluate: IXMLProfile_glsl_type_technique_pass_evaluate;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_glsl_type_technique_passList }

  TXMLProfile_glsl_type_technique_passList = class(TXMLFilter, IXMLProfile_glsl_type_technique_passList)
  protected
    { IXMLProfile_glsl_type_technique_passList }
    function Add: IXMLProfile_glsl_type_technique_pass;
    function Insert(const Index: Integer): IXMLProfile_glsl_type_technique_pass;

    function Get_Item(Index: Integer): IXMLProfile_glsl_type_technique_pass;
  end;

{ TXMLProfile_glsl_type_technique_pass_states }

  TXMLProfile_glsl_type_technique_pass_states = class(TXML, IXMLProfile_glsl_type_technique_pass_states)
  protected
    { IXMLProfile_glsl_type_technique_pass_states }
    function Get_Alpha_func: IXMLAlpha_func;
    function Get_Blend_func: IXMLBlend_func;
    function Get_Blend_func_separate: IXMLBlend_func_separate;
    function Get_Blend_equation: IXMLBlend_equation;
    function Get_Blend_equation_separate: IXMLBlend_equation_separate;
    function Get_Color_material: IXMLColor_material;
    function Get_Cull_face: IXMLCull_face;
    function Get_Depth_func: IXMLDepth_func;
    function Get_Fog_mode: IXMLFog_mode;
    function Get_Fog_coord_src: IXMLFog_coord_src;
    function Get_Front_face: IXMLFront_face;
    function Get_Light_model_color_control: IXMLLight_model_color_control;
    function Get_Logic_op: IXMLLogic_op;
    function Get_Polygon_mode: IXMLPolygon_mode;
    function Get_Shade_model: IXMLShade_model;
    function Get_Stencil_func: IXMLStencil_func;
    function Get_Stencil_op: IXMLStencil_op;
    function Get_Stencil_func_separate: IXMLStencil_func_separate;
    function Get_Stencil_op_separate: IXMLStencil_op_separate;
    function Get_Stencil_mask_separate: IXMLStencil_mask_separate;
    function Get_Light_enable: IXMLLight_enable;
    function Get_Light_ambient: IXMLLight_ambient;
    function Get_Light_diffuse: IXMLLight_diffuse;
    function Get_Light_specular: IXMLLight_specular;
    function Get_Light_position: IXMLLight_position;
    function Get_Light_constant_attenuation: IXMLLight_constant_attenuation;
    function Get_Light_linear_attenuation: IXMLLight_linear_attenuation;
    function Get_Light_quadratic_attenuation: IXMLLight_quadratic_attenuation;
    function Get_Light_spot_cutoff: IXMLLight_spot_cutoff;
    function Get_Light_spot_direction: IXMLLight_spot_direction;
    function Get_Light_spot_exponent: IXMLLight_spot_exponent;
    function Get_Texture1D: IXMLTexture1D;
    function Get_Texture2D: IXMLTexture2D;
    function Get_Texture3D: IXMLTexture3D;
    function Get_TextureCUBE: IXMLTextureCUBE;
    function Get_TextureRECT: IXMLTextureRECT;
    function Get_TextureDEPTH: IXMLTextureDEPTH;
    function Get_Texture1D_enable: IXMLTexture1D_enable;
    function Get_Texture2D_enable: IXMLTexture2D_enable;
    function Get_Texture3D_enable: IXMLTexture3D_enable;
    function Get_TextureCUBE_enable: IXMLTextureCUBE_enable;
    function Get_TextureRECT_enable: IXMLTextureRECT_enable;
    function Get_TextureDEPTH_enable: IXMLTextureDEPTH_enable;
    function Get_Texture_env_color: IXMLTexture_env_color;
    function Get_Texture_env_mode: IXMLTexture_env_mode;
    function Get_Clip_plane: IXMLClip_plane;
    function Get_Clip_plane_enable: IXMLClip_plane_enable;
    function Get_Blend_color: IXMLBlend_color;
    function Get_Color_mask: IXMLColor_mask;
    function Get_Depth_bounds: IXMLDepth_bounds;
    function Get_Depth_mask: IXMLDepth_mask;
    function Get_Depth_range: IXMLDepth_range;
    function Get_Fog_density: IXMLFog_density;
    function Get_Fog_start: IXMLFog_start;
    function Get_Fog_end: IXMLFog_end;
    function Get_Fog_color: IXMLFog_color;
    function Get_Light_model_ambient: IXMLLight_model_ambient;
    function Get_Lighting_enable: IXMLLighting_enable;
    function Get_Line_stipple: IXMLLine_stipple;
    function Get_Line_width: IXMLLine_width;
    function Get_Material_ambient: IXMLMaterial_ambient;
    function Get_Material_diffuse: IXMLMaterial_diffuse;
    function Get_Material_emission: IXMLMaterial_emission;
    function Get_Material_shininess: IXMLMaterial_shininess;
    function Get_Material_specular: IXMLMaterial_specular;
    function Get_Model_view_matrix: IXMLModel_view_matrix;
    function Get_Point_distance_attenuation: IXMLPoint_distance_attenuation;
    function Get_Point_fade_threshold_size: IXMLPoint_fade_threshold_size;
    function Get_Point_size: IXMLPoint_size;
    function Get_Point_size_min: IXMLPoint_size_min;
    function Get_Point_size_max: IXMLPoint_size_max;
    function Get_Polygon_offset: IXMLPolygon_offset;
    function Get_Projection_matrix: IXMLProjection_matrix;
    function Get_Scissor: IXMLScissor;
    function Get_Stencil_mask: IXMLStencil_mask;
    function Get_Alpha_test_enable: IXMLAlpha_test_enable;
    function Get_Blend_enable: IXMLBlend_enable;
    function Get_Color_logic_op_enable: IXMLColor_logic_op_enable;
    function Get_Color_material_enable: IXMLColor_material_enable;
    function Get_Cull_face_enable: IXMLCull_face_enable;
    function Get_Depth_bounds_enable: IXMLDepth_bounds_enable;
    function Get_Depth_clamp_enable: IXMLDepth_clamp_enable;
    function Get_Depth_test_enable: IXMLDepth_test_enable;
    function Get_Dither_enable: IXMLDither_enable;
    function Get_Fog_enable: IXMLFog_enable;
    function Get_Light_model_local_viewer_enable: IXMLLight_model_local_viewer_enable;
    function Get_Light_model_two_side_enable: IXMLLight_model_two_side_enable;
    function Get_Line_smooth_enable: IXMLLine_smooth_enable;
    function Get_Line_stipple_enable: IXMLLine_stipple_enable;
    function Get_Logic_op_enable: IXMLLogic_op_enable;
    function Get_Multisample_enable: IXMLMultisample_enable;
    function Get_Normalize_enable: IXMLNormalize_enable;
    function Get_Point_smooth_enable: IXMLPoint_smooth_enable;
    function Get_Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable;
    function Get_Polygon_offset_line_enable: IXMLPolygon_offset_line_enable;
    function Get_Polygon_offset_point_enable: IXMLPolygon_offset_point_enable;
    function Get_Polygon_smooth_enable: IXMLPolygon_smooth_enable;
    function Get_Polygon_stipple_enable: IXMLPolygon_stipple_enable;
    function Get_Rescale_normal_enable: IXMLRescale_normal_enable;
    function Get_Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable;
    function Get_Sample_alpha_to_one_enable: IXMLSample_alpha_to_one_enable;
    function Get_Sample_coverage_enable: IXMLSample_coverage_enable;
    function Get_Scissor_test_enable: IXMLScissor_test_enable;
    function Get_Stencil_test_enable: IXMLStencil_test_enable;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLAlpha_func }

  TXMLAlpha_func = class(TXML, IXMLAlpha_func)
  protected
    { IXMLAlpha_func }
    function Get_Func: IXMLAlpha_func_func;
    function Get_Value: IXMLAlpha_func_value;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLAlpha_func_func }

  TXMLAlpha_func_func = class(TXML, IXMLAlpha_func_func)
  protected
    { IXMLAlpha_func_func }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLAlpha_func_value }

  TXMLAlpha_func_value = class(TXML, IXMLAlpha_func_value)
  protected
    { IXMLAlpha_func_value }
    function Get_Value: Single;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Single);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLColor_material }

  TXMLColor_material = class(TXML, IXMLColor_material)
  protected
    { IXMLColor_material }
    function Get_Face: IXMLColor_material_face;
    function Get_Mode: IXMLColor_material_mode;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLColor_material_face }

  TXMLColor_material_face = class(TXML, IXMLColor_material_face)
  protected
    { IXMLColor_material_face }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLColor_material_mode }

  TXMLColor_material_mode = class(TXML, IXMLColor_material_mode)
  protected
    { IXMLColor_material_mode }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLFog_mode }

  TXMLFog_mode = class(TXML, IXMLFog_mode)
  protected
    { IXMLFog_mode }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLFog_coord_src }

  TXMLFog_coord_src = class(TXML, IXMLFog_coord_src)
  protected
    { IXMLFog_coord_src }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLLight_model_color_control }

  TXMLLight_model_color_control = class(TXML, IXMLLight_model_color_control)
  protected
    { IXMLLight_model_color_control }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLLogic_op }

  TXMLLogic_op = class(TXML, IXMLLogic_op)
  protected
    { IXMLLogic_op }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPolygon_mode }

  TXMLPolygon_mode = class(TXML, IXMLPolygon_mode)
  protected
    { IXMLPolygon_mode }
    function Get_Face: IXMLPolygon_mode_face;
    function Get_Mode: IXMLPolygon_mode_mode;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLPolygon_mode_face }

  TXMLPolygon_mode_face = class(TXML, IXMLPolygon_mode_face)
  protected
    { IXMLPolygon_mode_face }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPolygon_mode_mode }

  TXMLPolygon_mode_mode = class(TXML, IXMLPolygon_mode_mode)
  protected
    { IXMLPolygon_mode_mode }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLShade_model }

  TXMLShade_model = class(TXML, IXMLShade_model)
  protected
    { IXMLShade_model }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLLight_enable }

  TXMLLight_enable = class(TXML, IXMLLight_enable)
  protected
    { IXMLLight_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLLight_ambient }

  TXMLLight_ambient = class(TXML, IXMLLight_ambient)
  protected
    { IXMLLight_ambient }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLLight_diffuse }

  TXMLLight_diffuse = class(TXML, IXMLLight_diffuse)
  protected
    { IXMLLight_diffuse }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLLight_specular }

  TXMLLight_specular = class(TXML, IXMLLight_specular)
  protected
    { IXMLLight_specular }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLLight_position }

  TXMLLight_position = class(TXML, IXMLLight_position)
  protected
    { IXMLLight_position }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLLight_constant_attenuation }

  TXMLLight_constant_attenuation = class(TXML, IXMLLight_constant_attenuation)
  protected
    { IXMLLight_constant_attenuation }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLLight_linear_attenuation }

  TXMLLight_linear_attenuation = class(TXML, IXMLLight_linear_attenuation)
  protected
    { IXMLLight_linear_attenuation }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLLight_quadratic_attenuation }

  TXMLLight_quadratic_attenuation = class(TXML, IXMLLight_quadratic_attenuation)
  protected
    { IXMLLight_quadratic_attenuation }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLLight_spot_cutoff }

  TXMLLight_spot_cutoff = class(TXML, IXMLLight_spot_cutoff)
  protected
    { IXMLLight_spot_cutoff }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLLight_spot_direction }

  TXMLLight_spot_direction = class(TXML, IXMLLight_spot_direction)
  protected
    { IXMLLight_spot_direction }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLLight_spot_exponent }

  TXMLLight_spot_exponent = class(TXML, IXMLLight_spot_exponent)
  protected
    { IXMLLight_spot_exponent }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLTexture1D }

  TXMLTexture1D = class(TXML, IXMLTexture1D)
  protected
    { IXMLTexture1D }
    function Get_Index: LongWord;
    function Get_Value: IXMLFx_sampler1D_type;
    function Get_Param: UnicodeString;
    procedure Set_Index(Value: LongWord);
    procedure Set_Param(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTexture2D }

  TXMLTexture2D = class(TXML, IXMLTexture2D)
  protected
    { IXMLTexture2D }
    function Get_Index: LongWord;
    function Get_Value: IXMLFx_sampler2D_type;
    function Get_Param: UnicodeString;
    procedure Set_Index(Value: LongWord);
    procedure Set_Param(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTexture3D }

  TXMLTexture3D = class(TXML, IXMLTexture3D)
  protected
    { IXMLTexture3D }
    function Get_Index: LongWord;
    function Get_Value: IXMLFx_sampler3D_type;
    function Get_Param: UnicodeString;
    procedure Set_Index(Value: LongWord);
    procedure Set_Param(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTextureCUBE }

  TXMLTextureCUBE = class(TXML, IXMLTextureCUBE)
  protected
    { IXMLTextureCUBE }
    function Get_Index: LongWord;
    function Get_Value: IXMLFx_samplerCUBE_type;
    function Get_Param: UnicodeString;
    procedure Set_Index(Value: LongWord);
    procedure Set_Param(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTextureRECT }

  TXMLTextureRECT = class(TXML, IXMLTextureRECT)
  protected
    { IXMLTextureRECT }
    function Get_Index: LongWord;
    function Get_Value: IXMLFx_samplerRECT_type;
    function Get_Param: UnicodeString;
    procedure Set_Index(Value: LongWord);
    procedure Set_Param(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTextureDEPTH }

  TXMLTextureDEPTH = class(TXML, IXMLTextureDEPTH)
  protected
    { IXMLTextureDEPTH }
    function Get_Index: LongWord;
    function Get_Value: IXMLFx_samplerDEPTH_type;
    function Get_Param: UnicodeString;
    procedure Set_Index(Value: LongWord);
    procedure Set_Param(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTexture1D_enable }

  TXMLTexture1D_enable = class(TXML, IXMLTexture1D_enable)
  protected
    { IXMLTexture1D_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLTexture2D_enable }

  TXMLTexture2D_enable = class(TXML, IXMLTexture2D_enable)
  protected
    { IXMLTexture2D_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLTexture3D_enable }

  TXMLTexture3D_enable = class(TXML, IXMLTexture3D_enable)
  protected
    { IXMLTexture3D_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLTextureCUBE_enable }

  TXMLTextureCUBE_enable = class(TXML, IXMLTextureCUBE_enable)
  protected
    { IXMLTextureCUBE_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLTextureRECT_enable }

  TXMLTextureRECT_enable = class(TXML, IXMLTextureRECT_enable)
  protected
    { IXMLTextureRECT_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLTextureDEPTH_enable }

  TXMLTextureDEPTH_enable = class(TXML, IXMLTextureDEPTH_enable)
  protected
    { IXMLTextureDEPTH_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLTexture_env_color }

  TXMLTexture_env_color = class(TXML, IXMLTexture_env_color)
  protected
    { IXMLTexture_env_color }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLTexture_env_mode }

  TXMLTexture_env_mode = class(TXML, IXMLTexture_env_mode)
  protected
    { IXMLTexture_env_mode }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLClip_plane }

  TXMLClip_plane = class(TXML, IXMLClip_plane)
  protected
    { IXMLClip_plane }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLClip_plane_enable }

  TXMLClip_plane_enable = class(TXML, IXMLClip_plane_enable)
  protected
    { IXMLClip_plane_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLDepth_bounds }

  TXMLDepth_bounds = class(TXML, IXMLDepth_bounds)
  protected
    { IXMLDepth_bounds }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLFog_density }

  TXMLFog_density = class(TXML, IXMLFog_density)
  protected
    { IXMLFog_density }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLFog_start }

  TXMLFog_start = class(TXML, IXMLFog_start)
  protected
    { IXMLFog_start }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLFog_end }

  TXMLFog_end = class(TXML, IXMLFog_end)
  protected
    { IXMLFog_end }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLFog_color }

  TXMLFog_color = class(TXML, IXMLFog_color)
  protected
    { IXMLFog_color }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLLight_model_ambient }

  TXMLLight_model_ambient = class(TXML, IXMLLight_model_ambient)
  protected
    { IXMLLight_model_ambient }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLLighting_enable }

  TXMLLighting_enable = class(TXML, IXMLLighting_enable)
  protected
    { IXMLLighting_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLLine_stipple }

  TXMLLine_stipple = class(TXML, IXMLLine_stipple)
  protected
    { IXMLLine_stipple }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLMaterial_ambient }

  TXMLMaterial_ambient = class(TXML, IXMLMaterial_ambient)
  protected
    { IXMLMaterial_ambient }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLMaterial_diffuse }

  TXMLMaterial_diffuse = class(TXML, IXMLMaterial_diffuse)
  protected
    { IXMLMaterial_diffuse }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLMaterial_emission }

  TXMLMaterial_emission = class(TXML, IXMLMaterial_emission)
  protected
    { IXMLMaterial_emission }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLMaterial_shininess }

  TXMLMaterial_shininess = class(TXML, IXMLMaterial_shininess)
  protected
    { IXMLMaterial_shininess }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLMaterial_specular }

  TXMLMaterial_specular = class(TXML, IXMLMaterial_specular)
  protected
    { IXMLMaterial_specular }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLModel_view_matrix }

  TXMLModel_view_matrix = class(TXML, IXMLModel_view_matrix)
  protected
    { IXMLModel_view_matrix }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPoint_distance_attenuation }

  TXMLPoint_distance_attenuation = class(TXML, IXMLPoint_distance_attenuation)
  protected
    { IXMLPoint_distance_attenuation }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPoint_fade_threshold_size }

  TXMLPoint_fade_threshold_size = class(TXML, IXMLPoint_fade_threshold_size)
  protected
    { IXMLPoint_fade_threshold_size }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPoint_size_min }

  TXMLPoint_size_min = class(TXML, IXMLPoint_size_min)
  protected
    { IXMLPoint_size_min }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPoint_size_max }

  TXMLPoint_size_max = class(TXML, IXMLPoint_size_max)
  protected
    { IXMLPoint_size_max }
    function Get_Value: Double;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Double);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLProjection_matrix }

  TXMLProjection_matrix = class(TXML, IXMLProjection_matrix)
  protected
    { IXMLProjection_matrix }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLAlpha_test_enable }

  TXMLAlpha_test_enable = class(TXML, IXMLAlpha_test_enable)
  protected
    { IXMLAlpha_test_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLColor_logic_op_enable }

  TXMLColor_logic_op_enable = class(TXML, IXMLColor_logic_op_enable)
  protected
    { IXMLColor_logic_op_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLColor_material_enable }

  TXMLColor_material_enable = class(TXML, IXMLColor_material_enable)
  protected
    { IXMLColor_material_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLDepth_bounds_enable }

  TXMLDepth_bounds_enable = class(TXML, IXMLDepth_bounds_enable)
  protected
    { IXMLDepth_bounds_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLDepth_clamp_enable }

  TXMLDepth_clamp_enable = class(TXML, IXMLDepth_clamp_enable)
  protected
    { IXMLDepth_clamp_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLFog_enable }

  TXMLFog_enable = class(TXML, IXMLFog_enable)
  protected
    { IXMLFog_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLLight_model_local_viewer_enable }

  TXMLLight_model_local_viewer_enable = class(TXML, IXMLLight_model_local_viewer_enable)
  protected
    { IXMLLight_model_local_viewer_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLLight_model_two_side_enable }

  TXMLLight_model_two_side_enable = class(TXML, IXMLLight_model_two_side_enable)
  protected
    { IXMLLight_model_two_side_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLLine_smooth_enable }

  TXMLLine_smooth_enable = class(TXML, IXMLLine_smooth_enable)
  protected
    { IXMLLine_smooth_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLLine_stipple_enable }

  TXMLLine_stipple_enable = class(TXML, IXMLLine_stipple_enable)
  protected
    { IXMLLine_stipple_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLLogic_op_enable }

  TXMLLogic_op_enable = class(TXML, IXMLLogic_op_enable)
  protected
    { IXMLLogic_op_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLMultisample_enable }

  TXMLMultisample_enable = class(TXML, IXMLMultisample_enable)
  protected
    { IXMLMultisample_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLNormalize_enable }

  TXMLNormalize_enable = class(TXML, IXMLNormalize_enable)
  protected
    { IXMLNormalize_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPoint_smooth_enable }

  TXMLPoint_smooth_enable = class(TXML, IXMLPoint_smooth_enable)
  protected
    { IXMLPoint_smooth_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPolygon_offset_line_enable }

  TXMLPolygon_offset_line_enable = class(TXML, IXMLPolygon_offset_line_enable)
  protected
    { IXMLPolygon_offset_line_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPolygon_offset_point_enable }

  TXMLPolygon_offset_point_enable = class(TXML, IXMLPolygon_offset_point_enable)
  protected
    { IXMLPolygon_offset_point_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPolygon_smooth_enable }

  TXMLPolygon_smooth_enable = class(TXML, IXMLPolygon_smooth_enable)
  protected
    { IXMLPolygon_smooth_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLPolygon_stipple_enable }

  TXMLPolygon_stipple_enable = class(TXML, IXMLPolygon_stipple_enable)
  protected
    { IXMLPolygon_stipple_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLRescale_normal_enable }

  TXMLRescale_normal_enable = class(TXML, IXMLRescale_normal_enable)
  protected
    { IXMLRescale_normal_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLSample_alpha_to_one_enable }

  TXMLSample_alpha_to_one_enable = class(TXML, IXMLSample_alpha_to_one_enable)
  protected
    { IXMLSample_alpha_to_one_enable }
    function Get_Value: Boolean;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: Boolean);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLGlsl_program_type }

  TXMLGlsl_program_type = class(TXML, IXMLGlsl_program_type)
  private
    FShader: IXMLGlsl_shader_typeList;
    FBind_attribute: IXMLGlsl_program_type_bind_attributeList;
    FBind_uniform: IXMLGlsl_program_type_bind_uniformList;
  protected
    { IXMLGlsl_program_type }
    function Get_Shader: IXMLGlsl_shader_typeList;
    function Get_Bind_attribute: IXMLGlsl_program_type_bind_attributeList;
    function Get_Bind_uniform: IXMLGlsl_program_type_bind_uniformList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGlsl_shader_type }

  TXMLGlsl_shader_type = class(TXML, IXMLGlsl_shader_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLGlsl_shader_type }
    function Get_Stage: UnicodeString;
    function Get_Sources: IXMLFx_sources_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Stage(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGlsl_shader_typeList }

  TXMLGlsl_shader_typeList = class(TXMLFilter, IXMLGlsl_shader_typeList)
  protected
    { IXMLGlsl_shader_typeList }
    function Add: IXMLGlsl_shader_type;
    function Insert(const Index: Integer): IXMLGlsl_shader_type;

    function Get_Item(Index: Integer): IXMLGlsl_shader_type;
  end;

{ TXMLGlsl_program_type_bind_attribute }

  TXMLGlsl_program_type_bind_attribute = class(TXML, IXMLGlsl_program_type_bind_attribute)
  protected
    { IXMLGlsl_program_type_bind_attribute }
    function Get_Symbol: UnicodeString;
    function Get_Semantic: UnicodeString;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
  end;

{ TXMLGlsl_program_type_bind_attributeList }

  TXMLGlsl_program_type_bind_attributeList = class(TXMLFilter, IXMLGlsl_program_type_bind_attributeList)
  protected
    { IXMLGlsl_program_type_bind_attributeList }
    function Add: IXMLGlsl_program_type_bind_attribute;
    function Insert(const Index: Integer): IXMLGlsl_program_type_bind_attribute;

    function Get_Item(Index: Integer): IXMLGlsl_program_type_bind_attribute;
  end;

{ TXMLGlsl_program_type_bind_uniform }

  TXMLGlsl_program_type_bind_uniform = class(TXML, IXMLGlsl_program_type_bind_uniform)
  protected
    { IXMLGlsl_program_type_bind_uniform }
    function Get_Symbol: UnicodeString;
    function Get_Param: IXMLGlsl_program_type_bind_uniform_param;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLGlsl_array_type;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGlsl_program_type_bind_uniformList }

  TXMLGlsl_program_type_bind_uniformList = class(TXMLFilter, IXMLGlsl_program_type_bind_uniformList)
  protected
    { IXMLGlsl_program_type_bind_uniformList }
    function Add: IXMLGlsl_program_type_bind_uniform;
    function Insert(const Index: Integer): IXMLGlsl_program_type_bind_uniform;

    function Get_Item(Index: Integer): IXMLGlsl_program_type_bind_uniform;
  end;

{ TXMLGlsl_program_type_bind_uniform_param }

  TXMLGlsl_program_type_bind_uniform_param = class(TXML, IXMLGlsl_program_type_bind_uniform_param)
  protected
    { IXMLGlsl_program_type_bind_uniform_param }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
  end;

{ TXMLProfile_glsl_type_technique_pass_evaluate }

  TXMLProfile_glsl_type_technique_pass_evaluate = class(TXML, IXMLProfile_glsl_type_technique_pass_evaluate)
  private
    FColor_target: IXMLFx_colortarget_typeList;
    FDepth_target: IXMLFx_depthtarget_typeList;
    FStencil_target: IXMLFx_stenciltarget_typeList;
    FColor_clear: IXMLFx_clearcolor_typeList;
    FDepth_clear: IXMLFx_cleardepth_typeList;
    FStencil_clear: IXMLFx_clearstencil_typeList;
  protected
    { IXMLProfile_glsl_type_technique_pass_evaluate }
    function Get_Color_target: IXMLFx_colortarget_typeList;
    function Get_Depth_target: IXMLFx_depthtarget_typeList;
    function Get_Stencil_target: IXMLFx_stenciltarget_typeList;
    function Get_Color_clear: IXMLFx_clearcolor_typeList;
    function Get_Depth_clear: IXMLFx_cleardepth_typeList;
    function Get_Stencil_clear: IXMLFx_clearstencil_typeList;
    function Get_Draw: UnicodeString;
    procedure Set_Draw(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_cg_type }

  TXMLProfile_cg_type = class(TXML, IXMLProfile_cg_type)
  private
    FCode: IXMLFx_code_typeList;
    FInclude: IXMLFx_include_typeList;
    FNewparam: IXMLCg_newparam_typeList;
    FTechnique: IXMLProfile_cg_type_techniqueList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_cg_type }
    function Get_Id: UnicodeString;
    function Get_Platform: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Code: IXMLFx_code_typeList;
    function Get_Include: IXMLFx_include_typeList;
    function Get_Newparam: IXMLCg_newparam_typeList;
    function Get_Technique: IXMLProfile_cg_type_techniqueList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Platform(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCg_newparam_type }

  TXMLCg_newparam_type = class(TXML, IXMLCg_newparam_type)
  private
    FAnnotate: IXMLFx_annotate_typeList;
  protected
    { IXMLCg_newparam_type }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Semantic: UnicodeString;
    function Get_Modifier: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Bool2x1: UnicodeString;
    function Get_Bool2x2: UnicodeString;
    function Get_Bool2x3: UnicodeString;
    function Get_Bool2x4: UnicodeString;
    function Get_Bool3x1: UnicodeString;
    function Get_Bool3x2: UnicodeString;
    function Get_Bool3x3: UnicodeString;
    function Get_Bool3x4: UnicodeString;
    function Get_Bool4x1: UnicodeString;
    function Get_Bool4x2: UnicodeString;
    function Get_Bool4x3: UnicodeString;
    function Get_Bool4x4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Int2x1: UnicodeString;
    function Get_Int2x2: UnicodeString;
    function Get_Int2x3: UnicodeString;
    function Get_Int2x4: UnicodeString;
    function Get_Int3x1: UnicodeString;
    function Get_Int3x2: UnicodeString;
    function Get_Int3x3: UnicodeString;
    function Get_Int3x4: UnicodeString;
    function Get_Int4x1: UnicodeString;
    function Get_Int4x2: UnicodeString;
    function Get_Int4x3: UnicodeString;
    function Get_Int4x4: UnicodeString;
    function Get_Half: Double;
    function Get_Half2: UnicodeString;
    function Get_Half3: UnicodeString;
    function Get_Half4: UnicodeString;
    function Get_Half2x1: UnicodeString;
    function Get_Half2x2: UnicodeString;
    function Get_Half2x3: UnicodeString;
    function Get_Half2x4: UnicodeString;
    function Get_Half3x1: UnicodeString;
    function Get_Half3x2: UnicodeString;
    function Get_Half3x3: UnicodeString;
    function Get_Half3x4: UnicodeString;
    function Get_Half4x1: UnicodeString;
    function Get_Half4x2: UnicodeString;
    function Get_Half4x3: UnicodeString;
    function Get_Half4x4: UnicodeString;
    function Get_Fixed: Double;
    function Get_Fixed2: UnicodeString;
    function Get_Fixed3: UnicodeString;
    function Get_Fixed4: UnicodeString;
    function Get_Fixed2x1: UnicodeString;
    function Get_Fixed2x2: UnicodeString;
    function Get_Fixed2x3: UnicodeString;
    function Get_Fixed2x4: UnicodeString;
    function Get_Fixed3x1: UnicodeString;
    function Get_Fixed3x2: UnicodeString;
    function Get_Fixed3x3: UnicodeString;
    function Get_Fixed3x4: UnicodeString;
    function Get_Fixed4x1: UnicodeString;
    function Get_Fixed4x2: UnicodeString;
    function Get_Fixed4x3: UnicodeString;
    function Get_Fixed4x4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_String_: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLCg_array_type;
    function Get_Usertype: IXMLCg_user_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Modifier(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Bool2x1(Value: UnicodeString);
    procedure Set_Bool2x2(Value: UnicodeString);
    procedure Set_Bool2x3(Value: UnicodeString);
    procedure Set_Bool2x4(Value: UnicodeString);
    procedure Set_Bool3x1(Value: UnicodeString);
    procedure Set_Bool3x2(Value: UnicodeString);
    procedure Set_Bool3x3(Value: UnicodeString);
    procedure Set_Bool3x4(Value: UnicodeString);
    procedure Set_Bool4x1(Value: UnicodeString);
    procedure Set_Bool4x2(Value: UnicodeString);
    procedure Set_Bool4x3(Value: UnicodeString);
    procedure Set_Bool4x4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Int2x1(Value: UnicodeString);
    procedure Set_Int2x2(Value: UnicodeString);
    procedure Set_Int2x3(Value: UnicodeString);
    procedure Set_Int2x4(Value: UnicodeString);
    procedure Set_Int3x1(Value: UnicodeString);
    procedure Set_Int3x2(Value: UnicodeString);
    procedure Set_Int3x3(Value: UnicodeString);
    procedure Set_Int3x4(Value: UnicodeString);
    procedure Set_Int4x1(Value: UnicodeString);
    procedure Set_Int4x2(Value: UnicodeString);
    procedure Set_Int4x3(Value: UnicodeString);
    procedure Set_Int4x4(Value: UnicodeString);
    procedure Set_Half(Value: Double);
    procedure Set_Half2(Value: UnicodeString);
    procedure Set_Half3(Value: UnicodeString);
    procedure Set_Half4(Value: UnicodeString);
    procedure Set_Half2x1(Value: UnicodeString);
    procedure Set_Half2x2(Value: UnicodeString);
    procedure Set_Half2x3(Value: UnicodeString);
    procedure Set_Half2x4(Value: UnicodeString);
    procedure Set_Half3x1(Value: UnicodeString);
    procedure Set_Half3x2(Value: UnicodeString);
    procedure Set_Half3x3(Value: UnicodeString);
    procedure Set_Half3x4(Value: UnicodeString);
    procedure Set_Half4x1(Value: UnicodeString);
    procedure Set_Half4x2(Value: UnicodeString);
    procedure Set_Half4x3(Value: UnicodeString);
    procedure Set_Half4x4(Value: UnicodeString);
    procedure Set_Fixed(Value: Double);
    procedure Set_Fixed2(Value: UnicodeString);
    procedure Set_Fixed3(Value: UnicodeString);
    procedure Set_Fixed4(Value: UnicodeString);
    procedure Set_Fixed2x1(Value: UnicodeString);
    procedure Set_Fixed2x2(Value: UnicodeString);
    procedure Set_Fixed2x3(Value: UnicodeString);
    procedure Set_Fixed2x4(Value: UnicodeString);
    procedure Set_Fixed3x1(Value: UnicodeString);
    procedure Set_Fixed3x2(Value: UnicodeString);
    procedure Set_Fixed3x3(Value: UnicodeString);
    procedure Set_Fixed3x4(Value: UnicodeString);
    procedure Set_Fixed4x1(Value: UnicodeString);
    procedure Set_Fixed4x2(Value: UnicodeString);
    procedure Set_Fixed4x3(Value: UnicodeString);
    procedure Set_Fixed4x4(Value: UnicodeString);
    procedure Set_String_(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCg_newparam_typeList }

  TXMLCg_newparam_typeList = class(TXMLFilter, IXMLCg_newparam_typeList)
  protected
    { IXMLCg_newparam_typeList }
    function Add: IXMLCg_newparam_type;
    function Insert(const Index: Integer): IXMLCg_newparam_type;

    function Get_Item(Index: Integer): IXMLCg_newparam_type;
  end;

{ TXMLCg_array_type }

  TXMLCg_array_type = class(TXML, IXMLCg_array_type)
  protected
    { IXMLCg_array_type }
    function Get_Length: LongWord;
    function Get_Resizable: Boolean;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Bool2x1: UnicodeString;
    function Get_Bool2x2: UnicodeString;
    function Get_Bool2x3: UnicodeString;
    function Get_Bool2x4: UnicodeString;
    function Get_Bool3x1: UnicodeString;
    function Get_Bool3x2: UnicodeString;
    function Get_Bool3x3: UnicodeString;
    function Get_Bool3x4: UnicodeString;
    function Get_Bool4x1: UnicodeString;
    function Get_Bool4x2: UnicodeString;
    function Get_Bool4x3: UnicodeString;
    function Get_Bool4x4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Int2x1: UnicodeString;
    function Get_Int2x2: UnicodeString;
    function Get_Int2x3: UnicodeString;
    function Get_Int2x4: UnicodeString;
    function Get_Int3x1: UnicodeString;
    function Get_Int3x2: UnicodeString;
    function Get_Int3x3: UnicodeString;
    function Get_Int3x4: UnicodeString;
    function Get_Int4x1: UnicodeString;
    function Get_Int4x2: UnicodeString;
    function Get_Int4x3: UnicodeString;
    function Get_Int4x4: UnicodeString;
    function Get_Half: Double;
    function Get_Half2: UnicodeString;
    function Get_Half3: UnicodeString;
    function Get_Half4: UnicodeString;
    function Get_Half2x1: UnicodeString;
    function Get_Half2x2: UnicodeString;
    function Get_Half2x3: UnicodeString;
    function Get_Half2x4: UnicodeString;
    function Get_Half3x1: UnicodeString;
    function Get_Half3x2: UnicodeString;
    function Get_Half3x3: UnicodeString;
    function Get_Half3x4: UnicodeString;
    function Get_Half4x1: UnicodeString;
    function Get_Half4x2: UnicodeString;
    function Get_Half4x3: UnicodeString;
    function Get_Half4x4: UnicodeString;
    function Get_Fixed: Double;
    function Get_Fixed2: UnicodeString;
    function Get_Fixed3: UnicodeString;
    function Get_Fixed4: UnicodeString;
    function Get_Fixed2x1: UnicodeString;
    function Get_Fixed2x2: UnicodeString;
    function Get_Fixed2x3: UnicodeString;
    function Get_Fixed2x4: UnicodeString;
    function Get_Fixed3x1: UnicodeString;
    function Get_Fixed3x2: UnicodeString;
    function Get_Fixed3x3: UnicodeString;
    function Get_Fixed3x4: UnicodeString;
    function Get_Fixed4x1: UnicodeString;
    function Get_Fixed4x2: UnicodeString;
    function Get_Fixed4x3: UnicodeString;
    function Get_Fixed4x4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_String_: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLCg_array_type;
    function Get_Usertype: IXMLCg_user_type;
    procedure Set_Length(Value: LongWord);
    procedure Set_Resizable(Value: Boolean);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Bool2x1(Value: UnicodeString);
    procedure Set_Bool2x2(Value: UnicodeString);
    procedure Set_Bool2x3(Value: UnicodeString);
    procedure Set_Bool2x4(Value: UnicodeString);
    procedure Set_Bool3x1(Value: UnicodeString);
    procedure Set_Bool3x2(Value: UnicodeString);
    procedure Set_Bool3x3(Value: UnicodeString);
    procedure Set_Bool3x4(Value: UnicodeString);
    procedure Set_Bool4x1(Value: UnicodeString);
    procedure Set_Bool4x2(Value: UnicodeString);
    procedure Set_Bool4x3(Value: UnicodeString);
    procedure Set_Bool4x4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Int2x1(Value: UnicodeString);
    procedure Set_Int2x2(Value: UnicodeString);
    procedure Set_Int2x3(Value: UnicodeString);
    procedure Set_Int2x4(Value: UnicodeString);
    procedure Set_Int3x1(Value: UnicodeString);
    procedure Set_Int3x2(Value: UnicodeString);
    procedure Set_Int3x3(Value: UnicodeString);
    procedure Set_Int3x4(Value: UnicodeString);
    procedure Set_Int4x1(Value: UnicodeString);
    procedure Set_Int4x2(Value: UnicodeString);
    procedure Set_Int4x3(Value: UnicodeString);
    procedure Set_Int4x4(Value: UnicodeString);
    procedure Set_Half(Value: Double);
    procedure Set_Half2(Value: UnicodeString);
    procedure Set_Half3(Value: UnicodeString);
    procedure Set_Half4(Value: UnicodeString);
    procedure Set_Half2x1(Value: UnicodeString);
    procedure Set_Half2x2(Value: UnicodeString);
    procedure Set_Half2x3(Value: UnicodeString);
    procedure Set_Half2x4(Value: UnicodeString);
    procedure Set_Half3x1(Value: UnicodeString);
    procedure Set_Half3x2(Value: UnicodeString);
    procedure Set_Half3x3(Value: UnicodeString);
    procedure Set_Half3x4(Value: UnicodeString);
    procedure Set_Half4x1(Value: UnicodeString);
    procedure Set_Half4x2(Value: UnicodeString);
    procedure Set_Half4x3(Value: UnicodeString);
    procedure Set_Half4x4(Value: UnicodeString);
    procedure Set_Fixed(Value: Double);
    procedure Set_Fixed2(Value: UnicodeString);
    procedure Set_Fixed3(Value: UnicodeString);
    procedure Set_Fixed4(Value: UnicodeString);
    procedure Set_Fixed2x1(Value: UnicodeString);
    procedure Set_Fixed2x2(Value: UnicodeString);
    procedure Set_Fixed2x3(Value: UnicodeString);
    procedure Set_Fixed2x4(Value: UnicodeString);
    procedure Set_Fixed3x1(Value: UnicodeString);
    procedure Set_Fixed3x2(Value: UnicodeString);
    procedure Set_Fixed3x3(Value: UnicodeString);
    procedure Set_Fixed3x4(Value: UnicodeString);
    procedure Set_Fixed4x1(Value: UnicodeString);
    procedure Set_Fixed4x2(Value: UnicodeString);
    procedure Set_Fixed4x3(Value: UnicodeString);
    procedure Set_Fixed4x4(Value: UnicodeString);
    procedure Set_String_(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCg_user_type }

  TXMLCg_user_type = class(TXMLFilter, IXMLCg_user_type)
  protected
    { IXMLCg_user_type }
    function Get_Typename: UnicodeString;
    function Get_Source: UnicodeString;
    function Get_Setparam(Index: Integer): IXMLCg_setparam_type;
    procedure Set_Typename(Value: UnicodeString);
    procedure Set_Source(Value: UnicodeString);
    function Add: IXMLCg_setparam_type;
    function Insert(const Index: Integer): IXMLCg_setparam_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCg_setparam_type }

  TXMLCg_setparam_type = class(TXML, IXMLCg_setparam_type)
  protected
    { IXMLCg_setparam_type }
    function Get_Ref: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Bool2x1: UnicodeString;
    function Get_Bool2x2: UnicodeString;
    function Get_Bool2x3: UnicodeString;
    function Get_Bool2x4: UnicodeString;
    function Get_Bool3x1: UnicodeString;
    function Get_Bool3x2: UnicodeString;
    function Get_Bool3x3: UnicodeString;
    function Get_Bool3x4: UnicodeString;
    function Get_Bool4x1: UnicodeString;
    function Get_Bool4x2: UnicodeString;
    function Get_Bool4x3: UnicodeString;
    function Get_Bool4x4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Int2x1: UnicodeString;
    function Get_Int2x2: UnicodeString;
    function Get_Int2x3: UnicodeString;
    function Get_Int2x4: UnicodeString;
    function Get_Int3x1: UnicodeString;
    function Get_Int3x2: UnicodeString;
    function Get_Int3x3: UnicodeString;
    function Get_Int3x4: UnicodeString;
    function Get_Int4x1: UnicodeString;
    function Get_Int4x2: UnicodeString;
    function Get_Int4x3: UnicodeString;
    function Get_Int4x4: UnicodeString;
    function Get_Half: Double;
    function Get_Half2: UnicodeString;
    function Get_Half3: UnicodeString;
    function Get_Half4: UnicodeString;
    function Get_Half2x1: UnicodeString;
    function Get_Half2x2: UnicodeString;
    function Get_Half2x3: UnicodeString;
    function Get_Half2x4: UnicodeString;
    function Get_Half3x1: UnicodeString;
    function Get_Half3x2: UnicodeString;
    function Get_Half3x3: UnicodeString;
    function Get_Half3x4: UnicodeString;
    function Get_Half4x1: UnicodeString;
    function Get_Half4x2: UnicodeString;
    function Get_Half4x3: UnicodeString;
    function Get_Half4x4: UnicodeString;
    function Get_Fixed: Double;
    function Get_Fixed2: UnicodeString;
    function Get_Fixed3: UnicodeString;
    function Get_Fixed4: UnicodeString;
    function Get_Fixed2x1: UnicodeString;
    function Get_Fixed2x2: UnicodeString;
    function Get_Fixed2x3: UnicodeString;
    function Get_Fixed2x4: UnicodeString;
    function Get_Fixed3x1: UnicodeString;
    function Get_Fixed3x2: UnicodeString;
    function Get_Fixed3x3: UnicodeString;
    function Get_Fixed3x4: UnicodeString;
    function Get_Fixed4x1: UnicodeString;
    function Get_Fixed4x2: UnicodeString;
    function Get_Fixed4x3: UnicodeString;
    function Get_Fixed4x4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_String_: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLCg_array_type;
    function Get_Usertype: IXMLCg_user_type;
    procedure Set_Ref(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Bool2x1(Value: UnicodeString);
    procedure Set_Bool2x2(Value: UnicodeString);
    procedure Set_Bool2x3(Value: UnicodeString);
    procedure Set_Bool2x4(Value: UnicodeString);
    procedure Set_Bool3x1(Value: UnicodeString);
    procedure Set_Bool3x2(Value: UnicodeString);
    procedure Set_Bool3x3(Value: UnicodeString);
    procedure Set_Bool3x4(Value: UnicodeString);
    procedure Set_Bool4x1(Value: UnicodeString);
    procedure Set_Bool4x2(Value: UnicodeString);
    procedure Set_Bool4x3(Value: UnicodeString);
    procedure Set_Bool4x4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Int2x1(Value: UnicodeString);
    procedure Set_Int2x2(Value: UnicodeString);
    procedure Set_Int2x3(Value: UnicodeString);
    procedure Set_Int2x4(Value: UnicodeString);
    procedure Set_Int3x1(Value: UnicodeString);
    procedure Set_Int3x2(Value: UnicodeString);
    procedure Set_Int3x3(Value: UnicodeString);
    procedure Set_Int3x4(Value: UnicodeString);
    procedure Set_Int4x1(Value: UnicodeString);
    procedure Set_Int4x2(Value: UnicodeString);
    procedure Set_Int4x3(Value: UnicodeString);
    procedure Set_Int4x4(Value: UnicodeString);
    procedure Set_Half(Value: Double);
    procedure Set_Half2(Value: UnicodeString);
    procedure Set_Half3(Value: UnicodeString);
    procedure Set_Half4(Value: UnicodeString);
    procedure Set_Half2x1(Value: UnicodeString);
    procedure Set_Half2x2(Value: UnicodeString);
    procedure Set_Half2x3(Value: UnicodeString);
    procedure Set_Half2x4(Value: UnicodeString);
    procedure Set_Half3x1(Value: UnicodeString);
    procedure Set_Half3x2(Value: UnicodeString);
    procedure Set_Half3x3(Value: UnicodeString);
    procedure Set_Half3x4(Value: UnicodeString);
    procedure Set_Half4x1(Value: UnicodeString);
    procedure Set_Half4x2(Value: UnicodeString);
    procedure Set_Half4x3(Value: UnicodeString);
    procedure Set_Half4x4(Value: UnicodeString);
    procedure Set_Fixed(Value: Double);
    procedure Set_Fixed2(Value: UnicodeString);
    procedure Set_Fixed3(Value: UnicodeString);
    procedure Set_Fixed4(Value: UnicodeString);
    procedure Set_Fixed2x1(Value: UnicodeString);
    procedure Set_Fixed2x2(Value: UnicodeString);
    procedure Set_Fixed2x3(Value: UnicodeString);
    procedure Set_Fixed2x4(Value: UnicodeString);
    procedure Set_Fixed3x1(Value: UnicodeString);
    procedure Set_Fixed3x2(Value: UnicodeString);
    procedure Set_Fixed3x3(Value: UnicodeString);
    procedure Set_Fixed3x4(Value: UnicodeString);
    procedure Set_Fixed4x1(Value: UnicodeString);
    procedure Set_Fixed4x2(Value: UnicodeString);
    procedure Set_Fixed4x3(Value: UnicodeString);
    procedure Set_Fixed4x4(Value: UnicodeString);
    procedure Set_String_(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_cg_type_technique }

  TXMLProfile_cg_type_technique = class(TXML, IXMLProfile_cg_type_technique)
  private
    FAnnotate: IXMLFx_annotate_typeList;
    FPass: IXMLCg_pass_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_cg_type_technique }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Pass: IXMLCg_pass_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_cg_type_techniqueList }

  TXMLProfile_cg_type_techniqueList = class(TXMLFilter, IXMLProfile_cg_type_techniqueList)
  protected
    { IXMLProfile_cg_type_techniqueList }
    function Add: IXMLProfile_cg_type_technique;
    function Insert(const Index: Integer): IXMLProfile_cg_type_technique;

    function Get_Item(Index: Integer): IXMLProfile_cg_type_technique;
  end;

{ TXMLCg_pass_type }

  TXMLCg_pass_type = class(TXML, IXMLCg_pass_type)
  private
    FAnnotate: IXMLFx_annotate_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLCg_pass_type }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_States: IXMLCg_pass_type_states;
    function Get_Program_: IXMLCg_pass_type_program;
    function Get_Evaluate: IXMLCg_pass_type_evaluate;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCg_pass_typeList }

  TXMLCg_pass_typeList = class(TXMLFilter, IXMLCg_pass_typeList)
  protected
    { IXMLCg_pass_typeList }
    function Add: IXMLCg_pass_type;
    function Insert(const Index: Integer): IXMLCg_pass_type;

    function Get_Item(Index: Integer): IXMLCg_pass_type;
  end;

{ TXMLCg_pass_type_states }

  TXMLCg_pass_type_states = class(TXML, IXMLCg_pass_type_states)
  protected
    { IXMLCg_pass_type_states }
    function Get_Alpha_func: IXMLAlpha_func;
    function Get_Blend_func: IXMLBlend_func;
    function Get_Blend_func_separate: IXMLBlend_func_separate;
    function Get_Blend_equation: IXMLBlend_equation;
    function Get_Blend_equation_separate: IXMLBlend_equation_separate;
    function Get_Color_material: IXMLColor_material;
    function Get_Cull_face: IXMLCull_face;
    function Get_Depth_func: IXMLDepth_func;
    function Get_Fog_mode: IXMLFog_mode;
    function Get_Fog_coord_src: IXMLFog_coord_src;
    function Get_Front_face: IXMLFront_face;
    function Get_Light_model_color_control: IXMLLight_model_color_control;
    function Get_Logic_op: IXMLLogic_op;
    function Get_Polygon_mode: IXMLPolygon_mode;
    function Get_Shade_model: IXMLShade_model;
    function Get_Stencil_func: IXMLStencil_func;
    function Get_Stencil_op: IXMLStencil_op;
    function Get_Stencil_func_separate: IXMLStencil_func_separate;
    function Get_Stencil_op_separate: IXMLStencil_op_separate;
    function Get_Stencil_mask_separate: IXMLStencil_mask_separate;
    function Get_Light_enable: IXMLLight_enable;
    function Get_Light_ambient: IXMLLight_ambient;
    function Get_Light_diffuse: IXMLLight_diffuse;
    function Get_Light_specular: IXMLLight_specular;
    function Get_Light_position: IXMLLight_position;
    function Get_Light_constant_attenuation: IXMLLight_constant_attenuation;
    function Get_Light_linear_attenuation: IXMLLight_linear_attenuation;
    function Get_Light_quadratic_attenuation: IXMLLight_quadratic_attenuation;
    function Get_Light_spot_cutoff: IXMLLight_spot_cutoff;
    function Get_Light_spot_direction: IXMLLight_spot_direction;
    function Get_Light_spot_exponent: IXMLLight_spot_exponent;
    function Get_Texture1D: IXMLTexture1D;
    function Get_Texture2D: IXMLTexture2D;
    function Get_Texture3D: IXMLTexture3D;
    function Get_TextureCUBE: IXMLTextureCUBE;
    function Get_TextureRECT: IXMLTextureRECT;
    function Get_TextureDEPTH: IXMLTextureDEPTH;
    function Get_Texture1D_enable: IXMLTexture1D_enable;
    function Get_Texture2D_enable: IXMLTexture2D_enable;
    function Get_Texture3D_enable: IXMLTexture3D_enable;
    function Get_TextureCUBE_enable: IXMLTextureCUBE_enable;
    function Get_TextureRECT_enable: IXMLTextureRECT_enable;
    function Get_TextureDEPTH_enable: IXMLTextureDEPTH_enable;
    function Get_Texture_env_color: IXMLTexture_env_color;
    function Get_Texture_env_mode: IXMLTexture_env_mode;
    function Get_Clip_plane: IXMLClip_plane;
    function Get_Clip_plane_enable: IXMLClip_plane_enable;
    function Get_Blend_color: IXMLBlend_color;
    function Get_Color_mask: IXMLColor_mask;
    function Get_Depth_bounds: IXMLDepth_bounds;
    function Get_Depth_mask: IXMLDepth_mask;
    function Get_Depth_range: IXMLDepth_range;
    function Get_Fog_density: IXMLFog_density;
    function Get_Fog_start: IXMLFog_start;
    function Get_Fog_end: IXMLFog_end;
    function Get_Fog_color: IXMLFog_color;
    function Get_Light_model_ambient: IXMLLight_model_ambient;
    function Get_Lighting_enable: IXMLLighting_enable;
    function Get_Line_stipple: IXMLLine_stipple;
    function Get_Line_width: IXMLLine_width;
    function Get_Material_ambient: IXMLMaterial_ambient;
    function Get_Material_diffuse: IXMLMaterial_diffuse;
    function Get_Material_emission: IXMLMaterial_emission;
    function Get_Material_shininess: IXMLMaterial_shininess;
    function Get_Material_specular: IXMLMaterial_specular;
    function Get_Model_view_matrix: IXMLModel_view_matrix;
    function Get_Point_distance_attenuation: IXMLPoint_distance_attenuation;
    function Get_Point_fade_threshold_size: IXMLPoint_fade_threshold_size;
    function Get_Point_size: IXMLPoint_size;
    function Get_Point_size_min: IXMLPoint_size_min;
    function Get_Point_size_max: IXMLPoint_size_max;
    function Get_Polygon_offset: IXMLPolygon_offset;
    function Get_Projection_matrix: IXMLProjection_matrix;
    function Get_Scissor: IXMLScissor;
    function Get_Stencil_mask: IXMLStencil_mask;
    function Get_Alpha_test_enable: IXMLAlpha_test_enable;
    function Get_Blend_enable: IXMLBlend_enable;
    function Get_Color_logic_op_enable: IXMLColor_logic_op_enable;
    function Get_Color_material_enable: IXMLColor_material_enable;
    function Get_Cull_face_enable: IXMLCull_face_enable;
    function Get_Depth_bounds_enable: IXMLDepth_bounds_enable;
    function Get_Depth_clamp_enable: IXMLDepth_clamp_enable;
    function Get_Depth_test_enable: IXMLDepth_test_enable;
    function Get_Dither_enable: IXMLDither_enable;
    function Get_Fog_enable: IXMLFog_enable;
    function Get_Light_model_local_viewer_enable: IXMLLight_model_local_viewer_enable;
    function Get_Light_model_two_side_enable: IXMLLight_model_two_side_enable;
    function Get_Line_smooth_enable: IXMLLine_smooth_enable;
    function Get_Line_stipple_enable: IXMLLine_stipple_enable;
    function Get_Logic_op_enable: IXMLLogic_op_enable;
    function Get_Multisample_enable: IXMLMultisample_enable;
    function Get_Normalize_enable: IXMLNormalize_enable;
    function Get_Point_smooth_enable: IXMLPoint_smooth_enable;
    function Get_Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable;
    function Get_Polygon_offset_line_enable: IXMLPolygon_offset_line_enable;
    function Get_Polygon_offset_point_enable: IXMLPolygon_offset_point_enable;
    function Get_Polygon_smooth_enable: IXMLPolygon_smooth_enable;
    function Get_Polygon_stipple_enable: IXMLPolygon_stipple_enable;
    function Get_Rescale_normal_enable: IXMLRescale_normal_enable;
    function Get_Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable;
    function Get_Sample_alpha_to_one_enable: IXMLSample_alpha_to_one_enable;
    function Get_Sample_coverage_enable: IXMLSample_coverage_enable;
    function Get_Scissor_test_enable: IXMLScissor_test_enable;
    function Get_Stencil_test_enable: IXMLStencil_test_enable;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCg_pass_type_program }

  TXMLCg_pass_type_program = class(TXMLFilter, IXMLCg_pass_type_program)
  protected
    { IXMLCg_pass_type_program }
    function Get_Shader(Index: Integer): IXMLCg_pass_type_program_shader;
    function Add: IXMLCg_pass_type_program_shader;
    function Insert(const Index: Integer): IXMLCg_pass_type_program_shader;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCg_pass_type_program_shader }

  TXMLCg_pass_type_program_shader = class(TXML, IXMLCg_pass_type_program_shader)
  private
    FCompiler: IXMLFx_target_typeList;
    FBind_uniform: IXMLCg_pass_type_program_shader_bind_uniformList;
  protected
    { IXMLCg_pass_type_program_shader }
    function Get_Stage: UnicodeString;
    function Get_Sources: IXMLCg_pass_type_program_shader_sources;
    function Get_Compiler: IXMLFx_target_typeList;
    function Get_Bind_uniform: IXMLCg_pass_type_program_shader_bind_uniformList;
    procedure Set_Stage(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCg_pass_type_program_shader_sources }

  TXMLCg_pass_type_program_shader_sources = class(TXMLFx_sources_type, IXMLCg_pass_type_program_shader_sources)
  protected
    { IXMLCg_pass_type_program_shader_sources }
    function Get_Entry: UnicodeString;
    procedure Set_Entry(Value: UnicodeString);
  end;

{ TXMLCg_pass_type_program_shader_bind_uniform }

  TXMLCg_pass_type_program_shader_bind_uniform = class(TXML, IXMLCg_pass_type_program_shader_bind_uniform)
  protected
    { IXMLCg_pass_type_program_shader_bind_uniform }
    function Get_Symbol: UnicodeString;
    function Get_Param: IXMLCg_pass_type_program_shader_bind_uniform_param;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Bool2x1: UnicodeString;
    function Get_Bool2x2: UnicodeString;
    function Get_Bool2x3: UnicodeString;
    function Get_Bool2x4: UnicodeString;
    function Get_Bool3x1: UnicodeString;
    function Get_Bool3x2: UnicodeString;
    function Get_Bool3x3: UnicodeString;
    function Get_Bool3x4: UnicodeString;
    function Get_Bool4x1: UnicodeString;
    function Get_Bool4x2: UnicodeString;
    function Get_Bool4x3: UnicodeString;
    function Get_Bool4x4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Int2x1: UnicodeString;
    function Get_Int2x2: UnicodeString;
    function Get_Int2x3: UnicodeString;
    function Get_Int2x4: UnicodeString;
    function Get_Int3x1: UnicodeString;
    function Get_Int3x2: UnicodeString;
    function Get_Int3x3: UnicodeString;
    function Get_Int3x4: UnicodeString;
    function Get_Int4x1: UnicodeString;
    function Get_Int4x2: UnicodeString;
    function Get_Int4x3: UnicodeString;
    function Get_Int4x4: UnicodeString;
    function Get_Half: Double;
    function Get_Half2: UnicodeString;
    function Get_Half3: UnicodeString;
    function Get_Half4: UnicodeString;
    function Get_Half2x1: UnicodeString;
    function Get_Half2x2: UnicodeString;
    function Get_Half2x3: UnicodeString;
    function Get_Half2x4: UnicodeString;
    function Get_Half3x1: UnicodeString;
    function Get_Half3x2: UnicodeString;
    function Get_Half3x3: UnicodeString;
    function Get_Half3x4: UnicodeString;
    function Get_Half4x1: UnicodeString;
    function Get_Half4x2: UnicodeString;
    function Get_Half4x3: UnicodeString;
    function Get_Half4x4: UnicodeString;
    function Get_Fixed: Double;
    function Get_Fixed2: UnicodeString;
    function Get_Fixed3: UnicodeString;
    function Get_Fixed4: UnicodeString;
    function Get_Fixed2x1: UnicodeString;
    function Get_Fixed2x2: UnicodeString;
    function Get_Fixed2x3: UnicodeString;
    function Get_Fixed2x4: UnicodeString;
    function Get_Fixed3x1: UnicodeString;
    function Get_Fixed3x2: UnicodeString;
    function Get_Fixed3x3: UnicodeString;
    function Get_Fixed3x4: UnicodeString;
    function Get_Fixed4x1: UnicodeString;
    function Get_Fixed4x2: UnicodeString;
    function Get_Fixed4x3: UnicodeString;
    function Get_Fixed4x4: UnicodeString;
    function Get_Sampler1D: IXMLFx_sampler1D_type;
    function Get_Sampler2D: IXMLFx_sampler2D_type;
    function Get_Sampler3D: IXMLFx_sampler3D_type;
    function Get_SamplerRECT: IXMLFx_samplerRECT_type;
    function Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
    function Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
    function Get_String_: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Array_: IXMLCg_array_type;
    function Get_Usertype: IXMLCg_user_type;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Bool2x1(Value: UnicodeString);
    procedure Set_Bool2x2(Value: UnicodeString);
    procedure Set_Bool2x3(Value: UnicodeString);
    procedure Set_Bool2x4(Value: UnicodeString);
    procedure Set_Bool3x1(Value: UnicodeString);
    procedure Set_Bool3x2(Value: UnicodeString);
    procedure Set_Bool3x3(Value: UnicodeString);
    procedure Set_Bool3x4(Value: UnicodeString);
    procedure Set_Bool4x1(Value: UnicodeString);
    procedure Set_Bool4x2(Value: UnicodeString);
    procedure Set_Bool4x3(Value: UnicodeString);
    procedure Set_Bool4x4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Int2x1(Value: UnicodeString);
    procedure Set_Int2x2(Value: UnicodeString);
    procedure Set_Int2x3(Value: UnicodeString);
    procedure Set_Int2x4(Value: UnicodeString);
    procedure Set_Int3x1(Value: UnicodeString);
    procedure Set_Int3x2(Value: UnicodeString);
    procedure Set_Int3x3(Value: UnicodeString);
    procedure Set_Int3x4(Value: UnicodeString);
    procedure Set_Int4x1(Value: UnicodeString);
    procedure Set_Int4x2(Value: UnicodeString);
    procedure Set_Int4x3(Value: UnicodeString);
    procedure Set_Int4x4(Value: UnicodeString);
    procedure Set_Half(Value: Double);
    procedure Set_Half2(Value: UnicodeString);
    procedure Set_Half3(Value: UnicodeString);
    procedure Set_Half4(Value: UnicodeString);
    procedure Set_Half2x1(Value: UnicodeString);
    procedure Set_Half2x2(Value: UnicodeString);
    procedure Set_Half2x3(Value: UnicodeString);
    procedure Set_Half2x4(Value: UnicodeString);
    procedure Set_Half3x1(Value: UnicodeString);
    procedure Set_Half3x2(Value: UnicodeString);
    procedure Set_Half3x3(Value: UnicodeString);
    procedure Set_Half3x4(Value: UnicodeString);
    procedure Set_Half4x1(Value: UnicodeString);
    procedure Set_Half4x2(Value: UnicodeString);
    procedure Set_Half4x3(Value: UnicodeString);
    procedure Set_Half4x4(Value: UnicodeString);
    procedure Set_Fixed(Value: Double);
    procedure Set_Fixed2(Value: UnicodeString);
    procedure Set_Fixed3(Value: UnicodeString);
    procedure Set_Fixed4(Value: UnicodeString);
    procedure Set_Fixed2x1(Value: UnicodeString);
    procedure Set_Fixed2x2(Value: UnicodeString);
    procedure Set_Fixed2x3(Value: UnicodeString);
    procedure Set_Fixed2x4(Value: UnicodeString);
    procedure Set_Fixed3x1(Value: UnicodeString);
    procedure Set_Fixed3x2(Value: UnicodeString);
    procedure Set_Fixed3x3(Value: UnicodeString);
    procedure Set_Fixed3x4(Value: UnicodeString);
    procedure Set_Fixed4x1(Value: UnicodeString);
    procedure Set_Fixed4x2(Value: UnicodeString);
    procedure Set_Fixed4x3(Value: UnicodeString);
    procedure Set_Fixed4x4(Value: UnicodeString);
    procedure Set_String_(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCg_pass_type_program_shader_bind_uniformList }

  TXMLCg_pass_type_program_shader_bind_uniformList = class(TXMLFilter, IXMLCg_pass_type_program_shader_bind_uniformList)
  protected
    { IXMLCg_pass_type_program_shader_bind_uniformList }
    function Add: IXMLCg_pass_type_program_shader_bind_uniform;
    function Insert(const Index: Integer): IXMLCg_pass_type_program_shader_bind_uniform;

    function Get_Item(Index: Integer): IXMLCg_pass_type_program_shader_bind_uniform;
  end;

{ TXMLCg_pass_type_program_shader_bind_uniform_param }

  TXMLCg_pass_type_program_shader_bind_uniform_param = class(TXML, IXMLCg_pass_type_program_shader_bind_uniform_param)
  protected
    { IXMLCg_pass_type_program_shader_bind_uniform_param }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
  end;

{ TXMLCg_pass_type_evaluate }

  TXMLCg_pass_type_evaluate = class(TXML, IXMLCg_pass_type_evaluate)
  private
    FColor_target: IXMLFx_colortarget_typeList;
    FDepth_target: IXMLFx_depthtarget_typeList;
    FStencil_target: IXMLFx_stenciltarget_typeList;
    FColor_clear: IXMLFx_clearcolor_typeList;
    FDepth_clear: IXMLFx_cleardepth_typeList;
    FStencil_clear: IXMLFx_clearstencil_typeList;
  protected
    { IXMLCg_pass_type_evaluate }
    function Get_Color_target: IXMLFx_colortarget_typeList;
    function Get_Depth_target: IXMLFx_depthtarget_typeList;
    function Get_Stencil_target: IXMLFx_stenciltarget_typeList;
    function Get_Color_clear: IXMLFx_clearcolor_typeList;
    function Get_Depth_clear: IXMLFx_cleardepth_typeList;
    function Get_Stencil_clear: IXMLFx_clearstencil_typeList;
    function Get_Draw: UnicodeString;
    procedure Set_Draw(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_gles_type }

  TXMLProfile_gles_type = class(TXML, IXMLProfile_gles_type)
  private
    FNewparam: IXMLGles_newparam_typeList;
    FTechnique: IXMLProfile_gles_type_techniqueList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_gles_type }
    function Get_Id: UnicodeString;
    function Get_Platform: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Newparam: IXMLGles_newparam_typeList;
    function Get_Technique: IXMLProfile_gles_type_techniqueList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Platform(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles_newparam_type }

  TXMLGles_newparam_type = class(TXML, IXMLGles_newparam_type)
  private
    FAnnotate: IXMLFx_annotate_typeList;
  protected
    { IXMLGles_newparam_type }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Semantic: UnicodeString;
    function Get_Modifier: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float1x1: Double;
    function Get_Float1x2: UnicodeString;
    function Get_Float1x3: UnicodeString;
    function Get_Float1x4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Sampler2D: IXMLGles_sampler_type;
    function Get_Enum: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Modifier(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float1x1(Value: Double);
    procedure Set_Float1x2(Value: UnicodeString);
    procedure Set_Float1x3(Value: UnicodeString);
    procedure Set_Float1x4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles_newparam_typeList }

  TXMLGles_newparam_typeList = class(TXMLFilter, IXMLGles_newparam_typeList)
  protected
    { IXMLGles_newparam_typeList }
    function Add: IXMLGles_newparam_type;
    function Insert(const Index: Integer): IXMLGles_newparam_type;

    function Get_Item(Index: Integer): IXMLGles_newparam_type;
  end;

{ TXMLGles_sampler_type }

  TXMLGles_sampler_type = class(TXML, IXMLGles_sampler_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLGles_sampler_type }
    function Get_Instance_image: IXMLInstance_image_type;
    function Get_Texcoord: IXMLGles_sampler_type_texcoord;
    function Get_Wrap_s: UnicodeString;
    function Get_Wrap_t: UnicodeString;
    function Get_Minfilter: UnicodeString;
    function Get_Magfilter: UnicodeString;
    function Get_Mipfilter: UnicodeString;
    function Get_Mip_max_level: Byte;
    function Get_Mip_bias: Single;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Wrap_s(Value: UnicodeString);
    procedure Set_Wrap_t(Value: UnicodeString);
    procedure Set_Minfilter(Value: UnicodeString);
    procedure Set_Magfilter(Value: UnicodeString);
    procedure Set_Mipfilter(Value: UnicodeString);
    procedure Set_Mip_max_level(Value: Byte);
    procedure Set_Mip_bias(Value: Single);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles_sampler_type_texcoord }

  TXMLGles_sampler_type_texcoord = class(TXML, IXMLGles_sampler_type_texcoord)
  protected
    { IXMLGles_sampler_type_texcoord }
    function Get_Semantic: UnicodeString;
    procedure Set_Semantic(Value: UnicodeString);
  end;

{ TXMLProfile_gles_type_technique }

  TXMLProfile_gles_type_technique = class(TXML, IXMLProfile_gles_type_technique)
  private
    FAnnotate: IXMLFx_annotate_typeList;
    FPass: IXMLProfile_gles_type_technique_passList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_gles_type_technique }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_Pass: IXMLProfile_gles_type_technique_passList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_gles_type_techniqueList }

  TXMLProfile_gles_type_techniqueList = class(TXMLFilter, IXMLProfile_gles_type_techniqueList)
  protected
    { IXMLProfile_gles_type_techniqueList }
    function Add: IXMLProfile_gles_type_technique;
    function Insert(const Index: Integer): IXMLProfile_gles_type_technique;

    function Get_Item(Index: Integer): IXMLProfile_gles_type_technique;
  end;

{ TXMLProfile_gles_type_technique_pass }

  TXMLProfile_gles_type_technique_pass = class(TXML, IXMLProfile_gles_type_technique_pass)
  private
    FAnnotate: IXMLFx_annotate_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLProfile_gles_type_technique_pass }
    function Get_Sid: UnicodeString;
    function Get_Annotate: IXMLFx_annotate_typeList;
    function Get_States: IXMLProfile_gles_type_technique_pass_states;
    function Get_Evaluate: IXMLProfile_gles_type_technique_pass_evaluate;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLProfile_gles_type_technique_passList }

  TXMLProfile_gles_type_technique_passList = class(TXMLFilter, IXMLProfile_gles_type_technique_passList)
  protected
    { IXMLProfile_gles_type_technique_passList }
    function Add: IXMLProfile_gles_type_technique_pass;
    function Insert(const Index: Integer): IXMLProfile_gles_type_technique_pass;

    function Get_Item(Index: Integer): IXMLProfile_gles_type_technique_pass;
  end;

{ TXMLProfile_gles_type_technique_pass_states }

  TXMLProfile_gles_type_technique_pass_states = class(TXML, IXMLProfile_gles_type_technique_pass_states)
  protected
    { IXMLProfile_gles_type_technique_pass_states }
    function Get_Alpha_func: IXMLAlpha_func;
    function Get_Blend_func: IXMLBlend_func;
    function Get_Clip_plane: IXMLClip_plane;
    function Get_Color_mask: IXMLColor_mask;
    function Get_Cull_face: IXMLCull_face;
    function Get_Depth_func: IXMLDepth_func;
    function Get_Depth_mask: IXMLDepth_mask;
    function Get_Depth_range: IXMLDepth_range;
    function Get_Fog_color: IXMLFog_color;
    function Get_Fog_density: IXMLFog_density;
    function Get_Fog_mode: IXMLFog_mode;
    function Get_Fog_start: IXMLFog_start;
    function Get_Fog_end: IXMLFog_end;
    function Get_Front_face: IXMLFront_face;
    function Get_Logic_op: IXMLLogic_op;
    function Get_Light_ambient: IXMLLight_ambient;
    function Get_Light_diffuse: IXMLLight_diffuse;
    function Get_Light_specular: IXMLLight_specular;
    function Get_Light_position: IXMLLight_position;
    function Get_Light_constant_attenuation: IXMLLight_constant_attenuation;
    function Get_Light_linear_attenuation: IXMLLight_linear_attenuation;
    function Get_Light_quadratic_attenuation: IXMLLight_quadratic_attenuation;
    function Get_Light_spot_cutoff: IXMLLight_spot_cutoff;
    function Get_Light_spot_direction: IXMLLight_spot_direction;
    function Get_Light_spot_exponent: IXMLLight_spot_exponent;
    function Get_Light_model_ambient: IXMLLight_model_ambient;
    function Get_Line_width: IXMLLine_width;
    function Get_Material_ambient: IXMLMaterial_ambient;
    function Get_Material_diffuse: IXMLMaterial_diffuse;
    function Get_Material_emission: IXMLMaterial_emission;
    function Get_Material_shininess: IXMLMaterial_shininess;
    function Get_Material_specular: IXMLMaterial_specular;
    function Get_Model_view_matrix: IXMLModel_view_matrix;
    function Get_Point_distance_attenuation: IXMLPoint_distance_attenuation;
    function Get_Point_fade_threshold_size: IXMLPoint_fade_threshold_size;
    function Get_Point_size: IXMLPoint_size;
    function Get_Point_size_min: IXMLPoint_size_min;
    function Get_Point_size_max: IXMLPoint_size_max;
    function Get_Polygon_offset: IXMLPolygon_offset;
    function Get_Projection_matrix: IXMLProjection_matrix;
    function Get_Scissor: IXMLScissor;
    function Get_Shade_model: IXMLShade_model;
    function Get_Stencil_func: IXMLStencil_func;
    function Get_Stencil_mask: IXMLStencil_mask;
    function Get_Stencil_op: IXMLStencil_op;
    function Get_Texture_pipeline: IXMLTexture_pipeline;
    function Get_Alpha_test_enable: IXMLAlpha_test_enable;
    function Get_Blend_enable: IXMLBlend_enable;
    function Get_Clip_plane_enable: IXMLClip_plane_enable;
    function Get_Color_logic_op_enable: IXMLColor_logic_op_enable;
    function Get_Color_material_enable: IXMLColor_material_enable;
    function Get_Cull_face_enable: IXMLCull_face_enable;
    function Get_Depth_test_enable: IXMLDepth_test_enable;
    function Get_Dither_enable: IXMLDither_enable;
    function Get_Fog_enable: IXMLFog_enable;
    function Get_Light_enable: IXMLLight_enable;
    function Get_Lighting_enable: IXMLLighting_enable;
    function Get_Light_model_two_side_enable: IXMLLight_model_two_side_enable;
    function Get_Line_smooth_enable: IXMLLine_smooth_enable;
    function Get_Multisample_enable: IXMLMultisample_enable;
    function Get_Normalize_enable: IXMLNormalize_enable;
    function Get_Point_smooth_enable: IXMLPoint_smooth_enable;
    function Get_Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable;
    function Get_Rescale_normal_enable: IXMLRescale_normal_enable;
    function Get_Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable;
    function Get_Sample_alpha_to_one_enable: IXMLSample_alpha_to_one_enable;
    function Get_Sample_coverage_enable: IXMLSample_coverage_enable;
    function Get_Scissor_test_enable: IXMLScissor_test_enable;
    function Get_Stencil_test_enable: IXMLStencil_test_enable;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTexture_pipeline }

  TXMLTexture_pipeline = class(TXML, IXMLTexture_pipeline)
  protected
    { IXMLTexture_pipeline }
    function Get_Value: IXMLGles_texture_pipeline_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles_texture_pipeline_type }

  TXMLGles_texture_pipeline_type = class(TXML, IXMLGles_texture_pipeline_type)
  private
    FTexcombiner: IXMLGles_texcombiner_command_typeList;
    FTexenv: IXMLGles_texenv_command_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLGles_texture_pipeline_type }
    function Get_Sid: UnicodeString;
    function Get_Texcombiner: IXMLGles_texcombiner_command_typeList;
    function Get_Texenv: IXMLGles_texenv_command_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles_texcombiner_command_type }

  TXMLGles_texcombiner_command_type = class(TXML, IXMLGles_texcombiner_command_type)
  protected
    { IXMLGles_texcombiner_command_type }
    function Get_Constant: IXMLGles_texture_constant_type;
    function Get_RGB: IXMLGles_texcombiner_command_rgb_type;
    function Get_Alpha: IXMLGles_texcombiner_command_alpha_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles_texcombiner_command_typeList }

  TXMLGles_texcombiner_command_typeList = class(TXMLFilter, IXMLGles_texcombiner_command_typeList)
  protected
    { IXMLGles_texcombiner_command_typeList }
    function Add: IXMLGles_texcombiner_command_type;
    function Insert(const Index: Integer): IXMLGles_texcombiner_command_type;

    function Get_Item(Index: Integer): IXMLGles_texcombiner_command_type;
  end;

{ TXMLGles_texture_constant_type }

  TXMLGles_texture_constant_type = class(TXML, IXMLGles_texture_constant_type)
  protected
    { IXMLGles_texture_constant_type }
    function Get_Value: UnicodeString;
    function Get_Param: UnicodeString;
    procedure Set_Value(Value: UnicodeString);
    procedure Set_Param(Value: UnicodeString);
  end;

{ TXMLGles_texcombiner_command_rgb_type }

  TXMLGles_texcombiner_command_rgb_type = class(TXMLFilter, IXMLGles_texcombiner_command_rgb_type)
  protected
    { IXMLGles_texcombiner_command_rgb_type }
    function Get_Operator_: UnicodeString;
    function Get_Scale: Single;
    function Get_Argument(Index: Integer): IXMLGles_texcombiner_argument_rgb_type;
    procedure Set_Operator_(Value: UnicodeString);
    procedure Set_Scale(Value: Single);
    function Add: IXMLGles_texcombiner_argument_rgb_type;
    function Insert(const Index: Integer): IXMLGles_texcombiner_argument_rgb_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles_texcombiner_argument_rgb_type }

  TXMLGles_texcombiner_argument_rgb_type = class(TXML, IXMLGles_texcombiner_argument_rgb_type)
  protected
    { IXMLGles_texcombiner_argument_rgb_type }
    function Get_Source: UnicodeString;
    function Get_Operand: UnicodeString;
    function Get_Sampler: UnicodeString;
    procedure Set_Source(Value: UnicodeString);
    procedure Set_Operand(Value: UnicodeString);
    procedure Set_Sampler(Value: UnicodeString);
  end;

{ TXMLGles_texcombiner_command_alpha_type }

  TXMLGles_texcombiner_command_alpha_type = class(TXMLFilter, IXMLGles_texcombiner_command_alpha_type)
  protected
    { IXMLGles_texcombiner_command_alpha_type }
    function Get_Operator_: UnicodeString;
    function Get_Scale: Single;
    function Get_Argument(Index: Integer): IXMLGles_texcombiner_argument_alpha_type;
    procedure Set_Operator_(Value: UnicodeString);
    procedure Set_Scale(Value: Single);
    function Add: IXMLGles_texcombiner_argument_alpha_type;
    function Insert(const Index: Integer): IXMLGles_texcombiner_argument_alpha_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles_texcombiner_argument_alpha_type }

  TXMLGles_texcombiner_argument_alpha_type = class(TXML, IXMLGles_texcombiner_argument_alpha_type)
  protected
    { IXMLGles_texcombiner_argument_alpha_type }
    function Get_Source: UnicodeString;
    function Get_Operand: UnicodeString;
    function Get_Sampler: UnicodeString;
    procedure Set_Source(Value: UnicodeString);
    procedure Set_Operand(Value: UnicodeString);
    procedure Set_Sampler(Value: UnicodeString);
  end;

{ TXMLGles_texenv_command_type }

  TXMLGles_texenv_command_type = class(TXML, IXMLGles_texenv_command_type)
  protected
    { IXMLGles_texenv_command_type }
    function Get_Operator_: UnicodeString;
    function Get_Sampler: UnicodeString;
    function Get_Constant: IXMLGles_texture_constant_type;
    procedure Set_Operator_(Value: UnicodeString);
    procedure Set_Sampler(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLGles_texenv_command_typeList }

  TXMLGles_texenv_command_typeList = class(TXMLFilter, IXMLGles_texenv_command_typeList)
  protected
    { IXMLGles_texenv_command_typeList }
    function Add: IXMLGles_texenv_command_type;
    function Insert(const Index: Integer): IXMLGles_texenv_command_type;

    function Get_Item(Index: Integer): IXMLGles_texenv_command_type;
  end;

{ TXMLProfile_gles_type_technique_pass_evaluate }

  TXMLProfile_gles_type_technique_pass_evaluate = class(TXML, IXMLProfile_gles_type_technique_pass_evaluate)
  private
    FColor_target: IXMLFx_colortarget_typeList;
    FDepth_target: IXMLFx_depthtarget_typeList;
    FStencil_target: IXMLFx_stenciltarget_typeList;
    FColor_clear: IXMLFx_clearcolor_typeList;
    FDepth_clear: IXMLFx_cleardepth_typeList;
    FStencil_clear: IXMLFx_clearstencil_typeList;
  protected
    { IXMLProfile_gles_type_technique_pass_evaluate }
    function Get_Color_target: IXMLFx_colortarget_typeList;
    function Get_Depth_target: IXMLFx_depthtarget_typeList;
    function Get_Stencil_target: IXMLFx_stenciltarget_typeList;
    function Get_Color_clear: IXMLFx_clearcolor_typeList;
    function Get_Depth_clear: IXMLFx_cleardepth_typeList;
    function Get_Stencil_clear: IXMLFx_clearstencil_typeList;
    function Get_Draw: UnicodeString;
    procedure Set_Draw(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_force_fields_type }

  TXMLLibrary_force_fields_type = class(TXML, IXMLLibrary_force_fields_type)
  private
    FForce_field: IXMLForce_field_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_force_fields_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Force_field: IXMLForce_field_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_force_fields_typeList }

  TXMLLibrary_force_fields_typeList = class(TXMLFilter, IXMLLibrary_force_fields_typeList)
  protected
    { IXMLLibrary_force_fields_typeList }
    function Add: IXMLLibrary_force_fields_type;
    function Insert(const Index: Integer): IXMLLibrary_force_fields_type;

    function Get_Item(Index: Integer): IXMLLibrary_force_fields_type;
  end;

{ TXMLForce_field_type }

  TXMLForce_field_type = class(TXML, IXMLForce_field_type)
  private
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLForce_field_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLForce_field_typeList }

  TXMLForce_field_typeList = class(TXMLFilter, IXMLForce_field_typeList)
  protected
    { IXMLForce_field_typeList }
    function Add: IXMLForce_field_type;
    function Insert(const Index: Integer): IXMLForce_field_type;

    function Get_Item(Index: Integer): IXMLForce_field_type;
  end;

{ TXMLLibrary_images_type }

  TXMLLibrary_images_type = class(TXML, IXMLLibrary_images_type)
  private
    FImage: IXMLImage_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_images_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Image: IXMLImage_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_images_typeList }

  TXMLLibrary_images_typeList = class(TXMLFilter, IXMLLibrary_images_typeList)
  protected
    { IXMLLibrary_images_typeList }
    function Add: IXMLLibrary_images_type;
    function Insert(const Index: Integer): IXMLLibrary_images_type;

    function Get_Item(Index: Integer): IXMLLibrary_images_type;
  end;

{ TXMLImage_type }

  TXMLImage_type = class(TXML, IXMLImage_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLImage_type }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Renderable: IXMLImage_type_renderable;
    function Get_Init_from: IXMLImage_type_init_from;
    function Get_Create_2d: IXMLImage_type_create_2d;
    function Get_Create_3d: IXMLImage_type_create_3d;
    function Get_Create_cube: IXMLImage_type_create_cube;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLImage_typeList }

  TXMLImage_typeList = class(TXMLFilter, IXMLImage_typeList)
  protected
    { IXMLImage_typeList }
    function Add: IXMLImage_type;
    function Insert(const Index: Integer): IXMLImage_type;

    function Get_Item(Index: Integer): IXMLImage_type;
  end;

{ TXMLImage_type_renderable }

  TXMLImage_type_renderable = class(TXML, IXMLImage_type_renderable)
  protected
    { IXMLImage_type_renderable }
    function Get_Share: Boolean;
    procedure Set_Share(Value: Boolean);
  end;

{ TXMLImage_source_type }

  TXMLImage_source_type = class(TXML, IXMLImage_source_type)
  protected
    { IXMLImage_source_type }
    function Get_Ref: UnicodeString;
    function Get_Hex: IXMLImage_source_type_hex;
    procedure Set_Ref(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLImage_source_type_hex }

  TXMLImage_source_type_hex = class(TXML, IXMLImage_source_type_hex)
  protected
    { IXMLImage_source_type_hex }
    function Get_Format: UnicodeString;
    procedure Set_Format(Value: UnicodeString);
  end;

{ TXMLImage_type_init_from }

  TXMLImage_type_init_from = class(TXMLImage_source_type, IXMLImage_type_init_from)
  protected
    { IXMLImage_type_init_from }
    function Get_Mips_generate: Boolean;
    procedure Set_Mips_generate(Value: Boolean);
  end;

{ TXMLImage_type_create_2d }

  TXMLImage_type_create_2d = class(TXML, IXMLImage_type_create_2d)
  private
    FInit_from: IXMLImage_type_create_2d_init_fromList;
  protected
    { IXMLImage_type_create_2d }
    function Get_Size_exact: IXMLImage_type_create_2d_size_exact;
    function Get_Size_ratio: IXMLImage_type_create_2d_size_ratio;
    function Get_Mips: IXMLImage_mips_type;
    function Get_Unnormalized: UnicodeString;
    function Get_Array_: IXMLImage_type_create_2d_array;
    function Get_Format: IXMLImage_type_create_2d_format;
    function Get_Init_from: IXMLImage_type_create_2d_init_fromList;
    procedure Set_Unnormalized(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLImage_type_create_2d_size_exact }

  TXMLImage_type_create_2d_size_exact = class(TXML, IXMLImage_type_create_2d_size_exact)
  protected
    { IXMLImage_type_create_2d_size_exact }
    function Get_Width: LongWord;
    function Get_Height: LongWord;
    procedure Set_Width(Value: LongWord);
    procedure Set_Height(Value: LongWord);
  end;

{ TXMLImage_type_create_2d_size_ratio }

  TXMLImage_type_create_2d_size_ratio = class(TXML, IXMLImage_type_create_2d_size_ratio)
  protected
    { IXMLImage_type_create_2d_size_ratio }
    function Get_Width: Single;
    function Get_Height: Single;
    procedure Set_Width(Value: Single);
    procedure Set_Height(Value: Single);
  end;

{ TXMLImage_mips_type }

  TXMLImage_mips_type = class(TXML, IXMLImage_mips_type)
  protected
    { IXMLImage_mips_type }
    function Get_Levels: LongWord;
    function Get_Auto_generate: Boolean;
    procedure Set_Levels(Value: LongWord);
    procedure Set_Auto_generate(Value: Boolean);
  end;

{ TXMLImage_type_create_2d_array }

  TXMLImage_type_create_2d_array = class(TXML, IXMLImage_type_create_2d_array)
  protected
    { IXMLImage_type_create_2d_array }
    function Get_Length: LongWord;
    procedure Set_Length(Value: LongWord);
  end;

{ TXMLImage_type_create_2d_format }

  TXMLImage_type_create_2d_format = class(TXML, IXMLImage_type_create_2d_format)
  protected
    { IXMLImage_type_create_2d_format }
    function Get_Hint: IXMLImage_type_create_2d_format_hint;
    function Get_Exact: UnicodeString;
    procedure Set_Exact(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLImage_type_create_2d_format_hint }

  TXMLImage_type_create_2d_format_hint = class(TXML, IXMLImage_type_create_2d_format_hint)
  protected
    { IXMLImage_type_create_2d_format_hint }
    function Get_Channels: UnicodeString;
    function Get_Range: UnicodeString;
    function Get_Precision: UnicodeString;
    function Get_Space: UnicodeString;
    procedure Set_Channels(Value: UnicodeString);
    procedure Set_Range(Value: UnicodeString);
    procedure Set_Precision(Value: UnicodeString);
    procedure Set_Space(Value: UnicodeString);
  end;

{ TXMLImage_type_create_2d_init_from }

  TXMLImage_type_create_2d_init_from = class(TXMLImage_source_type, IXMLImage_type_create_2d_init_from)
  protected
    { IXMLImage_type_create_2d_init_from }
    function Get_Mip_index: LongWord;
    function Get_Array_index: LongWord;
    procedure Set_Mip_index(Value: LongWord);
    procedure Set_Array_index(Value: LongWord);
  end;

{ TXMLImage_type_create_2d_init_fromList }

  TXMLImage_type_create_2d_init_fromList = class(TXMLFilter, IXMLImage_type_create_2d_init_fromList)
  protected
    { IXMLImage_type_create_2d_init_fromList }
    function Add: IXMLImage_type_create_2d_init_from;
    function Insert(const Index: Integer): IXMLImage_type_create_2d_init_from;

    function Get_Item(Index: Integer): IXMLImage_type_create_2d_init_from;
  end;

{ TXMLImage_type_create_3d }

  TXMLImage_type_create_3d = class(TXML, IXMLImage_type_create_3d)
  private
    FInit_from: IXMLImage_type_create_3d_init_fromList;
  protected
    { IXMLImage_type_create_3d }
    function Get_Size: IXMLImage_type_create_3d_size;
    function Get_Mips: IXMLImage_mips_type;
    function Get_Array_: IXMLImage_type_create_3d_array;
    function Get_Format: IXMLImage_type_create_3d_format;
    function Get_Init_from: IXMLImage_type_create_3d_init_fromList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLImage_type_create_3d_size }

  TXMLImage_type_create_3d_size = class(TXML, IXMLImage_type_create_3d_size)
  protected
    { IXMLImage_type_create_3d_size }
    function Get_Width: LongWord;
    function Get_Height: LongWord;
    function Get_Depth: LongWord;
    procedure Set_Width(Value: LongWord);
    procedure Set_Height(Value: LongWord);
    procedure Set_Depth(Value: LongWord);
  end;

{ TXMLImage_type_create_3d_array }

  TXMLImage_type_create_3d_array = class(TXML, IXMLImage_type_create_3d_array)
  protected
    { IXMLImage_type_create_3d_array }
    function Get_Length: LongWord;
    procedure Set_Length(Value: LongWord);
  end;

{ TXMLImage_type_create_3d_format }

  TXMLImage_type_create_3d_format = class(TXML, IXMLImage_type_create_3d_format)
  protected
    { IXMLImage_type_create_3d_format }
    function Get_Hint: IXMLImage_type_create_3d_format_hint;
    function Get_Exact: UnicodeString;
    procedure Set_Exact(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLImage_type_create_3d_format_hint }

  TXMLImage_type_create_3d_format_hint = class(TXML, IXMLImage_type_create_3d_format_hint)
  protected
    { IXMLImage_type_create_3d_format_hint }
    function Get_Channels: UnicodeString;
    function Get_Range: UnicodeString;
    function Get_Precision: UnicodeString;
    function Get_Space: UnicodeString;
    procedure Set_Channels(Value: UnicodeString);
    procedure Set_Range(Value: UnicodeString);
    procedure Set_Precision(Value: UnicodeString);
    procedure Set_Space(Value: UnicodeString);
  end;

{ TXMLImage_type_create_3d_init_from }

  TXMLImage_type_create_3d_init_from = class(TXMLImage_source_type, IXMLImage_type_create_3d_init_from)
  protected
    { IXMLImage_type_create_3d_init_from }
    function Get_Depth: LongWord;
    function Get_Mip_index: LongWord;
    function Get_Array_index: LongWord;
    procedure Set_Depth(Value: LongWord);
    procedure Set_Mip_index(Value: LongWord);
    procedure Set_Array_index(Value: LongWord);
  end;

{ TXMLImage_type_create_3d_init_fromList }

  TXMLImage_type_create_3d_init_fromList = class(TXMLFilter, IXMLImage_type_create_3d_init_fromList)
  protected
    { IXMLImage_type_create_3d_init_fromList }
    function Add: IXMLImage_type_create_3d_init_from;
    function Insert(const Index: Integer): IXMLImage_type_create_3d_init_from;

    function Get_Item(Index: Integer): IXMLImage_type_create_3d_init_from;
  end;

{ TXMLImage_type_create_cube }

  TXMLImage_type_create_cube = class(TXML, IXMLImage_type_create_cube)
  private
    FInit_from: IXMLImage_type_create_cube_init_fromList;
  protected
    { IXMLImage_type_create_cube }
    function Get_Size: IXMLImage_type_create_cube_size;
    function Get_Mips: IXMLImage_mips_type;
    function Get_Array_: IXMLImage_type_create_cube_array;
    function Get_Format: IXMLImage_type_create_cube_format;
    function Get_Init_from: IXMLImage_type_create_cube_init_fromList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLImage_type_create_cube_size }

  TXMLImage_type_create_cube_size = class(TXML, IXMLImage_type_create_cube_size)
  protected
    { IXMLImage_type_create_cube_size }
    function Get_Width: LongWord;
    procedure Set_Width(Value: LongWord);
  end;

{ TXMLImage_type_create_cube_array }

  TXMLImage_type_create_cube_array = class(TXML, IXMLImage_type_create_cube_array)
  protected
    { IXMLImage_type_create_cube_array }
    function Get_Length: LongWord;
    procedure Set_Length(Value: LongWord);
  end;

{ TXMLImage_type_create_cube_format }

  TXMLImage_type_create_cube_format = class(TXML, IXMLImage_type_create_cube_format)
  protected
    { IXMLImage_type_create_cube_format }
    function Get_Hint: IXMLImage_type_create_cube_format_hint;
    function Get_Exact: UnicodeString;
    procedure Set_Exact(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLImage_type_create_cube_format_hint }

  TXMLImage_type_create_cube_format_hint = class(TXML, IXMLImage_type_create_cube_format_hint)
  protected
    { IXMLImage_type_create_cube_format_hint }
    function Get_Channels: UnicodeString;
    function Get_Range: UnicodeString;
    function Get_Precision: UnicodeString;
    function Get_Space: UnicodeString;
    procedure Set_Channels(Value: UnicodeString);
    procedure Set_Range(Value: UnicodeString);
    procedure Set_Precision(Value: UnicodeString);
    procedure Set_Space(Value: UnicodeString);
  end;

{ TXMLImage_type_create_cube_init_from }

  TXMLImage_type_create_cube_init_from = class(TXMLImage_source_type, IXMLImage_type_create_cube_init_from)
  protected
    { IXMLImage_type_create_cube_init_from }
    function Get_Face: UnicodeString;
    function Get_Mip_index: LongWord;
    function Get_Array_index: LongWord;
    procedure Set_Face(Value: UnicodeString);
    procedure Set_Mip_index(Value: LongWord);
    procedure Set_Array_index(Value: LongWord);
  end;

{ TXMLImage_type_create_cube_init_fromList }

  TXMLImage_type_create_cube_init_fromList = class(TXMLFilter, IXMLImage_type_create_cube_init_fromList)
  protected
    { IXMLImage_type_create_cube_init_fromList }
    function Add: IXMLImage_type_create_cube_init_from;
    function Insert(const Index: Integer): IXMLImage_type_create_cube_init_from;

    function Get_Item(Index: Integer): IXMLImage_type_create_cube_init_from;
  end;

{ TXMLLibrary_lights_type }

  TXMLLibrary_lights_type = class(TXML, IXMLLibrary_lights_type)
  private
    FLight: IXMLLight_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_lights_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Light: IXMLLight_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_lights_typeList }

  TXMLLibrary_lights_typeList = class(TXMLFilter, IXMLLibrary_lights_typeList)
  protected
    { IXMLLibrary_lights_typeList }
    function Add: IXMLLibrary_lights_type;
    function Insert(const Index: Integer): IXMLLibrary_lights_type;

    function Get_Item(Index: Integer): IXMLLibrary_lights_type;
  end;

{ TXMLLight_type }

  TXMLLight_type = class(TXML, IXMLLight_type)
  private
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLight_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Technique_common: IXMLLight_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLight_typeList }

  TXMLLight_typeList = class(TXMLFilter, IXMLLight_typeList)
  protected
    { IXMLLight_typeList }
    function Add: IXMLLight_type;
    function Insert(const Index: Integer): IXMLLight_type;

    function Get_Item(Index: Integer): IXMLLight_type;
  end;

{ TXMLLight_type_technique_common }

  TXMLLight_type_technique_common = class(TXML, IXMLLight_type_technique_common)
  protected
    { IXMLLight_type_technique_common }
    function Get_Ambient: IXMLLight_type_technique_common_ambient;
    function Get_Directional: IXMLLight_type_technique_common_directional;
    function Get_Point: IXMLLight_type_technique_common_point;
    function Get_Spot: IXMLLight_type_technique_common_spot;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLight_type_technique_common_ambient }

  TXMLLight_type_technique_common_ambient = class(TXML, IXMLLight_type_technique_common_ambient)
  protected
    { IXMLLight_type_technique_common_ambient }
    function Get_Color: IXMLTargetable_float3_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTargetable_float3_type }

  TXMLTargetable_float3_type = class(TXML, IXMLTargetable_float3_type)
  protected
    { IXMLTargetable_float3_type }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLLight_type_technique_common_directional }

  TXMLLight_type_technique_common_directional = class(TXML, IXMLLight_type_technique_common_directional)
  protected
    { IXMLLight_type_technique_common_directional }
    function Get_Color: IXMLTargetable_float3_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLight_type_technique_common_point }

  TXMLLight_type_technique_common_point = class(TXML, IXMLLight_type_technique_common_point)
  protected
    { IXMLLight_type_technique_common_point }
    function Get_Color: IXMLTargetable_float3_type;
    function Get_Constant_attenuation: IXMLTargetable_float_type;
    function Get_Linear_attenuation: IXMLTargetable_float_type;
    function Get_Quadratic_attenuation: IXMLTargetable_float_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLight_type_technique_common_spot }

  TXMLLight_type_technique_common_spot = class(TXML, IXMLLight_type_technique_common_spot)
  protected
    { IXMLLight_type_technique_common_spot }
    function Get_Color: IXMLTargetable_float3_type;
    function Get_Constant_attenuation: IXMLTargetable_float_type;
    function Get_Linear_attenuation: IXMLTargetable_float_type;
    function Get_Quadratic_attenuation: IXMLTargetable_float_type;
    function Get_Falloff_angle: IXMLTargetable_float_type;
    function Get_Falloff_exponent: IXMLTargetable_float_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_materials_type }

  TXMLLibrary_materials_type = class(TXML, IXMLLibrary_materials_type)
  private
    FMaterial: IXMLMaterial_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_materials_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Material: IXMLMaterial_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_materials_typeList }

  TXMLLibrary_materials_typeList = class(TXMLFilter, IXMLLibrary_materials_typeList)
  protected
    { IXMLLibrary_materials_typeList }
    function Add: IXMLLibrary_materials_type;
    function Insert(const Index: Integer): IXMLLibrary_materials_type;

    function Get_Item(Index: Integer): IXMLLibrary_materials_type;
  end;

{ TXMLMaterial_type }

  TXMLMaterial_type = class(TXML, IXMLMaterial_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLMaterial_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Instance_effect: IXMLInstance_effect_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMaterial_typeList }

  TXMLMaterial_typeList = class(TXMLFilter, IXMLMaterial_typeList)
  protected
    { IXMLMaterial_typeList }
    function Add: IXMLMaterial_type;
    function Insert(const Index: Integer): IXMLMaterial_type;

    function Get_Item(Index: Integer): IXMLMaterial_type;
  end;

{ TXMLInstance_effect_type }

  TXMLInstance_effect_type = class(TXML, IXMLInstance_effect_type)
  private
    FTechnique_hint: IXMLInstance_effect_type_technique_hintList;
    FSetparam: IXMLInstance_effect_type_setparamList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLInstance_effect_type }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Technique_hint: IXMLInstance_effect_type_technique_hintList;
    function Get_Setparam: IXMLInstance_effect_type_setparamList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_effect_type_technique_hint }

  TXMLInstance_effect_type_technique_hint = class(TXML, IXMLInstance_effect_type_technique_hint)
  protected
    { IXMLInstance_effect_type_technique_hint }
    function Get_Platform: UnicodeString;
    function Get_Profile: UnicodeString;
    function Get_Ref: UnicodeString;
    procedure Set_Platform(Value: UnicodeString);
    procedure Set_Profile(Value: UnicodeString);
    procedure Set_Ref(Value: UnicodeString);
  end;

{ TXMLInstance_effect_type_technique_hintList }

  TXMLInstance_effect_type_technique_hintList = class(TXMLFilter, IXMLInstance_effect_type_technique_hintList)
  protected
    { IXMLInstance_effect_type_technique_hintList }
    function Add: IXMLInstance_effect_type_technique_hint;
    function Insert(const Index: Integer): IXMLInstance_effect_type_technique_hint;

    function Get_Item(Index: Integer): IXMLInstance_effect_type_technique_hint;
  end;

{ TXMLInstance_effect_type_setparam }

  TXMLInstance_effect_type_setparam = class(TXML, IXMLInstance_effect_type_setparam)
  protected
    { IXMLInstance_effect_type_setparam }
    function Get_Ref: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Bool2: UnicodeString;
    function Get_Bool3: UnicodeString;
    function Get_Bool4: UnicodeString;
    function Get_Int: Int64;
    function Get_Int2: UnicodeString;
    function Get_Int3: UnicodeString;
    function Get_Int4: UnicodeString;
    function Get_Float: Double;
    function Get_Float2: UnicodeString;
    function Get_Float3: UnicodeString;
    function Get_Float4: UnicodeString;
    function Get_Float2x1: UnicodeString;
    function Get_Float2x2: UnicodeString;
    function Get_Float2x3: UnicodeString;
    function Get_Float2x4: UnicodeString;
    function Get_Float3x1: UnicodeString;
    function Get_Float3x2: UnicodeString;
    function Get_Float3x3: UnicodeString;
    function Get_Float3x4: UnicodeString;
    function Get_Float4x1: UnicodeString;
    function Get_Float4x2: UnicodeString;
    function Get_Float4x3: UnicodeString;
    function Get_Float4x4: UnicodeString;
    function Get_Enum: UnicodeString;
    function Get_Sampler_image: IXMLInstance_image_type;
    function Get_Sampler_states: IXMLSampler_states;
    procedure Set_Ref(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Bool2(Value: UnicodeString);
    procedure Set_Bool3(Value: UnicodeString);
    procedure Set_Bool4(Value: UnicodeString);
    procedure Set_Int(Value: Int64);
    procedure Set_Int2(Value: UnicodeString);
    procedure Set_Int3(Value: UnicodeString);
    procedure Set_Int4(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Float2(Value: UnicodeString);
    procedure Set_Float3(Value: UnicodeString);
    procedure Set_Float4(Value: UnicodeString);
    procedure Set_Float2x1(Value: UnicodeString);
    procedure Set_Float2x2(Value: UnicodeString);
    procedure Set_Float2x3(Value: UnicodeString);
    procedure Set_Float2x4(Value: UnicodeString);
    procedure Set_Float3x1(Value: UnicodeString);
    procedure Set_Float3x2(Value: UnicodeString);
    procedure Set_Float3x3(Value: UnicodeString);
    procedure Set_Float3x4(Value: UnicodeString);
    procedure Set_Float4x1(Value: UnicodeString);
    procedure Set_Float4x2(Value: UnicodeString);
    procedure Set_Float4x3(Value: UnicodeString);
    procedure Set_Float4x4(Value: UnicodeString);
    procedure Set_Enum(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_effect_type_setparamList }

  TXMLInstance_effect_type_setparamList = class(TXMLFilter, IXMLInstance_effect_type_setparamList)
  protected
    { IXMLInstance_effect_type_setparamList }
    function Add: IXMLInstance_effect_type_setparam;
    function Insert(const Index: Integer): IXMLInstance_effect_type_setparam;

    function Get_Item(Index: Integer): IXMLInstance_effect_type_setparam;
  end;

{ TXMLSampler_states }

  TXMLSampler_states = class(TXML, IXMLSampler_states)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLSampler_states }
    function Get_Wrap_s: UnicodeString;
    function Get_Wrap_t: UnicodeString;
    function Get_Wrap_p: UnicodeString;
    function Get_Minfilter: UnicodeString;
    function Get_Magfilter: UnicodeString;
    function Get_Mipfilter: UnicodeString;
    function Get_Border_color: UnicodeString;
    function Get_Mip_max_level: Byte;
    function Get_Mip_min_level: Byte;
    function Get_Mip_bias: Single;
    function Get_Max_anisotropy: LongWord;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Wrap_s(Value: UnicodeString);
    procedure Set_Wrap_t(Value: UnicodeString);
    procedure Set_Wrap_p(Value: UnicodeString);
    procedure Set_Minfilter(Value: UnicodeString);
    procedure Set_Magfilter(Value: UnicodeString);
    procedure Set_Mipfilter(Value: UnicodeString);
    procedure Set_Border_color(Value: UnicodeString);
    procedure Set_Mip_max_level(Value: Byte);
    procedure Set_Mip_min_level(Value: Byte);
    procedure Set_Mip_bias(Value: Single);
    procedure Set_Max_anisotropy(Value: LongWord);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_nodes_type }

  TXMLLibrary_nodes_type = class(TXML, IXMLLibrary_nodes_type)
  private
    FNode: IXMLNode_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_nodes_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Node: IXMLNode_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_nodes_typeList }

  TXMLLibrary_nodes_typeList = class(TXMLFilter, IXMLLibrary_nodes_typeList)
  protected
    { IXMLLibrary_nodes_typeList }
    function Add: IXMLLibrary_nodes_type;
    function Insert(const Index: Integer): IXMLLibrary_nodes_type;

    function Get_Item(Index: Integer): IXMLLibrary_nodes_type;
  end;

{ TXMLNode_type }

  TXMLNode_type = class(TXML, IXMLNode_type)
  private
    FLookat: IXMLLookat_typeList;
    FMatrix: IXMLMatrix_typeList;
    FRotate: IXMLRotate_typeList;
    FScale: IXMLScale_typeList;
    FSkew: IXMLSkew_typeList;
    FTranslate: IXMLTranslate_typeList;
    FInstance_camera: IXMLInstance_camera_typeList;
    FInstance_controller: IXMLInstance_controller_typeList;
    FInstance_geometry: IXMLInstance_geometry_typeList;
    FInstance_light: IXMLInstance_light_typeList;
    FInstance_node: IXMLInstance_node_typeList;
    FNode: IXMLNode_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLNode_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Type_: UnicodeString;
    function Get_Layer: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Lookat: IXMLLookat_typeList;
    function Get_Matrix: IXMLMatrix_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Scale: IXMLScale_typeList;
    function Get_Skew: IXMLSkew_typeList;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Instance_camera: IXMLInstance_camera_typeList;
    function Get_Instance_controller: IXMLInstance_controller_typeList;
    function Get_Instance_geometry: IXMLInstance_geometry_typeList;
    function Get_Instance_light: IXMLInstance_light_typeList;
    function Get_Instance_node: IXMLInstance_node_typeList;
    function Get_Node: IXMLNode_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Layer(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLNode_typeList }

  TXMLNode_typeList = class(TXMLFilter, IXMLNode_typeList)
  protected
    { IXMLNode_typeList }
    function Add: IXMLNode_type;
    function Insert(const Index: Integer): IXMLNode_type;

    function Get_Item(Index: Integer): IXMLNode_type;
  end;

{ TXMLLookat_type }

  TXMLLookat_type = class(TXML, IXMLLookat_type)
  protected
    { IXMLLookat_type }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLLookat_typeList }

  TXMLLookat_typeList = class(TXMLFilter, IXMLLookat_typeList)
  protected
    { IXMLLookat_typeList }
    function Add: IXMLLookat_type;
    function Insert(const Index: Integer): IXMLLookat_type;

    function Get_Item(Index: Integer): IXMLLookat_type;
  end;

{ TXMLMatrix_type }

  TXMLMatrix_type = class(TXML, IXMLMatrix_type)
  protected
    { IXMLMatrix_type }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLMatrix_typeList }

  TXMLMatrix_typeList = class(TXMLFilter, IXMLMatrix_typeList)
  protected
    { IXMLMatrix_typeList }
    function Add: IXMLMatrix_type;
    function Insert(const Index: Integer): IXMLMatrix_type;

    function Get_Item(Index: Integer): IXMLMatrix_type;
  end;

{ TXMLRotate_type }

  TXMLRotate_type = class(TXML, IXMLRotate_type)
  protected
    { IXMLRotate_type }
  end;

{ TXMLRotate_typeList }

  TXMLRotate_typeList = class(TXMLFilter, IXMLRotate_typeList)
  protected
    { IXMLRotate_typeList }
    function Add: IXMLRotate_type;
    function Insert(const Index: Integer): IXMLRotate_type;

    function Get_Item(Index: Integer): IXMLRotate_type;
  end;

{ TXMLScale_type }

  TXMLScale_type = class(TXML, IXMLScale_type)
  protected
    { IXMLScale_type }
  end;

{ TXMLScale_typeList }

  TXMLScale_typeList = class(TXMLFilter, IXMLScale_typeList)
  protected
    { IXMLScale_typeList }
    function Add: IXMLScale_type;
    function Insert(const Index: Integer): IXMLScale_type;

    function Get_Item(Index: Integer): IXMLScale_type;
  end;

{ TXMLSkew_type }

  TXMLSkew_type = class(TXML, IXMLSkew_type)
  protected
    { IXMLSkew_type }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLSkew_typeList }

  TXMLSkew_typeList = class(TXMLFilter, IXMLSkew_typeList)
  protected
    { IXMLSkew_typeList }
    function Add: IXMLSkew_type;
    function Insert(const Index: Integer): IXMLSkew_type;

    function Get_Item(Index: Integer): IXMLSkew_type;
  end;

{ TXMLTranslate_type }

  TXMLTranslate_type = class(TXML, IXMLTranslate_type)
  protected
    { IXMLTranslate_type }
  end;

{ TXMLTranslate_typeList }

  TXMLTranslate_typeList = class(TXMLFilter, IXMLTranslate_typeList)
  protected
    { IXMLTranslate_typeList }
    function Add: IXMLTranslate_type;
    function Insert(const Index: Integer): IXMLTranslate_type;

    function Get_Item(Index: Integer): IXMLTranslate_type;
  end;

{ TXMLInstance_camera_type }

  TXMLInstance_camera_type = class(TXMLInstance_with_extra_type, IXMLInstance_camera_type)
  protected
    { IXMLInstance_camera_type }
  end;

{ TXMLInstance_camera_typeList }

  TXMLInstance_camera_typeList = class(TXMLFilter, IXMLInstance_camera_typeList)
  protected
    { IXMLInstance_camera_typeList }
    function Add: IXMLInstance_camera_type;
    function Insert(const Index: Integer): IXMLInstance_camera_type;

    function Get_Item(Index: Integer): IXMLInstance_camera_type;
  end;

{ TXMLInstance_controller_type }

  TXMLInstance_controller_type = class(TXML, IXMLInstance_controller_type)
  private
    FSkeleton: IXMLAnyURIList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLInstance_controller_type }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Skeleton: IXMLAnyURIList;
    function Get_Bind_material: IXMLBind_material_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_controller_typeList }

  TXMLInstance_controller_typeList = class(TXMLFilter, IXMLInstance_controller_typeList)
  protected
    { IXMLInstance_controller_typeList }
    function Add: IXMLInstance_controller_type;
    function Insert(const Index: Integer): IXMLInstance_controller_type;

    function Get_Item(Index: Integer): IXMLInstance_controller_type;
  end;

{ TXMLBind_material_type }

  TXMLBind_material_type = class(TXML, IXMLBind_material_type)
  private
    FParam: IXMLParam_typeList;
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLBind_material_type }
    function Get_Param: IXMLParam_typeList;
    function Get_Technique_common: IXMLBind_material_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLBind_material_type_technique_common }

  TXMLBind_material_type_technique_common = class(TXMLFilter, IXMLBind_material_type_technique_common)
  protected
    { IXMLBind_material_type_technique_common }
    function Get_Instance_material(Index: Integer): IXMLInstance_material_type;
    function Add: IXMLInstance_material_type;
    function Insert(const Index: Integer): IXMLInstance_material_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_material_type }

  TXMLInstance_material_type = class(TXML, IXMLInstance_material_type)
  private
    FBind: IXMLInstance_material_type_bindList;
    FBind_vertex_input: IXMLInstance_material_type_bind_vertex_inputList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLInstance_material_type }
    function Get_Symbol: UnicodeString;
    function Get_Target: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Bind: IXMLInstance_material_type_bindList;
    function Get_Bind_vertex_input: IXMLInstance_material_type_bind_vertex_inputList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Target(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_material_type_bind }

  TXMLInstance_material_type_bind = class(TXML, IXMLInstance_material_type_bind)
  protected
    { IXMLInstance_material_type_bind }
    function Get_Semantic: UnicodeString;
    function Get_Target: UnicodeString;
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Target(Value: UnicodeString);
  end;

{ TXMLInstance_material_type_bindList }

  TXMLInstance_material_type_bindList = class(TXMLFilter, IXMLInstance_material_type_bindList)
  protected
    { IXMLInstance_material_type_bindList }
    function Add: IXMLInstance_material_type_bind;
    function Insert(const Index: Integer): IXMLInstance_material_type_bind;

    function Get_Item(Index: Integer): IXMLInstance_material_type_bind;
  end;

{ TXMLInstance_material_type_bind_vertex_input }

  TXMLInstance_material_type_bind_vertex_input = class(TXML, IXMLInstance_material_type_bind_vertex_input)
  protected
    { IXMLInstance_material_type_bind_vertex_input }
    function Get_Semantic: UnicodeString;
    function Get_Input_semantic: UnicodeString;
    function Get_Input_set: Int64;
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Input_semantic(Value: UnicodeString);
    procedure Set_Input_set(Value: Int64);
  end;

{ TXMLInstance_material_type_bind_vertex_inputList }

  TXMLInstance_material_type_bind_vertex_inputList = class(TXMLFilter, IXMLInstance_material_type_bind_vertex_inputList)
  protected
    { IXMLInstance_material_type_bind_vertex_inputList }
    function Add: IXMLInstance_material_type_bind_vertex_input;
    function Insert(const Index: Integer): IXMLInstance_material_type_bind_vertex_input;

    function Get_Item(Index: Integer): IXMLInstance_material_type_bind_vertex_input;
  end;

{ TXMLInstance_geometry_type }

  TXMLInstance_geometry_type = class(TXML, IXMLInstance_geometry_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLInstance_geometry_type }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Bind_material: IXMLBind_material_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_geometry_typeList }

  TXMLInstance_geometry_typeList = class(TXMLFilter, IXMLInstance_geometry_typeList)
  protected
    { IXMLInstance_geometry_typeList }
    function Add: IXMLInstance_geometry_type;
    function Insert(const Index: Integer): IXMLInstance_geometry_type;

    function Get_Item(Index: Integer): IXMLInstance_geometry_type;
  end;

{ TXMLInstance_light_type }

  TXMLInstance_light_type = class(TXMLInstance_with_extra_type, IXMLInstance_light_type)
  protected
    { IXMLInstance_light_type }
  end;

{ TXMLInstance_light_typeList }

  TXMLInstance_light_typeList = class(TXMLFilter, IXMLInstance_light_typeList)
  protected
    { IXMLInstance_light_typeList }
    function Add: IXMLInstance_light_type;
    function Insert(const Index: Integer): IXMLInstance_light_type;

    function Get_Item(Index: Integer): IXMLInstance_light_type;
  end;

{ TXMLInstance_node_type }

  TXMLInstance_node_type = class(TXMLInstance_with_extra_type, IXMLInstance_node_type)
  protected
    { IXMLInstance_node_type }
    function Get_Proxy: UnicodeString;
    procedure Set_Proxy(Value: UnicodeString);
  end;

{ TXMLInstance_node_typeList }

  TXMLInstance_node_typeList = class(TXMLFilter, IXMLInstance_node_typeList)
  protected
    { IXMLInstance_node_typeList }
    function Add: IXMLInstance_node_type;
    function Insert(const Index: Integer): IXMLInstance_node_type;

    function Get_Item(Index: Integer): IXMLInstance_node_type;
  end;

{ TXMLLibrary_physics_materials_type }

  TXMLLibrary_physics_materials_type = class(TXML, IXMLLibrary_physics_materials_type)
  private
    FPhysics_material: IXMLPhysics_material_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_physics_materials_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Physics_material: IXMLPhysics_material_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_physics_materials_typeList }

  TXMLLibrary_physics_materials_typeList = class(TXMLFilter, IXMLLibrary_physics_materials_typeList)
  protected
    { IXMLLibrary_physics_materials_typeList }
    function Add: IXMLLibrary_physics_materials_type;
    function Insert(const Index: Integer): IXMLLibrary_physics_materials_type;

    function Get_Item(Index: Integer): IXMLLibrary_physics_materials_type;
  end;

{ TXMLPhysics_material_type }

  TXMLPhysics_material_type = class(TXML, IXMLPhysics_material_type)
  private
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLPhysics_material_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Technique_common: IXMLPhysics_material_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLPhysics_material_typeList }

  TXMLPhysics_material_typeList = class(TXMLFilter, IXMLPhysics_material_typeList)
  protected
    { IXMLPhysics_material_typeList }
    function Add: IXMLPhysics_material_type;
    function Insert(const Index: Integer): IXMLPhysics_material_type;

    function Get_Item(Index: Integer): IXMLPhysics_material_type;
  end;

{ TXMLPhysics_material_type_technique_common }

  TXMLPhysics_material_type_technique_common = class(TXML, IXMLPhysics_material_type_technique_common)
  protected
    { IXMLPhysics_material_type_technique_common }
    function Get_Dynamic_friction: IXMLTargetable_float_type;
    function Get_Restitution: IXMLTargetable_float_type;
    function Get_Static_friction: IXMLTargetable_float_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_physics_models_type }

  TXMLLibrary_physics_models_type = class(TXML, IXMLLibrary_physics_models_type)
  private
    FPhysics_model: IXMLPhysics_model_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_physics_models_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Physics_model: IXMLPhysics_model_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_physics_models_typeList }

  TXMLLibrary_physics_models_typeList = class(TXMLFilter, IXMLLibrary_physics_models_typeList)
  protected
    { IXMLLibrary_physics_models_typeList }
    function Add: IXMLLibrary_physics_models_type;
    function Insert(const Index: Integer): IXMLLibrary_physics_models_type;

    function Get_Item(Index: Integer): IXMLLibrary_physics_models_type;
  end;

{ TXMLPhysics_model_type }

  TXMLPhysics_model_type = class(TXML, IXMLPhysics_model_type)
  private
    FRigid_body: IXMLRigid_body_typeList;
    FRigid_constraint: IXMLRigid_constraint_typeList;
    FInstance_physics_model: IXMLInstance_physics_model_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLPhysics_model_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Rigid_body: IXMLRigid_body_typeList;
    function Get_Rigid_constraint: IXMLRigid_constraint_typeList;
    function Get_Instance_physics_model: IXMLInstance_physics_model_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLPhysics_model_typeList }

  TXMLPhysics_model_typeList = class(TXMLFilter, IXMLPhysics_model_typeList)
  protected
    { IXMLPhysics_model_typeList }
    function Add: IXMLPhysics_model_type;
    function Insert(const Index: Integer): IXMLPhysics_model_type;

    function Get_Item(Index: Integer): IXMLPhysics_model_type;
  end;

{ TXMLRigid_body_type }

  TXMLRigid_body_type = class(TXML, IXMLRigid_body_type)
  private
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLRigid_body_type }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Technique_common: IXMLRigid_body_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_body_typeList }

  TXMLRigid_body_typeList = class(TXMLFilter, IXMLRigid_body_typeList)
  protected
    { IXMLRigid_body_typeList }
    function Add: IXMLRigid_body_type;
    function Insert(const Index: Integer): IXMLRigid_body_type;

    function Get_Item(Index: Integer): IXMLRigid_body_type;
  end;

{ TXMLRigid_body_type_technique_common }

  TXMLRigid_body_type_technique_common = class(TXML, IXMLRigid_body_type_technique_common)
  private
    FShape: IXMLRigid_body_type_technique_common_shapeList;
  protected
    { IXMLRigid_body_type_technique_common }
    function Get_Dynamic: IXMLRigid_body_type_technique_common_dynamic;
    function Get_Mass: IXMLTargetable_float_type;
    function Get_Mass_frame: IXMLRigid_body_type_technique_common_mass_frame;
    function Get_Inertia: IXMLTargetable_float3_type;
    function Get_Instance_physics_material: IXMLInstance_physics_material_type;
    function Get_Physics_material: IXMLPhysics_material_type;
    function Get_Shape: IXMLRigid_body_type_technique_common_shapeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_body_type_technique_common_dynamic }

  TXMLRigid_body_type_technique_common_dynamic = class(TXML, IXMLRigid_body_type_technique_common_dynamic)
  protected
    { IXMLRigid_body_type_technique_common_dynamic }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLRigid_body_type_technique_common_mass_frame }

  TXMLRigid_body_type_technique_common_mass_frame = class(TXML, IXMLRigid_body_type_technique_common_mass_frame)
  private
    FTranslate: IXMLTranslate_typeList;
    FRotate: IXMLRotate_typeList;
  protected
    { IXMLRigid_body_type_technique_common_mass_frame }
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_physics_material_type }

  TXMLInstance_physics_material_type = class(TXMLInstance_with_extra_type, IXMLInstance_physics_material_type)
  protected
    { IXMLInstance_physics_material_type }
  end;

{ TXMLRigid_body_type_technique_common_shape }

  TXMLRigid_body_type_technique_common_shape = class(TXML, IXMLRigid_body_type_technique_common_shape)
  private
    FTranslate: IXMLTranslate_typeList;
    FRotate: IXMLRotate_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLRigid_body_type_technique_common_shape }
    function Get_Hollow: IXMLRigid_body_type_technique_common_shape_hollow;
    function Get_Mass: IXMLTargetable_float_type;
    function Get_Density: IXMLTargetable_float_type;
    function Get_Instance_physics_material: IXMLInstance_physics_material_type;
    function Get_Physics_material: IXMLPhysics_material_type;
    function Get_Instance_geometry: IXMLInstance_geometry_type;
    function Get_Plane: IXMLPlane_type;
    function Get_Box: IXMLBox_type;
    function Get_Sphere: IXMLSphere_type;
    function Get_Cylinder: IXMLCylinder_type;
    function Get_Capsule: IXMLCapsule_type;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_body_type_technique_common_shapeList }

  TXMLRigid_body_type_technique_common_shapeList = class(TXMLFilter, IXMLRigid_body_type_technique_common_shapeList)
  protected
    { IXMLRigid_body_type_technique_common_shapeList }
    function Add: IXMLRigid_body_type_technique_common_shape;
    function Insert(const Index: Integer): IXMLRigid_body_type_technique_common_shape;

    function Get_Item(Index: Integer): IXMLRigid_body_type_technique_common_shape;
  end;

{ TXMLRigid_body_type_technique_common_shape_hollow }

  TXMLRigid_body_type_technique_common_shape_hollow = class(TXML, IXMLRigid_body_type_technique_common_shape_hollow)
  protected
    { IXMLRigid_body_type_technique_common_shape_hollow }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLBox_type }

  TXMLBox_type = class(TXML, IXMLBox_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLBox_type }
    function Get_Half_extents: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Half_extents(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCylinder_type }

  TXMLCylinder_type = class(TXML, IXMLCylinder_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLCylinder_type }
    function Get_Height: Double;
    function Get_Radius: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Height(Value: Double);
    procedure Set_Radius(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCapsule_type }

  TXMLCapsule_type = class(TXML, IXMLCapsule_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLCapsule_type }
    function Get_Height: Double;
    function Get_Radius: UnicodeString;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Height(Value: Double);
    procedure Set_Radius(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_constraint_type }

  TXMLRigid_constraint_type = class(TXML, IXMLRigid_constraint_type)
  private
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLRigid_constraint_type }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Ref_attachment: IXMLRigid_constraint_type_ref_attachment;
    function Get_Attachment: IXMLRigid_constraint_type_attachment;
    function Get_Technique_common: IXMLRigid_constraint_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_constraint_typeList }

  TXMLRigid_constraint_typeList = class(TXMLFilter, IXMLRigid_constraint_typeList)
  protected
    { IXMLRigid_constraint_typeList }
    function Add: IXMLRigid_constraint_type;
    function Insert(const Index: Integer): IXMLRigid_constraint_type;

    function Get_Item(Index: Integer): IXMLRigid_constraint_type;
  end;

{ TXMLRigid_constraint_type_ref_attachment }

  TXMLRigid_constraint_type_ref_attachment = class(TXML, IXMLRigid_constraint_type_ref_attachment)
  private
    FTranslate: IXMLTranslate_typeList;
    FRotate: IXMLRotate_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLRigid_constraint_type_ref_attachment }
    function Get_Rigid_body: UnicodeString;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Rigid_body(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_constraint_type_attachment }

  TXMLRigid_constraint_type_attachment = class(TXML, IXMLRigid_constraint_type_attachment)
  private
    FTranslate: IXMLTranslate_typeList;
    FRotate: IXMLRotate_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLRigid_constraint_type_attachment }
    function Get_Rigid_body: UnicodeString;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Rigid_body(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_constraint_type_technique_common }

  TXMLRigid_constraint_type_technique_common = class(TXML, IXMLRigid_constraint_type_technique_common)
  protected
    { IXMLRigid_constraint_type_technique_common }
    function Get_Enabled: IXMLRigid_constraint_type_technique_common_enabled;
    function Get_Interpenetrate: IXMLRigid_constraint_type_technique_common_interpenetrate;
    function Get_Limits: IXMLRigid_constraint_type_technique_common_limits;
    function Get_Spring: IXMLRigid_constraint_type_technique_common_spring;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_constraint_type_technique_common_enabled }

  TXMLRigid_constraint_type_technique_common_enabled = class(TXML, IXMLRigid_constraint_type_technique_common_enabled)
  protected
    { IXMLRigid_constraint_type_technique_common_enabled }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLRigid_constraint_type_technique_common_interpenetrate }

  TXMLRigid_constraint_type_technique_common_interpenetrate = class(TXML, IXMLRigid_constraint_type_technique_common_interpenetrate)
  protected
    { IXMLRigid_constraint_type_technique_common_interpenetrate }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLRigid_constraint_type_technique_common_limits }

  TXMLRigid_constraint_type_technique_common_limits = class(TXML, IXMLRigid_constraint_type_technique_common_limits)
  protected
    { IXMLRigid_constraint_type_technique_common_limits }
    function Get_Swing_cone_and_twist: IXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist;
    function Get_Linear: IXMLRigid_constraint_type_technique_common_limits_linear;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist }

  TXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist = class(TXML, IXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist)
  protected
    { IXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist }
    function Get_Min: IXMLTargetable_float3_type;
    function Get_Max: IXMLTargetable_float3_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_constraint_type_technique_common_limits_linear }

  TXMLRigid_constraint_type_technique_common_limits_linear = class(TXML, IXMLRigid_constraint_type_technique_common_limits_linear)
  protected
    { IXMLRigid_constraint_type_technique_common_limits_linear }
    function Get_Min: IXMLTargetable_float3_type;
    function Get_Max: IXMLTargetable_float3_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_constraint_type_technique_common_spring }

  TXMLRigid_constraint_type_technique_common_spring = class(TXML, IXMLRigid_constraint_type_technique_common_spring)
  protected
    { IXMLRigid_constraint_type_technique_common_spring }
    function Get_Angular: IXMLRigid_constraint_type_technique_common_spring_angular;
    function Get_Linear: IXMLRigid_constraint_type_technique_common_spring_linear;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_constraint_type_technique_common_spring_angular }

  TXMLRigid_constraint_type_technique_common_spring_angular = class(TXML, IXMLRigid_constraint_type_technique_common_spring_angular)
  protected
    { IXMLRigid_constraint_type_technique_common_spring_angular }
    function Get_Stiffness: IXMLTargetable_float_type;
    function Get_Damping: IXMLTargetable_float_type;
    function Get_Target_value: IXMLTargetable_float_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLRigid_constraint_type_technique_common_spring_linear }

  TXMLRigid_constraint_type_technique_common_spring_linear = class(TXML, IXMLRigid_constraint_type_technique_common_spring_linear)
  protected
    { IXMLRigid_constraint_type_technique_common_spring_linear }
    function Get_Stiffness: IXMLTargetable_float_type;
    function Get_Damping: IXMLTargetable_float_type;
    function Get_Target_value: IXMLTargetable_float_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_physics_model_type }

  TXMLInstance_physics_model_type = class(TXML, IXMLInstance_physics_model_type)
  private
    FInstance_force_field: IXMLInstance_force_field_typeList;
    FInstance_rigid_body: IXMLInstance_rigid_body_typeList;
    FInstance_rigid_constraint: IXMLInstance_rigid_constraint_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLInstance_physics_model_type }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Parent: UnicodeString;
    function Get_Instance_force_field: IXMLInstance_force_field_typeList;
    function Get_Instance_rigid_body: IXMLInstance_rigid_body_typeList;
    function Get_Instance_rigid_constraint: IXMLInstance_rigid_constraint_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Parent(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_physics_model_typeList }

  TXMLInstance_physics_model_typeList = class(TXMLFilter, IXMLInstance_physics_model_typeList)
  protected
    { IXMLInstance_physics_model_typeList }
    function Add: IXMLInstance_physics_model_type;
    function Insert(const Index: Integer): IXMLInstance_physics_model_type;

    function Get_Item(Index: Integer): IXMLInstance_physics_model_type;
  end;

{ TXMLInstance_force_field_type }

  TXMLInstance_force_field_type = class(TXMLInstance_with_extra_type, IXMLInstance_force_field_type)
  protected
    { IXMLInstance_force_field_type }
  end;

{ TXMLInstance_force_field_typeList }

  TXMLInstance_force_field_typeList = class(TXMLFilter, IXMLInstance_force_field_typeList)
  protected
    { IXMLInstance_force_field_typeList }
    function Add: IXMLInstance_force_field_type;
    function Insert(const Index: Integer): IXMLInstance_force_field_type;

    function Get_Item(Index: Integer): IXMLInstance_force_field_type;
  end;

{ TXMLInstance_rigid_body_type }

  TXMLInstance_rigid_body_type = class(TXML, IXMLInstance_rigid_body_type)
  private
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLInstance_rigid_body_type }
    function Get_Body: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Target: UnicodeString;
    function Get_Technique_common: IXMLInstance_rigid_body_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Body(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Target(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_rigid_body_typeList }

  TXMLInstance_rigid_body_typeList = class(TXMLFilter, IXMLInstance_rigid_body_typeList)
  protected
    { IXMLInstance_rigid_body_typeList }
    function Add: IXMLInstance_rigid_body_type;
    function Insert(const Index: Integer): IXMLInstance_rigid_body_type;

    function Get_Item(Index: Integer): IXMLInstance_rigid_body_type;
  end;

{ TXMLInstance_rigid_body_type_technique_common }

  TXMLInstance_rigid_body_type_technique_common = class(TXML, IXMLInstance_rigid_body_type_technique_common)
  private
    FShape: IXMLInstance_rigid_body_type_technique_common_shapeList;
  protected
    { IXMLInstance_rigid_body_type_technique_common }
    function Get_Angular_velocity: UnicodeString;
    function Get_Velocity: UnicodeString;
    function Get_Dynamic: IXMLInstance_rigid_body_type_technique_common_dynamic;
    function Get_Mass: IXMLTargetable_float_type;
    function Get_Mass_frame: IXMLInstance_rigid_body_type_technique_common_mass_frame;
    function Get_Inertia: IXMLTargetable_float3_type;
    function Get_Instance_physics_material: IXMLInstance_physics_material_type;
    function Get_Physics_material: IXMLPhysics_material_type;
    function Get_Shape: IXMLInstance_rigid_body_type_technique_common_shapeList;
    procedure Set_Angular_velocity(Value: UnicodeString);
    procedure Set_Velocity(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_rigid_body_type_technique_common_dynamic }

  TXMLInstance_rigid_body_type_technique_common_dynamic = class(TXML, IXMLInstance_rigid_body_type_technique_common_dynamic)
  protected
    { IXMLInstance_rigid_body_type_technique_common_dynamic }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLInstance_rigid_body_type_technique_common_mass_frame }

  TXMLInstance_rigid_body_type_technique_common_mass_frame = class(TXML, IXMLInstance_rigid_body_type_technique_common_mass_frame)
  private
    FTranslate: IXMLTranslate_typeList;
    FRotate: IXMLRotate_typeList;
  protected
    { IXMLInstance_rigid_body_type_technique_common_mass_frame }
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_rigid_body_type_technique_common_shape }

  TXMLInstance_rigid_body_type_technique_common_shape = class(TXML, IXMLInstance_rigid_body_type_technique_common_shape)
  private
    FTranslate: IXMLTranslate_typeList;
    FRotate: IXMLRotate_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLInstance_rigid_body_type_technique_common_shape }
    function Get_Hollow: IXMLInstance_rigid_body_type_technique_common_shape_hollow;
    function Get_Mass: IXMLTargetable_float_type;
    function Get_Density: IXMLTargetable_float_type;
    function Get_Instance_physics_material: IXMLInstance_physics_material_type;
    function Get_Physics_material: IXMLPhysics_material_type;
    function Get_Instance_geometry: IXMLInstance_geometry_type;
    function Get_Plane: IXMLPlane_type;
    function Get_Box: IXMLBox_type;
    function Get_Sphere: IXMLSphere_type;
    function Get_Cylinder: IXMLCylinder_type;
    function Get_Capsule: IXMLCapsule_type;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_rigid_body_type_technique_common_shapeList }

  TXMLInstance_rigid_body_type_technique_common_shapeList = class(TXMLFilter, IXMLInstance_rigid_body_type_technique_common_shapeList)
  protected
    { IXMLInstance_rigid_body_type_technique_common_shapeList }
    function Add: IXMLInstance_rigid_body_type_technique_common_shape;
    function Insert(const Index: Integer): IXMLInstance_rigid_body_type_technique_common_shape;

    function Get_Item(Index: Integer): IXMLInstance_rigid_body_type_technique_common_shape;
  end;

{ TXMLInstance_rigid_body_type_technique_common_shape_hollow }

  TXMLInstance_rigid_body_type_technique_common_shape_hollow = class(TXML, IXMLInstance_rigid_body_type_technique_common_shape_hollow)
  protected
    { IXMLInstance_rigid_body_type_technique_common_shape_hollow }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLInstance_rigid_constraint_type }

  TXMLInstance_rigid_constraint_type = class(TXMLFilter, IXMLInstance_rigid_constraint_type)
  protected
    { IXMLInstance_rigid_constraint_type }
    function Get_Constraint: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Extra(Index: Integer): IXMLExtra_type;
    procedure Set_Constraint(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    function Add: IXMLExtra_type;
    function Insert(const Index: Integer): IXMLExtra_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_rigid_constraint_typeList }

  TXMLInstance_rigid_constraint_typeList = class(TXMLFilter, IXMLInstance_rigid_constraint_typeList)
  protected
    { IXMLInstance_rigid_constraint_typeList }
    function Add: IXMLInstance_rigid_constraint_type;
    function Insert(const Index: Integer): IXMLInstance_rigid_constraint_type;

    function Get_Item(Index: Integer): IXMLInstance_rigid_constraint_type;
  end;

{ TXMLLibrary_physics_scenes_type }

  TXMLLibrary_physics_scenes_type = class(TXML, IXMLLibrary_physics_scenes_type)
  private
    FPhysics_scene: IXMLPhysics_scene_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_physics_scenes_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Physics_scene: IXMLPhysics_scene_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_physics_scenes_typeList }

  TXMLLibrary_physics_scenes_typeList = class(TXMLFilter, IXMLLibrary_physics_scenes_typeList)
  protected
    { IXMLLibrary_physics_scenes_typeList }
    function Add: IXMLLibrary_physics_scenes_type;
    function Insert(const Index: Integer): IXMLLibrary_physics_scenes_type;

    function Get_Item(Index: Integer): IXMLLibrary_physics_scenes_type;
  end;

{ TXMLPhysics_scene_type }

  TXMLPhysics_scene_type = class(TXML, IXMLPhysics_scene_type)
  private
    FInstance_force_field: IXMLInstance_force_field_typeList;
    FInstance_physics_model: IXMLInstance_physics_model_typeList;
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLPhysics_scene_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Instance_force_field: IXMLInstance_force_field_typeList;
    function Get_Instance_physics_model: IXMLInstance_physics_model_typeList;
    function Get_Technique_common: IXMLPhysics_scene_type_technique_common;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLPhysics_scene_typeList }

  TXMLPhysics_scene_typeList = class(TXMLFilter, IXMLPhysics_scene_typeList)
  protected
    { IXMLPhysics_scene_typeList }
    function Add: IXMLPhysics_scene_type;
    function Insert(const Index: Integer): IXMLPhysics_scene_type;

    function Get_Item(Index: Integer): IXMLPhysics_scene_type;
  end;

{ TXMLPhysics_scene_type_technique_common }

  TXMLPhysics_scene_type_technique_common = class(TXML, IXMLPhysics_scene_type_technique_common)
  protected
    { IXMLPhysics_scene_type_technique_common }
    function Get_Gravity: IXMLTargetable_float3_type;
    function Get_Time_step: IXMLTargetable_float_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_visual_scenes_type }

  TXMLLibrary_visual_scenes_type = class(TXML, IXMLLibrary_visual_scenes_type)
  private
    FVisual_scene: IXMLVisual_scene_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_visual_scenes_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Visual_scene: IXMLVisual_scene_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_visual_scenes_typeList }

  TXMLLibrary_visual_scenes_typeList = class(TXMLFilter, IXMLLibrary_visual_scenes_typeList)
  protected
    { IXMLLibrary_visual_scenes_typeList }
    function Add: IXMLLibrary_visual_scenes_type;
    function Insert(const Index: Integer): IXMLLibrary_visual_scenes_type;

    function Get_Item(Index: Integer): IXMLLibrary_visual_scenes_type;
  end;

{ TXMLVisual_scene_type }

  TXMLVisual_scene_type = class(TXML, IXMLVisual_scene_type)
  private
    FNode: IXMLNode_typeList;
    FEvaluate_scene: IXMLVisual_scene_type_evaluate_sceneList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLVisual_scene_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Node: IXMLNode_typeList;
    function Get_Evaluate_scene: IXMLVisual_scene_type_evaluate_sceneList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLVisual_scene_typeList }

  TXMLVisual_scene_typeList = class(TXMLFilter, IXMLVisual_scene_typeList)
  protected
    { IXMLVisual_scene_typeList }
    function Add: IXMLVisual_scene_type;
    function Insert(const Index: Integer): IXMLVisual_scene_type;

    function Get_Item(Index: Integer): IXMLVisual_scene_type;
  end;

{ TXMLVisual_scene_type_evaluate_scene }

  TXMLVisual_scene_type_evaluate_scene = class(TXML, IXMLVisual_scene_type_evaluate_scene)
  private
    FRender: IXMLVisual_scene_type_evaluate_scene_renderList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLVisual_scene_type_evaluate_scene }
    function Get_Id: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Enable: Boolean;
    function Get_Asset: IXMLAsset_type;
    function Get_Render: IXMLVisual_scene_type_evaluate_scene_renderList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Enable(Value: Boolean);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLVisual_scene_type_evaluate_sceneList }

  TXMLVisual_scene_type_evaluate_sceneList = class(TXMLFilter, IXMLVisual_scene_type_evaluate_sceneList)
  protected
    { IXMLVisual_scene_type_evaluate_sceneList }
    function Add: IXMLVisual_scene_type_evaluate_scene;
    function Insert(const Index: Integer): IXMLVisual_scene_type_evaluate_scene;

    function Get_Item(Index: Integer): IXMLVisual_scene_type_evaluate_scene;
  end;

{ TXMLVisual_scene_type_evaluate_scene_render }

  TXMLVisual_scene_type_evaluate_scene_render = class(TXML, IXMLVisual_scene_type_evaluate_scene_render)
  private
    FLayer: IXMLNCNameList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLVisual_scene_type_evaluate_scene_render }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Camera_node: UnicodeString;
    function Get_Layer: IXMLNCNameList;
    function Get_Instance_material: IXMLVisual_scene_type_evaluate_scene_render_instance_material;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Camera_node(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLVisual_scene_type_evaluate_scene_renderList }

  TXMLVisual_scene_type_evaluate_scene_renderList = class(TXMLFilter, IXMLVisual_scene_type_evaluate_scene_renderList)
  protected
    { IXMLVisual_scene_type_evaluate_scene_renderList }
    function Add: IXMLVisual_scene_type_evaluate_scene_render;
    function Insert(const Index: Integer): IXMLVisual_scene_type_evaluate_scene_render;

    function Get_Item(Index: Integer): IXMLVisual_scene_type_evaluate_scene_render;
  end;

{ TXMLVisual_scene_type_evaluate_scene_render_instance_material }

  TXMLVisual_scene_type_evaluate_scene_render_instance_material = class(TXML, IXMLVisual_scene_type_evaluate_scene_render_instance_material)
  private
    FBind: IXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLVisual_scene_type_evaluate_scene_render_instance_material }
    function Get_Url: UnicodeString;
    function Get_Technique_override: IXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override;
    function Get_Bind: IXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override }

  TXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override = class(TXML, IXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override)
  protected
    { IXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override }
    function Get_Ref: UnicodeString;
    function Get_Pass: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
    procedure Set_Pass(Value: UnicodeString);
  end;

{ TXMLVisual_scene_type_evaluate_scene_render_instance_material_bind }

  TXMLVisual_scene_type_evaluate_scene_render_instance_material_bind = class(TXML, IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind)
  protected
    { IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind }
    function Get_Semantic: UnicodeString;
    function Get_Target: UnicodeString;
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Target(Value: UnicodeString);
  end;

{ TXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList }

  TXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList = class(TXMLFilter, IXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList)
  protected
    { IXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList }
    function Add: IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind;
    function Insert(const Index: Integer): IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind;

    function Get_Item(Index: Integer): IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind;
  end;

{ TXMLLibrary_joints_type }

  TXMLLibrary_joints_type = class(TXML, IXMLLibrary_joints_type)
  private
    FJoint: IXMLJoint_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_joints_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Joint: IXMLJoint_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_joints_typeList }

  TXMLLibrary_joints_typeList = class(TXMLFilter, IXMLLibrary_joints_typeList)
  protected
    { IXMLLibrary_joints_typeList }
    function Add: IXMLLibrary_joints_type;
    function Insert(const Index: Integer): IXMLLibrary_joints_type;

    function Get_Item(Index: Integer): IXMLLibrary_joints_type;
  end;

{ TXMLJoint_type }

  TXMLJoint_type = class(TXML, IXMLJoint_type)
  private
    FPrismatic: IXMLAxis_constraint_typeList;
    FRevolute: IXMLAxis_constraint_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLJoint_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Prismatic: IXMLAxis_constraint_typeList;
    function Get_Revolute: IXMLAxis_constraint_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLJoint_typeList }

  TXMLJoint_typeList = class(TXMLFilter, IXMLJoint_typeList)
  protected
    { IXMLJoint_typeList }
    function Add: IXMLJoint_type;
    function Insert(const Index: Integer): IXMLJoint_type;

    function Get_Item(Index: Integer): IXMLJoint_type;
  end;

{ TXMLAxis_constraint_type }

  TXMLAxis_constraint_type = class(TXML, IXMLAxis_constraint_type)
  protected
    { IXMLAxis_constraint_type }
    function Get_Sid: UnicodeString;
    function Get_Axis: IXMLAxis_type;
    function Get_Limits: IXMLJoint_limits_type;
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLAxis_constraint_typeList }

  TXMLAxis_constraint_typeList = class(TXMLFilter, IXMLAxis_constraint_typeList)
  protected
    { IXMLAxis_constraint_typeList }
    function Add: IXMLAxis_constraint_type;
    function Insert(const Index: Integer): IXMLAxis_constraint_type;

    function Get_Item(Index: Integer): IXMLAxis_constraint_type;
  end;

{ TXMLAxis_type }

  TXMLAxis_type = class(TXML, IXMLAxis_type)
  protected
    { IXMLAxis_type }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  end;

{ TXMLJoint_limits_type }

  TXMLJoint_limits_type = class(TXML, IXMLJoint_limits_type)
  protected
    { IXMLJoint_limits_type }
    function Get_Min: IXMLMinmax_type;
    function Get_Max: IXMLMinmax_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMinmax_type }

  TXMLMinmax_type = class(TXML, IXMLMinmax_type)
  protected
    { IXMLMinmax_type }
    function Get_Name: UnicodeString;
    function Get_Sid: UnicodeString;
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLLibrary_kinematics_models_type }

  TXMLLibrary_kinematics_models_type = class(TXML, IXMLLibrary_kinematics_models_type)
  private
    FKinematics_model: IXMLKinematics_model_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_kinematics_models_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Kinematics_model: IXMLKinematics_model_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_kinematics_models_typeList }

  TXMLLibrary_kinematics_models_typeList = class(TXMLFilter, IXMLLibrary_kinematics_models_typeList)
  protected
    { IXMLLibrary_kinematics_models_typeList }
    function Add: IXMLLibrary_kinematics_models_type;
    function Insert(const Index: Integer): IXMLLibrary_kinematics_models_type;

    function Get_Item(Index: Integer): IXMLLibrary_kinematics_models_type;
  end;

{ TXMLKinematics_model_type }

  TXMLKinematics_model_type = class(TXML, IXMLKinematics_model_type)
  private
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLKinematics_model_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Technique_common: IXMLKinematics_model_technique_type;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLKinematics_model_typeList }

  TXMLKinematics_model_typeList = class(TXMLFilter, IXMLKinematics_model_typeList)
  protected
    { IXMLKinematics_model_typeList }
    function Add: IXMLKinematics_model_type;
    function Insert(const Index: Integer): IXMLKinematics_model_type;

    function Get_Item(Index: Integer): IXMLKinematics_model_type;
  end;

{ TXMLKinematics_model_technique_type }

  TXMLKinematics_model_technique_type = class(TXML, IXMLKinematics_model_technique_type)
  private
    FNewparam: IXMLKinematics_newparam_typeList;
    FInstance_joint: IXMLInstance_joint_typeList;
    FJoint: IXMLJoint_typeList;
    FLink: IXMLLink_typeList;
    FFormula: IXMLFormula_typeList;
    FInstance_formula: IXMLInstance_formula_typeList;
  protected
    { IXMLKinematics_model_technique_type }
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Instance_joint: IXMLInstance_joint_typeList;
    function Get_Joint: IXMLJoint_typeList;
    function Get_Link: IXMLLink_typeList;
    function Get_Formula: IXMLFormula_typeList;
    function Get_Instance_formula: IXMLInstance_formula_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLKinematics_newparam_type }

  TXMLKinematics_newparam_type = class(TXML, IXMLKinematics_newparam_type)
  protected
    { IXMLKinematics_newparam_type }
    function Get_Sid: UnicodeString;
    function Get_Float: Double;
    function Get_Int: Int64;
    function Get_SIDREF: UnicodeString;
    function Get_Bool: Boolean;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Int(Value: Int64);
    procedure Set_SIDREF(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
  end;

{ TXMLKinematics_newparam_typeList }

  TXMLKinematics_newparam_typeList = class(TXMLFilter, IXMLKinematics_newparam_typeList)
  protected
    { IXMLKinematics_newparam_typeList }
    function Add: IXMLKinematics_newparam_type;
    function Insert(const Index: Integer): IXMLKinematics_newparam_type;

    function Get_Item(Index: Integer): IXMLKinematics_newparam_type;
  end;

{ TXMLInstance_joint_type }

  TXMLInstance_joint_type = class(TXMLInstance_with_extra_type, IXMLInstance_joint_type)
  protected
    { IXMLInstance_joint_type }
  end;

{ TXMLInstance_joint_typeList }

  TXMLInstance_joint_typeList = class(TXMLFilter, IXMLInstance_joint_typeList)
  protected
    { IXMLInstance_joint_typeList }
    function Add: IXMLInstance_joint_type;
    function Insert(const Index: Integer): IXMLInstance_joint_type;

    function Get_Item(Index: Integer): IXMLInstance_joint_type;
  end;

{ TXMLLink_type }

  TXMLLink_type = class(TXML, IXMLLink_type)
  private
    FRotate: IXMLRotate_typeList;
    FTranslate: IXMLTranslate_typeList;
    FAttachment_full: IXMLLink_type_attachment_fullList;
    FAttachment_start: IXMLLink_type_attachment_startList;
    FAttachment_end: IXMLLink_type_attachment_endList;
  protected
    { IXMLLink_type }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Attachment_full: IXMLLink_type_attachment_fullList;
    function Get_Attachment_start: IXMLLink_type_attachment_startList;
    function Get_Attachment_end: IXMLLink_type_attachment_endList;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLink_typeList }

  TXMLLink_typeList = class(TXMLFilter, IXMLLink_typeList)
  protected
    { IXMLLink_typeList }
    function Add: IXMLLink_type;
    function Insert(const Index: Integer): IXMLLink_type;

    function Get_Item(Index: Integer): IXMLLink_type;
  end;

{ TXMLLink_type_attachment_full }

  TXMLLink_type_attachment_full = class(TXML, IXMLLink_type_attachment_full)
  private
    FRotate: IXMLRotate_typeList;
    FTranslate: IXMLTranslate_typeList;
  protected
    { IXMLLink_type_attachment_full }
    function Get_Joint: UnicodeString;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Link: IXMLLink_type;
    procedure Set_Joint(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLink_type_attachment_fullList }

  TXMLLink_type_attachment_fullList = class(TXMLFilter, IXMLLink_type_attachment_fullList)
  protected
    { IXMLLink_type_attachment_fullList }
    function Add: IXMLLink_type_attachment_full;
    function Insert(const Index: Integer): IXMLLink_type_attachment_full;

    function Get_Item(Index: Integer): IXMLLink_type_attachment_full;
  end;

{ TXMLLink_type_attachment_start }

  TXMLLink_type_attachment_start = class(TXML, IXMLLink_type_attachment_start)
  private
    FRotate: IXMLRotate_typeList;
    FTranslate: IXMLTranslate_typeList;
  protected
    { IXMLLink_type_attachment_start }
    function Get_Joint: UnicodeString;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Translate: IXMLTranslate_typeList;
    procedure Set_Joint(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLink_type_attachment_startList }

  TXMLLink_type_attachment_startList = class(TXMLFilter, IXMLLink_type_attachment_startList)
  protected
    { IXMLLink_type_attachment_startList }
    function Add: IXMLLink_type_attachment_start;
    function Insert(const Index: Integer): IXMLLink_type_attachment_start;

    function Get_Item(Index: Integer): IXMLLink_type_attachment_start;
  end;

{ TXMLLink_type_attachment_end }

  TXMLLink_type_attachment_end = class(TXML, IXMLLink_type_attachment_end)
  private
    FRotate: IXMLRotate_typeList;
    FTranslate: IXMLTranslate_typeList;
  protected
    { IXMLLink_type_attachment_end }
    function Get_Joint: UnicodeString;
    function Get_Rotate: IXMLRotate_typeList;
    function Get_Translate: IXMLTranslate_typeList;
    procedure Set_Joint(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLink_type_attachment_endList }

  TXMLLink_type_attachment_endList = class(TXMLFilter, IXMLLink_type_attachment_endList)
  protected
    { IXMLLink_type_attachment_endList }
    function Add: IXMLLink_type_attachment_end;
    function Insert(const Index: Integer): IXMLLink_type_attachment_end;

    function Get_Item(Index: Integer): IXMLLink_type_attachment_end;
  end;

{ TXMLFormula_type }

  TXMLFormula_type = class(TXML, IXMLFormula_type)
  private
    FNewparam: IXMLFormula_newparam_typeList;
    FTechnique: IXMLTechnique_typeList;
  protected
    { IXMLFormula_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Newparam: IXMLFormula_newparam_typeList;
    function Get_Target: IXMLCommon_float_or_param_type;
    function Get_Technique_common: IXMLFormula_technique_type;
    function Get_Technique: IXMLTechnique_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLFormula_typeList }

  TXMLFormula_typeList = class(TXMLFilter, IXMLFormula_typeList)
  protected
    { IXMLFormula_typeList }
    function Add: IXMLFormula_type;
    function Insert(const Index: Integer): IXMLFormula_type;

    function Get_Item(Index: Integer): IXMLFormula_type;
  end;

{ TXMLFormula_newparam_type }

  TXMLFormula_newparam_type = class(TXML, IXMLFormula_newparam_type)
  protected
    { IXMLFormula_newparam_type }
    function Get_Sid: UnicodeString;
    function Get_Float: Double;
    function Get_Int: Int64;
    function Get_SIDREF: UnicodeString;
    function Get_Bool: Boolean;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Int(Value: Int64);
    procedure Set_SIDREF(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
  end;

{ TXMLFormula_newparam_typeList }

  TXMLFormula_newparam_typeList = class(TXMLFilter, IXMLFormula_newparam_typeList)
  protected
    { IXMLFormula_newparam_typeList }
    function Add: IXMLFormula_newparam_type;
    function Insert(const Index: Integer): IXMLFormula_newparam_type;

    function Get_Item(Index: Integer): IXMLFormula_newparam_type;
  end;

{ TXMLCommon_float_or_param_type }

  TXMLCommon_float_or_param_type = class(TXML, IXMLCommon_float_or_param_type)
  protected
    { IXMLCommon_float_or_param_type }
    function Get_Float: Double;
    function Get_Param: IXMLCommon_param_type;
    procedure Set_Float(Value: Double);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCommon_param_type }

  TXMLCommon_param_type = class(TXML, IXMLCommon_param_type)
  protected
    { IXMLCommon_param_type }
  end;

{ TXMLFormula_technique_type }

  TXMLFormula_technique_type = class(TXML, IXMLFormula_technique_type)
  protected
    { IXMLFormula_technique_type }
    function Get_Math: IXMLMathtype;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMathtype }

  TXMLMathtype = class(TXML, IXMLMathtype)
  protected
    { IXMLMathtype }
    function Get_Baseline: UnicodeString;
    function Get_Overflow: UnicodeString;
    function Get_Altimg: UnicodeString;
    function Get_Alttext: UnicodeString;
    function Get_Type_: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Height: UnicodeString;
    function Get_Width: UnicodeString;
    function Get_Macros: UnicodeString;
    function Get_Display: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Baseline(Value: UnicodeString);
    procedure Set_Overflow(Value: UnicodeString);
    procedure Set_Altimg(Value: UnicodeString);
    procedure Set_Alttext(Value: UnicodeString);
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Height(Value: UnicodeString);
    procedure Set_Width(Value: UnicodeString);
    procedure Set_Macros(Value: UnicodeString);
    procedure Set_Display(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMitype }

  TXMLMitype = class(TXML, IXMLMitype)
  protected
    { IXMLMitype }
    function Get_Mathvariant: UnicodeString;
    function Get_Mathsize: UnicodeString;
    function Get_Mathcolor: UnicodeString;
    function Get_Mathbackground: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mglyph: IXMLMglyphtype;
    procedure Set_Mathvariant(Value: UnicodeString);
    procedure Set_Mathsize(Value: UnicodeString);
    procedure Set_Mathcolor(Value: UnicodeString);
    procedure Set_Mathbackground(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMalignmarktype }

  TXMLMalignmarktype = class(TXML, IXMLMalignmarktype)
  protected
    { IXMLMalignmarktype }
    function Get_Edge: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Edge(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLMglyphtype }

  TXMLMglyphtype = class(TXML, IXMLMglyphtype)
  protected
    { IXMLMglyphtype }
    function Get_Alt: UnicodeString;
    function Get_Fontfamily: UnicodeString;
    function Get_Index: LongWord;
    procedure Set_Alt(Value: UnicodeString);
    procedure Set_Fontfamily(Value: UnicodeString);
    procedure Set_Index(Value: LongWord);
  end;

{ TXMLMotype }

  TXMLMotype = class(TXML, IXMLMotype)
  protected
    { IXMLMotype }
    function Get_Form: UnicodeString;
    function Get_Lspace: UnicodeString;
    function Get_Rspace: UnicodeString;
    function Get_Fence: Boolean;
    function Get_Separator: Boolean;
    function Get_Stretchy: Boolean;
    function Get_Symmetric: Boolean;
    function Get_Movablelimits: Boolean;
    function Get_Accent: Boolean;
    function Get_Largeop: Boolean;
    function Get_Minsize: UnicodeString;
    function Get_Maxsize: UnicodeString;
    function Get_Mathvariant: UnicodeString;
    function Get_Mathsize: UnicodeString;
    function Get_Mathcolor: UnicodeString;
    function Get_Mathbackground: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mglyph: IXMLMglyphtype;
    procedure Set_Form(Value: UnicodeString);
    procedure Set_Lspace(Value: UnicodeString);
    procedure Set_Rspace(Value: UnicodeString);
    procedure Set_Fence(Value: Boolean);
    procedure Set_Separator(Value: Boolean);
    procedure Set_Stretchy(Value: Boolean);
    procedure Set_Symmetric(Value: Boolean);
    procedure Set_Movablelimits(Value: Boolean);
    procedure Set_Accent(Value: Boolean);
    procedure Set_Largeop(Value: Boolean);
    procedure Set_Minsize(Value: UnicodeString);
    procedure Set_Maxsize(Value: UnicodeString);
    procedure Set_Mathvariant(Value: UnicodeString);
    procedure Set_Mathsize(Value: UnicodeString);
    procedure Set_Mathcolor(Value: UnicodeString);
    procedure Set_Mathbackground(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMntype }

  TXMLMntype = class(TXML, IXMLMntype)
  protected
    { IXMLMntype }
    function Get_Mathvariant: UnicodeString;
    function Get_Mathsize: UnicodeString;
    function Get_Mathcolor: UnicodeString;
    function Get_Mathbackground: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mglyph: IXMLMglyphtype;
    procedure Set_Mathvariant(Value: UnicodeString);
    procedure Set_Mathsize(Value: UnicodeString);
    procedure Set_Mathcolor(Value: UnicodeString);
    procedure Set_Mathbackground(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMtexttype }

  TXMLMtexttype = class(TXML, IXMLMtexttype)
  protected
    { IXMLMtexttype }
    function Get_Mathvariant: UnicodeString;
    function Get_Mathsize: UnicodeString;
    function Get_Mathcolor: UnicodeString;
    function Get_Mathbackground: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mglyph: IXMLMglyphtype;
    procedure Set_Mathvariant(Value: UnicodeString);
    procedure Set_Mathsize(Value: UnicodeString);
    procedure Set_Mathcolor(Value: UnicodeString);
    procedure Set_Mathbackground(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMstype }

  TXMLMstype = class(TXML, IXMLMstype)
  protected
    { IXMLMstype }
    function Get_Lquote: UnicodeString;
    function Get_Rquote: UnicodeString;
    function Get_Mathvariant: UnicodeString;
    function Get_Mathsize: UnicodeString;
    function Get_Mathcolor: UnicodeString;
    function Get_Mathbackground: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mglyph: IXMLMglyphtype;
    procedure Set_Lquote(Value: UnicodeString);
    procedure Set_Rquote(Value: UnicodeString);
    procedure Set_Mathvariant(Value: UnicodeString);
    procedure Set_Mathsize(Value: UnicodeString);
    procedure Set_Mathcolor(Value: UnicodeString);
    procedure Set_Mathbackground(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMrowtype }

  TXMLMrowtype = class(TXML, IXMLMrowtype)
  protected
    { IXMLMrowtype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMfractype }

  TXMLMfractype = class(TXML, IXMLMfractype)
  protected
    { IXMLMfractype }
    function Get_Bevelled: Boolean;
    function Get_Denomalign: UnicodeString;
    function Get_Numalign: UnicodeString;
    function Get_Linethickness: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Bevelled(Value: Boolean);
    procedure Set_Denomalign(Value: UnicodeString);
    procedure Set_Numalign(Value: UnicodeString);
    procedure Set_Linethickness(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMsqrttype }

  TXMLMsqrttype = class(TXML, IXMLMsqrttype)
  protected
    { IXMLMsqrttype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMroottype }

  TXMLMroottype = class(TXML, IXMLMroottype)
  protected
    { IXMLMroottype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMpaddedtype }

  TXMLMpaddedtype = class(TXML, IXMLMpaddedtype)
  protected
    { IXMLMpaddedtype }
    function Get_Width: UnicodeString;
    function Get_Lspace: UnicodeString;
    function Get_Height: UnicodeString;
    function Get_Depth: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Width(Value: UnicodeString);
    procedure Set_Lspace(Value: UnicodeString);
    procedure Set_Height(Value: UnicodeString);
    procedure Set_Depth(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMphantomtype }

  TXMLMphantomtype = class(TXML, IXMLMphantomtype)
  protected
    { IXMLMphantomtype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMfencedtype }

  TXMLMfencedtype = class(TXML, IXMLMfencedtype)
  protected
    { IXMLMfencedtype }
    function Get_Open: UnicodeString;
    function Get_Close: UnicodeString;
    function Get_Separators: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Open(Value: UnicodeString);
    procedure Set_Close(Value: UnicodeString);
    procedure Set_Separators(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMenclosetype }

  TXMLMenclosetype = class(TXML, IXMLMenclosetype)
  protected
    { IXMLMenclosetype }
    function Get_Notation: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Notation(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMsubtype }

  TXMLMsubtype = class(TXML, IXMLMsubtype)
  protected
    { IXMLMsubtype }
    function Get_Subscriptshift: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Subscriptshift(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMsuptype }

  TXMLMsuptype = class(TXML, IXMLMsuptype)
  protected
    { IXMLMsuptype }
    function Get_Superscriptshift: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Superscriptshift(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMsubsuptype }

  TXMLMsubsuptype = class(TXML, IXMLMsubsuptype)
  protected
    { IXMLMsubsuptype }
    function Get_Subscriptshift: UnicodeString;
    function Get_Superscriptshift: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Subscriptshift(Value: UnicodeString);
    procedure Set_Superscriptshift(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMundertype }

  TXMLMundertype = class(TXML, IXMLMundertype)
  protected
    { IXMLMundertype }
    function Get_Accentunder: Boolean;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Accentunder(Value: Boolean);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMovertype }

  TXMLMovertype = class(TXML, IXMLMovertype)
  protected
    { IXMLMovertype }
    function Get_Accent: Boolean;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Accent(Value: Boolean);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMunderovertype }

  TXMLMunderovertype = class(TXML, IXMLMunderovertype)
  protected
    { IXMLMunderovertype }
    function Get_Accent: Boolean;
    function Get_Accentunder: Boolean;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Accent(Value: Boolean);
    procedure Set_Accentunder(Value: Boolean);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMmultiscriptstype }

  TXMLMmultiscriptstype = class(TXML, IXMLMmultiscriptstype)
  protected
    { IXMLMmultiscriptstype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_None: IXMLNonetype;
    function Get_Mprescripts: IXMLMprescriptstype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMtabletype }

  TXMLMtabletype = class(TXML, IXMLMtabletype)
  protected
    { IXMLMtabletype }
    function Get_Rowalign: UnicodeString;
    function Get_Columnalign: UnicodeString;
    function Get_Groupalign: UnicodeString;
    function Get_Align: UnicodeString;
    function Get_Alignmentscope: UnicodeString;
    function Get_Columnwidth: UnicodeString;
    function Get_Width: UnicodeString;
    function Get_Rowspacing: UnicodeString;
    function Get_Columnspacing: UnicodeString;
    function Get_Rowlines: UnicodeString;
    function Get_Columnlines: UnicodeString;
    function Get_Frame: UnicodeString;
    function Get_Framespacing: UnicodeString;
    function Get_Equalrows: Boolean;
    function Get_Equalcolumns: Boolean;
    function Get_Displaystyle: Boolean;
    function Get_Side: UnicodeString;
    function Get_Minlabelspacing: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mtr: IXMLMtrtype;
    function Get_Mlabeledtr: IXMLMlabeledtrtype;
    procedure Set_Rowalign(Value: UnicodeString);
    procedure Set_Columnalign(Value: UnicodeString);
    procedure Set_Groupalign(Value: UnicodeString);
    procedure Set_Align(Value: UnicodeString);
    procedure Set_Alignmentscope(Value: UnicodeString);
    procedure Set_Columnwidth(Value: UnicodeString);
    procedure Set_Width(Value: UnicodeString);
    procedure Set_Rowspacing(Value: UnicodeString);
    procedure Set_Columnspacing(Value: UnicodeString);
    procedure Set_Rowlines(Value: UnicodeString);
    procedure Set_Columnlines(Value: UnicodeString);
    procedure Set_Frame(Value: UnicodeString);
    procedure Set_Framespacing(Value: UnicodeString);
    procedure Set_Equalrows(Value: Boolean);
    procedure Set_Equalcolumns(Value: Boolean);
    procedure Set_Displaystyle(Value: Boolean);
    procedure Set_Side(Value: UnicodeString);
    procedure Set_Minlabelspacing(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMtrtype }

  TXMLMtrtype = class(TXML, IXMLMtrtype)
  protected
    { IXMLMtrtype }
    function Get_Rowalign: UnicodeString;
    function Get_Columnalign: UnicodeString;
    function Get_Groupalign: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mtd: IXMLMtdtype;
    procedure Set_Rowalign(Value: UnicodeString);
    procedure Set_Columnalign(Value: UnicodeString);
    procedure Set_Groupalign(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMtdtype }

  TXMLMtdtype = class(TXML, IXMLMtdtype)
  protected
    { IXMLMtdtype }
    function Get_Rowalign: UnicodeString;
    function Get_Columnalign: UnicodeString;
    function Get_Groupalign: UnicodeString;
    function Get_Columnspan: LongWord;
    function Get_Rowspan: LongWord;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Rowalign(Value: UnicodeString);
    procedure Set_Columnalign(Value: UnicodeString);
    procedure Set_Groupalign(Value: UnicodeString);
    procedure Set_Columnspan(Value: LongWord);
    procedure Set_Rowspan(Value: LongWord);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMaligngrouptype }

  TXMLMaligngrouptype = class(TXML, IXMLMaligngrouptype)
  protected
    { IXMLMaligngrouptype }
    function Get_Groupalign: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Groupalign(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLMspacetype }

  TXMLMspacetype = class(TXML, IXMLMspacetype)
  protected
    { IXMLMspacetype }
    function Get_Width: UnicodeString;
    function Get_Height: UnicodeString;
    function Get_Depth: UnicodeString;
    function Get_Linebreak: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Width(Value: UnicodeString);
    procedure Set_Height(Value: UnicodeString);
    procedure Set_Depth(Value: UnicodeString);
    procedure Set_Linebreak(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLMactiontype }

  TXMLMactiontype = class(TXML, IXMLMactiontype)
  protected
    { IXMLMactiontype }
    function Get_Actiontype: UnicodeString;
    function Get_Selection: LongWord;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Actiontype(Value: UnicodeString);
    procedure Set_Selection(Value: LongWord);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMerrortype }

  TXMLMerrortype = class(TXML, IXMLMerrortype)
  protected
    { IXMLMerrortype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMstyletype }

  TXMLMstyletype = class(TXML, IXMLMstyletype)
  protected
    { IXMLMstyletype }
    function Get_Scriptlevel: Integer;
    function Get_Displaystyle: Boolean;
    function Get_Scriptsizemultiplier: UnicodeString;
    function Get_Scriptminsize: UnicodeString;
    function Get_Color: UnicodeString;
    function Get_Background: UnicodeString;
    function Get_Veryverythinmathspace: UnicodeString;
    function Get_Verythinmathspace: UnicodeString;
    function Get_Thinmathspace: UnicodeString;
    function Get_Mediummathspace: UnicodeString;
    function Get_Thickmathspace: UnicodeString;
    function Get_Verythickmathspace: UnicodeString;
    function Get_Veryverythickmathspace: UnicodeString;
    function Get_Linethickness: UnicodeString;
    function Get_Form: UnicodeString;
    function Get_Lspace: UnicodeString;
    function Get_Rspace: UnicodeString;
    function Get_Fence: Boolean;
    function Get_Separator: Boolean;
    function Get_Stretchy: Boolean;
    function Get_Symmetric: Boolean;
    function Get_Movablelimits: Boolean;
    function Get_Accent: Boolean;
    function Get_Largeop: Boolean;
    function Get_Minsize: UnicodeString;
    function Get_Maxsize: UnicodeString;
    function Get_Mathvariant: UnicodeString;
    function Get_Mathsize: UnicodeString;
    function Get_Mathcolor: UnicodeString;
    function Get_Mathbackground: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Scriptlevel(Value: Integer);
    procedure Set_Displaystyle(Value: Boolean);
    procedure Set_Scriptsizemultiplier(Value: UnicodeString);
    procedure Set_Scriptminsize(Value: UnicodeString);
    procedure Set_Color(Value: UnicodeString);
    procedure Set_Background(Value: UnicodeString);
    procedure Set_Veryverythinmathspace(Value: UnicodeString);
    procedure Set_Verythinmathspace(Value: UnicodeString);
    procedure Set_Thinmathspace(Value: UnicodeString);
    procedure Set_Mediummathspace(Value: UnicodeString);
    procedure Set_Thickmathspace(Value: UnicodeString);
    procedure Set_Verythickmathspace(Value: UnicodeString);
    procedure Set_Veryverythickmathspace(Value: UnicodeString);
    procedure Set_Linethickness(Value: UnicodeString);
    procedure Set_Form(Value: UnicodeString);
    procedure Set_Lspace(Value: UnicodeString);
    procedure Set_Rspace(Value: UnicodeString);
    procedure Set_Fence(Value: Boolean);
    procedure Set_Separator(Value: Boolean);
    procedure Set_Stretchy(Value: Boolean);
    procedure Set_Symmetric(Value: Boolean);
    procedure Set_Movablelimits(Value: Boolean);
    procedure Set_Accent(Value: Boolean);
    procedure Set_Largeop(Value: Boolean);
    procedure Set_Minsize(Value: UnicodeString);
    procedure Set_Maxsize(Value: UnicodeString);
    procedure Set_Mathvariant(Value: UnicodeString);
    procedure Set_Mathsize(Value: UnicodeString);
    procedure Set_Mathcolor(Value: UnicodeString);
    procedure Set_Mathbackground(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCntype }

  TXMLCntype = class(TXML, IXMLCntype)
  protected
    { IXMLCntype }
    function Get_Base: LongWord;
    function Get_Type_: UnicodeString;
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Sep: IXMLSeptype;
    procedure Set_Base(Value: LongWord);
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCitype }

  TXMLCitype = class(TXML, IXMLCitype)
  protected
    { IXMLCitype }
    function Get_Type_: UnicodeString;
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCsymboltype }

  TXMLCsymboltype = class(TXML, IXMLCsymboltype)
  protected
    { IXMLCsymboltype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLArithtype }

  TXMLArithtype = class(TXML, IXMLArithtype)
  protected
    { IXMLArithtype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLFunctionstype }

  TXMLFunctionstype = class(TXML, IXMLFunctionstype)
  protected
    { IXMLFunctionstype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLDomainofapplicationtype }

  TXMLDomainofapplicationtype = class(TXML, IXMLDomainofapplicationtype)
  protected
    { IXMLDomainofapplicationtype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLElementaryfunctionstype }

  TXMLElementaryfunctionstype = class(TXML, IXMLElementaryfunctionstype)
  protected
    { IXMLElementaryfunctionstype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLLogictype }

  TXMLLogictype = class(TXML, IXMLLogictype)
  protected
    { IXMLLogictype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLConstanttype }

  TXMLConstanttype = class(TXML, IXMLConstanttype)
  protected
    { IXMLConstanttype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLSettype }

  TXMLSettype = class(TXML, IXMLSettype)
  protected
    { IXMLSettype }
    function Get_Type_: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLListtype }

  TXMLListtype = class(TXML, IXMLListtype)
  protected
    { IXMLListtype }
    function Get_Order: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Order(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLUniontype }

  TXMLUniontype = class(TXML, IXMLUniontype)
  protected
    { IXMLUniontype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLIntersecttype }

  TXMLIntersecttype = class(TXML, IXMLIntersecttype)
  protected
    { IXMLIntersecttype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLIntype }

  TXMLIntype = class(TXML, IXMLIntype)
  protected
    { IXMLIntype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLNotintype }

  TXMLNotintype = class(TXML, IXMLNotintype)
  protected
    { IXMLNotintype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLSubsettype }

  TXMLSubsettype = class(TXML, IXMLSubsettype)
  protected
    { IXMLSubsettype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLPrsubsettype }

  TXMLPrsubsettype = class(TXML, IXMLPrsubsettype)
  protected
    { IXMLPrsubsettype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLNotsubsettype }

  TXMLNotsubsettype = class(TXML, IXMLNotsubsettype)
  protected
    { IXMLNotsubsettype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLNotprsubsettype }

  TXMLNotprsubsettype = class(TXML, IXMLNotprsubsettype)
  protected
    { IXMLNotprsubsettype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLSetdifftype }

  TXMLSetdifftype = class(TXML, IXMLSetdifftype)
  protected
    { IXMLSetdifftype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLCardtype }

  TXMLCardtype = class(TXML, IXMLCardtype)
  protected
    { IXMLCardtype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLCartesianproducttype }

  TXMLCartesianproducttype = class(TXML, IXMLCartesianproducttype)
  protected
    { IXMLCartesianproducttype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLRelationstype }

  TXMLRelationstype = class(TXML, IXMLRelationstype)
  protected
    { IXMLRelationstype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLLogbasetype }

  TXMLLogbasetype = class(TXML, IXMLLogbasetype)
  protected
    { IXMLLogbasetype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInttype }

  TXMLInttype = class(TXML, IXMLInttype)
  protected
    { IXMLInttype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLDifftype }

  TXMLDifftype = class(TXML, IXMLDifftype)
  protected
    { IXMLDifftype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLPartialdifftype }

  TXMLPartialdifftype = class(TXML, IXMLPartialdifftype)
  protected
    { IXMLPartialdifftype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLLimittype }

  TXMLLimittype = class(TXML, IXMLLimittype)
  protected
    { IXMLLimittype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLLowlimittype }

  TXMLLowlimittype = class(TXML, IXMLLowlimittype)
  protected
    { IXMLLowlimittype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLUplimittype }

  TXMLUplimittype = class(TXML, IXMLUplimittype)
  protected
    { IXMLUplimittype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLTendstotype }

  TXMLTendstotype = class(TXML, IXMLTendstotype)
  protected
    { IXMLTendstotype }
    function Get_Type_: UnicodeString;
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLVectortype }

  TXMLVectortype = class(TXML, IXMLVectortype)
  protected
    { IXMLVectortype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMatrixtype }

  TXMLMatrixtype = class(TXML, IXMLMatrixtype)
  protected
    { IXMLMatrixtype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Matrixrow: IXMLMatrixrowtype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMatrixrowtype }

  TXMLMatrixrowtype = class(TXML, IXMLMatrixrowtype)
  protected
    { IXMLMatrixrowtype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLDeterminanttype }

  TXMLDeterminanttype = class(TXML, IXMLDeterminanttype)
  protected
    { IXMLDeterminanttype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLTransposetype }

  TXMLTransposetype = class(TXML, IXMLTransposetype)
  protected
    { IXMLTransposetype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLSelectortype }

  TXMLSelectortype = class(TXML, IXMLSelectortype)
  protected
    { IXMLSelectortype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLVectorproducttype }

  TXMLVectorproducttype = class(TXML, IXMLVectorproducttype)
  protected
    { IXMLVectorproducttype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLScalarproducttype }

  TXMLScalarproducttype = class(TXML, IXMLScalarproducttype)
  protected
    { IXMLScalarproducttype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLOuterproducttype }

  TXMLOuterproducttype = class(TXML, IXMLOuterproducttype)
  protected
    { IXMLOuterproducttype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLDivergencetype }

  TXMLDivergencetype = class(TXML, IXMLDivergencetype)
  protected
    { IXMLDivergencetype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLGradtype }

  TXMLGradtype = class(TXML, IXMLGradtype)
  protected
    { IXMLGradtype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLCurltype }

  TXMLCurltype = class(TXML, IXMLCurltype)
  protected
    { IXMLCurltype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLLaplaciantype }

  TXMLLaplaciantype = class(TXML, IXMLLaplaciantype)
  protected
    { IXMLLaplaciantype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLMeantype }

  TXMLMeantype = class(TXML, IXMLMeantype)
  protected
    { IXMLMeantype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLSdevtype }

  TXMLSdevtype = class(TXML, IXMLSdevtype)
  protected
    { IXMLSdevtype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLVariancetype }

  TXMLVariancetype = class(TXML, IXMLVariancetype)
  protected
    { IXMLVariancetype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLMediantype }

  TXMLMediantype = class(TXML, IXMLMediantype)
  protected
    { IXMLMediantype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLModetype }

  TXMLModetype = class(TXML, IXMLModetype)
  protected
    { IXMLModetype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLMomenttype }

  TXMLMomenttype = class(TXML, IXMLMomenttype)
  protected
    { IXMLMomenttype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLMomentabouttype }

  TXMLMomentabouttype = class(TXML, IXMLMomentabouttype)
  protected
    { IXMLMomentabouttype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLApplytype }

  TXMLApplytype = class(TXML, IXMLApplytype)
  protected
    { IXMLApplytype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLIntervaltype }

  TXMLIntervaltype = class(TXML, IXMLIntervaltype)
  protected
    { IXMLIntervaltype }
    function Get_Closure: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Closure(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInversetype }

  TXMLInversetype = class(TXML, IXMLInversetype)
  protected
    { IXMLInversetype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLConditiontype }

  TXMLConditiontype = class(TXML, IXMLConditiontype)
  protected
    { IXMLConditiontype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLDeclaretype }

  TXMLDeclaretype = class(TXML, IXMLDeclaretype)
  protected
    { IXMLDeclaretype }
    function Get_Type_: UnicodeString;
    function Get_Scope: UnicodeString;
    function Get_Nargs: LongWord;
    function Get_Occurrence: UnicodeString;
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Type_(Value: UnicodeString);
    procedure Set_Scope(Value: UnicodeString);
    procedure Set_Nargs(Value: LongWord);
    procedure Set_Occurrence(Value: UnicodeString);
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLambdatype }

  TXMLLambdatype = class(TXML, IXMLLambdatype)
  protected
    { IXMLLambdatype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLPiecewisetype }

  TXMLPiecewisetype = class(TXML, IXMLPiecewisetype)
  private
    FPiece: IXMLPiecetypeList;
  protected
    { IXMLPiecewisetype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Piece: IXMLPiecetypeList;
    function Get_Otherwise: IXMLOtherwisetype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLPiecetype }

  TXMLPiecetype = class(TXML, IXMLPiecetype)
  protected
    { IXMLPiecetype }
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLPiecetypeList }

  TXMLPiecetypeList = class(TXMLFilter, IXMLPiecetypeList)
  protected
    { IXMLPiecetypeList }
    function Add: IXMLPiecetype;
    function Insert(const Index: Integer): IXMLPiecetype;

    function Get_Item(Index: Integer): IXMLPiecetype;
  end;

{ TXMLBvartype }

  TXMLBvartype = class(TXML, IXMLBvartype)
  protected
    { IXMLBvartype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLDegreetype }

  TXMLDegreetype = class(TXML, IXMLDegreetype)
  protected
    { IXMLDegreetype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSemanticstype }

  TXMLSemanticstype = class(TXML, IXMLSemanticstype)
  protected
    { IXMLSemanticstype }
    function Get_Encoding: UnicodeString;
    function Get_DefinitionURL: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    function Get_Annotation: IXMLAnnotationtype;
    function Get_Annotationxml: IXMLAnnotationxmltype;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_DefinitionURL(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLAnnotationtype }

  TXMLAnnotationtype = class(TXML, IXMLAnnotationtype)
  protected
    { IXMLAnnotationtype }
    function Get_Encoding: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLAnnotationxmltype }

  TXMLAnnotationxmltype = class(TXML, IXMLAnnotationxmltype)
  protected
    { IXMLAnnotationxmltype }
    function Get_Encoding: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    procedure Set_Encoding(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  end;

{ TXMLOtherwisetype }

  TXMLOtherwisetype = class(TXML, IXMLOtherwisetype)
  protected
    { IXMLOtherwisetype }
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Cn: IXMLCntype;
    function Get_Ci: IXMLCitype;
    function Get_Csymbol: IXMLCsymboltype;
    function Get_Abs: IXMLArithtype;
    function Get_Conjugate: IXMLArithtype;
    function Get_Factorial: IXMLArithtype;
    function Get_Arg: IXMLArithtype;
    function Get_Real: IXMLArithtype;
    function Get_Imaginary: IXMLArithtype;
    function Get_Floor: IXMLArithtype;
    function Get_Ceiling: IXMLArithtype;
    function Get_Quotient: IXMLArithtype;
    function Get_Divide: IXMLArithtype;
    function Get_Rem: IXMLArithtype;
    function Get_Minus: IXMLArithtype;
    function Get_Plus: IXMLArithtype;
    function Get_Times: IXMLArithtype;
    function Get_Power: IXMLArithtype;
    function Get_Root: IXMLArithtype;
    function Get_Max: IXMLArithtype;
    function Get_Min: IXMLArithtype;
    function Get_Gcd: IXMLArithtype;
    function Get_Lcm: IXMLArithtype;
    function Get_Sum: IXMLArithtype;
    function Get_Product: IXMLArithtype;
    function Get_Compose: IXMLFunctionstype;
    function Get_Domain: IXMLFunctionstype;
    function Get_Codomain: IXMLFunctionstype;
    function Get_Image: IXMLFunctionstype;
    function Get_Domainofapplication: IXMLDomainofapplicationtype;
    function Get_Ident: IXMLFunctionstype;
    function Get_And_: IXMLElementaryfunctionstype;
    function Get_Or_: IXMLLogictype;
    function Get_Xor_: IXMLLogictype;
    function Get_Not_: IXMLLogictype;
    function Get_Exists: IXMLLogictype;
    function Get_Forall: IXMLLogictype;
    function Get_Implies: IXMLLogictype;
    function Get_Naturalnumbers: IXMLConstanttype;
    function Get_Primes: IXMLConstanttype;
    function Get_Integers: IXMLConstanttype;
    function Get_Rationals: IXMLConstanttype;
    function Get_Reals: IXMLConstanttype;
    function Get_Complexes: IXMLConstanttype;
    function Get_Emptyset: IXMLConstanttype;
    function Get_Exponentiale: IXMLConstanttype;
    function Get_Imaginaryi: IXMLConstanttype;
    function Get_Pi: IXMLConstanttype;
    function Get_Eulergamma: IXMLConstanttype;
    function Get_True: IXMLConstanttype;
    function Get_False: IXMLConstanttype;
    function Get_Infinity: IXMLConstanttype;
    function Get_Notanumber: IXMLConstanttype;
    function Get_Set_: IXMLSettype;
    function Get_List: IXMLListtype;
    function Get_Union: IXMLUniontype;
    function Get_Intersect: IXMLIntersecttype;
    function Get_In_: IXMLIntype;
    function Get_Notin: IXMLNotintype;
    function Get_Subset: IXMLSubsettype;
    function Get_Prsubset: IXMLPrsubsettype;
    function Get_Notsubset: IXMLNotsubsettype;
    function Get_Notprsubset: IXMLNotprsubsettype;
    function Get_Setdiff: IXMLSetdifftype;
    function Get_Card: IXMLCardtype;
    function Get_Cartesianproduct: IXMLCartesianproducttype;
    function Get_Eq: IXMLRelationstype;
    function Get_Neq: IXMLRelationstype;
    function Get_Leq: IXMLRelationstype;
    function Get_Lt: IXMLRelationstype;
    function Get_Geq: IXMLRelationstype;
    function Get_Gt: IXMLRelationstype;
    function Get_Equivalent: IXMLRelationstype;
    function Get_Approx: IXMLRelationstype;
    function Get_Factorof: IXMLRelationstype;
    function Get_Exp: IXMLElementaryfunctionstype;
    function Get_Ln: IXMLElementaryfunctionstype;
    function Get_Log: IXMLElementaryfunctionstype;
    function Get_Logbase: IXMLLogbasetype;
    function Get_Sin: IXMLElementaryfunctionstype;
    function Get_Cos: IXMLElementaryfunctionstype;
    function Get_Tan: IXMLElementaryfunctionstype;
    function Get_Sec: IXMLElementaryfunctionstype;
    function Get_Csc: IXMLElementaryfunctionstype;
    function Get_Cot: IXMLElementaryfunctionstype;
    function Get_Arcsin: IXMLElementaryfunctionstype;
    function Get_Arccos: IXMLElementaryfunctionstype;
    function Get_Arctan: IXMLElementaryfunctionstype;
    function Get_Arcsec: IXMLElementaryfunctionstype;
    function Get_Arccsc: IXMLElementaryfunctionstype;
    function Get_Arccot: IXMLElementaryfunctionstype;
    function Get_Sinh: IXMLElementaryfunctionstype;
    function Get_Cosh: IXMLElementaryfunctionstype;
    function Get_Tanh: IXMLElementaryfunctionstype;
    function Get_Sech: IXMLElementaryfunctionstype;
    function Get_Csch: IXMLElementaryfunctionstype;
    function Get_Coth: IXMLElementaryfunctionstype;
    function Get_Arccosh: IXMLElementaryfunctionstype;
    function Get_Arccoth: IXMLElementaryfunctionstype;
    function Get_Arccsch: IXMLElementaryfunctionstype;
    function Get_Arcsech: IXMLElementaryfunctionstype;
    function Get_Arcsinh: IXMLElementaryfunctionstype;
    function Get_Arctanh: IXMLElementaryfunctionstype;
    function Get_Int: IXMLInttype;
    function Get_Diff: IXMLDifftype;
    function Get_Partialdiff: IXMLPartialdifftype;
    function Get_Limit: IXMLLimittype;
    function Get_Lowlimit: IXMLLowlimittype;
    function Get_Uplimit: IXMLUplimittype;
    function Get_Tendsto: IXMLTendstotype;
    function Get_Vector: IXMLVectortype;
    function Get_Matrix: IXMLMatrixtype;
    function Get_Determinant: IXMLDeterminanttype;
    function Get_Transpose: IXMLTransposetype;
    function Get_Selector: IXMLSelectortype;
    function Get_Vectorproduct: IXMLVectorproducttype;
    function Get_Scalarproduct: IXMLScalarproducttype;
    function Get_Outerproduct: IXMLOuterproducttype;
    function Get_Divergence: IXMLDivergencetype;
    function Get_Grad: IXMLGradtype;
    function Get_Curl: IXMLCurltype;
    function Get_Laplacian: IXMLLaplaciantype;
    function Get_Mean: IXMLMeantype;
    function Get_Sdev: IXMLSdevtype;
    function Get_Variance: IXMLVariancetype;
    function Get_Median: IXMLMediantype;
    function Get_Mode: IXMLModetype;
    function Get_Moment: IXMLMomenttype;
    function Get_Momentabout: IXMLMomentabouttype;
    function Get_Apply: IXMLApplytype;
    function Get_Interval: IXMLIntervaltype;
    function Get_Inverse: IXMLInversetype;
    function Get_Condition: IXMLConditiontype;
    function Get_Declare: IXMLDeclaretype;
    function Get_Lambda: IXMLLambdatype;
    function Get_Piecewise: IXMLPiecewisetype;
    function Get_Bvar: IXMLBvartype;
    function Get_Degree: IXMLDegreetype;
    function Get_Semantics: IXMLSemanticstype;
    function Get_Mi: IXMLMitype;
    function Get_Mo: IXMLMotype;
    function Get_Mn: IXMLMntype;
    function Get_Mtext: IXMLMtexttype;
    function Get_Ms: IXMLMstype;
    function Get_Mrow: IXMLMrowtype;
    function Get_Mfrac: IXMLMfractype;
    function Get_Msqrt: IXMLMsqrttype;
    function Get_Mroot: IXMLMroottype;
    function Get_Mpadded: IXMLMpaddedtype;
    function Get_Mphantom: IXMLMphantomtype;
    function Get_Mfenced: IXMLMfencedtype;
    function Get_Menclose: IXMLMenclosetype;
    function Get_Msub: IXMLMsubtype;
    function Get_Msup: IXMLMsuptype;
    function Get_Msubsup: IXMLMsubsuptype;
    function Get_Munder: IXMLMundertype;
    function Get_Mover: IXMLMovertype;
    function Get_Munderover: IXMLMunderovertype;
    function Get_Mmultiscripts: IXMLMmultiscriptstype;
    function Get_Mtable: IXMLMtabletype;
    function Get_Maligngroup: IXMLMaligngrouptype;
    function Get_Malignmark: IXMLMalignmarktype;
    function Get_Mspace: IXMLMspacetype;
    function Get_Maction: IXMLMactiontype;
    function Get_Merror: IXMLMerrortype;
    function Get_Mstyle: IXMLMstyletype;
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLSeptype }

  TXMLSeptype = class(TXML, IXMLSeptype)
  protected
    { IXMLSeptype }
  end;

{ TXMLMlabeledtrtype }

  TXMLMlabeledtrtype = class(TXML, IXMLMlabeledtrtype)
  protected
    { IXMLMlabeledtrtype }
    function Get_Rowalign: UnicodeString;
    function Get_Columnalign: UnicodeString;
    function Get_Groupalign: UnicodeString;
    function Get_Class_: UnicodeString;
    function Get_Style: UnicodeString;
    function Get_Xref: UnicodeString;
    function Get_Id: UnicodeString;
    function Get_Href: UnicodeString;
    function Get_Mtd: IXMLMtdtype;
    procedure Set_Rowalign(Value: UnicodeString);
    procedure Set_Columnalign(Value: UnicodeString);
    procedure Set_Groupalign(Value: UnicodeString);
    procedure Set_Class_(Value: UnicodeString);
    procedure Set_Style(Value: UnicodeString);
    procedure Set_Xref(Value: UnicodeString);
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Href(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLNonetype }

  TXMLNonetype = class(TXML, IXMLNonetype)
  protected
    { IXMLNonetype }
  end;

{ TXMLMprescriptstype }

  TXMLMprescriptstype = class(TXML, IXMLMprescriptstype)
  protected
    { IXMLMprescriptstype }
  end;

{ TXMLLibrary_articulated_systems_type }

  TXMLLibrary_articulated_systems_type = class(TXML, IXMLLibrary_articulated_systems_type)
  private
    FArticulated_system: IXMLArticulated_system_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_articulated_systems_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Articulated_system: IXMLArticulated_system_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_articulated_systems_typeList }

  TXMLLibrary_articulated_systems_typeList = class(TXMLFilter, IXMLLibrary_articulated_systems_typeList)
  protected
    { IXMLLibrary_articulated_systems_typeList }
    function Add: IXMLLibrary_articulated_systems_type;
    function Insert(const Index: Integer): IXMLLibrary_articulated_systems_type;

    function Get_Item(Index: Integer): IXMLLibrary_articulated_systems_type;
  end;

{ TXMLArticulated_system_type }

  TXMLArticulated_system_type = class(TXML, IXMLArticulated_system_type)
  private
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLArticulated_system_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Kinematics: IXMLKinematics_type;
    function Get_Motion: IXMLMotion_type;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLArticulated_system_typeList }

  TXMLArticulated_system_typeList = class(TXMLFilter, IXMLArticulated_system_typeList)
  protected
    { IXMLArticulated_system_typeList }
    function Add: IXMLArticulated_system_type;
    function Insert(const Index: Integer): IXMLArticulated_system_type;

    function Get_Item(Index: Integer): IXMLArticulated_system_type;
  end;

{ TXMLKinematics_type }

  TXMLKinematics_type = class(TXML, IXMLKinematics_type)
  private
    FInstance_kinematics_model: IXMLInstance_kinematics_model_typeList;
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLKinematics_type }
    function Get_Instance_kinematics_model: IXMLInstance_kinematics_model_typeList;
    function Get_Technique_common: IXMLKinematics_technique_type;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_kinematics_model_type }

  TXMLInstance_kinematics_model_type = class(TXML, IXMLInstance_kinematics_model_type)
  private
    FBind: IXMLKinematics_bind_typeList;
    FNewparam: IXMLKinematics_newparam_typeList;
    FSetparam: IXMLKinematics_setparam_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLInstance_kinematics_model_type }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Bind: IXMLKinematics_bind_typeList;
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Setparam: IXMLKinematics_setparam_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_kinematics_model_typeList }

  TXMLInstance_kinematics_model_typeList = class(TXMLFilter, IXMLInstance_kinematics_model_typeList)
  protected
    { IXMLInstance_kinematics_model_typeList }
    function Add: IXMLInstance_kinematics_model_type;
    function Insert(const Index: Integer): IXMLInstance_kinematics_model_type;

    function Get_Item(Index: Integer): IXMLInstance_kinematics_model_type;
  end;

{ TXMLKinematics_bind_type }

  TXMLKinematics_bind_type = class(TXML, IXMLKinematics_bind_type)
  protected
    { IXMLKinematics_bind_type }
    function Get_Symbol: UnicodeString;
    function Get_Param: IXMLKinematics_param_type;
    function Get_Bool: Boolean;
    function Get_Float: Double;
    function Get_Int: Int64;
    function Get_SIDREF: UnicodeString;
    procedure Set_Symbol(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
    procedure Set_Float(Value: Double);
    procedure Set_Int(Value: Int64);
    procedure Set_SIDREF(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLKinematics_bind_typeList }

  TXMLKinematics_bind_typeList = class(TXMLFilter, IXMLKinematics_bind_typeList)
  protected
    { IXMLKinematics_bind_typeList }
    function Add: IXMLKinematics_bind_type;
    function Insert(const Index: Integer): IXMLKinematics_bind_type;

    function Get_Item(Index: Integer): IXMLKinematics_bind_type;
  end;

{ TXMLKinematics_param_type }

  TXMLKinematics_param_type = class(TXML, IXMLKinematics_param_type)
  protected
    { IXMLKinematics_param_type }
    function Get_Ref: UnicodeString;
    procedure Set_Ref(Value: UnicodeString);
  end;

{ TXMLKinematics_setparam_type }

  TXMLKinematics_setparam_type = class(TXML, IXMLKinematics_setparam_type)
  protected
    { IXMLKinematics_setparam_type }
    function Get_Ref: UnicodeString;
    function Get_Float: Double;
    function Get_Int: Int64;
    function Get_SIDREF: UnicodeString;
    function Get_Bool: Boolean;
    function Get_Connect_param: IXMLKinematics_connect_param_type;
    procedure Set_Ref(Value: UnicodeString);
    procedure Set_Float(Value: Double);
    procedure Set_Int(Value: Int64);
    procedure Set_SIDREF(Value: UnicodeString);
    procedure Set_Bool(Value: Boolean);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLKinematics_setparam_typeList }

  TXMLKinematics_setparam_typeList = class(TXMLFilter, IXMLKinematics_setparam_typeList)
  protected
    { IXMLKinematics_setparam_typeList }
    function Add: IXMLKinematics_setparam_type;
    function Insert(const Index: Integer): IXMLKinematics_setparam_type;

    function Get_Item(Index: Integer): IXMLKinematics_setparam_type;
  end;

{ TXMLKinematics_technique_type }

  TXMLKinematics_technique_type = class(TXML, IXMLKinematics_technique_type)
  private
    FAxis_info: IXMLKinematics_axis_info_typeList;
  protected
    { IXMLKinematics_technique_type }
    function Get_Axis_info: IXMLKinematics_axis_info_typeList;
    function Get_Frame_origin: IXMLKinematics_frame_type;
    function Get_Frame_tip: IXMLKinematics_frame_type;
    function Get_Frame_tcp: IXMLKinematics_frame_type;
    function Get_Frame_object: IXMLKinematics_frame_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLKinematics_axis_info_type }

  TXMLKinematics_axis_info_type = class(TXML, IXMLKinematics_axis_info_type)
  private
    FNewparam: IXMLKinematics_newparam_typeList;
    FIndex: IXMLKinematics_index_typeList;
    FFormula: IXMLFormula_typeList;
    FInstance_formula: IXMLInstance_formula_typeList;
  protected
    { IXMLKinematics_axis_info_type }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Axis: UnicodeString;
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Active: IXMLCommon_bool_or_param_type;
    function Get_Locked: IXMLCommon_bool_or_param_type;
    function Get_Index: IXMLKinematics_index_typeList;
    function Get_Limits: IXMLKinematics_limits_type;
    function Get_Formula: IXMLFormula_typeList;
    function Get_Instance_formula: IXMLInstance_formula_typeList;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
    procedure Set_Axis(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLKinematics_axis_info_typeList }

  TXMLKinematics_axis_info_typeList = class(TXMLFilter, IXMLKinematics_axis_info_typeList)
  protected
    { IXMLKinematics_axis_info_typeList }
    function Add: IXMLKinematics_axis_info_type;
    function Insert(const Index: Integer): IXMLKinematics_axis_info_type;

    function Get_Item(Index: Integer): IXMLKinematics_axis_info_type;
  end;

{ TXMLCommon_bool_or_param_type }

  TXMLCommon_bool_or_param_type = class(TXML, IXMLCommon_bool_or_param_type)
  protected
    { IXMLCommon_bool_or_param_type }
    function Get_Bool: Boolean;
    function Get_Param: IXMLCommon_param_type;
    procedure Set_Bool(Value: Boolean);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCommon_int_or_param_type }

  TXMLCommon_int_or_param_type = class(TXML, IXMLCommon_int_or_param_type)
  protected
    { IXMLCommon_int_or_param_type }
    function Get_Int: Int64;
    function Get_Param: IXMLCommon_param_type;
    procedure Set_Int(Value: Int64);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLKinematics_index_type }

  TXMLKinematics_index_type = class(TXMLCommon_int_or_param_type, IXMLKinematics_index_type)
  protected
    { IXMLKinematics_index_type }
    function Get_Semantic: UnicodeString;
    procedure Set_Semantic(Value: UnicodeString);
  end;

{ TXMLKinematics_index_typeList }

  TXMLKinematics_index_typeList = class(TXMLFilter, IXMLKinematics_index_typeList)
  protected
    { IXMLKinematics_index_typeList }
    function Add: IXMLKinematics_index_type;
    function Insert(const Index: Integer): IXMLKinematics_index_type;

    function Get_Item(Index: Integer): IXMLKinematics_index_type;
  end;

{ TXMLKinematics_limits_type }

  TXMLKinematics_limits_type = class(TXML, IXMLKinematics_limits_type)
  protected
    { IXMLKinematics_limits_type }
    function Get_Min: IXMLCommon_float_or_param_type;
    function Get_Max: IXMLCommon_float_or_param_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLKinematics_frame_type }

  TXMLKinematics_frame_type = class(TXML, IXMLKinematics_frame_type)
  private
    FTranslate: IXMLTranslate_typeList;
    FRotate: IXMLRotate_typeList;
  protected
    { IXMLKinematics_frame_type }
    function Get_Link: UnicodeString;
    function Get_Translate: IXMLTranslate_typeList;
    function Get_Rotate: IXMLRotate_typeList;
    procedure Set_Link(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMotion_type }

  TXMLMotion_type = class(TXML, IXMLMotion_type)
  private
    FTechnique: IXMLTechnique_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLMotion_type }
    function Get_Instance_articulated_system: IXMLInstance_articulated_system_type;
    function Get_Technique_common: IXMLMotion_technique_type;
    function Get_Technique: IXMLTechnique_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_articulated_system_type }

  TXMLInstance_articulated_system_type = class(TXML, IXMLInstance_articulated_system_type)
  private
    FBind: IXMLKinematics_bind_typeList;
    FSetparam: IXMLKinematics_setparam_typeList;
    FNewparam: IXMLKinematics_newparam_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLInstance_articulated_system_type }
    function Get_Sid: UnicodeString;
    function Get_Url: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Bind: IXMLKinematics_bind_typeList;
    function Get_Setparam: IXMLKinematics_setparam_typeList;
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_articulated_system_typeList }

  TXMLInstance_articulated_system_typeList = class(TXMLFilter, IXMLInstance_articulated_system_typeList)
  protected
    { IXMLInstance_articulated_system_typeList }
    function Add: IXMLInstance_articulated_system_type;
    function Insert(const Index: Integer): IXMLInstance_articulated_system_type;

    function Get_Item(Index: Integer): IXMLInstance_articulated_system_type;
  end;

{ TXMLMotion_technique_type }

  TXMLMotion_technique_type = class(TXML, IXMLMotion_technique_type)
  private
    FAxis_info: IXMLMotion_axis_info_typeList;
  protected
    { IXMLMotion_technique_type }
    function Get_Axis_info: IXMLMotion_axis_info_typeList;
    function Get_Effector_info: IXMLMotion_effector_info_type;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMotion_axis_info_type }

  TXMLMotion_axis_info_type = class(TXML, IXMLMotion_axis_info_type)
  private
    FBind: IXMLKinematics_bind_typeList;
    FNewparam: IXMLKinematics_newparam_typeList;
    FSetparam: IXMLKinematics_setparam_typeList;
  protected
    { IXMLMotion_axis_info_type }
    function Get_Sid: UnicodeString;
    function Get_Axis: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Bind: IXMLKinematics_bind_typeList;
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Setparam: IXMLKinematics_setparam_typeList;
    function Get_Speed: IXMLCommon_float_or_param_type;
    function Get_Acceleration: IXMLCommon_float_or_param_type;
    function Get_Deceleration: IXMLCommon_float_or_param_type;
    function Get_Jerk: IXMLCommon_float_or_param_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Axis(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLMotion_axis_info_typeList }

  TXMLMotion_axis_info_typeList = class(TXMLFilter, IXMLMotion_axis_info_typeList)
  protected
    { IXMLMotion_axis_info_typeList }
    function Add: IXMLMotion_axis_info_type;
    function Insert(const Index: Integer): IXMLMotion_axis_info_type;

    function Get_Item(Index: Integer): IXMLMotion_axis_info_type;
  end;

{ TXMLMotion_effector_info_type }

  TXMLMotion_effector_info_type = class(TXML, IXMLMotion_effector_info_type)
  private
    FBind: IXMLKinematics_bind_typeList;
    FNewparam: IXMLKinematics_newparam_typeList;
    FSetparam: IXMLKinematics_setparam_typeList;
  protected
    { IXMLMotion_effector_info_type }
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Bind: IXMLKinematics_bind_typeList;
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Setparam: IXMLKinematics_setparam_typeList;
    function Get_Speed: IXMLCommon_float2_or_param_type;
    function Get_Acceleration: IXMLCommon_float2_or_param_type;
    function Get_Deceleration: IXMLCommon_float2_or_param_type;
    function Get_Jerk: IXMLCommon_float2_or_param_type;
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLCommon_float2_or_param_type }

  TXMLCommon_float2_or_param_type = class(TXML, IXMLCommon_float2_or_param_type)
  protected
    { IXMLCommon_float2_or_param_type }
    function Get_Float2: UnicodeString;
    function Get_Param: IXMLCommon_param_type;
    procedure Set_Float2(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_kinematics_scenes_type }

  TXMLLibrary_kinematics_scenes_type = class(TXML, IXMLLibrary_kinematics_scenes_type)
  private
    FKinematics_scene: IXMLKinematics_scene_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_kinematics_scenes_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Kinematics_scene: IXMLKinematics_scene_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_kinematics_scenes_typeList }

  TXMLLibrary_kinematics_scenes_typeList = class(TXMLFilter, IXMLLibrary_kinematics_scenes_typeList)
  protected
    { IXMLLibrary_kinematics_scenes_typeList }
    function Add: IXMLLibrary_kinematics_scenes_type;
    function Insert(const Index: Integer): IXMLLibrary_kinematics_scenes_type;

    function Get_Item(Index: Integer): IXMLLibrary_kinematics_scenes_type;
  end;

{ TXMLKinematics_scene_type }

  TXMLKinematics_scene_type = class(TXML, IXMLKinematics_scene_type)
  private
    FInstance_kinematics_model: IXMLInstance_kinematics_model_typeList;
    FInstance_articulated_system: IXMLInstance_articulated_system_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLKinematics_scene_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Instance_kinematics_model: IXMLInstance_kinematics_model_typeList;
    function Get_Instance_articulated_system: IXMLInstance_articulated_system_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLKinematics_scene_typeList }

  TXMLKinematics_scene_typeList = class(TXMLFilter, IXMLKinematics_scene_typeList)
  protected
    { IXMLKinematics_scene_typeList }
    function Add: IXMLKinematics_scene_type;
    function Insert(const Index: Integer): IXMLKinematics_scene_type;

    function Get_Item(Index: Integer): IXMLKinematics_scene_type;
  end;

{ TXMLLibrary_formulas_type }

  TXMLLibrary_formulas_type = class(TXML, IXMLLibrary_formulas_type)
  private
    FFormula: IXMLFormula_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLLibrary_formulas_type }
    function Get_Id: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Formula: IXMLFormula_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Id(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLLibrary_formulas_typeList }

  TXMLLibrary_formulas_typeList = class(TXMLFilter, IXMLLibrary_formulas_typeList)
  protected
    { IXMLLibrary_formulas_typeList }
    function Add: IXMLLibrary_formulas_type;
    function Insert(const Index: Integer): IXMLLibrary_formulas_type;

    function Get_Item(Index: Integer): IXMLLibrary_formulas_type;
  end;

{ TXMLCOLLADA_scene }

  TXMLCOLLADA_scene = class(TXML, IXMLCOLLADA_scene)
  private
    FInstance_physics_scene: IXMLInstance_with_extra_typeList;
    FInstance_kinematics_scene: IXMLInstance_kinematics_scene_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLCOLLADA_scene }
    function Get_Instance_physics_scene: IXMLInstance_with_extra_typeList;
    function Get_Instance_visual_scene: IXMLInstance_with_extra_type;
    function Get_Instance_kinematics_scene: IXMLInstance_kinematics_scene_typeList;
    function Get_Extra: IXMLExtra_typeList;
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_kinematics_scene_type }

  TXMLInstance_kinematics_scene_type = class(TXML, IXMLInstance_kinematics_scene_type)
  private
    FNewparam: IXMLKinematics_newparam_typeList;
    FSetparam: IXMLKinematics_setparam_typeList;
    FBind_kinematics_model: IXMLBind_kinematics_model_typeList;
    FBind_joint_axis: IXMLBind_joint_axis_typeList;
    FExtra: IXMLExtra_typeList;
  protected
    { IXMLInstance_kinematics_scene_type }
    function Get_Url: UnicodeString;
    function Get_Sid: UnicodeString;
    function Get_Name: UnicodeString;
    function Get_Asset: IXMLAsset_type;
    function Get_Newparam: IXMLKinematics_newparam_typeList;
    function Get_Setparam: IXMLKinematics_setparam_typeList;
    function Get_Bind_kinematics_model: IXMLBind_kinematics_model_typeList;
    function Get_Bind_joint_axis: IXMLBind_joint_axis_typeList;
    function Get_Extra: IXMLExtra_typeList;
    procedure Set_Url(Value: UnicodeString);
    procedure Set_Sid(Value: UnicodeString);
    procedure Set_Name(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLInstance_kinematics_scene_typeList }

  TXMLInstance_kinematics_scene_typeList = class(TXMLFilter, IXMLInstance_kinematics_scene_typeList)
  protected
    { IXMLInstance_kinematics_scene_typeList }
    function Add: IXMLInstance_kinematics_scene_type;
    function Insert(const Index: Integer): IXMLInstance_kinematics_scene_type;

    function Get_Item(Index: Integer): IXMLInstance_kinematics_scene_type;
  end;

{ TXMLCommon_sidref_or_param_type }

  TXMLCommon_sidref_or_param_type = class(TXML, IXMLCommon_sidref_or_param_type)
  protected
    { IXMLCommon_sidref_or_param_type }
    function Get_SIDREF: UnicodeString;
    function Get_Param: IXMLCommon_param_type;
    procedure Set_SIDREF(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLBind_kinematics_model_type }

  TXMLBind_kinematics_model_type = class(TXMLCommon_sidref_or_param_type, IXMLBind_kinematics_model_type)
  protected
    { IXMLBind_kinematics_model_type }
    function Get_Node: UnicodeString;
    procedure Set_Node(Value: UnicodeString);
  end;

{ TXMLBind_kinematics_model_typeList }

  TXMLBind_kinematics_model_typeList = class(TXMLFilter, IXMLBind_kinematics_model_typeList)
  protected
    { IXMLBind_kinematics_model_typeList }
    function Add: IXMLBind_kinematics_model_type;
    function Insert(const Index: Integer): IXMLBind_kinematics_model_type;

    function Get_Item(Index: Integer): IXMLBind_kinematics_model_type;
  end;

{ TXMLBind_joint_axis_type }

  TXMLBind_joint_axis_type = class(TXML, IXMLBind_joint_axis_type)
  protected
    { IXMLBind_joint_axis_type }
    function Get_Target: UnicodeString;
    function Get_Axis: IXMLCommon_sidref_or_param_type;
    function Get_Value: IXMLCommon_float_or_param_type;
    procedure Set_Target(Value: UnicodeString);
  public
    procedure DoRegisterChildClasses; override;
  end;

{ TXMLBind_joint_axis_typeList }

  TXMLBind_joint_axis_typeList = class(TXMLFilter, IXMLBind_joint_axis_typeList)
  protected
    { IXMLBind_joint_axis_typeList }
    function Add: IXMLBind_joint_axis_type;
    function Insert(const Index: Integer): IXMLBind_joint_axis_type;

    function Get_Item(Index: Integer): IXMLBind_joint_axis_type;
  end;

{ TXMLInput_global_type }

  TXMLInput_global_type = class(TXML, IXMLInput_global_type)
  protected
    { IXMLInput_global_type }
    function Get_Semantic: UnicodeString;
    function Get_Source: UnicodeString;
    procedure Set_Semantic(Value: UnicodeString);
    procedure Set_Source(Value: UnicodeString);
  end;

{ TXMLEllipsoid_type }

  TXMLEllipsoid_type = class(TXML, IXMLEllipsoid_type)
  protected
    { IXMLEllipsoid_type }
    function Get_Size: UnicodeString;
    procedure Set_Size(Value: UnicodeString);
  end;

{ TXMLLimits_sub_type }

  TXMLLimits_sub_type = class(TXML, IXMLLimits_sub_type)
  protected
    { IXMLLimits_sub_type }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLTargetable_float4_type }

  TXMLTargetable_float4_type = class(TXML, IXMLTargetable_float4_type)
  protected
    { IXMLTargetable_float4_type }
    function Get_Sid: UnicodeString;
    procedure Set_Sid(Value: UnicodeString);
  end;

{ TXMLList_of_uints_typeList }

  TXMLList_of_uints_typeList = class(TXMLFilter, IXMLList_of_uints_typeList)
  protected
    { IXMLList_of_uints_typeList }
    function Add(const Value: UnicodeString): IXML;
    function Insert(const Index: Integer; const Value: UnicodeString): IXML;

    function Get_Item(Index: Integer): UnicodeString;
  end;

{ TXMLAnyURIList }

  TXMLAnyURIList = class(TXMLFilter, IXMLAnyURIList)
  protected
    { IXMLAnyURIList }
    function Add(const Value: UnicodeString): IXML;
    function Insert(const Index: Integer; const Value: UnicodeString): IXML;

    function Get_Item(Index: Integer): UnicodeString;
  end;

{ TXMLString_List }

  TXMLString_List = class(TXMLFilter, IXMLString_List)
  protected
    { IXMLString_List }
    function Add(const Value: UnicodeString): IXML;
    function Insert(const Index: Integer; const Value: UnicodeString): IXML;

    function Get_Item(Index: Integer): UnicodeString;
  end;

{ TXMLNCNameList }

  TXMLNCNameList = class(TXMLFilter, IXMLNCNameList)
  protected
    { IXMLNCNameList }
    function Add(const Value: UnicodeString): IXML;
    function Insert(const Index: Integer; const Value: UnicodeString): IXML;

    function Get_Item(Index: Integer): UnicodeString;
  end;

implementation

{ TXMLCOLLADA }

procedure TXMLCOLLADA.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('library_animations', TXMLLibrary_animations_type);
  FClassesTree.Add('library_animation_clips', TXMLLibrary_animation_clips_type);
  FClassesTree.Add('library_cameras', TXMLLibrary_cameras_type);
  FClassesTree.Add('library_controllers', TXMLLibrary_controllers_type);
  FClassesTree.Add('library_geometries', TXMLLibrary_geometries_type);
  FClassesTree.Add('library_effects', TXMLLibrary_effects_type);
  FClassesTree.Add('library_force_fields', TXMLLibrary_force_fields_type);
  FClassesTree.Add('library_images', TXMLLibrary_images_type);
  FClassesTree.Add('library_lights', TXMLLibrary_lights_type);
  FClassesTree.Add('library_materials', TXMLLibrary_materials_type);
  FClassesTree.Add('library_nodes', TXMLLibrary_nodes_type);
  FClassesTree.Add('library_physics_materials', TXMLLibrary_physics_materials_type);
  FClassesTree.Add('library_physics_models', TXMLLibrary_physics_models_type);
  FClassesTree.Add('library_physics_scenes', TXMLLibrary_physics_scenes_type);
  FClassesTree.Add('library_visual_scenes', TXMLLibrary_visual_scenes_type);
  FClassesTree.Add('library_joints', TXMLLibrary_joints_type);
  FClassesTree.Add('library_kinematics_models', TXMLLibrary_kinematics_models_type);
  FClassesTree.Add('library_articulated_systems', TXMLLibrary_articulated_systems_type);
  FClassesTree.Add('library_kinematics_scenes', TXMLLibrary_kinematics_scenes_type);
  FClassesTree.Add('library_formulas', TXMLLibrary_formulas_type);
  FClassesTree.Add('scene', TXMLCOLLADA_scene);
  FClassesTree.Add('extra', TXMLExtra_type);
  FLibrary_animations := CreateFilter(TXMLLibrary_animations_typeList, TXMLLibrary_animations_type, IXMLLibrary_animations_type) as IXMLLibrary_animations_typeList;
  FLibrary_animation_clips := CreateFilter(TXMLLibrary_animation_clips_typeList, TXMLLibrary_animation_clips_type, IXMLLibrary_animation_clips_type) as IXMLLibrary_animation_clips_typeList;
  FLibrary_cameras := CreateFilter(TXMLLibrary_cameras_typeList, TXMLLibrary_cameras_type, IXMLLibrary_cameras_type) as IXMLLibrary_cameras_typeList;
  FLibrary_controllers := CreateFilter(TXMLLibrary_controllers_typeList, TXMLLibrary_controllers_type, IXMLLibrary_controllers_type) as IXMLLibrary_controllers_typeList;
  FLibrary_geometries := CreateFilter(TXMLLibrary_geometries_typeList, TXMLLibrary_geometries_type, IXMLLibrary_geometries_type) as IXMLLibrary_geometries_typeList;
  FLibrary_effects := CreateFilter(TXMLLibrary_effects_typeList, TXMLLibrary_effects_type, IXMLLibrary_effects_type) as IXMLLibrary_effects_typeList;
  FLibrary_force_fields := CreateFilter(TXMLLibrary_force_fields_typeList, TXMLLibrary_force_fields_type, IXMLLibrary_force_fields_type) as IXMLLibrary_force_fields_typeList;
  FLibrary_images := CreateFilter(TXMLLibrary_images_typeList, TXMLLibrary_images_type, IXMLLibrary_images_type) as IXMLLibrary_images_typeList;
  FLibrary_lights := CreateFilter(TXMLLibrary_lights_typeList, TXMLLibrary_lights_type, IXMLLibrary_lights_type) as IXMLLibrary_lights_typeList;
  FLibrary_materials := CreateFilter(TXMLLibrary_materials_typeList, TXMLLibrary_materials_type, IXMLLibrary_materials_type) as IXMLLibrary_materials_typeList;
  FLibrary_nodes := CreateFilter(TXMLLibrary_nodes_typeList, TXMLLibrary_nodes_type, IXMLLibrary_nodes_type) as IXMLLibrary_nodes_typeList;
  FLibrary_physics_materials := CreateFilter(TXMLLibrary_physics_materials_typeList, TXMLLibrary_physics_materials_type, IXMLLibrary_physics_materials_type) as IXMLLibrary_physics_materials_typeList;
  FLibrary_physics_models := CreateFilter(TXMLLibrary_physics_models_typeList, TXMLLibrary_physics_models_type, IXMLLibrary_physics_models_type) as IXMLLibrary_physics_models_typeList;
  FLibrary_physics_scenes := CreateFilter(TXMLLibrary_physics_scenes_typeList, TXMLLibrary_physics_scenes_type, IXMLLibrary_physics_scenes_type) as IXMLLibrary_physics_scenes_typeList;
  FLibrary_visual_scenes := CreateFilter(TXMLLibrary_visual_scenes_typeList, TXMLLibrary_visual_scenes_type, IXMLLibrary_visual_scenes_type) as IXMLLibrary_visual_scenes_typeList;
  FLibrary_joints := CreateFilter(TXMLLibrary_joints_typeList, TXMLLibrary_joints_type, IXMLLibrary_joints_type) as IXMLLibrary_joints_typeList;
  FLibrary_kinematics_models := CreateFilter(TXMLLibrary_kinematics_models_typeList, TXMLLibrary_kinematics_models_type, IXMLLibrary_kinematics_models_type) as IXMLLibrary_kinematics_models_typeList;
  FLibrary_articulated_systems := CreateFilter(TXMLLibrary_articulated_systems_typeList, TXMLLibrary_articulated_systems_type, IXMLLibrary_articulated_systems_type) as IXMLLibrary_articulated_systems_typeList;
  FLibrary_kinematics_scenes := CreateFilter(TXMLLibrary_kinematics_scenes_typeList, TXMLLibrary_kinematics_scenes_type, IXMLLibrary_kinematics_scenes_type) as IXMLLibrary_kinematics_scenes_typeList;
  FLibrary_formulas := CreateFilter(TXMLLibrary_formulas_typeList, TXMLLibrary_formulas_type, IXMLLibrary_formulas_type) as IXMLLibrary_formulas_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLCOLLADA.Get_Version: UnicodeString;
begin
  Result := Params['version'];
end;

procedure TXMLCOLLADA.Set_Version(Value: UnicodeString);
begin
  Params['version'] := Value;
end;

function TXMLCOLLADA.Get_Base: UnicodeString;
begin
  Result := Params['xml:base'];
end;

procedure TXMLCOLLADA.Set_Base(Value: UnicodeString);
begin
  Params['xml:base'] := Value;
end;

function TXMLCOLLADA.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLCOLLADA.Get_Library_animations: IXMLLibrary_animations_typeList;
begin
  Result := FLibrary_animations;
end;

function TXMLCOLLADA.Get_Library_animation_clips: IXMLLibrary_animation_clips_typeList;
begin
  Result := FLibrary_animation_clips;
end;

function TXMLCOLLADA.Get_Library_cameras: IXMLLibrary_cameras_typeList;
begin
  Result := FLibrary_cameras;
end;

function TXMLCOLLADA.Get_Library_controllers: IXMLLibrary_controllers_typeList;
begin
  Result := FLibrary_controllers;
end;

function TXMLCOLLADA.Get_Library_geometries: IXMLLibrary_geometries_typeList;
begin
  Result := FLibrary_geometries;
end;

function TXMLCOLLADA.Get_Library_effects: IXMLLibrary_effects_typeList;
begin
  Result := FLibrary_effects;
end;

function TXMLCOLLADA.Get_Library_force_fields: IXMLLibrary_force_fields_typeList;
begin
  Result := FLibrary_force_fields;
end;

function TXMLCOLLADA.Get_Library_images: IXMLLibrary_images_typeList;
begin
  Result := FLibrary_images;
end;

function TXMLCOLLADA.Get_Library_lights: IXMLLibrary_lights_typeList;
begin
  Result := FLibrary_lights;
end;

function TXMLCOLLADA.Get_Library_materials: IXMLLibrary_materials_typeList;
begin
  Result := FLibrary_materials;
end;

function TXMLCOLLADA.Get_Library_nodes: IXMLLibrary_nodes_typeList;
begin
  Result := FLibrary_nodes;
end;

function TXMLCOLLADA.Get_Library_physics_materials: IXMLLibrary_physics_materials_typeList;
begin
  Result := FLibrary_physics_materials;
end;

function TXMLCOLLADA.Get_Library_physics_models: IXMLLibrary_physics_models_typeList;
begin
  Result := FLibrary_physics_models;
end;

function TXMLCOLLADA.Get_Library_physics_scenes: IXMLLibrary_physics_scenes_typeList;
begin
  Result := FLibrary_physics_scenes;
end;

function TXMLCOLLADA.Get_Library_visual_scenes: IXMLLibrary_visual_scenes_typeList;
begin
  Result := FLibrary_visual_scenes;
end;

function TXMLCOLLADA.Get_Library_joints: IXMLLibrary_joints_typeList;
begin
  Result := FLibrary_joints;
end;

function TXMLCOLLADA.Get_Library_kinematics_models: IXMLLibrary_kinematics_models_typeList;
begin
  Result := FLibrary_kinematics_models;
end;

function TXMLCOLLADA.Get_Library_articulated_systems: IXMLLibrary_articulated_systems_typeList;
begin
  Result := FLibrary_articulated_systems;
end;

function TXMLCOLLADA.Get_Library_kinematics_scenes: IXMLLibrary_kinematics_scenes_typeList;
begin
  Result := FLibrary_kinematics_scenes;
end;

function TXMLCOLLADA.Get_Library_formulas: IXMLLibrary_formulas_typeList;
begin
  Result := FLibrary_formulas;
end;

function TXMLCOLLADA.Get_Scene: IXMLCOLLADA_scene;
begin
  Result := Nodes['scene'] as IXMLCOLLADA_scene;
end;

function TXMLCOLLADA.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLAsset_type }

procedure TXMLAsset_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('contributor', TXMLAsset_type_contributor);
  FClassesTree.Add('coverage', TXMLAsset_type_coverage);
  FClassesTree.Add('unit', TXMLAsset_type_unit);
  FClassesTree.Add('extra', TXMLExtra_type);
  FContributor := CreateFilter(TXMLAsset_type_contributorList, TXMLAsset_type_contributor, IXMLAsset_type_contributor) as IXMLAsset_type_contributorList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLAsset_type.Get_Contributor: IXMLAsset_type_contributorList;
begin
  Result := FContributor;
end;

function TXMLAsset_type.Get_Coverage: IXMLAsset_type_coverage;
begin
  Result := Nodes['coverage'] as IXMLAsset_type_coverage;
end;

function TXMLAsset_type.Get_Created: UnicodeString;
begin
  Result := Nodes['created'].Content;
end;

procedure TXMLAsset_type.Set_Created(Value: UnicodeString);
begin
  Nodes['created'].Content := Value;
end;

function TXMLAsset_type.Get_Keywords: UnicodeString;
begin
  Result := Nodes['keywords'].Content;
end;

procedure TXMLAsset_type.Set_Keywords(Value: UnicodeString);
begin
  Nodes['keywords'].Content := Value;
end;

function TXMLAsset_type.Get_Modified: UnicodeString;
begin
  Result := Nodes['modified'].Content;
end;

procedure TXMLAsset_type.Set_Modified(Value: UnicodeString);
begin
  Nodes['modified'].Content := Value;
end;

function TXMLAsset_type.Get_Revision: UnicodeString;
begin
  Result := Nodes['revision'].Content;
end;

procedure TXMLAsset_type.Set_Revision(Value: UnicodeString);
begin
  Nodes['revision'].Content := Value;
end;

function TXMLAsset_type.Get_Subject: UnicodeString;
begin
  Result := Nodes['subject'].Content;
end;

procedure TXMLAsset_type.Set_Subject(Value: UnicodeString);
begin
  Nodes['subject'].Content := Value;
end;

function TXMLAsset_type.Get_Title: UnicodeString;
begin
  Result := Nodes['title'].Content;
end;

procedure TXMLAsset_type.Set_Title(Value: UnicodeString);
begin
  Nodes['title'].Content := Value;
end;

function TXMLAsset_type.Get_Unit_: IXMLAsset_type_unit;
begin
  Result := Nodes['unit'] as IXMLAsset_type_unit;
end;

function TXMLAsset_type.Get_Up_axis: UnicodeString;
begin
  Result := Nodes['up_axis'].Content;
end;

procedure TXMLAsset_type.Set_Up_axis(Value: UnicodeString);
begin
  Nodes['up_axis'].Content := Value;
end;

function TXMLAsset_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLAsset_type_contributor }

function TXMLAsset_type_contributor.Get_Author: UnicodeString;
begin
  Result := Nodes['author'].Content;
end;

procedure TXMLAsset_type_contributor.Set_Author(Value: UnicodeString);
begin
  Nodes['author'].Content := Value;
end;

function TXMLAsset_type_contributor.Get_Author_email: UnicodeString;
begin
  Result := Nodes['author_email'].Content;
end;

procedure TXMLAsset_type_contributor.Set_Author_email(Value: UnicodeString);
begin
  Nodes['author_email'].Content := Value;
end;

function TXMLAsset_type_contributor.Get_Author_website: UnicodeString;
begin
  Result := Nodes['author_website'].Content;
end;

procedure TXMLAsset_type_contributor.Set_Author_website(Value: UnicodeString);
begin
  Nodes['author_website'].Content := Value;
end;

function TXMLAsset_type_contributor.Get_Authoring_tool: UnicodeString;
begin
  Result := Nodes['authoring_tool'].Content;
end;

procedure TXMLAsset_type_contributor.Set_Authoring_tool(Value: UnicodeString);
begin
  Nodes['authoring_tool'].Content := Value;
end;

function TXMLAsset_type_contributor.Get_Comments: UnicodeString;
begin
  Result := Nodes['comments'].Content;
end;

procedure TXMLAsset_type_contributor.Set_Comments(Value: UnicodeString);
begin
  Nodes['comments'].Content := Value;
end;

function TXMLAsset_type_contributor.Get_Copyright: UnicodeString;
begin
  Result := Nodes['copyright'].Content;
end;

procedure TXMLAsset_type_contributor.Set_Copyright(Value: UnicodeString);
begin
  Nodes['copyright'].Content := Value;
end;

function TXMLAsset_type_contributor.Get_Source_data: UnicodeString;
begin
  Result := Nodes['source_data'].Content;
end;

procedure TXMLAsset_type_contributor.Set_Source_data(Value: UnicodeString);
begin
  Nodes['source_data'].Content := Value;
end;

{ TXMLAsset_type_contributorList }

function TXMLAsset_type_contributorList.Add: IXMLAsset_type_contributor;
begin
  Result := AddItem(-1) as IXMLAsset_type_contributor;
end;

function TXMLAsset_type_contributorList.Insert(const Index: Integer): IXMLAsset_type_contributor;
begin
  Result := AddItem(Index) as IXMLAsset_type_contributor;
end;

function TXMLAsset_type_contributorList.Get_Item(Index: Integer): IXMLAsset_type_contributor;
begin
  Result := Nodes[Index] as IXMLAsset_type_contributor;
end;

{ TXMLAsset_type_coverage }

procedure TXMLAsset_type_coverage.DoRegisterChildClasses;
begin
  FClassesTree.Add('geographic_location', TXMLAsset_type_coverage_geographic_location);
  inherited;
end;

function TXMLAsset_type_coverage.Get_Geographic_location: IXMLAsset_type_coverage_geographic_location;
begin
  Result := Nodes['geographic_location'] as IXMLAsset_type_coverage_geographic_location;
end;

{ TXMLAsset_type_coverage_geographic_location }

procedure TXMLAsset_type_coverage_geographic_location.DoRegisterChildClasses;
begin
  FClassesTree.Add('altitude', TXMLAsset_type_coverage_geographic_location_altitude);
  inherited;
end;

function TXMLAsset_type_coverage_geographic_location.Get_Longitude: Single;
begin
  Result := Nodes['longitude'].Content;
end;

procedure TXMLAsset_type_coverage_geographic_location.Set_Longitude(Value: Single);
begin
  Nodes['longitude'].Content := Value;
end;

function TXMLAsset_type_coverage_geographic_location.Get_Latitude: Single;
begin
  Result := Nodes['latitude'].Content;
end;

procedure TXMLAsset_type_coverage_geographic_location.Set_Latitude(Value: Single);
begin
  Nodes['latitude'].Content := Value;
end;

function TXMLAsset_type_coverage_geographic_location.Get_Altitude: IXMLAsset_type_coverage_geographic_location_altitude;
begin
  Result := Nodes['altitude'] as IXMLAsset_type_coverage_geographic_location_altitude;
end;

{ TXMLAsset_type_coverage_geographic_location_altitude }

function TXMLAsset_type_coverage_geographic_location_altitude.Get_Mode: UnicodeString;
begin
  Result := Params['mode'];
end;

procedure TXMLAsset_type_coverage_geographic_location_altitude.Set_Mode(Value: UnicodeString);
begin
  Params['mode'] := Value;
end;

{ TXMLAsset_type_unit }

function TXMLAsset_type_unit.Get_Meter: Double;
begin
  Result := Params['meter'];
end;

procedure TXMLAsset_type_unit.Set_Meter(Value: Double);
begin
  Params['meter'] := Value;
end;

function TXMLAsset_type_unit.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLAsset_type_unit.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

{ TXMLExtra_type }

procedure TXMLExtra_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  inherited;
end;

function TXMLExtra_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLExtra_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLExtra_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLExtra_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLExtra_type.Get_Type_: UnicodeString;
begin
  Result := Params['type'];
end;

procedure TXMLExtra_type.Set_Type_(Value: UnicodeString);
begin
  Params['type'] := Value;
end;

function TXMLExtra_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLExtra_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

{ TXMLExtra_typeList }

function TXMLExtra_typeList.Add: IXMLExtra_type;
begin
  Result := AddItem(-1) as IXMLExtra_type;
end;

function TXMLExtra_typeList.Insert(const Index: Integer): IXMLExtra_type;
begin
  Result := AddItem(Index) as IXMLExtra_type;
end;

function TXMLExtra_typeList.Get_Item(Index: Integer): IXMLExtra_type;
begin
  Result := Nodes[Index] as IXMLExtra_type;
end;

{ TXMLTechnique_type }

function TXMLTechnique_type.Get_Profile: UnicodeString;
begin
  Result := Params['profile'];
end;

procedure TXMLTechnique_type.Set_Profile(Value: UnicodeString);
begin
  Params['profile'] := Value;
end;

{ TXMLTechnique_typeList }

function TXMLTechnique_typeList.Add: IXMLTechnique_type;
begin
  Result := AddItem(-1) as IXMLTechnique_type;
end;

function TXMLTechnique_typeList.Insert(const Index: Integer): IXMLTechnique_type;
begin
  Result := AddItem(Index) as IXMLTechnique_type;
end;

function TXMLTechnique_typeList.Get_Item(Index: Integer): IXMLTechnique_type;
begin
  Result := Nodes[Index] as IXMLTechnique_type;
end;

{ TXMLLibrary_animations_type }

procedure TXMLLibrary_animations_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('animation', TXMLAnimation_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FAnimation := CreateFilter(TXMLAnimation_typeList, TXMLAnimation_type, IXMLAnimation_type) as IXMLAnimation_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_animations_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_animations_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_animations_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_animations_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_animations_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_animations_type.Get_Animation: IXMLAnimation_typeList;
begin
  Result := FAnimation;
end;

function TXMLLibrary_animations_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_animations_typeList }

function TXMLLibrary_animations_typeList.Add: IXMLLibrary_animations_type;
begin
  Result := AddItem(-1) as IXMLLibrary_animations_type;
end;

function TXMLLibrary_animations_typeList.Insert(const Index: Integer): IXMLLibrary_animations_type;
begin
  Result := AddItem(Index) as IXMLLibrary_animations_type;
end;

function TXMLLibrary_animations_typeList.Get_Item(Index: Integer): IXMLLibrary_animations_type;
begin
  Result := Nodes[Index] as IXMLLibrary_animations_type;
end;

{ TXMLAnimation_type }

procedure TXMLAnimation_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('source', TXMLSource_type);
  FClassesTree.Add('sampler', TXMLSampler_type);
  FClassesTree.Add('channel', TXMLChannel_type);
  FClassesTree.Add('animation', TXMLAnimation_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FSource := CreateFilter(TXMLSource_typeList, TXMLSource_type, IXMLSource_type) as IXMLSource_typeList;
  FSampler := CreateFilter(TXMLSampler_typeList, TXMLSampler_type, IXMLSampler_type) as IXMLSampler_typeList;
  FChannel := CreateFilter(TXMLChannel_typeList, TXMLChannel_type, IXMLChannel_type) as IXMLChannel_typeList;
  FAnimation := CreateFilter(TXMLAnimation_typeList, TXMLAnimation_type, IXMLAnimation_type) as IXMLAnimation_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLAnimation_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLAnimation_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLAnimation_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLAnimation_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLAnimation_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLAnimation_type.Get_Source: IXMLSource_typeList;
begin
  Result := FSource;
end;

function TXMLAnimation_type.Get_Sampler: IXMLSampler_typeList;
begin
  Result := FSampler;
end;

function TXMLAnimation_type.Get_Channel: IXMLChannel_typeList;
begin
  Result := FChannel;
end;

function TXMLAnimation_type.Get_Animation: IXMLAnimation_typeList;
begin
  Result := FAnimation;
end;

function TXMLAnimation_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLAnimation_typeList }

function TXMLAnimation_typeList.Add: IXMLAnimation_type;
begin
  Result := AddItem(-1) as IXMLAnimation_type;
end;

function TXMLAnimation_typeList.Insert(const Index: Integer): IXMLAnimation_type;
begin
  Result := AddItem(Index) as IXMLAnimation_type;
end;

function TXMLAnimation_typeList.Get_Item(Index: Integer): IXMLAnimation_type;
begin
  Result := Nodes[Index] as IXMLAnimation_type;
end;

{ TXMLSource_type }

procedure TXMLSource_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('token_array', TXMLToken_array_type);
  FClassesTree.Add('IDREF_array', TXMLIdref_array_type);
  FClassesTree.Add('Name_array', TXMLName_array_type);
  FClassesTree.Add('bool_array', TXMLBool_array_type);
  FClassesTree.Add('float_array', TXMLFloat_array_type);
  FClassesTree.Add('int_array', TXMLInt_array_type);
  FClassesTree.Add('SIDREF_array', TXMLSidref_array_type);
  FClassesTree.Add('technique_common', TXMLSource_type_technique_common);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  inherited;
end;

function TXMLSource_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLSource_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLSource_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLSource_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLSource_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLSource_type.Get_Token_array: IXMLToken_array_type;
begin
  Result := Nodes['token_array'] as IXMLToken_array_type;
end;

function TXMLSource_type.Get_IDREF_array: IXMLIdref_array_type;
begin
  Result := Nodes['IDREF_array'] as IXMLIdref_array_type;
end;

function TXMLSource_type.Get_Name_array: IXMLName_array_type;
begin
  Result := Nodes['Name_array'] as IXMLName_array_type;
end;

function TXMLSource_type.Get_Bool_array: IXMLBool_array_type;
begin
  Result := Nodes['bool_array'] as IXMLBool_array_type;
end;

function TXMLSource_type.Get_Float_array: IXMLFloat_array_type;
begin
  Result := Nodes['float_array'] as IXMLFloat_array_type;
end;

function TXMLSource_type.Get_Int_array: IXMLInt_array_type;
begin
  Result := Nodes['int_array'] as IXMLInt_array_type;
end;

function TXMLSource_type.Get_SIDREF_array: IXMLSidref_array_type;
begin
  Result := Nodes['SIDREF_array'] as IXMLSidref_array_type;
end;

function TXMLSource_type.Get_Technique_common: IXMLSource_type_technique_common;
begin
  Result := Nodes['technique_common'] as IXMLSource_type_technique_common;
end;

function TXMLSource_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

{ TXMLSource_typeList }

function TXMLSource_typeList.Add: IXMLSource_type;
begin
  Result := AddItem(-1) as IXMLSource_type;
end;

function TXMLSource_typeList.Insert(const Index: Integer): IXMLSource_type;
begin
  Result := AddItem(Index) as IXMLSource_type;
end;

function TXMLSource_typeList.Get_Item(Index: Integer): IXMLSource_type;
begin
  Result := Nodes[Index] as IXMLSource_type;
end;

{ TXMLToken_array_type }

function TXMLToken_array_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLToken_array_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLToken_array_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLToken_array_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLToken_array_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLToken_array_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

{ TXMLIdref_array_type }

function TXMLIdref_array_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLIdref_array_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLIdref_array_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLIdref_array_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLIdref_array_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLIdref_array_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

{ TXMLName_array_type }

function TXMLName_array_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLName_array_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLName_array_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLName_array_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLName_array_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLName_array_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

{ TXMLBool_array_type }

function TXMLBool_array_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLBool_array_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLBool_array_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLBool_array_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLBool_array_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLBool_array_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

{ TXMLFloat_array_type }

function TXMLFloat_array_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLFloat_array_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLFloat_array_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLFloat_array_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLFloat_array_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLFloat_array_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLFloat_array_type.Get_Digits: Byte;
begin
  Result := Params['digits'];
end;

procedure TXMLFloat_array_type.Set_Digits(Value: Byte);
begin
  Params['digits'] := Value;
end;

function TXMLFloat_array_type.Get_Magnitude: SmallInt;
begin
  Result := Params['magnitude'];
end;

procedure TXMLFloat_array_type.Set_Magnitude(Value: SmallInt);
begin
  Params['magnitude'] := Value;
end;

{ TXMLInt_array_type }

function TXMLInt_array_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLInt_array_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLInt_array_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInt_array_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInt_array_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLInt_array_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLInt_array_type.Get_MinInclusive: Integer;
begin
  Result := Params['minInclusive'];
end;

procedure TXMLInt_array_type.Set_MinInclusive(Value: Integer);
begin
  Params['minInclusive'] := Value;
end;

function TXMLInt_array_type.Get_MaxInclusive: Integer;
begin
  Result := Params['maxInclusive'];
end;

procedure TXMLInt_array_type.Set_MaxInclusive(Value: Integer);
begin
  Params['maxInclusive'] := Value;
end;

{ TXMLSidref_array_type }

function TXMLSidref_array_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLSidref_array_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLSidref_array_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLSidref_array_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLSidref_array_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLSidref_array_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

{ TXMLSource_type_technique_common }

procedure TXMLSource_type_technique_common.DoRegisterChildClasses;
begin
  FClassesTree.Add('accessor', TXMLAccessor_type);
  inherited;
end;

function TXMLSource_type_technique_common.Get_Accessor: IXMLAccessor_type;
begin
  Result := Nodes['accessor'] as IXMLAccessor_type;
end;

{ TXMLAccessor_type }

procedure TXMLAccessor_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('param', TXMLParam_type);
  Tag := 'param';
  ItemInterface := IXMLParam_type;
  inherited;
end;

function TXMLAccessor_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLAccessor_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLAccessor_type.Get_Offset: Int64;
begin
  Result := Params['offset'];
end;

procedure TXMLAccessor_type.Set_Offset(Value: Int64);
begin
  Params['offset'] := Value;
end;

function TXMLAccessor_type.Get_Source: UnicodeString;
begin
  Result := Params['source'];
end;

procedure TXMLAccessor_type.Set_Source(Value: UnicodeString);
begin
  Params['source'] := Value;
end;

function TXMLAccessor_type.Get_Stride: Int64;
begin
  Result := Params['stride'];
end;

procedure TXMLAccessor_type.Set_Stride(Value: Int64);
begin
  Params['stride'] := Value;
end;

function TXMLAccessor_type.Get_Param(Index: Integer): IXMLParam_type;
begin
  Result := Nodes[Index] as IXMLParam_type;
end;

function TXMLAccessor_type.Add: IXMLParam_type;
begin
  Result := AddItem(-1) as IXMLParam_type;
end;

function TXMLAccessor_type.Insert(const Index: Integer): IXMLParam_type;
begin
  Result := AddItem(Index) as IXMLParam_type;
end;

{ TXMLParam_type }

function TXMLParam_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLParam_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLParam_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLParam_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLParam_type.Get_Semantic: UnicodeString;
begin
  Result := Params['semantic'];
end;

procedure TXMLParam_type.Set_Semantic(Value: UnicodeString);
begin
  Params['semantic'] := Value;
end;

function TXMLParam_type.Get_Type_: UnicodeString;
begin
  Result := Params['type'];
end;

procedure TXMLParam_type.Set_Type_(Value: UnicodeString);
begin
  Params['type'] := Value;
end;

{ TXMLParam_typeList }

function TXMLParam_typeList.Add: IXMLParam_type;
begin
  Result := AddItem(-1) as IXMLParam_type;
end;

function TXMLParam_typeList.Insert(const Index: Integer): IXMLParam_type;
begin
  Result := AddItem(Index) as IXMLParam_type;
end;

function TXMLParam_typeList.Get_Item(Index: Integer): IXMLParam_type;
begin
  Result := Nodes[Index] as IXMLParam_type;
end;

{ TXMLSampler_type }

procedure TXMLSampler_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_type);
  Tag := 'input';
  ItemInterface := IXMLInput_local_type;
  inherited;
end;

function TXMLSampler_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLSampler_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLSampler_type.Get_Pre_behavior: UnicodeString;
begin
  Result := Params['pre_behavior'];
end;

procedure TXMLSampler_type.Set_Pre_behavior(Value: UnicodeString);
begin
  Params['pre_behavior'] := Value;
end;

function TXMLSampler_type.Get_Post_behavior: UnicodeString;
begin
  Result := Params['post_behavior'];
end;

procedure TXMLSampler_type.Set_Post_behavior(Value: UnicodeString);
begin
  Params['post_behavior'] := Value;
end;

function TXMLSampler_type.Get_Input(Index: Integer): IXMLInput_local_type;
begin
  Result := Nodes[Index] as IXMLInput_local_type;
end;

function TXMLSampler_type.Add: IXMLInput_local_type;
begin
  Result := AddItem(-1) as IXMLInput_local_type;
end;

function TXMLSampler_type.Insert(const Index: Integer): IXMLInput_local_type;
begin
  Result := AddItem(Index) as IXMLInput_local_type;
end;

{ TXMLSampler_typeList }

function TXMLSampler_typeList.Add: IXMLSampler_type;
begin
  Result := AddItem(-1) as IXMLSampler_type;
end;

function TXMLSampler_typeList.Insert(const Index: Integer): IXMLSampler_type;
begin
  Result := AddItem(Index) as IXMLSampler_type;
end;

function TXMLSampler_typeList.Get_Item(Index: Integer): IXMLSampler_type;
begin
  Result := Nodes[Index] as IXMLSampler_type;
end;

{ TXMLInput_local_type }

function TXMLInput_local_type.Get_Semantic: UnicodeString;
begin
  Result := Params['semantic'];
end;

procedure TXMLInput_local_type.Set_Semantic(Value: UnicodeString);
begin
  Params['semantic'] := Value;
end;

function TXMLInput_local_type.Get_Source: UnicodeString;
begin
  Result := Params['source'];
end;

procedure TXMLInput_local_type.Set_Source(Value: UnicodeString);
begin
  Params['source'] := Value;
end;

{ TXMLInput_local_typeList }

function TXMLInput_local_typeList.Add: IXMLInput_local_type;
begin
  Result := AddItem(-1) as IXMLInput_local_type;
end;

function TXMLInput_local_typeList.Insert(const Index: Integer): IXMLInput_local_type;
begin
  Result := AddItem(Index) as IXMLInput_local_type;
end;

function TXMLInput_local_typeList.Get_Item(Index: Integer): IXMLInput_local_type;
begin
  Result := Nodes[Index] as IXMLInput_local_type;
end;

{ TXMLChannel_type }

function TXMLChannel_type.Get_Source: UnicodeString;
begin
  Result := Params['source'];
end;

procedure TXMLChannel_type.Set_Source(Value: UnicodeString);
begin
  Params['source'] := Value;
end;

function TXMLChannel_type.Get_Target: UnicodeString;
begin
  Result := Params['target'];
end;

procedure TXMLChannel_type.Set_Target(Value: UnicodeString);
begin
  Params['target'] := Value;
end;

{ TXMLChannel_typeList }

function TXMLChannel_typeList.Add: IXMLChannel_type;
begin
  Result := AddItem(-1) as IXMLChannel_type;
end;

function TXMLChannel_typeList.Insert(const Index: Integer): IXMLChannel_type;
begin
  Result := AddItem(Index) as IXMLChannel_type;
end;

function TXMLChannel_typeList.Get_Item(Index: Integer): IXMLChannel_type;
begin
  Result := Nodes[Index] as IXMLChannel_type;
end;

{ TXMLLibrary_animation_clips_type }

procedure TXMLLibrary_animation_clips_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('animation_clip', TXMLAnimation_clip_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FAnimation_clip := CreateFilter(TXMLAnimation_clip_typeList, TXMLAnimation_clip_type, IXMLAnimation_clip_type) as IXMLAnimation_clip_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_animation_clips_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_animation_clips_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_animation_clips_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_animation_clips_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_animation_clips_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_animation_clips_type.Get_Animation_clip: IXMLAnimation_clip_typeList;
begin
  Result := FAnimation_clip;
end;

function TXMLLibrary_animation_clips_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_animation_clips_typeList }

function TXMLLibrary_animation_clips_typeList.Add: IXMLLibrary_animation_clips_type;
begin
  Result := AddItem(-1) as IXMLLibrary_animation_clips_type;
end;

function TXMLLibrary_animation_clips_typeList.Insert(const Index: Integer): IXMLLibrary_animation_clips_type;
begin
  Result := AddItem(Index) as IXMLLibrary_animation_clips_type;
end;

function TXMLLibrary_animation_clips_typeList.Get_Item(Index: Integer): IXMLLibrary_animation_clips_type;
begin
  Result := Nodes[Index] as IXMLLibrary_animation_clips_type;
end;

{ TXMLAnimation_clip_type }

procedure TXMLAnimation_clip_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('instance_animation', TXMLInstance_with_extra_type);
  FClassesTree.Add('instance_formula', TXMLInstance_formula_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInstance_animation := CreateFilter(TXMLInstance_with_extra_typeList, TXMLInstance_with_extra_type, IXMLInstance_with_extra_type) as IXMLInstance_with_extra_typeList;
  FInstance_formula := CreateFilter(TXMLInstance_formula_typeList, TXMLInstance_formula_type, IXMLInstance_formula_type) as IXMLInstance_formula_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLAnimation_clip_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLAnimation_clip_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLAnimation_clip_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLAnimation_clip_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLAnimation_clip_type.Get_Start: Double;
begin
  Result := Params['start'];
end;

procedure TXMLAnimation_clip_type.Set_Start(Value: Double);
begin
  Params['start'] := Value;
end;

function TXMLAnimation_clip_type.Get_End_: Double;
begin
  Result := Params['end'];
end;

procedure TXMLAnimation_clip_type.Set_End_(Value: Double);
begin
  Params['end'] := Value;
end;

function TXMLAnimation_clip_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLAnimation_clip_type.Get_Instance_animation: IXMLInstance_with_extra_typeList;
begin
  Result := FInstance_animation;
end;

function TXMLAnimation_clip_type.Get_Instance_formula: IXMLInstance_formula_typeList;
begin
  Result := FInstance_formula;
end;

function TXMLAnimation_clip_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLAnimation_clip_typeList }

function TXMLAnimation_clip_typeList.Add: IXMLAnimation_clip_type;
begin
  Result := AddItem(-1) as IXMLAnimation_clip_type;
end;

function TXMLAnimation_clip_typeList.Insert(const Index: Integer): IXMLAnimation_clip_type;
begin
  Result := AddItem(Index) as IXMLAnimation_clip_type;
end;

function TXMLAnimation_clip_typeList.Get_Item(Index: Integer): IXMLAnimation_clip_type;
begin
  Result := Nodes[Index] as IXMLAnimation_clip_type;
end;

{ TXMLInstance_with_extra_type }

procedure TXMLInstance_with_extra_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  Tag := 'extra';
  ItemInterface := IXMLExtra_type;
  inherited;
end;

function TXMLInstance_with_extra_type.Get_Url: UnicodeString;
begin
  Result := Params['url'];
end;

procedure TXMLInstance_with_extra_type.Set_Url(Value: UnicodeString);
begin
  Params['url'] := Value;
end;

function TXMLInstance_with_extra_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_with_extra_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLInstance_with_extra_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInstance_with_extra_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInstance_with_extra_type.Get_Extra(Index: Integer): IXMLExtra_type;
begin
  Result := Nodes[Index] as IXMLExtra_type;
end;

function TXMLInstance_with_extra_type.Add: IXMLExtra_type;
begin
  Result := AddItem(-1) as IXMLExtra_type;
end;

function TXMLInstance_with_extra_type.Insert(const Index: Integer): IXMLExtra_type;
begin
  Result := AddItem(Index) as IXMLExtra_type;
end;

{ TXMLInstance_with_extra_typeList }

function TXMLInstance_with_extra_typeList.Add: IXMLInstance_with_extra_type;
begin
  Result := AddItem(-1) as IXMLInstance_with_extra_type;
end;

function TXMLInstance_with_extra_typeList.Insert(const Index: Integer): IXMLInstance_with_extra_type;
begin
  Result := AddItem(Index) as IXMLInstance_with_extra_type;
end;

function TXMLInstance_with_extra_typeList.Get_Item(Index: Integer): IXMLInstance_with_extra_type;
begin
  Result := Nodes[Index] as IXMLInstance_with_extra_type;
end;

{ TXMLInstance_formula_type }

procedure TXMLInstance_formula_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('setparam', TXMLFormula_setparam_type);
  Tag := 'setparam';
  ItemInterface := IXMLFormula_setparam_type;
  inherited;
end;

function TXMLInstance_formula_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_formula_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLInstance_formula_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInstance_formula_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInstance_formula_type.Get_Url: UnicodeString;
begin
  Result := Params['url'];
end;

procedure TXMLInstance_formula_type.Set_Url(Value: UnicodeString);
begin
  Params['url'] := Value;
end;

function TXMLInstance_formula_type.Get_Setparam(Index: Integer): IXMLFormula_setparam_type;
begin
  Result := Nodes[Index] as IXMLFormula_setparam_type;
end;

function TXMLInstance_formula_type.Add: IXMLFormula_setparam_type;
begin
  Result := AddItem(-1) as IXMLFormula_setparam_type;
end;

function TXMLInstance_formula_type.Insert(const Index: Integer): IXMLFormula_setparam_type;
begin
  Result := AddItem(Index) as IXMLFormula_setparam_type;
end;

{ TXMLInstance_formula_typeList }

function TXMLInstance_formula_typeList.Add: IXMLInstance_formula_type;
begin
  Result := AddItem(-1) as IXMLInstance_formula_type;
end;

function TXMLInstance_formula_typeList.Insert(const Index: Integer): IXMLInstance_formula_type;
begin
  Result := AddItem(Index) as IXMLInstance_formula_type;
end;

function TXMLInstance_formula_typeList.Get_Item(Index: Integer): IXMLInstance_formula_type;
begin
  Result := Nodes[Index] as IXMLInstance_formula_type;
end;

{ TXMLFormula_setparam_type }

procedure TXMLFormula_setparam_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('connect_param', TXMLKinematics_connect_param_type);
  inherited;
end;

function TXMLFormula_setparam_type.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLFormula_setparam_type.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

function TXMLFormula_setparam_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLFormula_setparam_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLFormula_setparam_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLFormula_setparam_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLFormula_setparam_type.Get_SIDREF: UnicodeString;
begin
  Result := Nodes['SIDREF'].Content;
end;

procedure TXMLFormula_setparam_type.Set_SIDREF(Value: UnicodeString);
begin
  Nodes['SIDREF'].Content := Value;
end;

function TXMLFormula_setparam_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLFormula_setparam_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLFormula_setparam_type.Get_Connect_param: IXMLKinematics_connect_param_type;
begin
  Result := Nodes['connect_param'] as IXMLKinematics_connect_param_type;
end;

{ TXMLKinematics_connect_param_type }

function TXMLKinematics_connect_param_type.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLKinematics_connect_param_type.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

{ TXMLLibrary_cameras_type }

procedure TXMLLibrary_cameras_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('camera', TXMLCamera_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FCamera := CreateFilter(TXMLCamera_typeList, TXMLCamera_type, IXMLCamera_type) as IXMLCamera_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_cameras_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_cameras_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_cameras_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_cameras_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_cameras_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_cameras_type.Get_Camera: IXMLCamera_typeList;
begin
  Result := FCamera;
end;

function TXMLLibrary_cameras_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_cameras_typeList }

function TXMLLibrary_cameras_typeList.Add: IXMLLibrary_cameras_type;
begin
  Result := AddItem(-1) as IXMLLibrary_cameras_type;
end;

function TXMLLibrary_cameras_typeList.Insert(const Index: Integer): IXMLLibrary_cameras_type;
begin
  Result := AddItem(Index) as IXMLLibrary_cameras_type;
end;

function TXMLLibrary_cameras_typeList.Get_Item(Index: Integer): IXMLLibrary_cameras_type;
begin
  Result := Nodes[Index] as IXMLLibrary_cameras_type;
end;

{ TXMLCamera_type }

procedure TXMLCamera_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('optics', TXMLCamera_type_optics);
  FClassesTree.Add('imager', TXMLCamera_type_imager);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLCamera_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLCamera_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLCamera_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLCamera_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLCamera_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLCamera_type.Get_Optics: IXMLCamera_type_optics;
begin
  Result := Nodes['optics'] as IXMLCamera_type_optics;
end;

function TXMLCamera_type.Get_Imager: IXMLCamera_type_imager;
begin
  Result := Nodes['imager'] as IXMLCamera_type_imager;
end;

function TXMLCamera_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLCamera_typeList }

function TXMLCamera_typeList.Add: IXMLCamera_type;
begin
  Result := AddItem(-1) as IXMLCamera_type;
end;

function TXMLCamera_typeList.Insert(const Index: Integer): IXMLCamera_type;
begin
  Result := AddItem(Index) as IXMLCamera_type;
end;

function TXMLCamera_typeList.Get_Item(Index: Integer): IXMLCamera_type;
begin
  Result := Nodes[Index] as IXMLCamera_type;
end;

{ TXMLCamera_type_optics }

procedure TXMLCamera_type_optics.DoRegisterChildClasses;
begin
  FClassesTree.Add('technique_common', TXMLCamera_type_optics_technique_common);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLCamera_type_optics.Get_Technique_common: IXMLCamera_type_optics_technique_common;
begin
  Result := Nodes['technique_common'] as IXMLCamera_type_optics_technique_common;
end;

function TXMLCamera_type_optics.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLCamera_type_optics.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLCamera_type_optics_technique_common }

procedure TXMLCamera_type_optics_technique_common.DoRegisterChildClasses;
begin
  FClassesTree.Add('orthographic', TXMLCamera_type_optics_technique_common_orthographic);
  FClassesTree.Add('perspective', TXMLCamera_type_optics_technique_common_perspective);
  inherited;
end;

function TXMLCamera_type_optics_technique_common.Get_Orthographic: IXMLCamera_type_optics_technique_common_orthographic;
begin
  Result := Nodes['orthographic'] as IXMLCamera_type_optics_technique_common_orthographic;
end;

function TXMLCamera_type_optics_technique_common.Get_Perspective: IXMLCamera_type_optics_technique_common_perspective;
begin
  Result := Nodes['perspective'] as IXMLCamera_type_optics_technique_common_perspective;
end;

{ TXMLCamera_type_optics_technique_common_orthographic }

procedure TXMLCamera_type_optics_technique_common_orthographic.DoRegisterChildClasses;
begin
  FClassesTree.Add('xmag', TXMLTargetable_float_type);
  FClassesTree.Add('ymag', TXMLTargetable_float_type);
  FClassesTree.Add('aspect_ratio', TXMLTargetable_float_type);
  FClassesTree.Add('znear', TXMLTargetable_float_type);
  FClassesTree.Add('zfar', TXMLTargetable_float_type);
  inherited;
end;

function TXMLCamera_type_optics_technique_common_orthographic.Get_Xmag: IXMLTargetable_float_type;
begin
  Result := Nodes['xmag'] as IXMLTargetable_float_type;
end;

function TXMLCamera_type_optics_technique_common_orthographic.Get_Ymag: IXMLTargetable_float_type;
begin
  Result := Nodes['ymag'] as IXMLTargetable_float_type;
end;

function TXMLCamera_type_optics_technique_common_orthographic.Get_Aspect_ratio: IXMLTargetable_float_type;
begin
  Result := Nodes['aspect_ratio'] as IXMLTargetable_float_type;
end;

function TXMLCamera_type_optics_technique_common_orthographic.Get_Znear: IXMLTargetable_float_type;
begin
  Result := Nodes['znear'] as IXMLTargetable_float_type;
end;

function TXMLCamera_type_optics_technique_common_orthographic.Get_Zfar: IXMLTargetable_float_type;
begin
  Result := Nodes['zfar'] as IXMLTargetable_float_type;
end;

{ TXMLTargetable_float_type }

function TXMLTargetable_float_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLTargetable_float_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLCamera_type_optics_technique_common_perspective }

procedure TXMLCamera_type_optics_technique_common_perspective.DoRegisterChildClasses;
begin
  FClassesTree.Add('xfov', TXMLTargetable_float_type);
  FClassesTree.Add('yfov', TXMLTargetable_float_type);
  FClassesTree.Add('aspect_ratio', TXMLTargetable_float_type);
  FClassesTree.Add('znear', TXMLTargetable_float_type);
  FClassesTree.Add('zfar', TXMLTargetable_float_type);
  inherited;
end;

function TXMLCamera_type_optics_technique_common_perspective.Get_Xfov: IXMLTargetable_float_type;
begin
  Result := Nodes['xfov'] as IXMLTargetable_float_type;
end;

function TXMLCamera_type_optics_technique_common_perspective.Get_Yfov: IXMLTargetable_float_type;
begin
  Result := Nodes['yfov'] as IXMLTargetable_float_type;
end;

function TXMLCamera_type_optics_technique_common_perspective.Get_Aspect_ratio: IXMLTargetable_float_type;
begin
  Result := Nodes['aspect_ratio'] as IXMLTargetable_float_type;
end;

function TXMLCamera_type_optics_technique_common_perspective.Get_Znear: IXMLTargetable_float_type;
begin
  Result := Nodes['znear'] as IXMLTargetable_float_type;
end;

function TXMLCamera_type_optics_technique_common_perspective.Get_Zfar: IXMLTargetable_float_type;
begin
  Result := Nodes['zfar'] as IXMLTargetable_float_type;
end;

{ TXMLCamera_type_imager }

procedure TXMLCamera_type_imager.DoRegisterChildClasses;
begin
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLCamera_type_imager.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLCamera_type_imager.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_controllers_type }

procedure TXMLLibrary_controllers_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('controller', TXMLController_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FController := CreateFilter(TXMLController_typeList, TXMLController_type, IXMLController_type) as IXMLController_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_controllers_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_controllers_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_controllers_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_controllers_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_controllers_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_controllers_type.Get_Controller: IXMLController_typeList;
begin
  Result := FController;
end;

function TXMLLibrary_controllers_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_controllers_typeList }

function TXMLLibrary_controllers_typeList.Add: IXMLLibrary_controllers_type;
begin
  Result := AddItem(-1) as IXMLLibrary_controllers_type;
end;

function TXMLLibrary_controllers_typeList.Insert(const Index: Integer): IXMLLibrary_controllers_type;
begin
  Result := AddItem(Index) as IXMLLibrary_controllers_type;
end;

function TXMLLibrary_controllers_typeList.Get_Item(Index: Integer): IXMLLibrary_controllers_type;
begin
  Result := Nodes[Index] as IXMLLibrary_controllers_type;
end;

{ TXMLController_type }

procedure TXMLController_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('skin', TXMLSkin_type);
  FClassesTree.Add('morph', TXMLMorph_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLController_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLController_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLController_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLController_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLController_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLController_type.Get_Skin: IXMLSkin_type;
begin
  Result := Nodes['skin'] as IXMLSkin_type;
end;

function TXMLController_type.Get_Morph: IXMLMorph_type;
begin
  Result := Nodes['morph'] as IXMLMorph_type;
end;

function TXMLController_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLController_typeList }

function TXMLController_typeList.Add: IXMLController_type;
begin
  Result := AddItem(-1) as IXMLController_type;
end;

function TXMLController_typeList.Insert(const Index: Integer): IXMLController_type;
begin
  Result := AddItem(Index) as IXMLController_type;
end;

function TXMLController_typeList.Get_Item(Index: Integer): IXMLController_type;
begin
  Result := Nodes[Index] as IXMLController_type;
end;

{ TXMLSkin_type }

procedure TXMLSkin_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('source', TXMLSource_type);
  FClassesTree.Add('joints', TXMLSkin_type_joints);
  FClassesTree.Add('vertex_weights', TXMLSkin_type_vertex_weights);
  FClassesTree.Add('extra', TXMLExtra_type);
  FSourceList := CreateFilter(TXMLSource_typeList, TXMLSource_type, IXMLSource_type) as IXMLSource_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLSkin_type.Get_Source: UnicodeString;
begin
  Result := Params['source'];
end;

procedure TXMLSkin_type.Set_Source(Value: UnicodeString);
begin
  Params['source'] := Value;
end;

function TXMLSkin_type.Get_Bind_shape_matrix: UnicodeString;
begin
  Result := Nodes['bind_shape_matrix'].Content;
end;

procedure TXMLSkin_type.Set_Bind_shape_matrix(Value: UnicodeString);
begin
  Nodes['bind_shape_matrix'].Content := Value;
end;

function TXMLSkin_type.Get_SourceList: IXMLSource_typeList;
begin
  Result := FSourceList;
end;

function TXMLSkin_type.Get_Joints: IXMLSkin_type_joints;
begin
  Result := Nodes['joints'] as IXMLSkin_type_joints;
end;

function TXMLSkin_type.Get_Vertex_weights: IXMLSkin_type_vertex_weights;
begin
  Result := Nodes['vertex_weights'] as IXMLSkin_type_vertex_weights;
end;

function TXMLSkin_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLSkin_type_joints }

procedure TXMLSkin_type_joints.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_typeList, TXMLInput_local_type, IXMLInput_local_type) as IXMLInput_local_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLSkin_type_joints.Get_Input: IXMLInput_local_typeList;
begin
  Result := FInput;
end;

function TXMLSkin_type_joints.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLSkin_type_vertex_weights }

procedure TXMLSkin_type_vertex_weights.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLSkin_type_vertex_weights.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLSkin_type_vertex_weights.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLSkin_type_vertex_weights.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLSkin_type_vertex_weights.Get_Vcount: UnicodeString;
begin
  Result := Nodes['vcount'].Content;
end;

procedure TXMLSkin_type_vertex_weights.Set_Vcount(Value: UnicodeString);
begin
  Nodes['vcount'].Content := Value;
end;

function TXMLSkin_type_vertex_weights.Get_V: UnicodeString;
begin
  Result := Nodes[WideString('v')].Content;
end;

procedure TXMLSkin_type_vertex_weights.Set_V(Value: UnicodeString);
begin
  Nodes[WideString('v')].Content := Value;
end;

function TXMLSkin_type_vertex_weights.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInput_local_offset_type }

function TXMLInput_local_offset_type.Get_Offset: Int64;
begin
  Result := Params['offset'];
end;

procedure TXMLInput_local_offset_type.Set_Offset(Value: Int64);
begin
  Params['offset'] := Value;
end;

function TXMLInput_local_offset_type.Get_Semantic: UnicodeString;
begin
  Result := Params['semantic'];
end;

procedure TXMLInput_local_offset_type.Set_Semantic(Value: UnicodeString);
begin
  Params['semantic'] := Value;
end;

function TXMLInput_local_offset_type.Get_Source: UnicodeString;
begin
  Result := Params['source'];
end;

procedure TXMLInput_local_offset_type.Set_Source(Value: UnicodeString);
begin
  Params['source'] := Value;
end;

function TXMLInput_local_offset_type.Get_Set_: Int64;
begin
  Result := Params['set'];
end;

procedure TXMLInput_local_offset_type.Set_Set_(Value: Int64);
begin
  Params['set'] := Value;
end;

{ TXMLInput_local_offset_typeList }

function TXMLInput_local_offset_typeList.Add: IXMLInput_local_offset_type;
begin
  Result := AddItem(-1) as IXMLInput_local_offset_type;
end;

function TXMLInput_local_offset_typeList.Insert(const Index: Integer): IXMLInput_local_offset_type;
begin
  Result := AddItem(Index) as IXMLInput_local_offset_type;
end;

function TXMLInput_local_offset_typeList.Get_Item(Index: Integer): IXMLInput_local_offset_type;
begin
  Result := Nodes[Index] as IXMLInput_local_offset_type;
end;

{ TXMLMorph_type }

procedure TXMLMorph_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('source', TXMLSource_type);
  FClassesTree.Add('targets', TXMLMorph_type_targets);
  FClassesTree.Add('extra', TXMLExtra_type);
  FSourceList := CreateFilter(TXMLSource_typeList, TXMLSource_type, IXMLSource_type) as IXMLSource_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLMorph_type.Get_Method: UnicodeString;
begin
  Result := Params['method'];
end;

procedure TXMLMorph_type.Set_Method(Value: UnicodeString);
begin
  Params['method'] := Value;
end;

function TXMLMorph_type.Get_Source: UnicodeString;
begin
  Result := Params['source'];
end;

procedure TXMLMorph_type.Set_Source(Value: UnicodeString);
begin
  Params['source'] := Value;
end;

function TXMLMorph_type.Get_SourceList: IXMLSource_typeList;
begin
  Result := FSourceList;
end;

function TXMLMorph_type.Get_Targets: IXMLMorph_type_targets;
begin
  Result := Nodes['targets'] as IXMLMorph_type_targets;
end;

function TXMLMorph_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLMorph_type_targets }

procedure TXMLMorph_type_targets.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_typeList, TXMLInput_local_type, IXMLInput_local_type) as IXMLInput_local_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLMorph_type_targets.Get_Input: IXMLInput_local_typeList;
begin
  Result := FInput;
end;

function TXMLMorph_type_targets.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_geometries_type }

destructor TXMLLibrary_geometries_type.Destroy;
begin

  inherited;
end;

procedure TXMLLibrary_geometries_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('geometry', TXMLGeometry_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FGeometry := CreateFilter(TXMLGeometry_typeList, TXMLGeometry_type, IXMLGeometry_type) as IXMLGeometry_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_geometries_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_geometries_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_geometries_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_geometries_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_geometries_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_geometries_type.Get_Geometry: IXMLGeometry_typeList;
begin
  Result := FGeometry;
end;

function TXMLLibrary_geometries_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_geometries_typeList }

function TXMLLibrary_geometries_typeList.Add: IXMLLibrary_geometries_type;
begin
  Result := AddItem(-1) as IXMLLibrary_geometries_type;
end;

function TXMLLibrary_geometries_typeList.Insert(const Index: Integer): IXMLLibrary_geometries_type;
begin
  Result := AddItem(Index) as IXMLLibrary_geometries_type;
end;

function TXMLLibrary_geometries_typeList.Get_Item(Index: Integer): IXMLLibrary_geometries_type;
begin
  Result := Nodes[Index] as IXMLLibrary_geometries_type;
end;

{ TXMLGeometry_type }

destructor TXMLGeometry_type.Destroy;
begin

  inherited;
end;

procedure TXMLGeometry_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('convex_mesh', TXMLConvex_mesh_type);
  FClassesTree.Add('mesh', TXMLMesh_type);
  FClassesTree.Add('spline', TXMLSpline_type);
  FClassesTree.Add('brep', TXMLBrep_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLGeometry_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLGeometry_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLGeometry_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLGeometry_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLGeometry_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLGeometry_type.Get_Convex_mesh: IXMLConvex_mesh_type;
begin
  Result := Nodes['convex_mesh'] as IXMLConvex_mesh_type;
end;

function TXMLGeometry_type.Get_Mesh: IXMLMesh_type;
begin
  Result := Nodes['mesh'] as IXMLMesh_type;
end;

function TXMLGeometry_type.Get_Spline: IXMLSpline_type;
begin
  Result := Nodes['spline'] as IXMLSpline_type;
end;

function TXMLGeometry_type.Get_Brep: IXMLBrep_type;
begin
  Result := Nodes['brep'] as IXMLBrep_type;
end;

function TXMLGeometry_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLGeometry_typeList }

function TXMLGeometry_typeList.Add: IXMLGeometry_type;
begin
  Result := AddItem(-1) as IXMLGeometry_type;
end;

function TXMLGeometry_typeList.Insert(const Index: Integer): IXMLGeometry_type;
begin
  Result := AddItem(Index) as IXMLGeometry_type;
end;

function TXMLGeometry_typeList.Get_Item(Index: Integer): IXMLGeometry_type;
begin
  Result := Nodes[Index] as IXMLGeometry_type;
end;

{ TXMLConvex_mesh_type }

procedure TXMLConvex_mesh_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('source', TXMLSource_type);
  FClassesTree.Add('vertices', TXMLVertices_type);
  FClassesTree.Add('lines', TXMLLines_type);
  FClassesTree.Add('linestrips', TXMLLinestrips_type);
  FClassesTree.Add('polygons', TXMLPolygons_type);
  FClassesTree.Add('polylist', TXMLPolylist_type);
  FClassesTree.Add('triangles', TXMLTriangles_type);
  FClassesTree.Add('trifans', TXMLTrifans_type);
  FClassesTree.Add('tristrips', TXMLTristrips_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FSource := CreateFilter(TXMLSource_typeList, TXMLSource_type, IXMLSource_type) as IXMLSource_typeList;
  FLines := CreateFilter(TXMLLines_typeList, TXMLLines_type, IXMLLines_type) as IXMLLines_typeList;
  FLinestrips := CreateFilter(TXMLLinestrips_typeList, TXMLLinestrips_type, IXMLLinestrips_type) as IXMLLinestrips_typeList;
  FPolygons := CreateFilter(TXMLPolygons_typeList, TXMLPolygons_type, IXMLPolygons_type) as IXMLPolygons_typeList;
  FPolylist := CreateFilter(TXMLPolylist_typeList, TXMLPolylist_type, IXMLPolylist_type) as IXMLPolylist_typeList;
  FTriangles := CreateFilter(TXMLTriangles_typeList, TXMLTriangles_type, IXMLTriangles_type) as IXMLTriangles_typeList;
  FTrifans := CreateFilter(TXMLTrifans_typeList, TXMLTrifans_type, IXMLTrifans_type) as IXMLTrifans_typeList;
  FTristrips := CreateFilter(TXMLTristrips_typeList, TXMLTristrips_type, IXMLTristrips_type) as IXMLTristrips_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLConvex_mesh_type.Get_Convex_hull_of: UnicodeString;
begin
  Result := Params['convex_hull_of'];
end;

procedure TXMLConvex_mesh_type.Set_Convex_hull_of(Value: UnicodeString);
begin
  Params['convex_hull_of'] := Value;
end;

function TXMLConvex_mesh_type.Get_Source: IXMLSource_typeList;
begin
  Result := FSource;
end;

function TXMLConvex_mesh_type.Get_Vertices: IXMLVertices_type;
begin
  Result := Nodes['vertices'] as IXMLVertices_type;
end;

function TXMLConvex_mesh_type.Get_Lines: IXMLLines_typeList;
begin
  Result := FLines;
end;

function TXMLConvex_mesh_type.Get_Linestrips: IXMLLinestrips_typeList;
begin
  Result := FLinestrips;
end;

function TXMLConvex_mesh_type.Get_Polygons: IXMLPolygons_typeList;
begin
  Result := FPolygons;
end;

function TXMLConvex_mesh_type.Get_Polylist: IXMLPolylist_typeList;
begin
  Result := FPolylist;
end;

function TXMLConvex_mesh_type.Get_Triangles: IXMLTriangles_typeList;
begin
  Result := FTriangles;
end;

function TXMLConvex_mesh_type.Get_Trifans: IXMLTrifans_typeList;
begin
  Result := FTrifans;
end;

function TXMLConvex_mesh_type.Get_Tristrips: IXMLTristrips_typeList;
begin
  Result := FTristrips;
end;

function TXMLConvex_mesh_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLVertices_type }

procedure TXMLVertices_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_typeList, TXMLInput_local_type, IXMLInput_local_type) as IXMLInput_local_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLVertices_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLVertices_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLVertices_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLVertices_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLVertices_type.Get_Input: IXMLInput_local_typeList;
begin
  Result := FInput;
end;

function TXMLVertices_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLines_type }

procedure TXMLLines_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLines_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLines_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLines_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLLines_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLLines_type.Get_Material: UnicodeString;
begin
  Result := Params['material'];
end;

procedure TXMLLines_type.Set_Material(Value: UnicodeString);
begin
  Params['material'] := Value;
end;

function TXMLLines_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLLines_type.Get_P: IXMLP_type;
begin
  Result := Nodes[WideString('p')] as IXMLP_type;
end;

function TXMLLines_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLines_typeList }

function TXMLLines_typeList.Add: IXMLLines_type;
begin
  Result := AddItem(-1) as IXMLLines_type;
end;

function TXMLLines_typeList.Insert(const Index: Integer): IXMLLines_type;
begin
  Result := AddItem(Index) as IXMLLines_type;
end;

function TXMLLines_typeList.Get_Item(Index: Integer): IXMLLines_type;
begin
  Result := Nodes[Index] as IXMLLines_type;
end;

{ TXMLP_type }

{ TXMLP_typeList }

function TXMLP_typeList.Add: IXMLP_type;
begin
  Result := AddItem(-1) as IXMLP_type;
end;

function TXMLP_typeList.Insert(const Index: Integer): IXMLP_type;
begin
  Result := AddItem(Index) as IXMLP_type;
end;

function TXMLP_typeList.Get_Item(Index: Integer): IXMLP_type;
begin
  Result := Nodes[Index] as IXMLP_type;
end;

{ TXMLLinestrips_type }

procedure TXMLLinestrips_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FP := CreateFilter(TXMLP_typeList, TXMLP_type, IXMLP_type) as IXMLP_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLinestrips_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLinestrips_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLinestrips_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLLinestrips_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLLinestrips_type.Get_Material: UnicodeString;
begin
  Result := Params['material'];
end;

procedure TXMLLinestrips_type.Set_Material(Value: UnicodeString);
begin
  Params['material'] := Value;
end;

function TXMLLinestrips_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLLinestrips_type.Get_P: IXMLP_typeList;
begin
  Result := FP;
end;

function TXMLLinestrips_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLinestrips_typeList }

function TXMLLinestrips_typeList.Add: IXMLLinestrips_type;
begin
  Result := AddItem(-1) as IXMLLinestrips_type;
end;

function TXMLLinestrips_typeList.Insert(const Index: Integer): IXMLLinestrips_type;
begin
  Result := AddItem(Index) as IXMLLinestrips_type;
end;

function TXMLLinestrips_typeList.Get_Item(Index: Integer): IXMLLinestrips_type;
begin
  Result := Nodes[Index] as IXMLLinestrips_type;
end;

{ TXMLPolygons_type }

procedure TXMLPolygons_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('ph', TXMLPolygons_type_ph);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FP := CreateFilter(TXMLP_typeList, TXMLP_type, IXMLP_type) as IXMLP_typeList;
  FPh := CreateFilter(TXMLPolygons_type_phList, TXMLPolygons_type_ph, IXMLPolygons_type_ph) as IXMLPolygons_type_phList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLPolygons_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLPolygons_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLPolygons_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLPolygons_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLPolygons_type.Get_Material: UnicodeString;
begin
  Result := Params['material'];
end;

procedure TXMLPolygons_type.Set_Material(Value: UnicodeString);
begin
  Params['material'] := Value;
end;

function TXMLPolygons_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLPolygons_type.Get_P: IXMLP_typeList;
begin
  Result := FP;
end;

function TXMLPolygons_type.Get_Ph: IXMLPolygons_type_phList;
begin
  Result := FPh;
end;

function TXMLPolygons_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLPolygons_typeList }

function TXMLPolygons_typeList.Add: IXMLPolygons_type;
begin
  Result := AddItem(-1) as IXMLPolygons_type;
end;

function TXMLPolygons_typeList.Insert(const Index: Integer): IXMLPolygons_type;
begin
  Result := AddItem(Index) as IXMLPolygons_type;
end;

function TXMLPolygons_typeList.Get_Item(Index: Integer): IXMLPolygons_type;
begin
  Result := Nodes[Index] as IXMLPolygons_type;
end;

{ TXMLPolygons_type_ph }

procedure TXMLPolygons_type_ph.DoRegisterChildClasses;
begin
  FClassesTree.Add('p', TXMLP_type);
  FH := CreateFilter(TXMLList_of_uints_typeList, TXML, IXML) as IXMLList_of_uints_typeList;
  inherited;
end;

function TXMLPolygons_type_ph.Get_P: IXMLP_type;
begin
  Result := Nodes[WideString('p')] as IXMLP_type;
end;

function TXMLPolygons_type_ph.Get_H: IXMLList_of_uints_typeList;
begin
  Result := FH;
end;

{ TXMLPolygons_type_phList }

function TXMLPolygons_type_phList.Add: IXMLPolygons_type_ph;
begin
  Result := AddItem(-1) as IXMLPolygons_type_ph;
end;

function TXMLPolygons_type_phList.Insert(const Index: Integer): IXMLPolygons_type_ph;
begin
  Result := AddItem(Index) as IXMLPolygons_type_ph;
end;

function TXMLPolygons_type_phList.Get_Item(Index: Integer): IXMLPolygons_type_ph;
begin
  Result := Nodes[Index] as IXMLPolygons_type_ph;
end;

{ TXMLPolylist_type }

procedure TXMLPolylist_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLPolylist_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLPolylist_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLPolylist_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLPolylist_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLPolylist_type.Get_Material: UnicodeString;
begin
  Result := Params['material'];
end;

procedure TXMLPolylist_type.Set_Material(Value: UnicodeString);
begin
  Params['material'] := Value;
end;

function TXMLPolylist_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLPolylist_type.Get_Vcount: UnicodeString;
begin
  Result := Nodes['vcount'].Content;
end;

procedure TXMLPolylist_type.Set_Vcount(Value: UnicodeString);
begin
  Nodes['vcount'].Content := Value;
end;

function TXMLPolylist_type.Get_P: IXMLP_type;
begin
  Result := Nodes[WideString('p')] as IXMLP_type;
end;

function TXMLPolylist_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLPolylist_typeList }

function TXMLPolylist_typeList.Add: IXMLPolylist_type;
begin
  Result := AddItem(-1) as IXMLPolylist_type;
end;

function TXMLPolylist_typeList.Insert(const Index: Integer): IXMLPolylist_type;
begin
  Result := AddItem(Index) as IXMLPolylist_type;
end;

function TXMLPolylist_typeList.Get_Item(Index: Integer): IXMLPolylist_type;
begin
  Result := Nodes[Index] as IXMLPolylist_type;
end;

{ TXMLTriangles_type }

procedure TXMLTriangles_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLTriangles_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLTriangles_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLTriangles_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLTriangles_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLTriangles_type.Get_Material: UnicodeString;
begin
  Result := Params['material'];
end;

procedure TXMLTriangles_type.Set_Material(Value: UnicodeString);
begin
  Params['material'] := Value;
end;

function TXMLTriangles_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLTriangles_type.Get_P: IXMLP_type;
begin
  Result := Nodes[WideString('p')] as IXMLP_type;
end;

function TXMLTriangles_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLTriangles_typeList }

function TXMLTriangles_typeList.Add: IXMLTriangles_type;
begin
  Result := AddItem(-1) as IXMLTriangles_type;
end;

function TXMLTriangles_typeList.Insert(const Index: Integer): IXMLTriangles_type;
begin
  Result := AddItem(Index) as IXMLTriangles_type;
end;

function TXMLTriangles_typeList.Get_Item(Index: Integer): IXMLTriangles_type;
begin
  Result := Nodes[Index] as IXMLTriangles_type;
end;

{ TXMLTrifans_type }

procedure TXMLTrifans_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FP := CreateFilter(TXMLP_typeList, TXMLP_type, IXMLP_type) as IXMLP_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLTrifans_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLTrifans_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLTrifans_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLTrifans_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLTrifans_type.Get_Material: UnicodeString;
begin
  Result := Params['material'];
end;

procedure TXMLTrifans_type.Set_Material(Value: UnicodeString);
begin
  Params['material'] := Value;
end;

function TXMLTrifans_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLTrifans_type.Get_P: IXMLP_typeList;
begin
  Result := FP;
end;

function TXMLTrifans_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLTrifans_typeList }

function TXMLTrifans_typeList.Add: IXMLTrifans_type;
begin
  Result := AddItem(-1) as IXMLTrifans_type;
end;

function TXMLTrifans_typeList.Insert(const Index: Integer): IXMLTrifans_type;
begin
  Result := AddItem(Index) as IXMLTrifans_type;
end;

function TXMLTrifans_typeList.Get_Item(Index: Integer): IXMLTrifans_type;
begin
  Result := Nodes[Index] as IXMLTrifans_type;
end;

{ TXMLTristrips_type }

procedure TXMLTristrips_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FP := CreateFilter(TXMLP_typeList, TXMLP_type, IXMLP_type) as IXMLP_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLTristrips_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLTristrips_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLTristrips_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLTristrips_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLTristrips_type.Get_Material: UnicodeString;
begin
  Result := Params['material'];
end;

procedure TXMLTristrips_type.Set_Material(Value: UnicodeString);
begin
  Params['material'] := Value;
end;

function TXMLTristrips_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLTristrips_type.Get_P: IXMLP_typeList;
begin
  Result := FP;
end;

function TXMLTristrips_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLTristrips_typeList }

function TXMLTristrips_typeList.Add: IXMLTristrips_type;
begin
  Result := AddItem(-1) as IXMLTristrips_type;
end;

function TXMLTristrips_typeList.Insert(const Index: Integer): IXMLTristrips_type;
begin
  Result := AddItem(Index) as IXMLTristrips_type;
end;

function TXMLTristrips_typeList.Get_Item(Index: Integer): IXMLTristrips_type;
begin
  Result := Nodes[Index] as IXMLTristrips_type;
end;

{ TXMLMesh_type }

procedure TXMLMesh_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('source', TXMLSource_type);
  FClassesTree.Add('vertices', TXMLVertices_type);
  FClassesTree.Add('lines', TXMLLines_type);
  FClassesTree.Add('linestrips', TXMLLinestrips_type);
  FClassesTree.Add('polygons', TXMLPolygons_type);
  FClassesTree.Add('polylist', TXMLPolylist_type);
  FClassesTree.Add('triangles', TXMLTriangles_type);
  FClassesTree.Add('trifans', TXMLTrifans_type);
  FClassesTree.Add('tristrips', TXMLTristrips_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FSource := CreateFilter(TXMLSource_typeList, TXMLSource_type, IXMLSource_type) as IXMLSource_typeList;
  FLines := CreateFilter(TXMLLines_typeList, TXMLLines_type, IXMLLines_type) as IXMLLines_typeList;
  FLinestrips := CreateFilter(TXMLLinestrips_typeList, TXMLLinestrips_type, IXMLLinestrips_type) as IXMLLinestrips_typeList;
  FPolygons := CreateFilter(TXMLPolygons_typeList, TXMLPolygons_type, IXMLPolygons_type) as IXMLPolygons_typeList;
  FPolylist := CreateFilter(TXMLPolylist_typeList, TXMLPolylist_type, IXMLPolylist_type) as IXMLPolylist_typeList;
  FTriangles := CreateFilter(TXMLTriangles_typeList, TXMLTriangles_type, IXMLTriangles_type) as IXMLTriangles_typeList;
  FTrifans := CreateFilter(TXMLTrifans_typeList, TXMLTrifans_type, IXMLTrifans_type) as IXMLTrifans_typeList;
  FTristrips := CreateFilter(TXMLTristrips_typeList, TXMLTristrips_type, IXMLTristrips_type) as IXMLTristrips_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLMesh_type.Get_Source: IXMLSource_typeList;
begin
  Result := FSource;
end;

function TXMLMesh_type.Get_Vertices: IXMLVertices_type;
begin
  Result := Nodes['vertices'] as IXMLVertices_type;
end;

function TXMLMesh_type.Get_Lines: IXMLLines_typeList;
begin
  Result := FLines;
end;

function TXMLMesh_type.Get_Linestrips: IXMLLinestrips_typeList;
begin
  Result := FLinestrips;
end;

function TXMLMesh_type.Get_Polygons: IXMLPolygons_typeList;
begin
  Result := FPolygons;
end;

function TXMLMesh_type.Get_Polylist: IXMLPolylist_typeList;
begin
  Result := FPolylist;
end;

function TXMLMesh_type.Get_Triangles: IXMLTriangles_typeList;
begin
  Result := FTriangles;
end;

function TXMLMesh_type.Get_Trifans: IXMLTrifans_typeList;
begin
  Result := FTrifans;
end;

function TXMLMesh_type.Get_Tristrips: IXMLTristrips_typeList;
begin
  Result := FTristrips;
end;

function TXMLMesh_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLSpline_type }

procedure TXMLSpline_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('source', TXMLSource_type);
  FClassesTree.Add('control_vertices', TXMLSpline_type_control_vertices);
  FClassesTree.Add('extra', TXMLExtra_type);
  FSource := CreateFilter(TXMLSource_typeList, TXMLSource_type, IXMLSource_type) as IXMLSource_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLSpline_type.Get_Closed: Boolean;
begin
  Result := Params['closed'];
end;

procedure TXMLSpline_type.Set_Closed(Value: Boolean);
begin
  Params['closed'] := Value;
end;

function TXMLSpline_type.Get_Source: IXMLSource_typeList;
begin
  Result := FSource;
end;

function TXMLSpline_type.Get_Control_vertices: IXMLSpline_type_control_vertices;
begin
  Result := Nodes['control_vertices'] as IXMLSpline_type_control_vertices;
end;

function TXMLSpline_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLSpline_type_control_vertices }

procedure TXMLSpline_type_control_vertices.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_typeList, TXMLInput_local_type, IXMLInput_local_type) as IXMLInput_local_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLSpline_type_control_vertices.Get_Input: IXMLInput_local_typeList;
begin
  Result := FInput;
end;

function TXMLSpline_type_control_vertices.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLBrep_type }

procedure TXMLBrep_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('curves', TXMLCurves_type);
  FClassesTree.Add('surface_curves', TXMLSurface_curves_type);
  FClassesTree.Add('surfaces', TXMLSurfaces_type);
  FClassesTree.Add('source', TXMLSource_type);
  FClassesTree.Add('vertices', TXMLVertices_type);
  FClassesTree.Add('edges', TXMLEdges_type);
  FClassesTree.Add('wires', TXMLWires_type);
  FClassesTree.Add('faces', TXMLFaces_type);
  FClassesTree.Add('pcurves', TXMLPcurves_type);
  FClassesTree.Add('shells', TXMLShells_type);
  FClassesTree.Add('solids', TXMLSolids_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FSource := CreateFilter(TXMLSource_typeList, TXMLSource_type, IXMLSource_type) as IXMLSource_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLBrep_type.Get_Curves: IXMLCurves_type;
begin
  Result := Nodes['curves'] as IXMLCurves_type;
end;

function TXMLBrep_type.Get_Surface_curves: IXMLSurface_curves_type;
begin
  Result := Nodes['surface_curves'] as IXMLSurface_curves_type;
end;

function TXMLBrep_type.Get_Surfaces: IXMLSurfaces_type;
begin
  Result := Nodes['surfaces'] as IXMLSurfaces_type;
end;

function TXMLBrep_type.Get_Source: IXMLSource_typeList;
begin
  Result := FSource;
end;

function TXMLBrep_type.Get_Vertices: IXMLVertices_type;
begin
  Result := Nodes['vertices'] as IXMLVertices_type;
end;

function TXMLBrep_type.Get_Edges: IXMLEdges_type;
begin
  Result := Nodes['edges'] as IXMLEdges_type;
end;

function TXMLBrep_type.Get_Wires: IXMLWires_type;
begin
  Result := Nodes['wires'] as IXMLWires_type;
end;

function TXMLBrep_type.Get_Faces: IXMLFaces_type;
begin
  Result := Nodes['faces'] as IXMLFaces_type;
end;

function TXMLBrep_type.Get_Pcurves: IXMLPcurves_type;
begin
  Result := Nodes['pcurves'] as IXMLPcurves_type;
end;

function TXMLBrep_type.Get_Shells: IXMLShells_type;
begin
  Result := Nodes['shells'] as IXMLShells_type;
end;

function TXMLBrep_type.Get_Solids: IXMLSolids_type;
begin
  Result := Nodes['solids'] as IXMLSolids_type;
end;

function TXMLBrep_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLCurves_type }

procedure TXMLCurves_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('curve', TXMLCurve_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FCurve := CreateFilter(TXMLCurve_typeList, TXMLCurve_type, IXMLCurve_type) as IXMLCurve_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLCurves_type.Get_Curve: IXMLCurve_typeList;
begin
  Result := FCurve;
end;

function TXMLCurves_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLCurve_type }

procedure TXMLCurve_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('line', TXMLLine_type);
  FClassesTree.Add('circle', TXMLCircle_type);
  FClassesTree.Add('ellipse', TXMLEllipse_type);
  FClassesTree.Add('parabola', TXMLParabola_type);
  FClassesTree.Add('hyperbola', TXMLHyperbola_type);
  FClassesTree.Add('nurbs', TXMLNurbs_type);
  FClassesTree.Add('orient', TXMLOrient_type);
  FClassesTree.Add('origin', TXMLOrigin_type);
  FOrient := CreateFilter(TXMLOrient_typeList, TXMLOrient_type, IXMLOrient_type) as IXMLOrient_typeList;
  inherited;
end;

function TXMLCurve_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLCurve_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLCurve_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLCurve_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLCurve_type.Get_Line: IXMLLine_type;
begin
  Result := Nodes['line'] as IXMLLine_type;
end;

function TXMLCurve_type.Get_Circle: IXMLCircle_type;
begin
  Result := Nodes['circle'] as IXMLCircle_type;
end;

function TXMLCurve_type.Get_Ellipse: IXMLEllipse_type;
begin
  Result := Nodes['ellipse'] as IXMLEllipse_type;
end;

function TXMLCurve_type.Get_Parabola: IXMLParabola_type;
begin
  Result := Nodes['parabola'] as IXMLParabola_type;
end;

function TXMLCurve_type.Get_Hyperbola: IXMLHyperbola_type;
begin
  Result := Nodes['hyperbola'] as IXMLHyperbola_type;
end;

function TXMLCurve_type.Get_Nurbs: IXMLNurbs_type;
begin
  Result := Nodes['nurbs'] as IXMLNurbs_type;
end;

function TXMLCurve_type.Get_Orient: IXMLOrient_typeList;
begin
  Result := FOrient;
end;

function TXMLCurve_type.Get_Origin: IXMLOrigin_type;
begin
  Result := Nodes['origin'] as IXMLOrigin_type;
end;

{ TXMLCurve_typeList }

function TXMLCurve_typeList.Add: IXMLCurve_type;
begin
  Result := AddItem(-1) as IXMLCurve_type;
end;

function TXMLCurve_typeList.Insert(const Index: Integer): IXMLCurve_type;
begin
  Result := AddItem(Index) as IXMLCurve_type;
end;

function TXMLCurve_typeList.Get_Item(Index: Integer): IXMLCurve_type;
begin
  Result := Nodes[Index] as IXMLCurve_type;
end;

{ TXMLLine_type }

procedure TXMLLine_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLine_type.Get_Origin: UnicodeString;
begin
  Result := Nodes['origin'].Content;
end;

procedure TXMLLine_type.Set_Origin(Value: UnicodeString);
begin
  Nodes['origin'].Content := Value;
end;

function TXMLLine_type.Get_Direction: UnicodeString;
begin
  Result := Nodes['direction'].Content;
end;

procedure TXMLLine_type.Set_Direction(Value: UnicodeString);
begin
  Nodes['direction'].Content := Value;
end;

function TXMLLine_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLCircle_type }

procedure TXMLCircle_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLCircle_type.Get_Radius: Double;
begin
  Result := Nodes['radius'].Content;
end;

procedure TXMLCircle_type.Set_Radius(Value: Double);
begin
  Nodes['radius'].Content := Value;
end;

function TXMLCircle_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLEllipse_type }

procedure TXMLEllipse_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLEllipse_type.Get_Radius: UnicodeString;
begin
  Result := Nodes['radius'].Content;
end;

procedure TXMLEllipse_type.Set_Radius(Value: UnicodeString);
begin
  Nodes['radius'].Content := Value;
end;

function TXMLEllipse_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLParabola_type }

procedure TXMLParabola_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLParabola_type.Get_Focal: Double;
begin
  Result := Nodes['focal'].Content;
end;

procedure TXMLParabola_type.Set_Focal(Value: Double);
begin
  Nodes['focal'].Content := Value;
end;

function TXMLParabola_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLHyperbola_type }

procedure TXMLHyperbola_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLHyperbola_type.Get_Radius: UnicodeString;
begin
  Result := Nodes['radius'].Content;
end;

procedure TXMLHyperbola_type.Set_Radius(Value: UnicodeString);
begin
  Nodes['radius'].Content := Value;
end;

function TXMLHyperbola_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLNurbs_type }

procedure TXMLNurbs_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('source', TXMLSource_type);
  FClassesTree.Add('control_vertices', TXMLNurbs_type_control_vertices);
  FClassesTree.Add('extra', TXMLExtra_type);
  FSource := CreateFilter(TXMLSource_typeList, TXMLSource_type, IXMLSource_type) as IXMLSource_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLNurbs_type.Get_Degree: Int64;
begin
  Result := Params['degree'];
end;

procedure TXMLNurbs_type.Set_Degree(Value: Int64);
begin
  Params['degree'] := Value;
end;

function TXMLNurbs_type.Get_Closed: Boolean;
begin
  Result := Params['closed'];
end;

procedure TXMLNurbs_type.Set_Closed(Value: Boolean);
begin
  Params['closed'] := Value;
end;

function TXMLNurbs_type.Get_Source: IXMLSource_typeList;
begin
  Result := FSource;
end;

function TXMLNurbs_type.Get_Control_vertices: IXMLNurbs_type_control_vertices;
begin
  Result := Nodes['control_vertices'] as IXMLNurbs_type_control_vertices;
end;

function TXMLNurbs_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLNurbs_type_control_vertices }

procedure TXMLNurbs_type_control_vertices.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_typeList, TXMLInput_local_type, IXMLInput_local_type) as IXMLInput_local_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLNurbs_type_control_vertices.Get_Input: IXMLInput_local_typeList;
begin
  Result := FInput;
end;

function TXMLNurbs_type_control_vertices.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLOrient_type }

{ TXMLOrient_typeList }

function TXMLOrient_typeList.Add: IXMLOrient_type;
begin
  Result := AddItem(-1) as IXMLOrient_type;
end;

function TXMLOrient_typeList.Insert(const Index: Integer): IXMLOrient_type;
begin
  Result := AddItem(Index) as IXMLOrient_type;
end;

function TXMLOrient_typeList.Get_Item(Index: Integer): IXMLOrient_type;
begin
  Result := Nodes[Index] as IXMLOrient_type;
end;

{ TXMLOrigin_type }

{ TXMLSurface_curves_type }

procedure TXMLSurface_curves_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('curve', TXMLCurve_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FCurve := CreateFilter(TXMLCurve_typeList, TXMLCurve_type, IXMLCurve_type) as IXMLCurve_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLSurface_curves_type.Get_Curve: IXMLCurve_typeList;
begin
  Result := FCurve;
end;

function TXMLSurface_curves_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLSurfaces_type }

procedure TXMLSurfaces_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('surface', TXMLSurface_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FSurface := CreateFilter(TXMLSurface_typeList, TXMLSurface_type, IXMLSurface_type) as IXMLSurface_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLSurfaces_type.Get_Surface: IXMLSurface_typeList;
begin
  Result := FSurface;
end;

function TXMLSurfaces_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLSurface_type }

procedure TXMLSurface_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('plane', TXMLPlane_type);
  FClassesTree.Add('sphere', TXMLSphere_type);
  FClassesTree.Add('torus', TXMLTorus_type);
  FClassesTree.Add('swept_surface', TXMLSwept_surface_type);
  FClassesTree.Add('nurbs_surface', TXMLNurbs_surface_type);
  FClassesTree.Add('cone', TXMLCone_type);
  FClassesTree.Add('cylinder', TXMLSurface_type_cylinder);
  FClassesTree.Add('orient', TXMLOrient_type);
  FClassesTree.Add('origin', TXMLOrigin_type);
  FOrient := CreateFilter(TXMLOrient_typeList, TXMLOrient_type, IXMLOrient_type) as IXMLOrient_typeList;
  inherited;
end;

function TXMLSurface_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLSurface_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLSurface_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLSurface_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLSurface_type.Get_Plane: IXMLPlane_type;
begin
  Result := Nodes['plane'] as IXMLPlane_type;
end;

function TXMLSurface_type.Get_Sphere: IXMLSphere_type;
begin
  Result := Nodes['sphere'] as IXMLSphere_type;
end;

function TXMLSurface_type.Get_Torus: IXMLTorus_type;
begin
  Result := Nodes['torus'] as IXMLTorus_type;
end;

function TXMLSurface_type.Get_Swept_surface: IXMLSwept_surface_type;
begin
  Result := Nodes['swept_surface'] as IXMLSwept_surface_type;
end;

function TXMLSurface_type.Get_Nurbs_surface: IXMLNurbs_surface_type;
begin
  Result := Nodes['nurbs_surface'] as IXMLNurbs_surface_type;
end;

function TXMLSurface_type.Get_Cone: IXMLCone_type;
begin
  Result := Nodes['cone'] as IXMLCone_type;
end;

function TXMLSurface_type.Get_Cylinder: IXMLSurface_type_cylinder;
begin
  Result := Nodes['cylinder'] as IXMLSurface_type_cylinder;
end;

function TXMLSurface_type.Get_Orient: IXMLOrient_typeList;
begin
  Result := FOrient;
end;

function TXMLSurface_type.Get_Origin: IXMLOrigin_type;
begin
  Result := Nodes['origin'] as IXMLOrigin_type;
end;

{ TXMLSurface_typeList }

function TXMLSurface_typeList.Add: IXMLSurface_type;
begin
  Result := AddItem(-1) as IXMLSurface_type;
end;

function TXMLSurface_typeList.Insert(const Index: Integer): IXMLSurface_type;
begin
  Result := AddItem(Index) as IXMLSurface_type;
end;

function TXMLSurface_typeList.Get_Item(Index: Integer): IXMLSurface_type;
begin
  Result := Nodes[Index] as IXMLSurface_type;
end;

{ TXMLPlane_type }

procedure TXMLPlane_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLPlane_type.Get_Equation: UnicodeString;
begin
  Result := Nodes['equation'].Content;
end;

procedure TXMLPlane_type.Set_Equation(Value: UnicodeString);
begin
  Nodes['equation'].Content := Value;
end;

function TXMLPlane_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLSphere_type }

procedure TXMLSphere_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLSphere_type.Get_Radius: Double;
begin
  Result := Nodes['radius'].Content;
end;

procedure TXMLSphere_type.Set_Radius(Value: Double);
begin
  Nodes['radius'].Content := Value;
end;

function TXMLSphere_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLTorus_type }

procedure TXMLTorus_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLTorus_type.Get_Radius: UnicodeString;
begin
  Result := Nodes['radius'].Content;
end;

procedure TXMLTorus_type.Set_Radius(Value: UnicodeString);
begin
  Nodes['radius'].Content := Value;
end;

function TXMLTorus_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLSwept_surface_type }

procedure TXMLSwept_surface_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('curve', TXMLCurve_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLSwept_surface_type.Get_Curve: IXMLCurve_type;
begin
  Result := Nodes['curve'] as IXMLCurve_type;
end;

function TXMLSwept_surface_type.Get_Direction: UnicodeString;
begin
  Result := Nodes['direction'].Content;
end;

procedure TXMLSwept_surface_type.Set_Direction(Value: UnicodeString);
begin
  Nodes['direction'].Content := Value;
end;

function TXMLSwept_surface_type.Get_Origin: UnicodeString;
begin
  Result := Nodes['origin'].Content;
end;

procedure TXMLSwept_surface_type.Set_Origin(Value: UnicodeString);
begin
  Nodes['origin'].Content := Value;
end;

function TXMLSwept_surface_type.Get_Axis: UnicodeString;
begin
  Result := Nodes['axis'].Content;
end;

procedure TXMLSwept_surface_type.Set_Axis(Value: UnicodeString);
begin
  Nodes['axis'].Content := Value;
end;

function TXMLSwept_surface_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLNurbs_surface_type }

procedure TXMLNurbs_surface_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('source', TXMLSource_type);
  FClassesTree.Add('control_vertices', TXMLNurbs_surface_type_control_vertices);
  FClassesTree.Add('extra', TXMLExtra_type);
  FSource := CreateFilter(TXMLSource_typeList, TXMLSource_type, IXMLSource_type) as IXMLSource_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLNurbs_surface_type.Get_Degree_u: Int64;
begin
  Result := Params['degree_u'];
end;

procedure TXMLNurbs_surface_type.Set_Degree_u(Value: Int64);
begin
  Params['degree_u'] := Value;
end;

function TXMLNurbs_surface_type.Get_Closed_u: Boolean;
begin
  Result := Params['closed_u'];
end;

procedure TXMLNurbs_surface_type.Set_Closed_u(Value: Boolean);
begin
  Params['closed_u'] := Value;
end;

function TXMLNurbs_surface_type.Get_Degree_v: Int64;
begin
  Result := Params['degree_v'];
end;

procedure TXMLNurbs_surface_type.Set_Degree_v(Value: Int64);
begin
  Params['degree_v'] := Value;
end;

function TXMLNurbs_surface_type.Get_Closed_v: Boolean;
begin
  Result := Params['closed_v'];
end;

procedure TXMLNurbs_surface_type.Set_Closed_v(Value: Boolean);
begin
  Params['closed_v'] := Value;
end;

function TXMLNurbs_surface_type.Get_Source: IXMLSource_typeList;
begin
  Result := FSource;
end;

function TXMLNurbs_surface_type.Get_Control_vertices: IXMLNurbs_surface_type_control_vertices;
begin
  Result := Nodes['control_vertices'] as IXMLNurbs_surface_type_control_vertices;
end;

function TXMLNurbs_surface_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLNurbs_surface_type_control_vertices }

procedure TXMLNurbs_surface_type_control_vertices.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_typeList, TXMLInput_local_type, IXMLInput_local_type) as IXMLInput_local_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLNurbs_surface_type_control_vertices.Get_Input: IXMLInput_local_typeList;
begin
  Result := FInput;
end;

function TXMLNurbs_surface_type_control_vertices.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLCone_type }

procedure TXMLCone_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLCone_type.Get_Radius: Double;
begin
  Result := Nodes['radius'].Content;
end;

procedure TXMLCone_type.Set_Radius(Value: Double);
begin
  Nodes['radius'].Content := Value;
end;

function TXMLCone_type.Get_Angle: Single;
begin
  Result := Nodes['angle'].Content;
end;

procedure TXMLCone_type.Set_Angle(Value: Single);
begin
  Nodes['angle'].Content := Value;
end;

function TXMLCone_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLSurface_type_cylinder }

procedure TXMLSurface_type_cylinder.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLSurface_type_cylinder.Get_Radius: Double;
begin
  Result := Nodes['radius'].Content;
end;

procedure TXMLSurface_type_cylinder.Set_Radius(Value: Double);
begin
  Nodes['radius'].Content := Value;
end;

function TXMLSurface_type_cylinder.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLEdges_type }

procedure TXMLEdges_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLEdges_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLEdges_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLEdges_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLEdges_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLEdges_type.Get_Count: Integer;
begin
  Result := Params['count'];
end;

procedure TXMLEdges_type.Set_Count(Value: Integer);
begin
  Params['count'] := Value;
end;

function TXMLEdges_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLEdges_type.Get_P: IXMLP_type;
begin
  Result := Nodes[WideString('p')] as IXMLP_type;
end;

function TXMLEdges_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLWires_type }

procedure TXMLWires_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLWires_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLWires_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLWires_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLWires_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLWires_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLWires_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLWires_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLWires_type.Get_Vcount: UnicodeString;
begin
  Result := Nodes['vcount'].Content;
end;

procedure TXMLWires_type.Set_Vcount(Value: UnicodeString);
begin
  Nodes['vcount'].Content := Value;
end;

function TXMLWires_type.Get_P: IXMLP_type;
begin
  Result := Nodes[WideString('p')] as IXMLP_type;
end;

function TXMLWires_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLFaces_type }

procedure TXMLFaces_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLFaces_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLFaces_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLFaces_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLFaces_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLFaces_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLFaces_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLFaces_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLFaces_type.Get_Vcount: UnicodeString;
begin
  Result := Nodes['vcount'].Content;
end;

procedure TXMLFaces_type.Set_Vcount(Value: UnicodeString);
begin
  Nodes['vcount'].Content := Value;
end;

function TXMLFaces_type.Get_P: IXMLP_type;
begin
  Result := Nodes[WideString('p')] as IXMLP_type;
end;

function TXMLFaces_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLPcurves_type }

procedure TXMLPcurves_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLPcurves_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLPcurves_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLPcurves_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLPcurves_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLPcurves_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLPcurves_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLPcurves_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLPcurves_type.Get_Vcount: UnicodeString;
begin
  Result := Nodes['vcount'].Content;
end;

procedure TXMLPcurves_type.Set_Vcount(Value: UnicodeString);
begin
  Nodes['vcount'].Content := Value;
end;

function TXMLPcurves_type.Get_P: IXMLP_type;
begin
  Result := Nodes[WideString('p')] as IXMLP_type;
end;

function TXMLPcurves_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLShells_type }

procedure TXMLShells_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLShells_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLShells_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLShells_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLShells_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLShells_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLShells_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLShells_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLShells_type.Get_Vcount: UnicodeString;
begin
  Result := Nodes['vcount'].Content;
end;

procedure TXMLShells_type.Set_Vcount(Value: UnicodeString);
begin
  Nodes['vcount'].Content := Value;
end;

function TXMLShells_type.Get_P: IXMLP_type;
begin
  Result := Nodes[WideString('p')] as IXMLP_type;
end;

function TXMLShells_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLSolids_type }

procedure TXMLSolids_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('input', TXMLInput_local_offset_type);
  FClassesTree.Add('p', TXMLP_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInput := CreateFilter(TXMLInput_local_offset_typeList, TXMLInput_local_offset_type, IXMLInput_local_offset_type) as IXMLInput_local_offset_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLSolids_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLSolids_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLSolids_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLSolids_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLSolids_type.Get_Count: Int64;
begin
  Result := Params['count'];
end;

procedure TXMLSolids_type.Set_Count(Value: Int64);
begin
  Params['count'] := Value;
end;

function TXMLSolids_type.Get_Input: IXMLInput_local_offset_typeList;
begin
  Result := FInput;
end;

function TXMLSolids_type.Get_Vcount: UnicodeString;
begin
  Result := Nodes['vcount'].Content;
end;

procedure TXMLSolids_type.Set_Vcount(Value: UnicodeString);
begin
  Nodes['vcount'].Content := Value;
end;

function TXMLSolids_type.Get_P: IXMLP_type;
begin
  Result := Nodes[WideString('p')] as IXMLP_type;
end;

function TXMLSolids_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_effects_type }

procedure TXMLLibrary_effects_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('effect', TXMLEffect_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FEffect := CreateFilter(TXMLEffect_typeList, TXMLEffect_type, IXMLEffect_type) as IXMLEffect_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_effects_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_effects_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_effects_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_effects_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_effects_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_effects_type.Get_Effect: IXMLEffect_typeList;
begin
  Result := FEffect;
end;

function TXMLLibrary_effects_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_effects_typeList }

function TXMLLibrary_effects_typeList.Add: IXMLLibrary_effects_type;
begin
  Result := AddItem(-1) as IXMLLibrary_effects_type;
end;

function TXMLLibrary_effects_typeList.Insert(const Index: Integer): IXMLLibrary_effects_type;
begin
  Result := AddItem(Index) as IXMLLibrary_effects_type;
end;

function TXMLLibrary_effects_typeList.Get_Item(Index: Integer): IXMLLibrary_effects_type;
begin
  Result := Nodes[Index] as IXMLLibrary_effects_type;
end;

{ TXMLEffect_type }

procedure TXMLEffect_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('newparam', TXMLFx_newparam_type);
  FClassesTree.Add('profile_COMMON', TXMLProfile_common_type);
  FClassesTree.Add('profile_BRIDGE', TXMLProfile_bridge_type);
  FClassesTree.Add('profile_GLES2', TXMLProfile_gles2_type);
  FClassesTree.Add('profile_GLSL', TXMLProfile_glsl_type);
  FClassesTree.Add('profile_CG', TXMLProfile_cg_type);
  FClassesTree.Add('profile_GLES', TXMLProfile_gles_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  FNewparam := CreateFilter(TXMLFx_newparam_typeList, TXMLFx_newparam_type, IXMLFx_newparam_type) as IXMLFx_newparam_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLEffect_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLEffect_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLEffect_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLEffect_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLEffect_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLEffect_type.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLEffect_type.Get_Newparam: IXMLFx_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLEffect_type.Get_Profile_COMMON: IXMLProfile_common_type;
begin
  Result := Nodes['profile_COMMON'] as IXMLProfile_common_type;
end;

function TXMLEffect_type.Get_Profile_BRIDGE: IXMLProfile_bridge_type;
begin
  Result := Nodes['profile_BRIDGE'] as IXMLProfile_bridge_type;
end;

function TXMLEffect_type.Get_Profile_GLES2: IXMLProfile_gles2_type;
begin
  Result := Nodes['profile_GLES2'] as IXMLProfile_gles2_type;
end;

function TXMLEffect_type.Get_Profile_GLSL: IXMLProfile_glsl_type;
begin
  Result := Nodes['profile_GLSL'] as IXMLProfile_glsl_type;
end;

function TXMLEffect_type.Get_Profile_CG: IXMLProfile_cg_type;
begin
  Result := Nodes['profile_CG'] as IXMLProfile_cg_type;
end;

function TXMLEffect_type.Get_Profile_GLES: IXMLProfile_gles_type;
begin
  Result := Nodes['profile_GLES'] as IXMLProfile_gles_type;
end;

function TXMLEffect_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLEffect_typeList }

function TXMLEffect_typeList.Add: IXMLEffect_type;
begin
  Result := AddItem(-1) as IXMLEffect_type;
end;

function TXMLEffect_typeList.Insert(const Index: Integer): IXMLEffect_type;
begin
  Result := AddItem(Index) as IXMLEffect_type;
end;

function TXMLEffect_typeList.Get_Item(Index: Integer): IXMLEffect_type;
begin
  Result := Nodes[Index] as IXMLEffect_type;
end;

{ TXMLFx_annotate_type }

function TXMLFx_annotate_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLFx_annotate_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLFx_annotate_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLFx_annotate_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Bool2: UnicodeString;
begin
  Result := Nodes['bool2'].Content;
end;

procedure TXMLFx_annotate_type.Set_Bool2(Value: UnicodeString);
begin
  Nodes['bool2'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Bool3: UnicodeString;
begin
  Result := Nodes['bool3'].Content;
end;

procedure TXMLFx_annotate_type.Set_Bool3(Value: UnicodeString);
begin
  Nodes['bool3'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Bool4: UnicodeString;
begin
  Result := Nodes['bool4'].Content;
end;

procedure TXMLFx_annotate_type.Set_Bool4(Value: UnicodeString);
begin
  Nodes['bool4'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLFx_annotate_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Int2: UnicodeString;
begin
  Result := Nodes['int2'].Content;
end;

procedure TXMLFx_annotate_type.Set_Int2(Value: UnicodeString);
begin
  Nodes['int2'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Int3: UnicodeString;
begin
  Result := Nodes['int3'].Content;
end;

procedure TXMLFx_annotate_type.Set_Int3(Value: UnicodeString);
begin
  Nodes['int3'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Int4: UnicodeString;
begin
  Result := Nodes['int4'].Content;
end;

procedure TXMLFx_annotate_type.Set_Int4(Value: UnicodeString);
begin
  Nodes['int4'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLFx_annotate_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLFx_annotate_type.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Float3: UnicodeString;
begin
  Result := Nodes['float3'].Content;
end;

procedure TXMLFx_annotate_type.Set_Float3(Value: UnicodeString);
begin
  Nodes['float3'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Float4: UnicodeString;
begin
  Result := Nodes['float4'].Content;
end;

procedure TXMLFx_annotate_type.Set_Float4(Value: UnicodeString);
begin
  Nodes['float4'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Float2x2: UnicodeString;
begin
  Result := Nodes['float2x2'].Content;
end;

procedure TXMLFx_annotate_type.Set_Float2x2(Value: UnicodeString);
begin
  Nodes['float2x2'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Float3x3: UnicodeString;
begin
  Result := Nodes['float3x3'].Content;
end;

procedure TXMLFx_annotate_type.Set_Float3x3(Value: UnicodeString);
begin
  Nodes['float3x3'].Content := Value;
end;

function TXMLFx_annotate_type.Get_Float4x4: UnicodeString;
begin
  Result := Nodes['float4x4'].Content;
end;

procedure TXMLFx_annotate_type.Set_Float4x4(Value: UnicodeString);
begin
  Nodes['float4x4'].Content := Value;
end;

function TXMLFx_annotate_type.Get_String_: UnicodeString;
begin
  Result := Nodes['string'].Content;
end;

procedure TXMLFx_annotate_type.Set_String_(Value: UnicodeString);
begin
  Nodes['string'].Content := Value;
end;

{ TXMLFx_annotate_typeList }

function TXMLFx_annotate_typeList.Add: IXMLFx_annotate_type;
begin
  Result := AddItem(-1) as IXMLFx_annotate_type;
end;

function TXMLFx_annotate_typeList.Insert(const Index: Integer): IXMLFx_annotate_type;
begin
  Result := AddItem(Index) as IXMLFx_annotate_type;
end;

function TXMLFx_annotate_typeList.Get_Item(Index: Integer): IXMLFx_annotate_type;
begin
  Result := Nodes[Index] as IXMLFx_annotate_type;
end;

{ TXMLFx_newparam_type }

procedure TXMLFx_newparam_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('sampler1D', TXMLFx_sampler1D_type);
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  FClassesTree.Add('sampler3D', TXMLFx_sampler3D_type);
  FClassesTree.Add('samplerCUBE', TXMLFx_samplerCUBE_type);
  FClassesTree.Add('samplerRECT', TXMLFx_samplerRECT_type);
  FClassesTree.Add('samplerDEPTH', TXMLFx_samplerDEPTH_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  inherited;
end;

function TXMLFx_newparam_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLFx_newparam_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLFx_newparam_type.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLFx_newparam_type.Get_Semantic: UnicodeString;
begin
  Result := Nodes['semantic'].Content;
end;

procedure TXMLFx_newparam_type.Set_Semantic(Value: UnicodeString);
begin
  Nodes['semantic'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Modifier: UnicodeString;
begin
  Result := Nodes['modifier'].Content;
end;

procedure TXMLFx_newparam_type.Set_Modifier(Value: UnicodeString);
begin
  Nodes['modifier'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLFx_newparam_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Bool2: UnicodeString;
begin
  Result := Nodes['bool2'].Content;
end;

procedure TXMLFx_newparam_type.Set_Bool2(Value: UnicodeString);
begin
  Nodes['bool2'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Bool3: UnicodeString;
begin
  Result := Nodes['bool3'].Content;
end;

procedure TXMLFx_newparam_type.Set_Bool3(Value: UnicodeString);
begin
  Nodes['bool3'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Bool4: UnicodeString;
begin
  Result := Nodes['bool4'].Content;
end;

procedure TXMLFx_newparam_type.Set_Bool4(Value: UnicodeString);
begin
  Nodes['bool4'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLFx_newparam_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Int2: UnicodeString;
begin
  Result := Nodes['int2'].Content;
end;

procedure TXMLFx_newparam_type.Set_Int2(Value: UnicodeString);
begin
  Nodes['int2'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Int3: UnicodeString;
begin
  Result := Nodes['int3'].Content;
end;

procedure TXMLFx_newparam_type.Set_Int3(Value: UnicodeString);
begin
  Nodes['int3'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Int4: UnicodeString;
begin
  Result := Nodes['int4'].Content;
end;

procedure TXMLFx_newparam_type.Set_Int4(Value: UnicodeString);
begin
  Nodes['int4'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float3: UnicodeString;
begin
  Result := Nodes['float3'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float3(Value: UnicodeString);
begin
  Nodes['float3'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float4: UnicodeString;
begin
  Result := Nodes['float4'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float4(Value: UnicodeString);
begin
  Nodes['float4'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float2x1: UnicodeString;
begin
  Result := Nodes['float2x1'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float2x1(Value: UnicodeString);
begin
  Nodes['float2x1'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float2x2: UnicodeString;
begin
  Result := Nodes['float2x2'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float2x2(Value: UnicodeString);
begin
  Nodes['float2x2'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float2x3: UnicodeString;
begin
  Result := Nodes['float2x3'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float2x3(Value: UnicodeString);
begin
  Nodes['float2x3'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float2x4: UnicodeString;
begin
  Result := Nodes['float2x4'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float2x4(Value: UnicodeString);
begin
  Nodes['float2x4'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float3x1: UnicodeString;
begin
  Result := Nodes['float3x1'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float3x1(Value: UnicodeString);
begin
  Nodes['float3x1'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float3x2: UnicodeString;
begin
  Result := Nodes['float3x2'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float3x2(Value: UnicodeString);
begin
  Nodes['float3x2'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float3x3: UnicodeString;
begin
  Result := Nodes['float3x3'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float3x3(Value: UnicodeString);
begin
  Nodes['float3x3'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float3x4: UnicodeString;
begin
  Result := Nodes['float3x4'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float3x4(Value: UnicodeString);
begin
  Nodes['float3x4'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float4x1: UnicodeString;
begin
  Result := Nodes['float4x1'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float4x1(Value: UnicodeString);
begin
  Nodes['float4x1'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float4x2: UnicodeString;
begin
  Result := Nodes['float4x2'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float4x2(Value: UnicodeString);
begin
  Nodes['float4x2'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float4x3: UnicodeString;
begin
  Result := Nodes['float4x3'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float4x3(Value: UnicodeString);
begin
  Nodes['float4x3'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Float4x4: UnicodeString;
begin
  Result := Nodes['float4x4'].Content;
end;

procedure TXMLFx_newparam_type.Set_Float4x4(Value: UnicodeString);
begin
  Nodes['float4x4'].Content := Value;
end;

function TXMLFx_newparam_type.Get_Sampler1D: IXMLFx_sampler1D_type;
begin
  Result := Nodes['sampler1D'] as IXMLFx_sampler1D_type;
end;

function TXMLFx_newparam_type.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

function TXMLFx_newparam_type.Get_Sampler3D: IXMLFx_sampler3D_type;
begin
  Result := Nodes['sampler3D'] as IXMLFx_sampler3D_type;
end;

function TXMLFx_newparam_type.Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['samplerCUBE'] as IXMLFx_samplerCUBE_type;
end;

function TXMLFx_newparam_type.Get_SamplerRECT: IXMLFx_samplerRECT_type;
begin
  Result := Nodes['samplerRECT'] as IXMLFx_samplerRECT_type;
end;

function TXMLFx_newparam_type.Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['samplerDEPTH'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLFx_newparam_type.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLFx_newparam_type.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

{ TXMLFx_newparam_typeList }

function TXMLFx_newparam_typeList.Add: IXMLFx_newparam_type;
begin
  Result := AddItem(-1) as IXMLFx_newparam_type;
end;

function TXMLFx_newparam_typeList.Insert(const Index: Integer): IXMLFx_newparam_type;
begin
  Result := AddItem(Index) as IXMLFx_newparam_type;
end;

function TXMLFx_newparam_typeList.Get_Item(Index: Integer): IXMLFx_newparam_type;
begin
  Result := Nodes[Index] as IXMLFx_newparam_type;
end;

{ TXMLFx_sampler_type }

procedure TXMLFx_sampler_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('instance_image', TXMLInstance_image_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLFx_sampler_type.Get_Instance_image: IXMLInstance_image_type;
begin
  Result := Nodes['instance_image'] as IXMLInstance_image_type;
end;

function TXMLFx_sampler_type.Get_Wrap_s: UnicodeString;
begin
  Result := Nodes['wrap_s'].Content;
end;

procedure TXMLFx_sampler_type.Set_Wrap_s(Value: UnicodeString);
begin
  Nodes['wrap_s'].Content := Value;
end;

function TXMLFx_sampler_type.Get_Wrap_t: UnicodeString;
begin
  Result := Nodes['wrap_t'].Content;
end;

procedure TXMLFx_sampler_type.Set_Wrap_t(Value: UnicodeString);
begin
  Nodes['wrap_t'].Content := Value;
end;

function TXMLFx_sampler_type.Get_Wrap_p: UnicodeString;
begin
  Result := Nodes['wrap_p'].Content;
end;

procedure TXMLFx_sampler_type.Set_Wrap_p(Value: UnicodeString);
begin
  Nodes['wrap_p'].Content := Value;
end;

function TXMLFx_sampler_type.Get_Minfilter: UnicodeString;
begin
  Result := Nodes['minfilter'].Content;
end;

procedure TXMLFx_sampler_type.Set_Minfilter(Value: UnicodeString);
begin
  Nodes['minfilter'].Content := Value;
end;

function TXMLFx_sampler_type.Get_Magfilter: UnicodeString;
begin
  Result := Nodes['magfilter'].Content;
end;

procedure TXMLFx_sampler_type.Set_Magfilter(Value: UnicodeString);
begin
  Nodes['magfilter'].Content := Value;
end;

function TXMLFx_sampler_type.Get_Mipfilter: UnicodeString;
begin
  Result := Nodes['mipfilter'].Content;
end;

procedure TXMLFx_sampler_type.Set_Mipfilter(Value: UnicodeString);
begin
  Nodes['mipfilter'].Content := Value;
end;

function TXMLFx_sampler_type.Get_Border_color: UnicodeString;
begin
  Result := Nodes['border_color'].Content;
end;

procedure TXMLFx_sampler_type.Set_Border_color(Value: UnicodeString);
begin
  Nodes['border_color'].Content := Value;
end;

function TXMLFx_sampler_type.Get_Mip_max_level: Byte;
begin
  Result := Nodes['mip_max_level'].Content;
end;

procedure TXMLFx_sampler_type.Set_Mip_max_level(Value: Byte);
begin
  Nodes['mip_max_level'].Content := Value;
end;

function TXMLFx_sampler_type.Get_Mip_min_level: Byte;
begin
  Result := Nodes['mip_min_level'].Content;
end;

procedure TXMLFx_sampler_type.Set_Mip_min_level(Value: Byte);
begin
  Nodes['mip_min_level'].Content := Value;
end;

function TXMLFx_sampler_type.Get_Mip_bias: Single;
begin
  Result := Nodes['mip_bias'].Content;
end;

procedure TXMLFx_sampler_type.Set_Mip_bias(Value: Single);
begin
  Nodes['mip_bias'].Content := Value;
end;

function TXMLFx_sampler_type.Get_Max_anisotropy: LongWord;
begin
  Result := Nodes['max_anisotropy'].Content;
end;

procedure TXMLFx_sampler_type.Set_Max_anisotropy(Value: LongWord);
begin
  Nodes['max_anisotropy'].Content := Value;
end;

function TXMLFx_sampler_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_image_type }

{ TXMLFx_sampler1D_type }

{ TXMLFx_sampler2D_type }

{ TXMLFx_sampler3D_type }

{ TXMLFx_samplerCUBE_type }

{ TXMLFx_samplerRECT_type }

{ TXMLFx_samplerDEPTH_type }

{ TXMLProfile_common_type }

procedure TXMLProfile_common_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('newparam', TXMLFx_common_newparam_type);
  FClassesTree.Add('technique', TXMLProfile_common_type_technique);
  FClassesTree.Add('extra', TXMLExtra_type);
  FNewparam := CreateFilter(TXMLFx_common_newparam_typeList, TXMLFx_common_newparam_type, IXMLFx_common_newparam_type) as IXMLFx_common_newparam_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_common_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLProfile_common_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLProfile_common_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLProfile_common_type.Get_Newparam: IXMLFx_common_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLProfile_common_type.Get_Technique: IXMLProfile_common_type_technique;
begin
  Result := Nodes['technique'] as IXMLProfile_common_type_technique;
end;

function TXMLProfile_common_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLFx_common_newparam_type }

procedure TXMLFx_common_newparam_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  inherited;
end;

function TXMLFx_common_newparam_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLFx_common_newparam_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLFx_common_newparam_type.Get_Semantic: UnicodeString;
begin
  Result := Nodes['semantic'].Content;
end;

procedure TXMLFx_common_newparam_type.Set_Semantic(Value: UnicodeString);
begin
  Nodes['semantic'].Content := Value;
end;

function TXMLFx_common_newparam_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLFx_common_newparam_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLFx_common_newparam_type.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLFx_common_newparam_type.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLFx_common_newparam_type.Get_Float3: UnicodeString;
begin
  Result := Nodes['float3'].Content;
end;

procedure TXMLFx_common_newparam_type.Set_Float3(Value: UnicodeString);
begin
  Nodes['float3'].Content := Value;
end;

function TXMLFx_common_newparam_type.Get_Float4: UnicodeString;
begin
  Result := Nodes['float4'].Content;
end;

procedure TXMLFx_common_newparam_type.Set_Float4(Value: UnicodeString);
begin
  Nodes['float4'].Content := Value;
end;

function TXMLFx_common_newparam_type.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

{ TXMLFx_common_newparam_typeList }

function TXMLFx_common_newparam_typeList.Add: IXMLFx_common_newparam_type;
begin
  Result := AddItem(-1) as IXMLFx_common_newparam_type;
end;

function TXMLFx_common_newparam_typeList.Insert(const Index: Integer): IXMLFx_common_newparam_type;
begin
  Result := AddItem(Index) as IXMLFx_common_newparam_type;
end;

function TXMLFx_common_newparam_typeList.Get_Item(Index: Integer): IXMLFx_common_newparam_type;
begin
  Result := Nodes[Index] as IXMLFx_common_newparam_type;
end;

{ TXMLProfile_common_type_technique }

procedure TXMLProfile_common_type_technique.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('constant', TXMLProfile_common_type_technique_constant);
  FClassesTree.Add('lambert', TXMLProfile_common_type_technique_lambert);
  FClassesTree.Add('phong', TXMLProfile_common_type_technique_phong);
  FClassesTree.Add('blinn', TXMLProfile_common_type_technique_blinn);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_common_type_technique.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLProfile_common_type_technique.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLProfile_common_type_technique.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLProfile_common_type_technique.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLProfile_common_type_technique.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLProfile_common_type_technique.Get_Constant: IXMLProfile_common_type_technique_constant;
begin
  Result := Nodes['constant'] as IXMLProfile_common_type_technique_constant;
end;

function TXMLProfile_common_type_technique.Get_Lambert: IXMLProfile_common_type_technique_lambert;
begin
  Result := Nodes['lambert'] as IXMLProfile_common_type_technique_lambert;
end;

function TXMLProfile_common_type_technique.Get_Phong: IXMLProfile_common_type_technique_phong;
begin
  Result := Nodes['phong'] as IXMLProfile_common_type_technique_phong;
end;

function TXMLProfile_common_type_technique.Get_Blinn: IXMLProfile_common_type_technique_blinn;
begin
  Result := Nodes['blinn'] as IXMLProfile_common_type_technique_blinn;
end;

function TXMLProfile_common_type_technique.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLProfile_common_type_technique_constant }

procedure TXMLProfile_common_type_technique_constant.DoRegisterChildClasses;
begin
  FClassesTree.Add('emission', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('reflective', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('reflectivity', TXMLFx_common_float_or_param_type);
  FClassesTree.Add('transparent', TXMLFx_common_transparent_type);
  FClassesTree.Add('transparency', TXMLFx_common_float_or_param_type);
  FClassesTree.Add('index_of_refraction', TXMLFx_common_float_or_param_type);
  inherited;
end;

function TXMLProfile_common_type_technique_constant.Get_Emission: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['emission'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_constant.Get_Reflective: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['reflective'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_constant.Get_Reflectivity: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['reflectivity'] as IXMLFx_common_float_or_param_type;
end;

function TXMLProfile_common_type_technique_constant.Get_Transparent: IXMLFx_common_transparent_type;
begin
  Result := Nodes['transparent'] as IXMLFx_common_transparent_type;
end;

function TXMLProfile_common_type_technique_constant.Get_Transparency: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['transparency'] as IXMLFx_common_float_or_param_type;
end;

function TXMLProfile_common_type_technique_constant.Get_Index_of_refraction: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['index_of_refraction'] as IXMLFx_common_float_or_param_type;
end;

{ TXMLFx_common_color_or_texture_type }

procedure TXMLFx_common_color_or_texture_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('color', TXMLFx_common_color_or_texture_type_color);
  FClassesTree.Add('param', TXMLFx_common_color_or_texture_type_param);
  FClassesTree.Add('texture', TXMLFx_common_color_or_texture_type_texture);
  inherited;
end;

function TXMLFx_common_color_or_texture_type.Get_Color: IXMLFx_common_color_or_texture_type_color;
begin
  Result := Nodes['color'] as IXMLFx_common_color_or_texture_type_color;
end;

function TXMLFx_common_color_or_texture_type.Get_Param: IXMLFx_common_color_or_texture_type_param;
begin
  Result := Nodes['param'] as IXMLFx_common_color_or_texture_type_param;
end;

function TXMLFx_common_color_or_texture_type.Get_Texture: IXMLFx_common_color_or_texture_type_texture;
begin
  Result := Nodes['texture'] as IXMLFx_common_color_or_texture_type_texture;
end;

{ TXMLFx_common_color_or_texture_type_color }

function TXMLFx_common_color_or_texture_type_color.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLFx_common_color_or_texture_type_color.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLFx_common_color_or_texture_type_param }

function TXMLFx_common_color_or_texture_type_param.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLFx_common_color_or_texture_type_param.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

{ TXMLFx_common_color_or_texture_type_texture }

procedure TXMLFx_common_color_or_texture_type_texture.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  Tag := 'extra';
  ItemInterface := IXMLExtra_type;
  inherited;
end;

function TXMLFx_common_color_or_texture_type_texture.Get_Texture: UnicodeString;
begin
  Result := Params['texture'];
end;

procedure TXMLFx_common_color_or_texture_type_texture.Set_Texture(Value: UnicodeString);
begin
  Params['texture'] := Value;
end;

function TXMLFx_common_color_or_texture_type_texture.Get_Texcoord: UnicodeString;
begin
  Result := Params['texcoord'];
end;

procedure TXMLFx_common_color_or_texture_type_texture.Set_Texcoord(Value: UnicodeString);
begin
  Params['texcoord'] := Value;
end;

function TXMLFx_common_color_or_texture_type_texture.Get_Extra(Index: Integer): IXMLExtra_type;
begin
  Result := Nodes[Index] as IXMLExtra_type;
end;

function TXMLFx_common_color_or_texture_type_texture.Add: IXMLExtra_type;
begin
  Result := AddItem(-1) as IXMLExtra_type;
end;

function TXMLFx_common_color_or_texture_type_texture.Insert(const Index: Integer): IXMLExtra_type;
begin
  Result := AddItem(Index) as IXMLExtra_type;
end;

{ TXMLFx_common_float_or_param_type }

procedure TXMLFx_common_float_or_param_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('float', TXMLFx_common_float_or_param_type_float);
  FClassesTree.Add('param', TXMLFx_common_float_or_param_type_param);
  inherited;
end;

function TXMLFx_common_float_or_param_type.Get_Float: IXMLFx_common_float_or_param_type_float;
begin
  Result := Nodes['float'] as IXMLFx_common_float_or_param_type_float;
end;

function TXMLFx_common_float_or_param_type.Get_Param: IXMLFx_common_float_or_param_type_param;
begin
  Result := Nodes['param'] as IXMLFx_common_float_or_param_type_param;
end;

{ TXMLFx_common_float_or_param_type_float }

function TXMLFx_common_float_or_param_type_float.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLFx_common_float_or_param_type_float.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLFx_common_float_or_param_type_param }

function TXMLFx_common_float_or_param_type_param.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLFx_common_float_or_param_type_param.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

{ TXMLFx_common_transparent_type }

function TXMLFx_common_transparent_type.Get_Opaque: UnicodeString;
begin
  Result := Params['opaque'];
end;

procedure TXMLFx_common_transparent_type.Set_Opaque(Value: UnicodeString);
begin
  Params['opaque'] := Value;
end;

{ TXMLProfile_common_type_technique_lambert }

procedure TXMLProfile_common_type_technique_lambert.DoRegisterChildClasses;
begin
  FClassesTree.Add('emission', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('ambient', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('diffuse', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('reflective', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('reflectivity', TXMLFx_common_float_or_param_type);
  FClassesTree.Add('transparent', TXMLFx_common_transparent_type);
  FClassesTree.Add('transparency', TXMLFx_common_float_or_param_type);
  FClassesTree.Add('index_of_refraction', TXMLFx_common_float_or_param_type);
  inherited;
end;

function TXMLProfile_common_type_technique_lambert.Get_Emission: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['emission'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_lambert.Get_Ambient: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['ambient'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_lambert.Get_Diffuse: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['diffuse'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_lambert.Get_Reflective: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['reflective'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_lambert.Get_Reflectivity: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['reflectivity'] as IXMLFx_common_float_or_param_type;
end;

function TXMLProfile_common_type_technique_lambert.Get_Transparent: IXMLFx_common_transparent_type;
begin
  Result := Nodes['transparent'] as IXMLFx_common_transparent_type;
end;

function TXMLProfile_common_type_technique_lambert.Get_Transparency: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['transparency'] as IXMLFx_common_float_or_param_type;
end;

function TXMLProfile_common_type_technique_lambert.Get_Index_of_refraction: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['index_of_refraction'] as IXMLFx_common_float_or_param_type;
end;

{ TXMLProfile_common_type_technique_phong }

procedure TXMLProfile_common_type_technique_phong.DoRegisterChildClasses;
begin
  FClassesTree.Add('emission', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('ambient', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('diffuse', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('specular', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('shininess', TXMLFx_common_float_or_param_type);
  FClassesTree.Add('reflective', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('reflectivity', TXMLFx_common_float_or_param_type);
  FClassesTree.Add('transparent', TXMLFx_common_transparent_type);
  FClassesTree.Add('transparency', TXMLFx_common_float_or_param_type);
  FClassesTree.Add('index_of_refraction', TXMLFx_common_float_or_param_type);
  inherited;
end;

function TXMLProfile_common_type_technique_phong.Get_Emission: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['emission'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_phong.Get_Ambient: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['ambient'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_phong.Get_Diffuse: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['diffuse'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_phong.Get_Specular: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['specular'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_phong.Get_Shininess: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['shininess'] as IXMLFx_common_float_or_param_type;
end;

function TXMLProfile_common_type_technique_phong.Get_Reflective: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['reflective'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_phong.Get_Reflectivity: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['reflectivity'] as IXMLFx_common_float_or_param_type;
end;

function TXMLProfile_common_type_technique_phong.Get_Transparent: IXMLFx_common_transparent_type;
begin
  Result := Nodes['transparent'] as IXMLFx_common_transparent_type;
end;

function TXMLProfile_common_type_technique_phong.Get_Transparency: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['transparency'] as IXMLFx_common_float_or_param_type;
end;

function TXMLProfile_common_type_technique_phong.Get_Index_of_refraction: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['index_of_refraction'] as IXMLFx_common_float_or_param_type;
end;

{ TXMLProfile_common_type_technique_blinn }

procedure TXMLProfile_common_type_technique_blinn.DoRegisterChildClasses;
begin
  FClassesTree.Add('emission', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('ambient', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('diffuse', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('specular', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('shininess', TXMLFx_common_float_or_param_type);
  FClassesTree.Add('reflective', TXMLFx_common_color_or_texture_type);
  FClassesTree.Add('reflectivity', TXMLFx_common_float_or_param_type);
  FClassesTree.Add('transparent', TXMLFx_common_transparent_type);
  FClassesTree.Add('transparency', TXMLFx_common_float_or_param_type);
  FClassesTree.Add('index_of_refraction', TXMLFx_common_float_or_param_type);
  inherited;
end;

function TXMLProfile_common_type_technique_blinn.Get_Emission: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['emission'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_blinn.Get_Ambient: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['ambient'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_blinn.Get_Diffuse: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['diffuse'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_blinn.Get_Specular: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['specular'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_blinn.Get_Shininess: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['shininess'] as IXMLFx_common_float_or_param_type;
end;

function TXMLProfile_common_type_technique_blinn.Get_Reflective: IXMLFx_common_color_or_texture_type;
begin
  Result := Nodes['reflective'] as IXMLFx_common_color_or_texture_type;
end;

function TXMLProfile_common_type_technique_blinn.Get_Reflectivity: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['reflectivity'] as IXMLFx_common_float_or_param_type;
end;

function TXMLProfile_common_type_technique_blinn.Get_Transparent: IXMLFx_common_transparent_type;
begin
  Result := Nodes['transparent'] as IXMLFx_common_transparent_type;
end;

function TXMLProfile_common_type_technique_blinn.Get_Transparency: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['transparency'] as IXMLFx_common_float_or_param_type;
end;

function TXMLProfile_common_type_technique_blinn.Get_Index_of_refraction: IXMLFx_common_float_or_param_type;
begin
  Result := Nodes['index_of_refraction'] as IXMLFx_common_float_or_param_type;
end;

{ TXMLProfile_bridge_type }

procedure TXMLProfile_bridge_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_bridge_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLProfile_bridge_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLProfile_bridge_type.Get_Platform: UnicodeString;
begin
  Result := Params['platform'];
end;

procedure TXMLProfile_bridge_type.Set_Platform(Value: UnicodeString);
begin
  Params['platform'] := Value;
end;

function TXMLProfile_bridge_type.Get_Url: UnicodeString;
begin
  Result := Params['url'];
end;

procedure TXMLProfile_bridge_type.Set_Url(Value: UnicodeString);
begin
  Params['url'] := Value;
end;

function TXMLProfile_bridge_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLProfile_bridge_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLProfile_gles2_type }

procedure TXMLProfile_gles2_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('include', TXMLFx_include_type);
  FClassesTree.Add('code', TXMLFx_code_type);
  FClassesTree.Add('newparam', TXMLProfile_gles2_type_newparam);
  FClassesTree.Add('technique', TXMLProfile_gles2_type_technique);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInclude := CreateFilter(TXMLFx_include_typeList, TXMLFx_include_type, IXMLFx_include_type) as IXMLFx_include_typeList;
  FCode := CreateFilter(TXMLFx_code_typeList, TXMLFx_code_type, IXMLFx_code_type) as IXMLFx_code_typeList;
  FNewparam := CreateFilter(TXMLProfile_gles2_type_newparamList, TXMLProfile_gles2_type_newparam, IXMLProfile_gles2_type_newparam) as IXMLProfile_gles2_type_newparamList;
  FTechnique := CreateFilter(TXMLProfile_gles2_type_techniqueList, TXMLProfile_gles2_type_technique, IXMLProfile_gles2_type_technique) as IXMLProfile_gles2_type_techniqueList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_gles2_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLProfile_gles2_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLProfile_gles2_type.Get_Language: UnicodeString;
begin
  Result := Params['language'];
end;

procedure TXMLProfile_gles2_type.Set_Language(Value: UnicodeString);
begin
  Params['language'] := Value;
end;

function TXMLProfile_gles2_type.Get_Platforms: UnicodeString;
begin
  Result := Params['platforms'];
end;

procedure TXMLProfile_gles2_type.Set_Platforms(Value: UnicodeString);
begin
  Params['platforms'] := Value;
end;

function TXMLProfile_gles2_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLProfile_gles2_type.Get_Include: IXMLFx_include_typeList;
begin
  Result := FInclude;
end;

function TXMLProfile_gles2_type.Get_Code: IXMLFx_code_typeList;
begin
  Result := FCode;
end;

function TXMLProfile_gles2_type.Get_Newparam: IXMLProfile_gles2_type_newparamList;
begin
  Result := FNewparam;
end;

function TXMLProfile_gles2_type.Get_Technique: IXMLProfile_gles2_type_techniqueList;
begin
  Result := FTechnique;
end;

function TXMLProfile_gles2_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLFx_include_type }

function TXMLFx_include_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLFx_include_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLFx_include_type.Get_Url: UnicodeString;
begin
  Result := Params['url'];
end;

procedure TXMLFx_include_type.Set_Url(Value: UnicodeString);
begin
  Params['url'] := Value;
end;

{ TXMLFx_include_typeList }

function TXMLFx_include_typeList.Add: IXMLFx_include_type;
begin
  Result := AddItem(-1) as IXMLFx_include_type;
end;

function TXMLFx_include_typeList.Insert(const Index: Integer): IXMLFx_include_type;
begin
  Result := AddItem(Index) as IXMLFx_include_type;
end;

function TXMLFx_include_typeList.Get_Item(Index: Integer): IXMLFx_include_type;
begin
  Result := Nodes[Index] as IXMLFx_include_type;
end;

{ TXMLFx_code_type }

function TXMLFx_code_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLFx_code_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLFx_code_typeList }

function TXMLFx_code_typeList.Add: IXMLFx_code_type;
begin
  Result := AddItem(-1) as IXMLFx_code_type;
end;

function TXMLFx_code_typeList.Insert(const Index: Integer): IXMLFx_code_type;
begin
  Result := AddItem(Index) as IXMLFx_code_type;
end;

function TXMLFx_code_typeList.Get_Item(Index: Integer): IXMLFx_code_type;
begin
  Result := Nodes[Index] as IXMLFx_code_type;
end;

{ TXMLGles2_newparam_type }

procedure TXMLGles2_newparam_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  FClassesTree.Add('sampler3D', TXMLFx_sampler3D_type);
  FClassesTree.Add('samplerCUBE', TXMLFx_samplerCUBE_type);
  FClassesTree.Add('samplerDEPTH', TXMLFx_samplerDEPTH_type);
  FClassesTree.Add('usertype', TXMLUsertype);
  FClassesTree.Add('array', TXMLArray_);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  inherited;
end;

function TXMLGles2_newparam_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLGles2_newparam_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLGles2_newparam_type.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLGles2_newparam_type.Get_Semantic: UnicodeString;
begin
  Result := Nodes['semantic'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Semantic(Value: UnicodeString);
begin
  Nodes['semantic'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Modifier: UnicodeString;
begin
  Result := Nodes['modifier'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Modifier(Value: UnicodeString);
begin
  Nodes['modifier'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Bvec2: UnicodeString;
begin
  Result := Nodes['bvec2'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Bvec2(Value: UnicodeString);
begin
  Nodes['bvec2'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Bvec3: UnicodeString;
begin
  Result := Nodes['bvec3'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Bvec3(Value: UnicodeString);
begin
  Nodes['bvec3'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Bvec4: UnicodeString;
begin
  Result := Nodes['bvec4'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Bvec4(Value: UnicodeString);
begin
  Nodes['bvec4'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Vec2: UnicodeString;
begin
  Result := Nodes['vec2'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Vec2(Value: UnicodeString);
begin
  Nodes['vec2'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Vec3: UnicodeString;
begin
  Result := Nodes['vec3'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Vec3(Value: UnicodeString);
begin
  Nodes['vec3'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Vec4: UnicodeString;
begin
  Result := Nodes['vec4'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Vec4(Value: UnicodeString);
begin
  Nodes['vec4'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Mat2: UnicodeString;
begin
  Result := Nodes['mat2'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Mat2(Value: UnicodeString);
begin
  Nodes['mat2'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Mat3: UnicodeString;
begin
  Result := Nodes['mat3'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Mat3(Value: UnicodeString);
begin
  Nodes['mat3'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Mat4: UnicodeString;
begin
  Result := Nodes['mat4'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Mat4(Value: UnicodeString);
begin
  Nodes['mat4'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Ivec2: UnicodeString;
begin
  Result := Nodes['ivec2'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Ivec2(Value: UnicodeString);
begin
  Nodes['ivec2'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Ivec3: UnicodeString;
begin
  Result := Nodes['ivec3'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Ivec3(Value: UnicodeString);
begin
  Nodes['ivec3'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Ivec4: UnicodeString;
begin
  Result := Nodes['ivec4'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Ivec4(Value: UnicodeString);
begin
  Nodes['ivec4'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLGles2_newparam_type.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

function TXMLGles2_newparam_type.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

function TXMLGles2_newparam_type.Get_Sampler3D: IXMLFx_sampler3D_type;
begin
  Result := Nodes['sampler3D'] as IXMLFx_sampler3D_type;
end;

function TXMLGles2_newparam_type.Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['samplerCUBE'] as IXMLFx_samplerCUBE_type;
end;

function TXMLGles2_newparam_type.Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['samplerDEPTH'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLGles2_newparam_type.Get_Usertype: IXMLUsertype;
begin
  Result := Nodes['usertype'] as IXMLUsertype;
end;

function TXMLGles2_newparam_type.Get_Array_: IXMLArray_;
begin
  Result := Nodes['array'] as IXMLArray_;
end;

{ TXMLUsertype }

procedure TXMLUsertype.DoRegisterChildClasses;
begin
  FClassesTree.Add('setparam', TXMLUsertype_setparam);
  Tag := 'setparam';
  ItemInterface := IXMLUsertype_setparam;
  inherited;
end;

function TXMLUsertype.Get_Typename: UnicodeString;
begin
  Result := Params['typename'];
end;

procedure TXMLUsertype.Set_Typename(Value: UnicodeString);
begin
  Params['typename'] := Value;
end;

function TXMLUsertype.Get_Setparam(Index: Integer): IXMLUsertype_setparam;
begin
  Result := Nodes[Index] as IXMLUsertype_setparam;
end;

function TXMLUsertype.Add: IXMLUsertype_setparam;
begin
  Result := AddItem(-1) as IXMLUsertype_setparam;
end;

function TXMLUsertype.Insert(const Index: Integer): IXMLUsertype_setparam;
begin
  Result := AddItem(Index) as IXMLUsertype_setparam;
end;

{ TXMLUsertype_setparam }

procedure TXMLUsertype_setparam.DoRegisterChildClasses;
begin
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  FClassesTree.Add('sampler3D', TXMLFx_sampler3D_type);
  FClassesTree.Add('samplerCUBE', TXMLFx_samplerCUBE_type);
  FClassesTree.Add('samplerDEPTH', TXMLFx_samplerDEPTH_type);
  FClassesTree.Add('usertype', TXMLUsertype);
  FClassesTree.Add('array', TXMLArray_);
  inherited;
end;

function TXMLUsertype_setparam.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLUsertype_setparam.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

function TXMLUsertype_setparam.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLUsertype_setparam.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Bvec2: UnicodeString;
begin
  Result := Nodes['bvec2'].Content;
end;

procedure TXMLUsertype_setparam.Set_Bvec2(Value: UnicodeString);
begin
  Nodes['bvec2'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Bvec3: UnicodeString;
begin
  Result := Nodes['bvec3'].Content;
end;

procedure TXMLUsertype_setparam.Set_Bvec3(Value: UnicodeString);
begin
  Nodes['bvec3'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Bvec4: UnicodeString;
begin
  Result := Nodes['bvec4'].Content;
end;

procedure TXMLUsertype_setparam.Set_Bvec4(Value: UnicodeString);
begin
  Nodes['bvec4'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLUsertype_setparam.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Vec2: UnicodeString;
begin
  Result := Nodes['vec2'].Content;
end;

procedure TXMLUsertype_setparam.Set_Vec2(Value: UnicodeString);
begin
  Nodes['vec2'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Vec3: UnicodeString;
begin
  Result := Nodes['vec3'].Content;
end;

procedure TXMLUsertype_setparam.Set_Vec3(Value: UnicodeString);
begin
  Nodes['vec3'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Vec4: UnicodeString;
begin
  Result := Nodes['vec4'].Content;
end;

procedure TXMLUsertype_setparam.Set_Vec4(Value: UnicodeString);
begin
  Nodes['vec4'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Mat2: UnicodeString;
begin
  Result := Nodes['mat2'].Content;
end;

procedure TXMLUsertype_setparam.Set_Mat2(Value: UnicodeString);
begin
  Nodes['mat2'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Mat3: UnicodeString;
begin
  Result := Nodes['mat3'].Content;
end;

procedure TXMLUsertype_setparam.Set_Mat3(Value: UnicodeString);
begin
  Nodes['mat3'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Mat4: UnicodeString;
begin
  Result := Nodes['mat4'].Content;
end;

procedure TXMLUsertype_setparam.Set_Mat4(Value: UnicodeString);
begin
  Nodes['mat4'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLUsertype_setparam.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Ivec2: UnicodeString;
begin
  Result := Nodes['ivec2'].Content;
end;

procedure TXMLUsertype_setparam.Set_Ivec2(Value: UnicodeString);
begin
  Nodes['ivec2'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Ivec3: UnicodeString;
begin
  Result := Nodes['ivec3'].Content;
end;

procedure TXMLUsertype_setparam.Set_Ivec3(Value: UnicodeString);
begin
  Nodes['ivec3'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Ivec4: UnicodeString;
begin
  Result := Nodes['ivec4'].Content;
end;

procedure TXMLUsertype_setparam.Set_Ivec4(Value: UnicodeString);
begin
  Nodes['ivec4'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLUsertype_setparam.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

function TXMLUsertype_setparam.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

function TXMLUsertype_setparam.Get_Sampler3D: IXMLFx_sampler3D_type;
begin
  Result := Nodes['sampler3D'] as IXMLFx_sampler3D_type;
end;

function TXMLUsertype_setparam.Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['samplerCUBE'] as IXMLFx_samplerCUBE_type;
end;

function TXMLUsertype_setparam.Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['samplerDEPTH'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLUsertype_setparam.Get_Usertype: IXMLUsertype;
begin
  Result := Nodes['usertype'] as IXMLUsertype;
end;

function TXMLUsertype_setparam.Get_Array_: IXMLArray_;
begin
  Result := Nodes['array'] as IXMLArray_;
end;

{ TXMLArray_ }

procedure TXMLArray_.DoRegisterChildClasses;
begin
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  FClassesTree.Add('sampler3D', TXMLFx_sampler3D_type);
  FClassesTree.Add('samplerCUBE', TXMLFx_samplerCUBE_type);
  FClassesTree.Add('samplerDEPTH', TXMLFx_samplerDEPTH_type);
  FClassesTree.Add('usertype', TXMLUsertype);
  FClassesTree.Add('array', TXMLArray_);
  inherited;
end;

function TXMLArray_.Get_Length: LongWord;
begin
  Result := Params['length'];
end;

procedure TXMLArray_.Set_Length(Value: LongWord);
begin
  Params['length'] := Value;
end;

function TXMLArray_.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLArray_.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLArray_.Get_Bvec2: UnicodeString;
begin
  Result := Nodes['bvec2'].Content;
end;

procedure TXMLArray_.Set_Bvec2(Value: UnicodeString);
begin
  Nodes['bvec2'].Content := Value;
end;

function TXMLArray_.Get_Bvec3: UnicodeString;
begin
  Result := Nodes['bvec3'].Content;
end;

procedure TXMLArray_.Set_Bvec3(Value: UnicodeString);
begin
  Nodes['bvec3'].Content := Value;
end;

function TXMLArray_.Get_Bvec4: UnicodeString;
begin
  Result := Nodes['bvec4'].Content;
end;

procedure TXMLArray_.Set_Bvec4(Value: UnicodeString);
begin
  Nodes['bvec4'].Content := Value;
end;

function TXMLArray_.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLArray_.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLArray_.Get_Vec2: UnicodeString;
begin
  Result := Nodes['vec2'].Content;
end;

procedure TXMLArray_.Set_Vec2(Value: UnicodeString);
begin
  Nodes['vec2'].Content := Value;
end;

function TXMLArray_.Get_Vec3: UnicodeString;
begin
  Result := Nodes['vec3'].Content;
end;

procedure TXMLArray_.Set_Vec3(Value: UnicodeString);
begin
  Nodes['vec3'].Content := Value;
end;

function TXMLArray_.Get_Vec4: UnicodeString;
begin
  Result := Nodes['vec4'].Content;
end;

procedure TXMLArray_.Set_Vec4(Value: UnicodeString);
begin
  Nodes['vec4'].Content := Value;
end;

function TXMLArray_.Get_Mat2: UnicodeString;
begin
  Result := Nodes['mat2'].Content;
end;

procedure TXMLArray_.Set_Mat2(Value: UnicodeString);
begin
  Nodes['mat2'].Content := Value;
end;

function TXMLArray_.Get_Mat3: UnicodeString;
begin
  Result := Nodes['mat3'].Content;
end;

procedure TXMLArray_.Set_Mat3(Value: UnicodeString);
begin
  Nodes['mat3'].Content := Value;
end;

function TXMLArray_.Get_Mat4: UnicodeString;
begin
  Result := Nodes['mat4'].Content;
end;

procedure TXMLArray_.Set_Mat4(Value: UnicodeString);
begin
  Nodes['mat4'].Content := Value;
end;

function TXMLArray_.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLArray_.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLArray_.Get_Ivec2: UnicodeString;
begin
  Result := Nodes['ivec2'].Content;
end;

procedure TXMLArray_.Set_Ivec2(Value: UnicodeString);
begin
  Nodes['ivec2'].Content := Value;
end;

function TXMLArray_.Get_Ivec3: UnicodeString;
begin
  Result := Nodes['ivec3'].Content;
end;

procedure TXMLArray_.Set_Ivec3(Value: UnicodeString);
begin
  Nodes['ivec3'].Content := Value;
end;

function TXMLArray_.Get_Ivec4: UnicodeString;
begin
  Result := Nodes['ivec4'].Content;
end;

procedure TXMLArray_.Set_Ivec4(Value: UnicodeString);
begin
  Nodes['ivec4'].Content := Value;
end;

function TXMLArray_.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLArray_.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

function TXMLArray_.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

function TXMLArray_.Get_Sampler3D: IXMLFx_sampler3D_type;
begin
  Result := Nodes['sampler3D'] as IXMLFx_sampler3D_type;
end;

function TXMLArray_.Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['samplerCUBE'] as IXMLFx_samplerCUBE_type;
end;

function TXMLArray_.Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['samplerDEPTH'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLArray_.Get_Usertype: IXMLUsertype;
begin
  Result := Nodes['usertype'] as IXMLUsertype;
end;

function TXMLArray_.Get_Array_: IXMLArray_;
begin
  Result := Nodes['array'] as IXMLArray_;
end;

{ TXMLProfile_gles2_type_newparam }

{ TXMLProfile_gles2_type_newparamList }

function TXMLProfile_gles2_type_newparamList.Add: IXMLProfile_gles2_type_newparam;
begin
  Result := AddItem(-1) as IXMLProfile_gles2_type_newparam;
end;

function TXMLProfile_gles2_type_newparamList.Insert(const Index: Integer): IXMLProfile_gles2_type_newparam;
begin
  Result := AddItem(Index) as IXMLProfile_gles2_type_newparam;
end;

function TXMLProfile_gles2_type_newparamList.Get_Item(Index: Integer): IXMLProfile_gles2_type_newparam;
begin
  Result := Nodes[Index] as IXMLProfile_gles2_type_newparam;
end;

{ TXMLProfile_gles2_type_technique }

procedure TXMLProfile_gles2_type_technique.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('pass', TXMLGles2_pass_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  FPass := CreateFilter(TXMLGles2_pass_typeList, TXMLGles2_pass_type, IXMLGles2_pass_type) as IXMLGles2_pass_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_gles2_type_technique.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLProfile_gles2_type_technique.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLProfile_gles2_type_technique.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLProfile_gles2_type_technique.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLProfile_gles2_type_technique.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLProfile_gles2_type_technique.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLProfile_gles2_type_technique.Get_Pass: IXMLGles2_pass_typeList;
begin
  Result := FPass;
end;

function TXMLProfile_gles2_type_technique.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLProfile_gles2_type_techniqueList }

function TXMLProfile_gles2_type_techniqueList.Add: IXMLProfile_gles2_type_technique;
begin
  Result := AddItem(-1) as IXMLProfile_gles2_type_technique;
end;

function TXMLProfile_gles2_type_techniqueList.Insert(const Index: Integer): IXMLProfile_gles2_type_technique;
begin
  Result := AddItem(Index) as IXMLProfile_gles2_type_technique;
end;

function TXMLProfile_gles2_type_techniqueList.Get_Item(Index: Integer): IXMLProfile_gles2_type_technique;
begin
  Result := Nodes[Index] as IXMLProfile_gles2_type_technique;
end;

{ TXMLGles2_pass_type }

procedure TXMLGles2_pass_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('states', TXMLGles2_pass_type_states);
  FClassesTree.Add('program', TXMLGles2_program_type);
  FClassesTree.Add('evaluate', TXMLGles2_pass_type_evaluate);
  FClassesTree.Add('extra', TXMLExtra_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLGles2_pass_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLGles2_pass_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLGles2_pass_type.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLGles2_pass_type.Get_States: IXMLGles2_pass_type_states;
begin
  Result := Nodes['states'] as IXMLGles2_pass_type_states;
end;

function TXMLGles2_pass_type.Get_Program_: IXMLGles2_program_type;
begin
  Result := Nodes['program'] as IXMLGles2_program_type;
end;

function TXMLGles2_pass_type.Get_Evaluate: IXMLGles2_pass_type_evaluate;
begin
  Result := Nodes['evaluate'] as IXMLGles2_pass_type_evaluate;
end;

function TXMLGles2_pass_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLGles2_pass_typeList }

function TXMLGles2_pass_typeList.Add: IXMLGles2_pass_type;
begin
  Result := AddItem(-1) as IXMLGles2_pass_type;
end;

function TXMLGles2_pass_typeList.Insert(const Index: Integer): IXMLGles2_pass_type;
begin
  Result := AddItem(Index) as IXMLGles2_pass_type;
end;

function TXMLGles2_pass_typeList.Get_Item(Index: Integer): IXMLGles2_pass_type;
begin
  Result := Nodes[Index] as IXMLGles2_pass_type;
end;

{ TXMLGles2_pass_type_states }

procedure TXMLGles2_pass_type_states.DoRegisterChildClasses;
begin
  FClassesTree.Add('blend_color', TXMLBlend_color);
  FClassesTree.Add('blend_equation', TXMLBlend_equation);
  FClassesTree.Add('blend_equation_separate', TXMLBlend_equation_separate);
  FClassesTree.Add('blend_func', TXMLBlend_func);
  FClassesTree.Add('blend_func_separate', TXMLBlend_func_separate);
  FClassesTree.Add('color_mask', TXMLColor_mask);
  FClassesTree.Add('cull_face', TXMLCull_face);
  FClassesTree.Add('depth_func', TXMLDepth_func);
  FClassesTree.Add('depth_mask', TXMLDepth_mask);
  FClassesTree.Add('depth_range', TXMLDepth_range);
  FClassesTree.Add('front_face', TXMLFront_face);
  FClassesTree.Add('line_width', TXMLLine_width);
  FClassesTree.Add('polygon_offset', TXMLPolygon_offset);
  FClassesTree.Add('point_size', TXMLPoint_size);
  FClassesTree.Add('sample_coverage', TXMLSample_coverage);
  FClassesTree.Add('scissor', TXMLScissor);
  FClassesTree.Add('stencil_func', TXMLStencil_func);
  FClassesTree.Add('stencil_func_separate', TXMLStencil_func_separate);
  FClassesTree.Add('stencil_mask', TXMLStencil_mask);
  FClassesTree.Add('stencil_mask_separate', TXMLStencil_mask_separate);
  FClassesTree.Add('stencil_op', TXMLStencil_op);
  FClassesTree.Add('stencil_op_separate', TXMLStencil_op_separate);
  FClassesTree.Add('blend_enable', TXMLBlend_enable);
  FClassesTree.Add('cull_face_enable', TXMLCull_face_enable);
  FClassesTree.Add('depth_test_enable', TXMLDepth_test_enable);
  FClassesTree.Add('dither_enable', TXMLDither_enable);
  FClassesTree.Add('polygon_offset_fill_enable', TXMLPolygon_offset_fill_enable);
  FClassesTree.Add('point_size_enable', TXMLPoint_size_enable);
  FClassesTree.Add('sample_alpha_to_coverage_enable', TXMLSample_alpha_to_coverage_enable);
  FClassesTree.Add('sample_coverage_enable', TXMLSample_coverage_enable);
  FClassesTree.Add('scissor_test_enable', TXMLScissor_test_enable);
  FClassesTree.Add('stencil_test_enable', TXMLStencil_test_enable);
  inherited;
end;

function TXMLGles2_pass_type_states.Get_Blend_color: IXMLBlend_color;
begin
  Result := Nodes['blend_color'] as IXMLBlend_color;
end;

function TXMLGles2_pass_type_states.Get_Blend_equation: IXMLBlend_equation;
begin
  Result := Nodes['blend_equation'] as IXMLBlend_equation;
end;

function TXMLGles2_pass_type_states.Get_Blend_equation_separate: IXMLBlend_equation_separate;
begin
  Result := Nodes['blend_equation_separate'] as IXMLBlend_equation_separate;
end;

function TXMLGles2_pass_type_states.Get_Blend_func: IXMLBlend_func;
begin
  Result := Nodes['blend_func'] as IXMLBlend_func;
end;

function TXMLGles2_pass_type_states.Get_Blend_func_separate: IXMLBlend_func_separate;
begin
  Result := Nodes['blend_func_separate'] as IXMLBlend_func_separate;
end;

function TXMLGles2_pass_type_states.Get_Color_mask: IXMLColor_mask;
begin
  Result := Nodes['color_mask'] as IXMLColor_mask;
end;

function TXMLGles2_pass_type_states.Get_Cull_face: IXMLCull_face;
begin
  Result := Nodes['cull_face'] as IXMLCull_face;
end;

function TXMLGles2_pass_type_states.Get_Depth_func: IXMLDepth_func;
begin
  Result := Nodes['depth_func'] as IXMLDepth_func;
end;

function TXMLGles2_pass_type_states.Get_Depth_mask: IXMLDepth_mask;
begin
  Result := Nodes['depth_mask'] as IXMLDepth_mask;
end;

function TXMLGles2_pass_type_states.Get_Depth_range: IXMLDepth_range;
begin
  Result := Nodes['depth_range'] as IXMLDepth_range;
end;

function TXMLGles2_pass_type_states.Get_Front_face: IXMLFront_face;
begin
  Result := Nodes['front_face'] as IXMLFront_face;
end;

function TXMLGles2_pass_type_states.Get_Line_width: IXMLLine_width;
begin
  Result := Nodes['line_width'] as IXMLLine_width;
end;

function TXMLGles2_pass_type_states.Get_Polygon_offset: IXMLPolygon_offset;
begin
  Result := Nodes['polygon_offset'] as IXMLPolygon_offset;
end;

function TXMLGles2_pass_type_states.Get_Point_size: IXMLPoint_size;
begin
  Result := Nodes['point_size'] as IXMLPoint_size;
end;

function TXMLGles2_pass_type_states.Get_Sample_coverage: IXMLSample_coverage;
begin
  Result := Nodes['sample_coverage'] as IXMLSample_coverage;
end;

function TXMLGles2_pass_type_states.Get_Scissor: IXMLScissor;
begin
  Result := Nodes['scissor'] as IXMLScissor;
end;

function TXMLGles2_pass_type_states.Get_Stencil_func: IXMLStencil_func;
begin
  Result := Nodes['stencil_func'] as IXMLStencil_func;
end;

function TXMLGles2_pass_type_states.Get_Stencil_func_separate: IXMLStencil_func_separate;
begin
  Result := Nodes['stencil_func_separate'] as IXMLStencil_func_separate;
end;

function TXMLGles2_pass_type_states.Get_Stencil_mask: IXMLStencil_mask;
begin
  Result := Nodes['stencil_mask'] as IXMLStencil_mask;
end;

function TXMLGles2_pass_type_states.Get_Stencil_mask_separate: IXMLStencil_mask_separate;
begin
  Result := Nodes['stencil_mask_separate'] as IXMLStencil_mask_separate;
end;

function TXMLGles2_pass_type_states.Get_Stencil_op: IXMLStencil_op;
begin
  Result := Nodes['stencil_op'] as IXMLStencil_op;
end;

function TXMLGles2_pass_type_states.Get_Stencil_op_separate: IXMLStencil_op_separate;
begin
  Result := Nodes['stencil_op_separate'] as IXMLStencil_op_separate;
end;

function TXMLGles2_pass_type_states.Get_Blend_enable: IXMLBlend_enable;
begin
  Result := Nodes['blend_enable'] as IXMLBlend_enable;
end;

function TXMLGles2_pass_type_states.Get_Cull_face_enable: IXMLCull_face_enable;
begin
  Result := Nodes['cull_face_enable'] as IXMLCull_face_enable;
end;

function TXMLGles2_pass_type_states.Get_Depth_test_enable: IXMLDepth_test_enable;
begin
  Result := Nodes['depth_test_enable'] as IXMLDepth_test_enable;
end;

function TXMLGles2_pass_type_states.Get_Dither_enable: IXMLDither_enable;
begin
  Result := Nodes['dither_enable'] as IXMLDither_enable;
end;

function TXMLGles2_pass_type_states.Get_Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable;
begin
  Result := Nodes['polygon_offset_fill_enable'] as IXMLPolygon_offset_fill_enable;
end;

function TXMLGles2_pass_type_states.Get_Point_size_enable: IXMLPoint_size_enable;
begin
  Result := Nodes['point_size_enable'] as IXMLPoint_size_enable;
end;

function TXMLGles2_pass_type_states.Get_Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable;
begin
  Result := Nodes['sample_alpha_to_coverage_enable'] as IXMLSample_alpha_to_coverage_enable;
end;

function TXMLGles2_pass_type_states.Get_Sample_coverage_enable: IXMLSample_coverage_enable;
begin
  Result := Nodes['sample_coverage_enable'] as IXMLSample_coverage_enable;
end;

function TXMLGles2_pass_type_states.Get_Scissor_test_enable: IXMLScissor_test_enable;
begin
  Result := Nodes['scissor_test_enable'] as IXMLScissor_test_enable;
end;

function TXMLGles2_pass_type_states.Get_Stencil_test_enable: IXMLStencil_test_enable;
begin
  Result := Nodes['stencil_test_enable'] as IXMLStencil_test_enable;
end;

{ TXMLBlend_color }

function TXMLBlend_color.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLBlend_color.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLBlend_color.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLBlend_color.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLBlend_equation }

function TXMLBlend_equation.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLBlend_equation.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLBlend_equation.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLBlend_equation.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLBlend_equation_separate }

procedure TXMLBlend_equation_separate.DoRegisterChildClasses;
begin
  FClassesTree.Add('rgb', TXMLBlend_equation_separate_rgb);
  FClassesTree.Add('alpha', TXMLBlend_equation_separate_alpha);
  inherited;
end;

function TXMLBlend_equation_separate.Get_Rgb: IXMLBlend_equation_separate_rgb;
begin
  Result := Nodes['rgb'] as IXMLBlend_equation_separate_rgb;
end;

function TXMLBlend_equation_separate.Get_Alpha: IXMLBlend_equation_separate_alpha;
begin
  Result := Nodes['alpha'] as IXMLBlend_equation_separate_alpha;
end;

{ TXMLBlend_equation_separate_rgb }

function TXMLBlend_equation_separate_rgb.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLBlend_equation_separate_rgb.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLBlend_equation_separate_rgb.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLBlend_equation_separate_rgb.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLBlend_equation_separate_alpha }

function TXMLBlend_equation_separate_alpha.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLBlend_equation_separate_alpha.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLBlend_equation_separate_alpha.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLBlend_equation_separate_alpha.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLBlend_func }

procedure TXMLBlend_func.DoRegisterChildClasses;
begin
  FClassesTree.Add('src', TXMLBlend_func_src);
  FClassesTree.Add('dest', TXMLBlend_func_dest);
  inherited;
end;

function TXMLBlend_func.Get_Src: IXMLBlend_func_src;
begin
  Result := Nodes['src'] as IXMLBlend_func_src;
end;

function TXMLBlend_func.Get_Dest: IXMLBlend_func_dest;
begin
  Result := Nodes['dest'] as IXMLBlend_func_dest;
end;

{ TXMLBlend_func_src }

function TXMLBlend_func_src.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLBlend_func_src.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLBlend_func_src.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLBlend_func_src.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLBlend_func_dest }

function TXMLBlend_func_dest.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLBlend_func_dest.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLBlend_func_dest.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLBlend_func_dest.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLBlend_func_separate }

procedure TXMLBlend_func_separate.DoRegisterChildClasses;
begin
  FClassesTree.Add('src_rgb', TXMLBlend_func_separate_src_rgb);
  FClassesTree.Add('dest_rgb', TXMLBlend_func_separate_dest_rgb);
  FClassesTree.Add('src_alpha', TXMLBlend_func_separate_src_alpha);
  FClassesTree.Add('dest_alpha', TXMLBlend_func_separate_dest_alpha);
  inherited;
end;

function TXMLBlend_func_separate.Get_Src_rgb: IXMLBlend_func_separate_src_rgb;
begin
  Result := Nodes['src_rgb'] as IXMLBlend_func_separate_src_rgb;
end;

function TXMLBlend_func_separate.Get_Dest_rgb: IXMLBlend_func_separate_dest_rgb;
begin
  Result := Nodes['dest_rgb'] as IXMLBlend_func_separate_dest_rgb;
end;

function TXMLBlend_func_separate.Get_Src_alpha: IXMLBlend_func_separate_src_alpha;
begin
  Result := Nodes['src_alpha'] as IXMLBlend_func_separate_src_alpha;
end;

function TXMLBlend_func_separate.Get_Dest_alpha: IXMLBlend_func_separate_dest_alpha;
begin
  Result := Nodes['dest_alpha'] as IXMLBlend_func_separate_dest_alpha;
end;

{ TXMLBlend_func_separate_src_rgb }

function TXMLBlend_func_separate_src_rgb.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLBlend_func_separate_src_rgb.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLBlend_func_separate_src_rgb.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLBlend_func_separate_src_rgb.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLBlend_func_separate_dest_rgb }

function TXMLBlend_func_separate_dest_rgb.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLBlend_func_separate_dest_rgb.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLBlend_func_separate_dest_rgb.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLBlend_func_separate_dest_rgb.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLBlend_func_separate_src_alpha }

function TXMLBlend_func_separate_src_alpha.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLBlend_func_separate_src_alpha.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLBlend_func_separate_src_alpha.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLBlend_func_separate_src_alpha.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLBlend_func_separate_dest_alpha }

function TXMLBlend_func_separate_dest_alpha.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLBlend_func_separate_dest_alpha.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLBlend_func_separate_dest_alpha.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLBlend_func_separate_dest_alpha.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLColor_mask }

function TXMLColor_mask.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLColor_mask.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLColor_mask.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLColor_mask.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLCull_face }

function TXMLCull_face.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLCull_face.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLCull_face.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLCull_face.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLDepth_func }

function TXMLDepth_func.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLDepth_func.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLDepth_func.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLDepth_func.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLDepth_mask }

function TXMLDepth_mask.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLDepth_mask.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLDepth_mask.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLDepth_mask.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLDepth_range }

function TXMLDepth_range.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLDepth_range.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLDepth_range.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLDepth_range.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLFront_face }

function TXMLFront_face.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLFront_face.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLFront_face.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLFront_face.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLLine_width }

function TXMLLine_width.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLLine_width.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLLine_width.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLine_width.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPolygon_offset }

function TXMLPolygon_offset.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLPolygon_offset.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLPolygon_offset.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPolygon_offset.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPoint_size }

function TXMLPoint_size.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLPoint_size.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLPoint_size.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPoint_size.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLSample_coverage }

procedure TXMLSample_coverage.DoRegisterChildClasses;
begin
  FClassesTree.Add('value', TXMLSample_coverage_value);
  FClassesTree.Add('invert', TXMLSample_coverage_invert);
  inherited;
end;

function TXMLSample_coverage.Get_Value: IXMLSample_coverage_value;
begin
  Result := Nodes['value'] as IXMLSample_coverage_value;
end;

function TXMLSample_coverage.Get_Invert: IXMLSample_coverage_invert;
begin
  Result := Nodes['invert'] as IXMLSample_coverage_invert;
end;

{ TXMLSample_coverage_value }

function TXMLSample_coverage_value.Get_Value: Single;
begin
  Result := Params['value'];
end;

procedure TXMLSample_coverage_value.Set_Value(Value: Single);
begin
  Params['value'] := Value;
end;

function TXMLSample_coverage_value.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLSample_coverage_value.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLSample_coverage_invert }

function TXMLSample_coverage_invert.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLSample_coverage_invert.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLSample_coverage_invert.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLSample_coverage_invert.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLScissor }

function TXMLScissor.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLScissor.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLScissor.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLScissor.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_func }

procedure TXMLStencil_func.DoRegisterChildClasses;
begin
  FClassesTree.Add('func', TXMLStencil_func_func);
  FClassesTree.Add('ref', TXMLStencil_func_ref);
  FClassesTree.Add('mask', TXMLStencil_func_mask);
  inherited;
end;

function TXMLStencil_func.Get_Func: IXMLStencil_func_func;
begin
  Result := Nodes['func'] as IXMLStencil_func_func;
end;

function TXMLStencil_func.Get_Ref: IXMLStencil_func_ref;
begin
  Result := Nodes['ref'] as IXMLStencil_func_ref;
end;

function TXMLStencil_func.Get_Mask: IXMLStencil_func_mask;
begin
  Result := Nodes['mask'] as IXMLStencil_func_mask;
end;

{ TXMLStencil_func_func }

function TXMLStencil_func_func.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_func_func.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLStencil_func_func.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_func_func.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_func_ref }

function TXMLStencil_func_ref.Get_Value: Byte;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_func_ref.Set_Value(Value: Byte);
begin
  Params['value'] := Value;
end;

function TXMLStencil_func_ref.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_func_ref.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_func_mask }

function TXMLStencil_func_mask.Get_Value: Byte;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_func_mask.Set_Value(Value: Byte);
begin
  Params['value'] := Value;
end;

function TXMLStencil_func_mask.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_func_mask.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_func_separate }

procedure TXMLStencil_func_separate.DoRegisterChildClasses;
begin
  FClassesTree.Add('front', TXMLStencil_func_separate_front);
  FClassesTree.Add('back', TXMLStencil_func_separate_back);
  FClassesTree.Add('ref', TXMLStencil_func_separate_ref);
  FClassesTree.Add('mask', TXMLStencil_func_separate_mask);
  inherited;
end;

function TXMLStencil_func_separate.Get_Front: IXMLStencil_func_separate_front;
begin
  Result := Nodes['front'] as IXMLStencil_func_separate_front;
end;

function TXMLStencil_func_separate.Get_Back: IXMLStencil_func_separate_back;
begin
  Result := Nodes['back'] as IXMLStencil_func_separate_back;
end;

function TXMLStencil_func_separate.Get_Ref: IXMLStencil_func_separate_ref;
begin
  Result := Nodes['ref'] as IXMLStencil_func_separate_ref;
end;

function TXMLStencil_func_separate.Get_Mask: IXMLStencil_func_separate_mask;
begin
  Result := Nodes['mask'] as IXMLStencil_func_separate_mask;
end;

{ TXMLStencil_func_separate_front }

function TXMLStencil_func_separate_front.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_func_separate_front.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLStencil_func_separate_front.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_func_separate_front.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_func_separate_back }

function TXMLStencil_func_separate_back.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_func_separate_back.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLStencil_func_separate_back.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_func_separate_back.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_func_separate_ref }

function TXMLStencil_func_separate_ref.Get_Value: Byte;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_func_separate_ref.Set_Value(Value: Byte);
begin
  Params['value'] := Value;
end;

function TXMLStencil_func_separate_ref.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_func_separate_ref.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_func_separate_mask }

function TXMLStencil_func_separate_mask.Get_Value: Byte;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_func_separate_mask.Set_Value(Value: Byte);
begin
  Params['value'] := Value;
end;

function TXMLStencil_func_separate_mask.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_func_separate_mask.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_mask }

function TXMLStencil_mask.Get_Value: Int64;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_mask.Set_Value(Value: Int64);
begin
  Params['value'] := Value;
end;

function TXMLStencil_mask.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_mask.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_mask_separate }

procedure TXMLStencil_mask_separate.DoRegisterChildClasses;
begin
  FClassesTree.Add('face', TXMLStencil_mask_separate_face);
  FClassesTree.Add('mask', TXMLStencil_mask_separate_mask);
  inherited;
end;

function TXMLStencil_mask_separate.Get_Face: IXMLStencil_mask_separate_face;
begin
  Result := Nodes['face'] as IXMLStencil_mask_separate_face;
end;

function TXMLStencil_mask_separate.Get_Mask: IXMLStencil_mask_separate_mask;
begin
  Result := Nodes['mask'] as IXMLStencil_mask_separate_mask;
end;

{ TXMLStencil_mask_separate_face }

function TXMLStencil_mask_separate_face.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_mask_separate_face.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLStencil_mask_separate_face.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_mask_separate_face.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_mask_separate_mask }

function TXMLStencil_mask_separate_mask.Get_Value: Byte;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_mask_separate_mask.Set_Value(Value: Byte);
begin
  Params['value'] := Value;
end;

function TXMLStencil_mask_separate_mask.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_mask_separate_mask.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_op }

procedure TXMLStencil_op.DoRegisterChildClasses;
begin
  FClassesTree.Add('fail', TXMLStencil_op_fail);
  FClassesTree.Add('zfail', TXMLStencil_op_zfail);
  FClassesTree.Add('zpass', TXMLStencil_op_zpass);
  inherited;
end;

function TXMLStencil_op.Get_Fail: IXMLStencil_op_fail;
begin
  Result := Nodes['fail'] as IXMLStencil_op_fail;
end;

function TXMLStencil_op.Get_Zfail: IXMLStencil_op_zfail;
begin
  Result := Nodes['zfail'] as IXMLStencil_op_zfail;
end;

function TXMLStencil_op.Get_Zpass: IXMLStencil_op_zpass;
begin
  Result := Nodes['zpass'] as IXMLStencil_op_zpass;
end;

{ TXMLStencil_op_fail }

function TXMLStencil_op_fail.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_op_fail.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLStencil_op_fail.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_op_fail.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_op_zfail }

function TXMLStencil_op_zfail.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_op_zfail.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLStencil_op_zfail.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_op_zfail.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_op_zpass }

function TXMLStencil_op_zpass.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_op_zpass.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLStencil_op_zpass.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_op_zpass.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_op_separate }

procedure TXMLStencil_op_separate.DoRegisterChildClasses;
begin
  FClassesTree.Add('face', TXMLStencil_op_separate_face);
  FClassesTree.Add('fail', TXMLStencil_op_separate_fail);
  FClassesTree.Add('zfail', TXMLStencil_op_separate_zfail);
  FClassesTree.Add('zpass', TXMLStencil_op_separate_zpass);
  inherited;
end;

function TXMLStencil_op_separate.Get_Face: IXMLStencil_op_separate_face;
begin
  Result := Nodes['face'] as IXMLStencil_op_separate_face;
end;

function TXMLStencil_op_separate.Get_Fail: IXMLStencil_op_separate_fail;
begin
  Result := Nodes['fail'] as IXMLStencil_op_separate_fail;
end;

function TXMLStencil_op_separate.Get_Zfail: IXMLStencil_op_separate_zfail;
begin
  Result := Nodes['zfail'] as IXMLStencil_op_separate_zfail;
end;

function TXMLStencil_op_separate.Get_Zpass: IXMLStencil_op_separate_zpass;
begin
  Result := Nodes['zpass'] as IXMLStencil_op_separate_zpass;
end;

{ TXMLStencil_op_separate_face }

function TXMLStencil_op_separate_face.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_op_separate_face.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLStencil_op_separate_face.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_op_separate_face.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_op_separate_fail }

function TXMLStencil_op_separate_fail.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_op_separate_fail.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLStencil_op_separate_fail.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_op_separate_fail.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_op_separate_zfail }

function TXMLStencil_op_separate_zfail.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_op_separate_zfail.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLStencil_op_separate_zfail.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_op_separate_zfail.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_op_separate_zpass }

function TXMLStencil_op_separate_zpass.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_op_separate_zpass.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLStencil_op_separate_zpass.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_op_separate_zpass.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLBlend_enable }

function TXMLBlend_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLBlend_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLBlend_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLBlend_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLCull_face_enable }

function TXMLCull_face_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLCull_face_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLCull_face_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLCull_face_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLDepth_test_enable }

function TXMLDepth_test_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLDepth_test_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLDepth_test_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLDepth_test_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLDither_enable }

function TXMLDither_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLDither_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLDither_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLDither_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPolygon_offset_fill_enable }

function TXMLPolygon_offset_fill_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLPolygon_offset_fill_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLPolygon_offset_fill_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPolygon_offset_fill_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPoint_size_enable }

function TXMLPoint_size_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLPoint_size_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLPoint_size_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPoint_size_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLSample_alpha_to_coverage_enable }

function TXMLSample_alpha_to_coverage_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLSample_alpha_to_coverage_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLSample_alpha_to_coverage_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLSample_alpha_to_coverage_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLSample_coverage_enable }

function TXMLSample_coverage_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLSample_coverage_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLSample_coverage_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLSample_coverage_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLScissor_test_enable }

function TXMLScissor_test_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLScissor_test_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLScissor_test_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLScissor_test_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLStencil_test_enable }

function TXMLStencil_test_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLStencil_test_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLStencil_test_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLStencil_test_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLGles2_program_type }

procedure TXMLGles2_program_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('shader', TXMLGles2_shader_type);
  FClassesTree.Add('linker', TXMLFx_target_type);
  FClassesTree.Add('bind_attribute', TXMLGles2_program_type_bind_attribute);
  FClassesTree.Add('bind_uniform', TXMLGles2_program_type_bind_uniform);
  FShader := CreateFilter(TXMLGles2_shader_typeList, TXMLGles2_shader_type, IXMLGles2_shader_type) as IXMLGles2_shader_typeList;
  FLinker := CreateFilter(TXMLFx_target_typeList, TXMLFx_target_type, IXMLFx_target_type) as IXMLFx_target_typeList;
  FBind_attribute := CreateFilter(TXMLGles2_program_type_bind_attributeList, TXMLGles2_program_type_bind_attribute, IXMLGles2_program_type_bind_attribute) as IXMLGles2_program_type_bind_attributeList;
  FBind_uniform := CreateFilter(TXMLGles2_program_type_bind_uniformList, TXMLGles2_program_type_bind_uniform, IXMLGles2_program_type_bind_uniform) as IXMLGles2_program_type_bind_uniformList;
  inherited;
end;

function TXMLGles2_program_type.Get_Shader: IXMLGles2_shader_typeList;
begin
  Result := FShader;
end;

function TXMLGles2_program_type.Get_Linker: IXMLFx_target_typeList;
begin
  Result := FLinker;
end;

function TXMLGles2_program_type.Get_Bind_attribute: IXMLGles2_program_type_bind_attributeList;
begin
  Result := FBind_attribute;
end;

function TXMLGles2_program_type.Get_Bind_uniform: IXMLGles2_program_type_bind_uniformList;
begin
  Result := FBind_uniform;
end;

{ TXMLGles2_shader_type }

procedure TXMLGles2_shader_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('sources', TXMLGles2_shader_type_sources);
  FClassesTree.Add('compiler', TXMLFx_target_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FCompiler := CreateFilter(TXMLFx_target_typeList, TXMLFx_target_type, IXMLFx_target_type) as IXMLFx_target_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLGles2_shader_type.Get_Stage: UnicodeString;
begin
  Result := Params['stage'];
end;

procedure TXMLGles2_shader_type.Set_Stage(Value: UnicodeString);
begin
  Params['stage'] := Value;
end;

function TXMLGles2_shader_type.Get_Sources: IXMLGles2_shader_type_sources;
begin
  Result := Nodes['sources'] as IXMLGles2_shader_type_sources;
end;

function TXMLGles2_shader_type.Get_Compiler: IXMLFx_target_typeList;
begin
  Result := FCompiler;
end;

function TXMLGles2_shader_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLGles2_shader_typeList }

function TXMLGles2_shader_typeList.Add: IXMLGles2_shader_type;
begin
  Result := AddItem(-1) as IXMLGles2_shader_type;
end;

function TXMLGles2_shader_typeList.Insert(const Index: Integer): IXMLGles2_shader_type;
begin
  Result := AddItem(Index) as IXMLGles2_shader_type;
end;

function TXMLGles2_shader_typeList.Get_Item(Index: Integer): IXMLGles2_shader_type;
begin
  Result := Nodes[Index] as IXMLGles2_shader_type;
end;

{ TXMLFx_sources_type }

procedure TXMLFx_sources_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('import', TXMLFx_sources_type_import);
  FInline_ := CreateFilter(TXMLString_List, TXML, IXML) as IXMLString_List;
  FImport := CreateFilter(TXMLFx_sources_type_importList, TXMLFx_sources_type_import, IXMLFx_sources_type_import) as IXMLFx_sources_type_importList;
  inherited;
end;

function TXMLFx_sources_type.Get_Inline_: IXMLString_List;
begin
  Result := FInline_;
end;

function TXMLFx_sources_type.Get_Import: IXMLFx_sources_type_importList;
begin
  Result := FImport;
end;

{ TXMLFx_sources_type_import }

function TXMLFx_sources_type_import.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLFx_sources_type_import.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

{ TXMLFx_sources_type_importList }

function TXMLFx_sources_type_importList.Add: IXMLFx_sources_type_import;
begin
  Result := AddItem(-1) as IXMLFx_sources_type_import;
end;

function TXMLFx_sources_type_importList.Insert(const Index: Integer): IXMLFx_sources_type_import;
begin
  Result := AddItem(Index) as IXMLFx_sources_type_import;
end;

function TXMLFx_sources_type_importList.Get_Item(Index: Integer): IXMLFx_sources_type_import;
begin
  Result := Nodes[Index] as IXMLFx_sources_type_import;
end;

{ TXMLGles2_shader_type_sources }

function TXMLGles2_shader_type_sources.Get_Entry: UnicodeString;
begin
  Result := Params['entry'];
end;

procedure TXMLGles2_shader_type_sources.Set_Entry(Value: UnicodeString);
begin
  Params['entry'] := Value;
end;

{ TXMLFx_target_type }

procedure TXMLFx_target_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('binary', TXMLFx_target_type_binary);
  inherited;
end;

function TXMLFx_target_type.Get_Platform: UnicodeString;
begin
  Result := Params['platform'];
end;

procedure TXMLFx_target_type.Set_Platform(Value: UnicodeString);
begin
  Params['platform'] := Value;
end;

function TXMLFx_target_type.Get_Target: UnicodeString;
begin
  Result := Params['target'];
end;

procedure TXMLFx_target_type.Set_Target(Value: UnicodeString);
begin
  Params['target'] := Value;
end;

function TXMLFx_target_type.Get_Options: UnicodeString;
begin
  Result := Params['options'];
end;

procedure TXMLFx_target_type.Set_Options(Value: UnicodeString);
begin
  Params['options'] := Value;
end;

function TXMLFx_target_type.Get_Binary: IXMLFx_target_type_binary;
begin
  Result := Nodes['binary'] as IXMLFx_target_type_binary;
end;

{ TXMLFx_target_typeList }

function TXMLFx_target_typeList.Add: IXMLFx_target_type;
begin
  Result := AddItem(-1) as IXMLFx_target_type;
end;

function TXMLFx_target_typeList.Insert(const Index: Integer): IXMLFx_target_type;
begin
  Result := AddItem(Index) as IXMLFx_target_type;
end;

function TXMLFx_target_typeList.Get_Item(Index: Integer): IXMLFx_target_type;
begin
  Result := Nodes[Index] as IXMLFx_target_type;
end;

{ TXMLFx_target_type_binary }

procedure TXMLFx_target_type_binary.DoRegisterChildClasses;
begin
  FClassesTree.Add('hex', TXMLFx_target_type_binary_hex);
  inherited;
end;

function TXMLFx_target_type_binary.Get_Ref: UnicodeString;
begin
  Result := Nodes['ref'].Content;
end;

procedure TXMLFx_target_type_binary.Set_Ref(Value: UnicodeString);
begin
  Nodes['ref'].Content := Value;
end;

function TXMLFx_target_type_binary.Get_Hex: IXMLFx_target_type_binary_hex;
begin
  Result := Nodes['hex'] as IXMLFx_target_type_binary_hex;
end;

{ TXMLFx_target_type_binary_hex }

function TXMLFx_target_type_binary_hex.Get_Format: UnicodeString;
begin
  Result := Params['format'];
end;

procedure TXMLFx_target_type_binary_hex.Set_Format(Value: UnicodeString);
begin
  Params['format'] := Value;
end;

{ TXMLGles2_program_type_bind_attribute }

function TXMLGles2_program_type_bind_attribute.Get_Symbol: UnicodeString;
begin
  Result := Params['symbol'];
end;

procedure TXMLGles2_program_type_bind_attribute.Set_Symbol(Value: UnicodeString);
begin
  Params['symbol'] := Value;
end;

function TXMLGles2_program_type_bind_attribute.Get_Semantic: UnicodeString;
begin
  Result := Nodes['semantic'].Content;
end;

procedure TXMLGles2_program_type_bind_attribute.Set_Semantic(Value: UnicodeString);
begin
  Nodes['semantic'].Content := Value;
end;

{ TXMLGles2_program_type_bind_attributeList }

function TXMLGles2_program_type_bind_attributeList.Add: IXMLGles2_program_type_bind_attribute;
begin
  Result := AddItem(-1) as IXMLGles2_program_type_bind_attribute;
end;

function TXMLGles2_program_type_bind_attributeList.Insert(const Index: Integer): IXMLGles2_program_type_bind_attribute;
begin
  Result := AddItem(Index) as IXMLGles2_program_type_bind_attribute;
end;

function TXMLGles2_program_type_bind_attributeList.Get_Item(Index: Integer): IXMLGles2_program_type_bind_attribute;
begin
  Result := Nodes[Index] as IXMLGles2_program_type_bind_attribute;
end;

{ TXMLGles2_program_type_bind_uniform }

procedure TXMLGles2_program_type_bind_uniform.DoRegisterChildClasses;
begin
  FClassesTree.Add('param', TXMLGles2_program_type_bind_uniform_param);
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  FClassesTree.Add('sampler3D', TXMLFx_sampler3D_type);
  FClassesTree.Add('samplerCUBE', TXMLFx_samplerCUBE_type);
  FClassesTree.Add('samplerDEPTH', TXMLFx_samplerDEPTH_type);
  FClassesTree.Add('usertype', TXMLUsertype);
  FClassesTree.Add('array', TXMLArray_);
  inherited;
end;

function TXMLGles2_program_type_bind_uniform.Get_Symbol: UnicodeString;
begin
  Result := Params['symbol'];
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Symbol(Value: UnicodeString);
begin
  Params['symbol'] := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Param: IXMLGles2_program_type_bind_uniform_param;
begin
  Result := Nodes['param'] as IXMLGles2_program_type_bind_uniform_param;
end;

function TXMLGles2_program_type_bind_uniform.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Bvec2: UnicodeString;
begin
  Result := Nodes['bvec2'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Bvec2(Value: UnicodeString);
begin
  Nodes['bvec2'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Bvec3: UnicodeString;
begin
  Result := Nodes['bvec3'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Bvec3(Value: UnicodeString);
begin
  Nodes['bvec3'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Bvec4: UnicodeString;
begin
  Result := Nodes['bvec4'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Bvec4(Value: UnicodeString);
begin
  Nodes['bvec4'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Vec2: UnicodeString;
begin
  Result := Nodes['vec2'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Vec2(Value: UnicodeString);
begin
  Nodes['vec2'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Vec3: UnicodeString;
begin
  Result := Nodes['vec3'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Vec3(Value: UnicodeString);
begin
  Nodes['vec3'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Vec4: UnicodeString;
begin
  Result := Nodes['vec4'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Vec4(Value: UnicodeString);
begin
  Nodes['vec4'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Mat2: UnicodeString;
begin
  Result := Nodes['mat2'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Mat2(Value: UnicodeString);
begin
  Nodes['mat2'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Mat3: UnicodeString;
begin
  Result := Nodes['mat3'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Mat3(Value: UnicodeString);
begin
  Nodes['mat3'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Mat4: UnicodeString;
begin
  Result := Nodes['mat4'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Mat4(Value: UnicodeString);
begin
  Nodes['mat4'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Ivec2: UnicodeString;
begin
  Result := Nodes['ivec2'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Ivec2(Value: UnicodeString);
begin
  Nodes['ivec2'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Ivec3: UnicodeString;
begin
  Result := Nodes['ivec3'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Ivec3(Value: UnicodeString);
begin
  Nodes['ivec3'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Ivec4: UnicodeString;
begin
  Result := Nodes['ivec4'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Ivec4(Value: UnicodeString);
begin
  Nodes['ivec4'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLGles2_program_type_bind_uniform.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

function TXMLGles2_program_type_bind_uniform.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

function TXMLGles2_program_type_bind_uniform.Get_Sampler3D: IXMLFx_sampler3D_type;
begin
  Result := Nodes['sampler3D'] as IXMLFx_sampler3D_type;
end;

function TXMLGles2_program_type_bind_uniform.Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['samplerCUBE'] as IXMLFx_samplerCUBE_type;
end;

function TXMLGles2_program_type_bind_uniform.Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['samplerDEPTH'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLGles2_program_type_bind_uniform.Get_Usertype: IXMLUsertype;
begin
  Result := Nodes['usertype'] as IXMLUsertype;
end;

function TXMLGles2_program_type_bind_uniform.Get_Array_: IXMLArray_;
begin
  Result := Nodes['array'] as IXMLArray_;
end;

{ TXMLGles2_program_type_bind_uniformList }

function TXMLGles2_program_type_bind_uniformList.Add: IXMLGles2_program_type_bind_uniform;
begin
  Result := AddItem(-1) as IXMLGles2_program_type_bind_uniform;
end;

function TXMLGles2_program_type_bind_uniformList.Insert(const Index: Integer): IXMLGles2_program_type_bind_uniform;
begin
  Result := AddItem(Index) as IXMLGles2_program_type_bind_uniform;
end;

function TXMLGles2_program_type_bind_uniformList.Get_Item(Index: Integer): IXMLGles2_program_type_bind_uniform;
begin
  Result := Nodes[Index] as IXMLGles2_program_type_bind_uniform;
end;

{ TXMLGles2_program_type_bind_uniform_param }

function TXMLGles2_program_type_bind_uniform_param.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLGles2_program_type_bind_uniform_param.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

{ TXMLGles2_pass_type_evaluate }

procedure TXMLGles2_pass_type_evaluate.DoRegisterChildClasses;
begin
  FClassesTree.Add('color_target', TXMLFx_colortarget_type);
  FClassesTree.Add('depth_target', TXMLFx_depthtarget_type);
  FClassesTree.Add('stencil_target', TXMLFx_stenciltarget_type);
  FClassesTree.Add('color_clear', TXMLFx_clearcolor_type);
  FClassesTree.Add('stencil_clear', TXMLFx_clearstencil_type);
  FClassesTree.Add('depth_clear', TXMLFx_cleardepth_type);
  FColor_target := CreateFilter(TXMLFx_colortarget_typeList, TXMLFx_colortarget_type, IXMLFx_colortarget_type) as IXMLFx_colortarget_typeList;
  FDepth_target := CreateFilter(TXMLFx_depthtarget_typeList, TXMLFx_depthtarget_type, IXMLFx_depthtarget_type) as IXMLFx_depthtarget_typeList;
  FStencil_target := CreateFilter(TXMLFx_stenciltarget_typeList, TXMLFx_stenciltarget_type, IXMLFx_stenciltarget_type) as IXMLFx_stenciltarget_typeList;
  FColor_clear := CreateFilter(TXMLFx_clearcolor_typeList, TXMLFx_clearcolor_type, IXMLFx_clearcolor_type) as IXMLFx_clearcolor_typeList;
  FStencil_clear := CreateFilter(TXMLFx_clearstencil_typeList, TXMLFx_clearstencil_type, IXMLFx_clearstencil_type) as IXMLFx_clearstencil_typeList;
  FDepth_clear := CreateFilter(TXMLFx_cleardepth_typeList, TXMLFx_cleardepth_type, IXMLFx_cleardepth_type) as IXMLFx_cleardepth_typeList;
  inherited;
end;

function TXMLGles2_pass_type_evaluate.Get_Color_target: IXMLFx_colortarget_typeList;
begin
  Result := FColor_target;
end;

function TXMLGles2_pass_type_evaluate.Get_Depth_target: IXMLFx_depthtarget_typeList;
begin
  Result := FDepth_target;
end;

function TXMLGles2_pass_type_evaluate.Get_Stencil_target: IXMLFx_stenciltarget_typeList;
begin
  Result := FStencil_target;
end;

function TXMLGles2_pass_type_evaluate.Get_Color_clear: IXMLFx_clearcolor_typeList;
begin
  Result := FColor_clear;
end;

function TXMLGles2_pass_type_evaluate.Get_Stencil_clear: IXMLFx_clearstencil_typeList;
begin
  Result := FStencil_clear;
end;

function TXMLGles2_pass_type_evaluate.Get_Depth_clear: IXMLFx_cleardepth_typeList;
begin
  Result := FDepth_clear;
end;

function TXMLGles2_pass_type_evaluate.Get_Draw: UnicodeString;
begin
  Result := Nodes['draw'].Content;
end;

procedure TXMLGles2_pass_type_evaluate.Set_Draw(Value: UnicodeString);
begin
  Nodes['draw'].Content := Value;
end;

{ TXMLFx_rendertarget_type }

procedure TXMLFx_rendertarget_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('param', TXMLFx_rendertarget_type_param);
  FClassesTree.Add('instance_image', TXMLInstance_image_type);
  inherited;
end;

function TXMLFx_rendertarget_type.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLFx_rendertarget_type.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

function TXMLFx_rendertarget_type.Get_Mip: LongWord;
begin
  Result := Params['mip'];
end;

procedure TXMLFx_rendertarget_type.Set_Mip(Value: LongWord);
begin
  Params['mip'] := Value;
end;

function TXMLFx_rendertarget_type.Get_Face: UnicodeString;
begin
  Result := Params['face'];
end;

procedure TXMLFx_rendertarget_type.Set_Face(Value: UnicodeString);
begin
  Params['face'] := Value;
end;

function TXMLFx_rendertarget_type.Get_Slice: LongWord;
begin
  Result := Params['slice'];
end;

procedure TXMLFx_rendertarget_type.Set_Slice(Value: LongWord);
begin
  Params['slice'] := Value;
end;

function TXMLFx_rendertarget_type.Get_Param: IXMLFx_rendertarget_type_param;
begin
  Result := Nodes['param'] as IXMLFx_rendertarget_type_param;
end;

function TXMLFx_rendertarget_type.Get_Instance_image: IXMLInstance_image_type;
begin
  Result := Nodes['instance_image'] as IXMLInstance_image_type;
end;

{ TXMLFx_rendertarget_type_param }

function TXMLFx_rendertarget_type_param.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLFx_rendertarget_type_param.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

{ TXMLFx_colortarget_type }

{ TXMLFx_colortarget_typeList }

function TXMLFx_colortarget_typeList.Add: IXMLFx_colortarget_type;
begin
  Result := AddItem(-1) as IXMLFx_colortarget_type;
end;

function TXMLFx_colortarget_typeList.Insert(const Index: Integer): IXMLFx_colortarget_type;
begin
  Result := AddItem(Index) as IXMLFx_colortarget_type;
end;

function TXMLFx_colortarget_typeList.Get_Item(Index: Integer): IXMLFx_colortarget_type;
begin
  Result := Nodes[Index] as IXMLFx_colortarget_type;
end;

{ TXMLFx_depthtarget_type }

{ TXMLFx_depthtarget_typeList }

function TXMLFx_depthtarget_typeList.Add: IXMLFx_depthtarget_type;
begin
  Result := AddItem(-1) as IXMLFx_depthtarget_type;
end;

function TXMLFx_depthtarget_typeList.Insert(const Index: Integer): IXMLFx_depthtarget_type;
begin
  Result := AddItem(Index) as IXMLFx_depthtarget_type;
end;

function TXMLFx_depthtarget_typeList.Get_Item(Index: Integer): IXMLFx_depthtarget_type;
begin
  Result := Nodes[Index] as IXMLFx_depthtarget_type;
end;

{ TXMLFx_stenciltarget_type }

{ TXMLFx_stenciltarget_typeList }

function TXMLFx_stenciltarget_typeList.Add: IXMLFx_stenciltarget_type;
begin
  Result := AddItem(-1) as IXMLFx_stenciltarget_type;
end;

function TXMLFx_stenciltarget_typeList.Insert(const Index: Integer): IXMLFx_stenciltarget_type;
begin
  Result := AddItem(Index) as IXMLFx_stenciltarget_type;
end;

function TXMLFx_stenciltarget_typeList.Get_Item(Index: Integer): IXMLFx_stenciltarget_type;
begin
  Result := Nodes[Index] as IXMLFx_stenciltarget_type;
end;

{ TXMLFx_clearcolor_type }

function TXMLFx_clearcolor_type.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLFx_clearcolor_type.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLFx_clearcolor_typeList }

function TXMLFx_clearcolor_typeList.Add: IXMLFx_clearcolor_type;
begin
  Result := AddItem(-1) as IXMLFx_clearcolor_type;
end;

function TXMLFx_clearcolor_typeList.Insert(const Index: Integer): IXMLFx_clearcolor_type;
begin
  Result := AddItem(Index) as IXMLFx_clearcolor_type;
end;

function TXMLFx_clearcolor_typeList.Get_Item(Index: Integer): IXMLFx_clearcolor_type;
begin
  Result := Nodes[Index] as IXMLFx_clearcolor_type;
end;

{ TXMLFx_clearstencil_type }

function TXMLFx_clearstencil_type.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLFx_clearstencil_type.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLFx_clearstencil_typeList }

function TXMLFx_clearstencil_typeList.Add: IXMLFx_clearstencil_type;
begin
  Result := AddItem(-1) as IXMLFx_clearstencil_type;
end;

function TXMLFx_clearstencil_typeList.Insert(const Index: Integer): IXMLFx_clearstencil_type;
begin
  Result := AddItem(Index) as IXMLFx_clearstencil_type;
end;

function TXMLFx_clearstencil_typeList.Get_Item(Index: Integer): IXMLFx_clearstencil_type;
begin
  Result := Nodes[Index] as IXMLFx_clearstencil_type;
end;

{ TXMLFx_cleardepth_type }

function TXMLFx_cleardepth_type.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLFx_cleardepth_type.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLFx_cleardepth_typeList }

function TXMLFx_cleardepth_typeList.Add: IXMLFx_cleardepth_type;
begin
  Result := AddItem(-1) as IXMLFx_cleardepth_type;
end;

function TXMLFx_cleardepth_typeList.Insert(const Index: Integer): IXMLFx_cleardepth_type;
begin
  Result := AddItem(Index) as IXMLFx_cleardepth_type;
end;

function TXMLFx_cleardepth_typeList.Get_Item(Index: Integer): IXMLFx_cleardepth_type;
begin
  Result := Nodes[Index] as IXMLFx_cleardepth_type;
end;

{ TXMLProfile_glsl_type }

procedure TXMLProfile_glsl_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('code', TXMLFx_code_type);
  FClassesTree.Add('include', TXMLFx_include_type);
  FClassesTree.Add('newparam', TXMLGlsl_newparam_type);
  FClassesTree.Add('technique', TXMLProfile_glsl_type_technique);
  FClassesTree.Add('extra', TXMLExtra_type);
  FCode := CreateFilter(TXMLFx_code_typeList, TXMLFx_code_type, IXMLFx_code_type) as IXMLFx_code_typeList;
  FInclude := CreateFilter(TXMLFx_include_typeList, TXMLFx_include_type, IXMLFx_include_type) as IXMLFx_include_typeList;
  FNewparam := CreateFilter(TXMLGlsl_newparam_typeList, TXMLGlsl_newparam_type, IXMLGlsl_newparam_type) as IXMLGlsl_newparam_typeList;
  FTechnique := CreateFilter(TXMLProfile_glsl_type_techniqueList, TXMLProfile_glsl_type_technique, IXMLProfile_glsl_type_technique) as IXMLProfile_glsl_type_techniqueList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_glsl_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLProfile_glsl_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLProfile_glsl_type.Get_Platform: UnicodeString;
begin
  Result := Params['platform'];
end;

procedure TXMLProfile_glsl_type.Set_Platform(Value: UnicodeString);
begin
  Params['platform'] := Value;
end;

function TXMLProfile_glsl_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLProfile_glsl_type.Get_Code: IXMLFx_code_typeList;
begin
  Result := FCode;
end;

function TXMLProfile_glsl_type.Get_Include: IXMLFx_include_typeList;
begin
  Result := FInclude;
end;

function TXMLProfile_glsl_type.Get_Newparam: IXMLGlsl_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLProfile_glsl_type.Get_Technique: IXMLProfile_glsl_type_techniqueList;
begin
  Result := FTechnique;
end;

function TXMLProfile_glsl_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLGlsl_newparam_type }

procedure TXMLGlsl_newparam_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('sampler1D', TXMLFx_sampler1D_type);
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  FClassesTree.Add('sampler3D', TXMLFx_sampler3D_type);
  FClassesTree.Add('samplerCUBE', TXMLFx_samplerCUBE_type);
  FClassesTree.Add('samplerRECT', TXMLFx_samplerRECT_type);
  FClassesTree.Add('samplerDEPTH', TXMLFx_samplerDEPTH_type);
  FClassesTree.Add('array', TXMLGlsl_array_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  inherited;
end;

function TXMLGlsl_newparam_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLGlsl_newparam_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLGlsl_newparam_type.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLGlsl_newparam_type.Get_Semantic: UnicodeString;
begin
  Result := Nodes['semantic'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Semantic(Value: UnicodeString);
begin
  Nodes['semantic'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Modifier: UnicodeString;
begin
  Result := Nodes['modifier'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Modifier(Value: UnicodeString);
begin
  Nodes['modifier'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Bool2: UnicodeString;
begin
  Result := Nodes['bool2'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Bool2(Value: UnicodeString);
begin
  Nodes['bool2'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Bool3: UnicodeString;
begin
  Result := Nodes['bool3'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Bool3(Value: UnicodeString);
begin
  Nodes['bool3'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Bool4: UnicodeString;
begin
  Result := Nodes['bool4'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Bool4(Value: UnicodeString);
begin
  Nodes['bool4'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Float3: UnicodeString;
begin
  Result := Nodes['float3'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Float3(Value: UnicodeString);
begin
  Nodes['float3'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Float4: UnicodeString;
begin
  Result := Nodes['float4'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Float4(Value: UnicodeString);
begin
  Nodes['float4'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Float2x2: UnicodeString;
begin
  Result := Nodes['float2x2'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Float2x2(Value: UnicodeString);
begin
  Nodes['float2x2'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Float3x3: UnicodeString;
begin
  Result := Nodes['float3x3'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Float3x3(Value: UnicodeString);
begin
  Nodes['float3x3'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Float4x4: UnicodeString;
begin
  Result := Nodes['float4x4'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Float4x4(Value: UnicodeString);
begin
  Nodes['float4x4'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Int2: UnicodeString;
begin
  Result := Nodes['int2'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Int2(Value: UnicodeString);
begin
  Nodes['int2'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Int3: UnicodeString;
begin
  Result := Nodes['int3'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Int3(Value: UnicodeString);
begin
  Nodes['int3'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Int4: UnicodeString;
begin
  Result := Nodes['int4'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Int4(Value: UnicodeString);
begin
  Nodes['int4'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Sampler1D: IXMLFx_sampler1D_type;
begin
  Result := Nodes['sampler1D'] as IXMLFx_sampler1D_type;
end;

function TXMLGlsl_newparam_type.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

function TXMLGlsl_newparam_type.Get_Sampler3D: IXMLFx_sampler3D_type;
begin
  Result := Nodes['sampler3D'] as IXMLFx_sampler3D_type;
end;

function TXMLGlsl_newparam_type.Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['samplerCUBE'] as IXMLFx_samplerCUBE_type;
end;

function TXMLGlsl_newparam_type.Get_SamplerRECT: IXMLFx_samplerRECT_type;
begin
  Result := Nodes['samplerRECT'] as IXMLFx_samplerRECT_type;
end;

function TXMLGlsl_newparam_type.Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['samplerDEPTH'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLGlsl_newparam_type.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLGlsl_newparam_type.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

function TXMLGlsl_newparam_type.Get_Array_: IXMLGlsl_array_type;
begin
  Result := Nodes['array'] as IXMLGlsl_array_type;
end;

{ TXMLGlsl_newparam_typeList }

function TXMLGlsl_newparam_typeList.Add: IXMLGlsl_newparam_type;
begin
  Result := AddItem(-1) as IXMLGlsl_newparam_type;
end;

function TXMLGlsl_newparam_typeList.Insert(const Index: Integer): IXMLGlsl_newparam_type;
begin
  Result := AddItem(Index) as IXMLGlsl_newparam_type;
end;

function TXMLGlsl_newparam_typeList.Get_Item(Index: Integer): IXMLGlsl_newparam_type;
begin
  Result := Nodes[Index] as IXMLGlsl_newparam_type;
end;

{ TXMLGlsl_array_type }

procedure TXMLGlsl_array_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('sampler1D', TXMLFx_sampler1D_type);
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  FClassesTree.Add('sampler3D', TXMLFx_sampler3D_type);
  FClassesTree.Add('samplerCUBE', TXMLFx_samplerCUBE_type);
  FClassesTree.Add('samplerRECT', TXMLFx_samplerRECT_type);
  FClassesTree.Add('samplerDEPTH', TXMLFx_samplerDEPTH_type);
  FClassesTree.Add('array', TXMLGlsl_array_type);
  inherited;
end;

function TXMLGlsl_array_type.Get_Length: LongWord;
begin
  Result := Params['length'];
end;

procedure TXMLGlsl_array_type.Set_Length(Value: LongWord);
begin
  Params['length'] := Value;
end;

function TXMLGlsl_array_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLGlsl_array_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Bool2: UnicodeString;
begin
  Result := Nodes['bool2'].Content;
end;

procedure TXMLGlsl_array_type.Set_Bool2(Value: UnicodeString);
begin
  Nodes['bool2'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Bool3: UnicodeString;
begin
  Result := Nodes['bool3'].Content;
end;

procedure TXMLGlsl_array_type.Set_Bool3(Value: UnicodeString);
begin
  Nodes['bool3'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Bool4: UnicodeString;
begin
  Result := Nodes['bool4'].Content;
end;

procedure TXMLGlsl_array_type.Set_Bool4(Value: UnicodeString);
begin
  Nodes['bool4'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLGlsl_array_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLGlsl_array_type.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Float3: UnicodeString;
begin
  Result := Nodes['float3'].Content;
end;

procedure TXMLGlsl_array_type.Set_Float3(Value: UnicodeString);
begin
  Nodes['float3'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Float4: UnicodeString;
begin
  Result := Nodes['float4'].Content;
end;

procedure TXMLGlsl_array_type.Set_Float4(Value: UnicodeString);
begin
  Nodes['float4'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Float2x2: UnicodeString;
begin
  Result := Nodes['float2x2'].Content;
end;

procedure TXMLGlsl_array_type.Set_Float2x2(Value: UnicodeString);
begin
  Nodes['float2x2'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Float3x3: UnicodeString;
begin
  Result := Nodes['float3x3'].Content;
end;

procedure TXMLGlsl_array_type.Set_Float3x3(Value: UnicodeString);
begin
  Nodes['float3x3'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Float4x4: UnicodeString;
begin
  Result := Nodes['float4x4'].Content;
end;

procedure TXMLGlsl_array_type.Set_Float4x4(Value: UnicodeString);
begin
  Nodes['float4x4'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLGlsl_array_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Int2: UnicodeString;
begin
  Result := Nodes['int2'].Content;
end;

procedure TXMLGlsl_array_type.Set_Int2(Value: UnicodeString);
begin
  Nodes['int2'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Int3: UnicodeString;
begin
  Result := Nodes['int3'].Content;
end;

procedure TXMLGlsl_array_type.Set_Int3(Value: UnicodeString);
begin
  Nodes['int3'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Int4: UnicodeString;
begin
  Result := Nodes['int4'].Content;
end;

procedure TXMLGlsl_array_type.Set_Int4(Value: UnicodeString);
begin
  Nodes['int4'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Sampler1D: IXMLFx_sampler1D_type;
begin
  Result := Nodes['sampler1D'] as IXMLFx_sampler1D_type;
end;

function TXMLGlsl_array_type.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

function TXMLGlsl_array_type.Get_Sampler3D: IXMLFx_sampler3D_type;
begin
  Result := Nodes['sampler3D'] as IXMLFx_sampler3D_type;
end;

function TXMLGlsl_array_type.Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['samplerCUBE'] as IXMLFx_samplerCUBE_type;
end;

function TXMLGlsl_array_type.Get_SamplerRECT: IXMLFx_samplerRECT_type;
begin
  Result := Nodes['samplerRECT'] as IXMLFx_samplerRECT_type;
end;

function TXMLGlsl_array_type.Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['samplerDEPTH'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLGlsl_array_type.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLGlsl_array_type.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

function TXMLGlsl_array_type.Get_Array_: IXMLGlsl_array_type;
begin
  Result := Nodes['array'] as IXMLGlsl_array_type;
end;

{ TXMLProfile_glsl_type_technique }

procedure TXMLProfile_glsl_type_technique.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('pass', TXMLProfile_glsl_type_technique_pass);
  FClassesTree.Add('extra', TXMLExtra_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  FPass := CreateFilter(TXMLProfile_glsl_type_technique_passList, TXMLProfile_glsl_type_technique_pass, IXMLProfile_glsl_type_technique_pass) as IXMLProfile_glsl_type_technique_passList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_glsl_type_technique.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLProfile_glsl_type_technique.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLProfile_glsl_type_technique.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLProfile_glsl_type_technique.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLProfile_glsl_type_technique.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLProfile_glsl_type_technique.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLProfile_glsl_type_technique.Get_Pass: IXMLProfile_glsl_type_technique_passList;
begin
  Result := FPass;
end;

function TXMLProfile_glsl_type_technique.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLProfile_glsl_type_techniqueList }

function TXMLProfile_glsl_type_techniqueList.Add: IXMLProfile_glsl_type_technique;
begin
  Result := AddItem(-1) as IXMLProfile_glsl_type_technique;
end;

function TXMLProfile_glsl_type_techniqueList.Insert(const Index: Integer): IXMLProfile_glsl_type_technique;
begin
  Result := AddItem(Index) as IXMLProfile_glsl_type_technique;
end;

function TXMLProfile_glsl_type_techniqueList.Get_Item(Index: Integer): IXMLProfile_glsl_type_technique;
begin
  Result := Nodes[Index] as IXMLProfile_glsl_type_technique;
end;

{ TXMLProfile_glsl_type_technique_pass }

procedure TXMLProfile_glsl_type_technique_pass.DoRegisterChildClasses;
begin
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('states', TXMLProfile_glsl_type_technique_pass_states);
  FClassesTree.Add('program', TXMLGlsl_program_type);
  FClassesTree.Add('evaluate', TXMLProfile_glsl_type_technique_pass_evaluate);
  FClassesTree.Add('extra', TXMLExtra_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_glsl_type_technique_pass.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLProfile_glsl_type_technique_pass.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLProfile_glsl_type_technique_pass.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLProfile_glsl_type_technique_pass.Get_States: IXMLProfile_glsl_type_technique_pass_states;
begin
  Result := Nodes['states'] as IXMLProfile_glsl_type_technique_pass_states;
end;

function TXMLProfile_glsl_type_technique_pass.Get_Program_: IXMLGlsl_program_type;
begin
  Result := Nodes['program'] as IXMLGlsl_program_type;
end;

function TXMLProfile_glsl_type_technique_pass.Get_Evaluate: IXMLProfile_glsl_type_technique_pass_evaluate;
begin
  Result := Nodes['evaluate'] as IXMLProfile_glsl_type_technique_pass_evaluate;
end;

function TXMLProfile_glsl_type_technique_pass.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLProfile_glsl_type_technique_passList }

function TXMLProfile_glsl_type_technique_passList.Add: IXMLProfile_glsl_type_technique_pass;
begin
  Result := AddItem(-1) as IXMLProfile_glsl_type_technique_pass;
end;

function TXMLProfile_glsl_type_technique_passList.Insert(const Index: Integer): IXMLProfile_glsl_type_technique_pass;
begin
  Result := AddItem(Index) as IXMLProfile_glsl_type_technique_pass;
end;

function TXMLProfile_glsl_type_technique_passList.Get_Item(Index: Integer): IXMLProfile_glsl_type_technique_pass;
begin
  Result := Nodes[Index] as IXMLProfile_glsl_type_technique_pass;
end;

{ TXMLProfile_glsl_type_technique_pass_states }

procedure TXMLProfile_glsl_type_technique_pass_states.DoRegisterChildClasses;
begin
  FClassesTree.Add('alpha_func', TXMLAlpha_func);
  FClassesTree.Add('blend_func', TXMLBlend_func);
  FClassesTree.Add('blend_func_separate', TXMLBlend_func_separate);
  FClassesTree.Add('blend_equation', TXMLBlend_equation);
  FClassesTree.Add('blend_equation_separate', TXMLBlend_equation_separate);
  FClassesTree.Add('color_material', TXMLColor_material);
  FClassesTree.Add('cull_face', TXMLCull_face);
  FClassesTree.Add('depth_func', TXMLDepth_func);
  FClassesTree.Add('fog_mode', TXMLFog_mode);
  FClassesTree.Add('fog_coord_src', TXMLFog_coord_src);
  FClassesTree.Add('front_face', TXMLFront_face);
  FClassesTree.Add('light_model_color_control', TXMLLight_model_color_control);
  FClassesTree.Add('logic_op', TXMLLogic_op);
  FClassesTree.Add('polygon_mode', TXMLPolygon_mode);
  FClassesTree.Add('shade_model', TXMLShade_model);
  FClassesTree.Add('stencil_func', TXMLStencil_func);
  FClassesTree.Add('stencil_op', TXMLStencil_op);
  FClassesTree.Add('stencil_func_separate', TXMLStencil_func_separate);
  FClassesTree.Add('stencil_op_separate', TXMLStencil_op_separate);
  FClassesTree.Add('stencil_mask_separate', TXMLStencil_mask_separate);
  FClassesTree.Add('light_enable', TXMLLight_enable);
  FClassesTree.Add('light_ambient', TXMLLight_ambient);
  FClassesTree.Add('light_diffuse', TXMLLight_diffuse);
  FClassesTree.Add('light_specular', TXMLLight_specular);
  FClassesTree.Add('light_position', TXMLLight_position);
  FClassesTree.Add('light_constant_attenuation', TXMLLight_constant_attenuation);
  FClassesTree.Add('light_linear_attenuation', TXMLLight_linear_attenuation);
  FClassesTree.Add('light_quadratic_attenuation', TXMLLight_quadratic_attenuation);
  FClassesTree.Add('light_spot_cutoff', TXMLLight_spot_cutoff);
  FClassesTree.Add('light_spot_direction', TXMLLight_spot_direction);
  FClassesTree.Add('light_spot_exponent', TXMLLight_spot_exponent);
  FClassesTree.Add('texture1D', TXMLTexture1D);
  FClassesTree.Add('texture2D', TXMLTexture2D);
  FClassesTree.Add('texture3D', TXMLTexture3D);
  FClassesTree.Add('textureCUBE', TXMLTextureCUBE);
  FClassesTree.Add('textureRECT', TXMLTextureRECT);
  FClassesTree.Add('textureDEPTH', TXMLTextureDEPTH);
  FClassesTree.Add('texture1D_enable', TXMLTexture1D_enable);
  FClassesTree.Add('texture2D_enable', TXMLTexture2D_enable);
  FClassesTree.Add('texture3D_enable', TXMLTexture3D_enable);
  FClassesTree.Add('textureCUBE_enable', TXMLTextureCUBE_enable);
  FClassesTree.Add('textureRECT_enable', TXMLTextureRECT_enable);
  FClassesTree.Add('textureDEPTH_enable', TXMLTextureDEPTH_enable);
  FClassesTree.Add('texture_env_color', TXMLTexture_env_color);
  FClassesTree.Add('texture_env_mode', TXMLTexture_env_mode);
  FClassesTree.Add('clip_plane', TXMLClip_plane);
  FClassesTree.Add('clip_plane_enable', TXMLClip_plane_enable);
  FClassesTree.Add('blend_color', TXMLBlend_color);
  FClassesTree.Add('color_mask', TXMLColor_mask);
  FClassesTree.Add('depth_bounds', TXMLDepth_bounds);
  FClassesTree.Add('depth_mask', TXMLDepth_mask);
  FClassesTree.Add('depth_range', TXMLDepth_range);
  FClassesTree.Add('fog_density', TXMLFog_density);
  FClassesTree.Add('fog_start', TXMLFog_start);
  FClassesTree.Add('fog_end', TXMLFog_end);
  FClassesTree.Add('fog_color', TXMLFog_color);
  FClassesTree.Add('light_model_ambient', TXMLLight_model_ambient);
  FClassesTree.Add('lighting_enable', TXMLLighting_enable);
  FClassesTree.Add('line_stipple', TXMLLine_stipple);
  FClassesTree.Add('line_width', TXMLLine_width);
  FClassesTree.Add('material_ambient', TXMLMaterial_ambient);
  FClassesTree.Add('material_diffuse', TXMLMaterial_diffuse);
  FClassesTree.Add('material_emission', TXMLMaterial_emission);
  FClassesTree.Add('material_shininess', TXMLMaterial_shininess);
  FClassesTree.Add('material_specular', TXMLMaterial_specular);
  FClassesTree.Add('model_view_matrix', TXMLModel_view_matrix);
  FClassesTree.Add('point_distance_attenuation', TXMLPoint_distance_attenuation);
  FClassesTree.Add('point_fade_threshold_size', TXMLPoint_fade_threshold_size);
  FClassesTree.Add('point_size', TXMLPoint_size);
  FClassesTree.Add('point_size_min', TXMLPoint_size_min);
  FClassesTree.Add('point_size_max', TXMLPoint_size_max);
  FClassesTree.Add('polygon_offset', TXMLPolygon_offset);
  FClassesTree.Add('projection_matrix', TXMLProjection_matrix);
  FClassesTree.Add('scissor', TXMLScissor);
  FClassesTree.Add('stencil_mask', TXMLStencil_mask);
  FClassesTree.Add('alpha_test_enable', TXMLAlpha_test_enable);
  FClassesTree.Add('blend_enable', TXMLBlend_enable);
  FClassesTree.Add('color_logic_op_enable', TXMLColor_logic_op_enable);
  FClassesTree.Add('color_material_enable', TXMLColor_material_enable);
  FClassesTree.Add('cull_face_enable', TXMLCull_face_enable);
  FClassesTree.Add('depth_bounds_enable', TXMLDepth_bounds_enable);
  FClassesTree.Add('depth_clamp_enable', TXMLDepth_clamp_enable);
  FClassesTree.Add('depth_test_enable', TXMLDepth_test_enable);
  FClassesTree.Add('dither_enable', TXMLDither_enable);
  FClassesTree.Add('fog_enable', TXMLFog_enable);
  FClassesTree.Add('light_model_local_viewer_enable', TXMLLight_model_local_viewer_enable);
  FClassesTree.Add('light_model_two_side_enable', TXMLLight_model_two_side_enable);
  FClassesTree.Add('line_smooth_enable', TXMLLine_smooth_enable);
  FClassesTree.Add('line_stipple_enable', TXMLLine_stipple_enable);
  FClassesTree.Add('logic_op_enable', TXMLLogic_op_enable);
  FClassesTree.Add('multisample_enable', TXMLMultisample_enable);
  FClassesTree.Add('normalize_enable', TXMLNormalize_enable);
  FClassesTree.Add('point_smooth_enable', TXMLPoint_smooth_enable);
  FClassesTree.Add('polygon_offset_fill_enable', TXMLPolygon_offset_fill_enable);
  FClassesTree.Add('polygon_offset_line_enable', TXMLPolygon_offset_line_enable);
  FClassesTree.Add('polygon_offset_point_enable', TXMLPolygon_offset_point_enable);
  FClassesTree.Add('polygon_smooth_enable', TXMLPolygon_smooth_enable);
  FClassesTree.Add('polygon_stipple_enable', TXMLPolygon_stipple_enable);
  FClassesTree.Add('rescale_normal_enable', TXMLRescale_normal_enable);
  FClassesTree.Add('sample_alpha_to_coverage_enable', TXMLSample_alpha_to_coverage_enable);
  FClassesTree.Add('sample_alpha_to_one_enable', TXMLSample_alpha_to_one_enable);
  FClassesTree.Add('sample_coverage_enable', TXMLSample_coverage_enable);
  FClassesTree.Add('scissor_test_enable', TXMLScissor_test_enable);
  FClassesTree.Add('stencil_test_enable', TXMLStencil_test_enable);
  inherited;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Alpha_func: IXMLAlpha_func;
begin
  Result := Nodes['alpha_func'] as IXMLAlpha_func;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Blend_func: IXMLBlend_func;
begin
  Result := Nodes['blend_func'] as IXMLBlend_func;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Blend_func_separate: IXMLBlend_func_separate;
begin
  Result := Nodes['blend_func_separate'] as IXMLBlend_func_separate;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Blend_equation: IXMLBlend_equation;
begin
  Result := Nodes['blend_equation'] as IXMLBlend_equation;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Blend_equation_separate: IXMLBlend_equation_separate;
begin
  Result := Nodes['blend_equation_separate'] as IXMLBlend_equation_separate;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Color_material: IXMLColor_material;
begin
  Result := Nodes['color_material'] as IXMLColor_material;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Cull_face: IXMLCull_face;
begin
  Result := Nodes['cull_face'] as IXMLCull_face;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Depth_func: IXMLDepth_func;
begin
  Result := Nodes['depth_func'] as IXMLDepth_func;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Fog_mode: IXMLFog_mode;
begin
  Result := Nodes['fog_mode'] as IXMLFog_mode;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Fog_coord_src: IXMLFog_coord_src;
begin
  Result := Nodes['fog_coord_src'] as IXMLFog_coord_src;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Front_face: IXMLFront_face;
begin
  Result := Nodes['front_face'] as IXMLFront_face;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_model_color_control: IXMLLight_model_color_control;
begin
  Result := Nodes['light_model_color_control'] as IXMLLight_model_color_control;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Logic_op: IXMLLogic_op;
begin
  Result := Nodes['logic_op'] as IXMLLogic_op;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Polygon_mode: IXMLPolygon_mode;
begin
  Result := Nodes['polygon_mode'] as IXMLPolygon_mode;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Shade_model: IXMLShade_model;
begin
  Result := Nodes['shade_model'] as IXMLShade_model;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Stencil_func: IXMLStencil_func;
begin
  Result := Nodes['stencil_func'] as IXMLStencil_func;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Stencil_op: IXMLStencil_op;
begin
  Result := Nodes['stencil_op'] as IXMLStencil_op;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Stencil_func_separate: IXMLStencil_func_separate;
begin
  Result := Nodes['stencil_func_separate'] as IXMLStencil_func_separate;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Stencil_op_separate: IXMLStencil_op_separate;
begin
  Result := Nodes['stencil_op_separate'] as IXMLStencil_op_separate;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Stencil_mask_separate: IXMLStencil_mask_separate;
begin
  Result := Nodes['stencil_mask_separate'] as IXMLStencil_mask_separate;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_enable: IXMLLight_enable;
begin
  Result := Nodes['light_enable'] as IXMLLight_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_ambient: IXMLLight_ambient;
begin
  Result := Nodes['light_ambient'] as IXMLLight_ambient;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_diffuse: IXMLLight_diffuse;
begin
  Result := Nodes['light_diffuse'] as IXMLLight_diffuse;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_specular: IXMLLight_specular;
begin
  Result := Nodes['light_specular'] as IXMLLight_specular;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_position: IXMLLight_position;
begin
  Result := Nodes['light_position'] as IXMLLight_position;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_constant_attenuation: IXMLLight_constant_attenuation;
begin
  Result := Nodes['light_constant_attenuation'] as IXMLLight_constant_attenuation;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_linear_attenuation: IXMLLight_linear_attenuation;
begin
  Result := Nodes['light_linear_attenuation'] as IXMLLight_linear_attenuation;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_quadratic_attenuation: IXMLLight_quadratic_attenuation;
begin
  Result := Nodes['light_quadratic_attenuation'] as IXMLLight_quadratic_attenuation;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_spot_cutoff: IXMLLight_spot_cutoff;
begin
  Result := Nodes['light_spot_cutoff'] as IXMLLight_spot_cutoff;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_spot_direction: IXMLLight_spot_direction;
begin
  Result := Nodes['light_spot_direction'] as IXMLLight_spot_direction;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_spot_exponent: IXMLLight_spot_exponent;
begin
  Result := Nodes['light_spot_exponent'] as IXMLLight_spot_exponent;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Texture1D: IXMLTexture1D;
begin
  Result := Nodes['texture1D'] as IXMLTexture1D;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Texture2D: IXMLTexture2D;
begin
  Result := Nodes['texture2D'] as IXMLTexture2D;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Texture3D: IXMLTexture3D;
begin
  Result := Nodes['texture3D'] as IXMLTexture3D;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_TextureCUBE: IXMLTextureCUBE;
begin
  Result := Nodes['textureCUBE'] as IXMLTextureCUBE;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_TextureRECT: IXMLTextureRECT;
begin
  Result := Nodes['textureRECT'] as IXMLTextureRECT;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_TextureDEPTH: IXMLTextureDEPTH;
begin
  Result := Nodes['textureDEPTH'] as IXMLTextureDEPTH;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Texture1D_enable: IXMLTexture1D_enable;
begin
  Result := Nodes['texture1D_enable'] as IXMLTexture1D_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Texture2D_enable: IXMLTexture2D_enable;
begin
  Result := Nodes['texture2D_enable'] as IXMLTexture2D_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Texture3D_enable: IXMLTexture3D_enable;
begin
  Result := Nodes['texture3D_enable'] as IXMLTexture3D_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_TextureCUBE_enable: IXMLTextureCUBE_enable;
begin
  Result := Nodes['textureCUBE_enable'] as IXMLTextureCUBE_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_TextureRECT_enable: IXMLTextureRECT_enable;
begin
  Result := Nodes['textureRECT_enable'] as IXMLTextureRECT_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_TextureDEPTH_enable: IXMLTextureDEPTH_enable;
begin
  Result := Nodes['textureDEPTH_enable'] as IXMLTextureDEPTH_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Texture_env_color: IXMLTexture_env_color;
begin
  Result := Nodes['texture_env_color'] as IXMLTexture_env_color;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Texture_env_mode: IXMLTexture_env_mode;
begin
  Result := Nodes['texture_env_mode'] as IXMLTexture_env_mode;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Clip_plane: IXMLClip_plane;
begin
  Result := Nodes['clip_plane'] as IXMLClip_plane;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Clip_plane_enable: IXMLClip_plane_enable;
begin
  Result := Nodes['clip_plane_enable'] as IXMLClip_plane_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Blend_color: IXMLBlend_color;
begin
  Result := Nodes['blend_color'] as IXMLBlend_color;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Color_mask: IXMLColor_mask;
begin
  Result := Nodes['color_mask'] as IXMLColor_mask;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Depth_bounds: IXMLDepth_bounds;
begin
  Result := Nodes['depth_bounds'] as IXMLDepth_bounds;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Depth_mask: IXMLDepth_mask;
begin
  Result := Nodes['depth_mask'] as IXMLDepth_mask;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Depth_range: IXMLDepth_range;
begin
  Result := Nodes['depth_range'] as IXMLDepth_range;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Fog_density: IXMLFog_density;
begin
  Result := Nodes['fog_density'] as IXMLFog_density;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Fog_start: IXMLFog_start;
begin
  Result := Nodes['fog_start'] as IXMLFog_start;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Fog_end: IXMLFog_end;
begin
  Result := Nodes['fog_end'] as IXMLFog_end;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Fog_color: IXMLFog_color;
begin
  Result := Nodes['fog_color'] as IXMLFog_color;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_model_ambient: IXMLLight_model_ambient;
begin
  Result := Nodes['light_model_ambient'] as IXMLLight_model_ambient;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Lighting_enable: IXMLLighting_enable;
begin
  Result := Nodes['lighting_enable'] as IXMLLighting_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Line_stipple: IXMLLine_stipple;
begin
  Result := Nodes['line_stipple'] as IXMLLine_stipple;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Line_width: IXMLLine_width;
begin
  Result := Nodes['line_width'] as IXMLLine_width;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Material_ambient: IXMLMaterial_ambient;
begin
  Result := Nodes['material_ambient'] as IXMLMaterial_ambient;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Material_diffuse: IXMLMaterial_diffuse;
begin
  Result := Nodes['material_diffuse'] as IXMLMaterial_diffuse;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Material_emission: IXMLMaterial_emission;
begin
  Result := Nodes['material_emission'] as IXMLMaterial_emission;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Material_shininess: IXMLMaterial_shininess;
begin
  Result := Nodes['material_shininess'] as IXMLMaterial_shininess;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Material_specular: IXMLMaterial_specular;
begin
  Result := Nodes['material_specular'] as IXMLMaterial_specular;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Model_view_matrix: IXMLModel_view_matrix;
begin
  Result := Nodes['model_view_matrix'] as IXMLModel_view_matrix;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Point_distance_attenuation: IXMLPoint_distance_attenuation;
begin
  Result := Nodes['point_distance_attenuation'] as IXMLPoint_distance_attenuation;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Point_fade_threshold_size: IXMLPoint_fade_threshold_size;
begin
  Result := Nodes['point_fade_threshold_size'] as IXMLPoint_fade_threshold_size;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Point_size: IXMLPoint_size;
begin
  Result := Nodes['point_size'] as IXMLPoint_size;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Point_size_min: IXMLPoint_size_min;
begin
  Result := Nodes['point_size_min'] as IXMLPoint_size_min;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Point_size_max: IXMLPoint_size_max;
begin
  Result := Nodes['point_size_max'] as IXMLPoint_size_max;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Polygon_offset: IXMLPolygon_offset;
begin
  Result := Nodes['polygon_offset'] as IXMLPolygon_offset;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Projection_matrix: IXMLProjection_matrix;
begin
  Result := Nodes['projection_matrix'] as IXMLProjection_matrix;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Scissor: IXMLScissor;
begin
  Result := Nodes['scissor'] as IXMLScissor;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Stencil_mask: IXMLStencil_mask;
begin
  Result := Nodes['stencil_mask'] as IXMLStencil_mask;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Alpha_test_enable: IXMLAlpha_test_enable;
begin
  Result := Nodes['alpha_test_enable'] as IXMLAlpha_test_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Blend_enable: IXMLBlend_enable;
begin
  Result := Nodes['blend_enable'] as IXMLBlend_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Color_logic_op_enable: IXMLColor_logic_op_enable;
begin
  Result := Nodes['color_logic_op_enable'] as IXMLColor_logic_op_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Color_material_enable: IXMLColor_material_enable;
begin
  Result := Nodes['color_material_enable'] as IXMLColor_material_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Cull_face_enable: IXMLCull_face_enable;
begin
  Result := Nodes['cull_face_enable'] as IXMLCull_face_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Depth_bounds_enable: IXMLDepth_bounds_enable;
begin
  Result := Nodes['depth_bounds_enable'] as IXMLDepth_bounds_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Depth_clamp_enable: IXMLDepth_clamp_enable;
begin
  Result := Nodes['depth_clamp_enable'] as IXMLDepth_clamp_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Depth_test_enable: IXMLDepth_test_enable;
begin
  Result := Nodes['depth_test_enable'] as IXMLDepth_test_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Dither_enable: IXMLDither_enable;
begin
  Result := Nodes['dither_enable'] as IXMLDither_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Fog_enable: IXMLFog_enable;
begin
  Result := Nodes['fog_enable'] as IXMLFog_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_model_local_viewer_enable: IXMLLight_model_local_viewer_enable;
begin
  Result := Nodes['light_model_local_viewer_enable'] as IXMLLight_model_local_viewer_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Light_model_two_side_enable: IXMLLight_model_two_side_enable;
begin
  Result := Nodes['light_model_two_side_enable'] as IXMLLight_model_two_side_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Line_smooth_enable: IXMLLine_smooth_enable;
begin
  Result := Nodes['line_smooth_enable'] as IXMLLine_smooth_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Line_stipple_enable: IXMLLine_stipple_enable;
begin
  Result := Nodes['line_stipple_enable'] as IXMLLine_stipple_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Logic_op_enable: IXMLLogic_op_enable;
begin
  Result := Nodes['logic_op_enable'] as IXMLLogic_op_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Multisample_enable: IXMLMultisample_enable;
begin
  Result := Nodes['multisample_enable'] as IXMLMultisample_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Normalize_enable: IXMLNormalize_enable;
begin
  Result := Nodes['normalize_enable'] as IXMLNormalize_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Point_smooth_enable: IXMLPoint_smooth_enable;
begin
  Result := Nodes['point_smooth_enable'] as IXMLPoint_smooth_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable;
begin
  Result := Nodes['polygon_offset_fill_enable'] as IXMLPolygon_offset_fill_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Polygon_offset_line_enable: IXMLPolygon_offset_line_enable;
begin
  Result := Nodes['polygon_offset_line_enable'] as IXMLPolygon_offset_line_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Polygon_offset_point_enable: IXMLPolygon_offset_point_enable;
begin
  Result := Nodes['polygon_offset_point_enable'] as IXMLPolygon_offset_point_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Polygon_smooth_enable: IXMLPolygon_smooth_enable;
begin
  Result := Nodes['polygon_smooth_enable'] as IXMLPolygon_smooth_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Polygon_stipple_enable: IXMLPolygon_stipple_enable;
begin
  Result := Nodes['polygon_stipple_enable'] as IXMLPolygon_stipple_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Rescale_normal_enable: IXMLRescale_normal_enable;
begin
  Result := Nodes['rescale_normal_enable'] as IXMLRescale_normal_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable;
begin
  Result := Nodes['sample_alpha_to_coverage_enable'] as IXMLSample_alpha_to_coverage_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Sample_alpha_to_one_enable: IXMLSample_alpha_to_one_enable;
begin
  Result := Nodes['sample_alpha_to_one_enable'] as IXMLSample_alpha_to_one_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Sample_coverage_enable: IXMLSample_coverage_enable;
begin
  Result := Nodes['sample_coverage_enable'] as IXMLSample_coverage_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Scissor_test_enable: IXMLScissor_test_enable;
begin
  Result := Nodes['scissor_test_enable'] as IXMLScissor_test_enable;
end;

function TXMLProfile_glsl_type_technique_pass_states.Get_Stencil_test_enable: IXMLStencil_test_enable;
begin
  Result := Nodes['stencil_test_enable'] as IXMLStencil_test_enable;
end;

{ TXMLAlpha_func }

procedure TXMLAlpha_func.DoRegisterChildClasses;
begin
  FClassesTree.Add('func', TXMLAlpha_func_func);
  FClassesTree.Add('value', TXMLAlpha_func_value);
  inherited;
end;

function TXMLAlpha_func.Get_Func: IXMLAlpha_func_func;
begin
  Result := Nodes['func'] as IXMLAlpha_func_func;
end;

function TXMLAlpha_func.Get_Value: IXMLAlpha_func_value;
begin
  Result := Nodes['value'] as IXMLAlpha_func_value;
end;

{ TXMLAlpha_func_func }

function TXMLAlpha_func_func.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLAlpha_func_func.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLAlpha_func_func.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLAlpha_func_func.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLAlpha_func_value }

function TXMLAlpha_func_value.Get_Value: Single;
begin
  Result := Params['value'];
end;

procedure TXMLAlpha_func_value.Set_Value(Value: Single);
begin
  Params['value'] := Value;
end;

function TXMLAlpha_func_value.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLAlpha_func_value.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLColor_material }

procedure TXMLColor_material.DoRegisterChildClasses;
begin
  FClassesTree.Add('face', TXMLColor_material_face);
  FClassesTree.Add('mode', TXMLColor_material_mode);
  inherited;
end;

function TXMLColor_material.Get_Face: IXMLColor_material_face;
begin
  Result := Nodes['face'] as IXMLColor_material_face;
end;

function TXMLColor_material.Get_Mode: IXMLColor_material_mode;
begin
  Result := Nodes['mode'] as IXMLColor_material_mode;
end;

{ TXMLColor_material_face }

function TXMLColor_material_face.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLColor_material_face.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLColor_material_face.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLColor_material_face.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLColor_material_mode }

function TXMLColor_material_mode.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLColor_material_mode.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLColor_material_mode.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLColor_material_mode.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLFog_mode }

function TXMLFog_mode.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLFog_mode.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLFog_mode.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLFog_mode.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLFog_coord_src }

function TXMLFog_coord_src.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLFog_coord_src.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLFog_coord_src.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLFog_coord_src.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLLight_model_color_control }

function TXMLLight_model_color_control.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLLight_model_color_control.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLLight_model_color_control.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_model_color_control.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLLogic_op }

function TXMLLogic_op.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLLogic_op.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLLogic_op.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLogic_op.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPolygon_mode }

procedure TXMLPolygon_mode.DoRegisterChildClasses;
begin
  FClassesTree.Add('face', TXMLPolygon_mode_face);
  FClassesTree.Add('mode', TXMLPolygon_mode_mode);
  inherited;
end;

function TXMLPolygon_mode.Get_Face: IXMLPolygon_mode_face;
begin
  Result := Nodes['face'] as IXMLPolygon_mode_face;
end;

function TXMLPolygon_mode.Get_Mode: IXMLPolygon_mode_mode;
begin
  Result := Nodes['mode'] as IXMLPolygon_mode_mode;
end;

{ TXMLPolygon_mode_face }

function TXMLPolygon_mode_face.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLPolygon_mode_face.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLPolygon_mode_face.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPolygon_mode_face.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPolygon_mode_mode }

function TXMLPolygon_mode_mode.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLPolygon_mode_mode.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLPolygon_mode_mode.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPolygon_mode_mode.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLShade_model }

function TXMLShade_model.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLShade_model.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLShade_model.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLShade_model.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLLight_enable }

function TXMLLight_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLLight_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLLight_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLLight_enable.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLLight_enable.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLLight_ambient }

function TXMLLight_ambient.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLLight_ambient.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLLight_ambient.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_ambient.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLLight_ambient.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLLight_ambient.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLLight_diffuse }

function TXMLLight_diffuse.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLLight_diffuse.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLLight_diffuse.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_diffuse.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLLight_diffuse.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLLight_diffuse.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLLight_specular }

function TXMLLight_specular.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLLight_specular.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLLight_specular.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_specular.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLLight_specular.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLLight_specular.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLLight_position }

function TXMLLight_position.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLLight_position.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLLight_position.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_position.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLLight_position.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLLight_position.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLLight_constant_attenuation }

function TXMLLight_constant_attenuation.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLLight_constant_attenuation.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLLight_constant_attenuation.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_constant_attenuation.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLLight_constant_attenuation.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLLight_constant_attenuation.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLLight_linear_attenuation }

function TXMLLight_linear_attenuation.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLLight_linear_attenuation.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLLight_linear_attenuation.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_linear_attenuation.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLLight_linear_attenuation.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLLight_linear_attenuation.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLLight_quadratic_attenuation }

function TXMLLight_quadratic_attenuation.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLLight_quadratic_attenuation.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLLight_quadratic_attenuation.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_quadratic_attenuation.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLLight_quadratic_attenuation.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLLight_quadratic_attenuation.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLLight_spot_cutoff }

function TXMLLight_spot_cutoff.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLLight_spot_cutoff.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLLight_spot_cutoff.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_spot_cutoff.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLLight_spot_cutoff.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLLight_spot_cutoff.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLLight_spot_direction }

function TXMLLight_spot_direction.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLLight_spot_direction.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLLight_spot_direction.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_spot_direction.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLLight_spot_direction.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLLight_spot_direction.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLLight_spot_exponent }

function TXMLLight_spot_exponent.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLLight_spot_exponent.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLLight_spot_exponent.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_spot_exponent.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLLight_spot_exponent.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLLight_spot_exponent.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLTexture1D }

procedure TXMLTexture1D.DoRegisterChildClasses;
begin
  FClassesTree.Add('value', TXMLFx_sampler1D_type);
  inherited;
end;

function TXMLTexture1D.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTexture1D.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

function TXMLTexture1D.Get_Value: IXMLFx_sampler1D_type;
begin
  Result := Nodes['value'] as IXMLFx_sampler1D_type;
end;

function TXMLTexture1D.Get_Param: UnicodeString;
begin
  Result := Nodes['param'].Content;
end;

procedure TXMLTexture1D.Set_Param(Value: UnicodeString);
begin
  Nodes['param'].Content := Value;
end;

{ TXMLTexture2D }

procedure TXMLTexture2D.DoRegisterChildClasses;
begin
  FClassesTree.Add('value', TXMLFx_sampler2D_type);
  inherited;
end;

function TXMLTexture2D.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTexture2D.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

function TXMLTexture2D.Get_Value: IXMLFx_sampler2D_type;
begin
  Result := Nodes['value'] as IXMLFx_sampler2D_type;
end;

function TXMLTexture2D.Get_Param: UnicodeString;
begin
  Result := Nodes['param'].Content;
end;

procedure TXMLTexture2D.Set_Param(Value: UnicodeString);
begin
  Nodes['param'].Content := Value;
end;

{ TXMLTexture3D }

procedure TXMLTexture3D.DoRegisterChildClasses;
begin
  FClassesTree.Add('value', TXMLFx_sampler3D_type);
  inherited;
end;

function TXMLTexture3D.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTexture3D.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

function TXMLTexture3D.Get_Value: IXMLFx_sampler3D_type;
begin
  Result := Nodes['value'] as IXMLFx_sampler3D_type;
end;

function TXMLTexture3D.Get_Param: UnicodeString;
begin
  Result := Nodes['param'].Content;
end;

procedure TXMLTexture3D.Set_Param(Value: UnicodeString);
begin
  Nodes['param'].Content := Value;
end;

{ TXMLTextureCUBE }

procedure TXMLTextureCUBE.DoRegisterChildClasses;
begin
  FClassesTree.Add('value', TXMLFx_samplerCUBE_type);
  inherited;
end;

function TXMLTextureCUBE.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTextureCUBE.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

function TXMLTextureCUBE.Get_Value: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['value'] as IXMLFx_samplerCUBE_type;
end;

function TXMLTextureCUBE.Get_Param: UnicodeString;
begin
  Result := Nodes['param'].Content;
end;

procedure TXMLTextureCUBE.Set_Param(Value: UnicodeString);
begin
  Nodes['param'].Content := Value;
end;

{ TXMLTextureRECT }

procedure TXMLTextureRECT.DoRegisterChildClasses;
begin
  FClassesTree.Add('value', TXMLFx_samplerRECT_type);
  inherited;
end;

function TXMLTextureRECT.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTextureRECT.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

function TXMLTextureRECT.Get_Value: IXMLFx_samplerRECT_type;
begin
  Result := Nodes['value'] as IXMLFx_samplerRECT_type;
end;

function TXMLTextureRECT.Get_Param: UnicodeString;
begin
  Result := Nodes['param'].Content;
end;

procedure TXMLTextureRECT.Set_Param(Value: UnicodeString);
begin
  Nodes['param'].Content := Value;
end;

{ TXMLTextureDEPTH }

procedure TXMLTextureDEPTH.DoRegisterChildClasses;
begin
  FClassesTree.Add('value', TXMLFx_samplerDEPTH_type);
  inherited;
end;

function TXMLTextureDEPTH.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTextureDEPTH.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

function TXMLTextureDEPTH.Get_Value: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['value'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLTextureDEPTH.Get_Param: UnicodeString;
begin
  Result := Nodes['param'].Content;
end;

procedure TXMLTextureDEPTH.Set_Param(Value: UnicodeString);
begin
  Nodes['param'].Content := Value;
end;

{ TXMLTexture1D_enable }

function TXMLTexture1D_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLTexture1D_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLTexture1D_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLTexture1D_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLTexture1D_enable.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTexture1D_enable.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLTexture2D_enable }

function TXMLTexture2D_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLTexture2D_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLTexture2D_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLTexture2D_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLTexture2D_enable.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTexture2D_enable.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLTexture3D_enable }

function TXMLTexture3D_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLTexture3D_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLTexture3D_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLTexture3D_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLTexture3D_enable.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTexture3D_enable.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLTextureCUBE_enable }

function TXMLTextureCUBE_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLTextureCUBE_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLTextureCUBE_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLTextureCUBE_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLTextureCUBE_enable.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTextureCUBE_enable.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLTextureRECT_enable }

function TXMLTextureRECT_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLTextureRECT_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLTextureRECT_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLTextureRECT_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLTextureRECT_enable.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTextureRECT_enable.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLTextureDEPTH_enable }

function TXMLTextureDEPTH_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLTextureDEPTH_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLTextureDEPTH_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLTextureDEPTH_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLTextureDEPTH_enable.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTextureDEPTH_enable.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLTexture_env_color }

function TXMLTexture_env_color.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLTexture_env_color.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLTexture_env_color.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLTexture_env_color.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLTexture_env_color.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTexture_env_color.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLTexture_env_mode }

function TXMLTexture_env_mode.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLTexture_env_mode.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLTexture_env_mode.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLTexture_env_mode.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLTexture_env_mode.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLTexture_env_mode.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLClip_plane }

function TXMLClip_plane.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLClip_plane.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLClip_plane.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLClip_plane.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLClip_plane.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLClip_plane.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLClip_plane_enable }

function TXMLClip_plane_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLClip_plane_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLClip_plane_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLClip_plane_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

function TXMLClip_plane_enable.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLClip_plane_enable.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLDepth_bounds }

function TXMLDepth_bounds.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLDepth_bounds.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLDepth_bounds.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLDepth_bounds.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLFog_density }

function TXMLFog_density.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLFog_density.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLFog_density.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLFog_density.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLFog_start }

function TXMLFog_start.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLFog_start.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLFog_start.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLFog_start.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLFog_end }

function TXMLFog_end.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLFog_end.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLFog_end.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLFog_end.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLFog_color }

function TXMLFog_color.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLFog_color.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLFog_color.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLFog_color.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLLight_model_ambient }

function TXMLLight_model_ambient.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLLight_model_ambient.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLLight_model_ambient.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_model_ambient.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLLighting_enable }

function TXMLLighting_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLLighting_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLLighting_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLighting_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLLine_stipple }

function TXMLLine_stipple.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLLine_stipple.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLLine_stipple.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLine_stipple.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLMaterial_ambient }

function TXMLMaterial_ambient.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLMaterial_ambient.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLMaterial_ambient.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLMaterial_ambient.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLMaterial_diffuse }

function TXMLMaterial_diffuse.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLMaterial_diffuse.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLMaterial_diffuse.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLMaterial_diffuse.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLMaterial_emission }

function TXMLMaterial_emission.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLMaterial_emission.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLMaterial_emission.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLMaterial_emission.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLMaterial_shininess }

function TXMLMaterial_shininess.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLMaterial_shininess.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLMaterial_shininess.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLMaterial_shininess.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLMaterial_specular }

function TXMLMaterial_specular.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLMaterial_specular.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLMaterial_specular.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLMaterial_specular.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLModel_view_matrix }

function TXMLModel_view_matrix.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLModel_view_matrix.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLModel_view_matrix.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLModel_view_matrix.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPoint_distance_attenuation }

function TXMLPoint_distance_attenuation.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLPoint_distance_attenuation.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLPoint_distance_attenuation.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPoint_distance_attenuation.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPoint_fade_threshold_size }

function TXMLPoint_fade_threshold_size.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLPoint_fade_threshold_size.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLPoint_fade_threshold_size.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPoint_fade_threshold_size.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPoint_size_min }

function TXMLPoint_size_min.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLPoint_size_min.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLPoint_size_min.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPoint_size_min.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPoint_size_max }

function TXMLPoint_size_max.Get_Value: Double;
begin
  Result := Params['value'];
end;

procedure TXMLPoint_size_max.Set_Value(Value: Double);
begin
  Params['value'] := Value;
end;

function TXMLPoint_size_max.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPoint_size_max.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLProjection_matrix }

function TXMLProjection_matrix.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLProjection_matrix.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLProjection_matrix.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLProjection_matrix.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLAlpha_test_enable }

function TXMLAlpha_test_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLAlpha_test_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLAlpha_test_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLAlpha_test_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLColor_logic_op_enable }

function TXMLColor_logic_op_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLColor_logic_op_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLColor_logic_op_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLColor_logic_op_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLColor_material_enable }

function TXMLColor_material_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLColor_material_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLColor_material_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLColor_material_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLDepth_bounds_enable }

function TXMLDepth_bounds_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLDepth_bounds_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLDepth_bounds_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLDepth_bounds_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLDepth_clamp_enable }

function TXMLDepth_clamp_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLDepth_clamp_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLDepth_clamp_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLDepth_clamp_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLFog_enable }

function TXMLFog_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLFog_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLFog_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLFog_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLLight_model_local_viewer_enable }

function TXMLLight_model_local_viewer_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLLight_model_local_viewer_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLLight_model_local_viewer_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_model_local_viewer_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLLight_model_two_side_enable }

function TXMLLight_model_two_side_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLLight_model_two_side_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLLight_model_two_side_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLight_model_two_side_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLLine_smooth_enable }

function TXMLLine_smooth_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLLine_smooth_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLLine_smooth_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLine_smooth_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLLine_stipple_enable }

function TXMLLine_stipple_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLLine_stipple_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLLine_stipple_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLine_stipple_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLLogic_op_enable }

function TXMLLogic_op_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLLogic_op_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLLogic_op_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLLogic_op_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLMultisample_enable }

function TXMLMultisample_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLMultisample_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLMultisample_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLMultisample_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLNormalize_enable }

function TXMLNormalize_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLNormalize_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLNormalize_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLNormalize_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPoint_smooth_enable }

function TXMLPoint_smooth_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLPoint_smooth_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLPoint_smooth_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPoint_smooth_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPolygon_offset_line_enable }

function TXMLPolygon_offset_line_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLPolygon_offset_line_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLPolygon_offset_line_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPolygon_offset_line_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPolygon_offset_point_enable }

function TXMLPolygon_offset_point_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLPolygon_offset_point_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLPolygon_offset_point_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPolygon_offset_point_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPolygon_smooth_enable }

function TXMLPolygon_smooth_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLPolygon_smooth_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLPolygon_smooth_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPolygon_smooth_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLPolygon_stipple_enable }

function TXMLPolygon_stipple_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLPolygon_stipple_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLPolygon_stipple_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLPolygon_stipple_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLRescale_normal_enable }

function TXMLRescale_normal_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLRescale_normal_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLRescale_normal_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLRescale_normal_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLSample_alpha_to_one_enable }

function TXMLSample_alpha_to_one_enable.Get_Value: Boolean;
begin
  Result := Params['value'];
end;

procedure TXMLSample_alpha_to_one_enable.Set_Value(Value: Boolean);
begin
  Params['value'] := Value;
end;

function TXMLSample_alpha_to_one_enable.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLSample_alpha_to_one_enable.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLGlsl_program_type }

procedure TXMLGlsl_program_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('shader', TXMLGlsl_shader_type);
  FClassesTree.Add('bind_attribute', TXMLGlsl_program_type_bind_attribute);
  FClassesTree.Add('bind_uniform', TXMLGlsl_program_type_bind_uniform);
  FShader := CreateFilter(TXMLGlsl_shader_typeList, TXMLGlsl_shader_type, IXMLGlsl_shader_type) as IXMLGlsl_shader_typeList;
  FBind_attribute := CreateFilter(TXMLGlsl_program_type_bind_attributeList, TXMLGlsl_program_type_bind_attribute, IXMLGlsl_program_type_bind_attribute) as IXMLGlsl_program_type_bind_attributeList;
  FBind_uniform := CreateFilter(TXMLGlsl_program_type_bind_uniformList, TXMLGlsl_program_type_bind_uniform, IXMLGlsl_program_type_bind_uniform) as IXMLGlsl_program_type_bind_uniformList;
  inherited;
end;

function TXMLGlsl_program_type.Get_Shader: IXMLGlsl_shader_typeList;
begin
  Result := FShader;
end;

function TXMLGlsl_program_type.Get_Bind_attribute: IXMLGlsl_program_type_bind_attributeList;
begin
  Result := FBind_attribute;
end;

function TXMLGlsl_program_type.Get_Bind_uniform: IXMLGlsl_program_type_bind_uniformList;
begin
  Result := FBind_uniform;
end;

{ TXMLGlsl_shader_type }

procedure TXMLGlsl_shader_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('sources', TXMLFx_sources_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLGlsl_shader_type.Get_Stage: UnicodeString;
begin
  Result := Params['stage'];
end;

procedure TXMLGlsl_shader_type.Set_Stage(Value: UnicodeString);
begin
  Params['stage'] := Value;
end;

function TXMLGlsl_shader_type.Get_Sources: IXMLFx_sources_type;
begin
  Result := Nodes['sources'] as IXMLFx_sources_type;
end;

function TXMLGlsl_shader_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLGlsl_shader_typeList }

function TXMLGlsl_shader_typeList.Add: IXMLGlsl_shader_type;
begin
  Result := AddItem(-1) as IXMLGlsl_shader_type;
end;

function TXMLGlsl_shader_typeList.Insert(const Index: Integer): IXMLGlsl_shader_type;
begin
  Result := AddItem(Index) as IXMLGlsl_shader_type;
end;

function TXMLGlsl_shader_typeList.Get_Item(Index: Integer): IXMLGlsl_shader_type;
begin
  Result := Nodes[Index] as IXMLGlsl_shader_type;
end;

{ TXMLGlsl_program_type_bind_attribute }

function TXMLGlsl_program_type_bind_attribute.Get_Symbol: UnicodeString;
begin
  Result := Params['symbol'];
end;

procedure TXMLGlsl_program_type_bind_attribute.Set_Symbol(Value: UnicodeString);
begin
  Params['symbol'] := Value;
end;

function TXMLGlsl_program_type_bind_attribute.Get_Semantic: UnicodeString;
begin
  Result := Nodes['semantic'].Content;
end;

procedure TXMLGlsl_program_type_bind_attribute.Set_Semantic(Value: UnicodeString);
begin
  Nodes['semantic'].Content := Value;
end;

{ TXMLGlsl_program_type_bind_attributeList }

function TXMLGlsl_program_type_bind_attributeList.Add: IXMLGlsl_program_type_bind_attribute;
begin
  Result := AddItem(-1) as IXMLGlsl_program_type_bind_attribute;
end;

function TXMLGlsl_program_type_bind_attributeList.Insert(const Index: Integer): IXMLGlsl_program_type_bind_attribute;
begin
  Result := AddItem(Index) as IXMLGlsl_program_type_bind_attribute;
end;

function TXMLGlsl_program_type_bind_attributeList.Get_Item(Index: Integer): IXMLGlsl_program_type_bind_attribute;
begin
  Result := Nodes[Index] as IXMLGlsl_program_type_bind_attribute;
end;

{ TXMLGlsl_program_type_bind_uniform }

procedure TXMLGlsl_program_type_bind_uniform.DoRegisterChildClasses;
begin
  FClassesTree.Add('param', TXMLGlsl_program_type_bind_uniform_param);
  FClassesTree.Add('sampler1D', TXMLFx_sampler1D_type);
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  FClassesTree.Add('sampler3D', TXMLFx_sampler3D_type);
  FClassesTree.Add('samplerCUBE', TXMLFx_samplerCUBE_type);
  FClassesTree.Add('samplerRECT', TXMLFx_samplerRECT_type);
  FClassesTree.Add('samplerDEPTH', TXMLFx_samplerDEPTH_type);
  FClassesTree.Add('array', TXMLGlsl_array_type);
  inherited;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Symbol: UnicodeString;
begin
  Result := Params['symbol'];
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Symbol(Value: UnicodeString);
begin
  Params['symbol'] := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Param: IXMLGlsl_program_type_bind_uniform_param;
begin
  Result := Nodes['param'] as IXMLGlsl_program_type_bind_uniform_param;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Bool2: UnicodeString;
begin
  Result := Nodes['bool2'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Bool2(Value: UnicodeString);
begin
  Nodes['bool2'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Bool3: UnicodeString;
begin
  Result := Nodes['bool3'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Bool3(Value: UnicodeString);
begin
  Nodes['bool3'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Bool4: UnicodeString;
begin
  Result := Nodes['bool4'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Bool4(Value: UnicodeString);
begin
  Nodes['bool4'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Float3: UnicodeString;
begin
  Result := Nodes['float3'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Float3(Value: UnicodeString);
begin
  Nodes['float3'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Float4: UnicodeString;
begin
  Result := Nodes['float4'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Float4(Value: UnicodeString);
begin
  Nodes['float4'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Float2x2: UnicodeString;
begin
  Result := Nodes['float2x2'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Float2x2(Value: UnicodeString);
begin
  Nodes['float2x2'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Float3x3: UnicodeString;
begin
  Result := Nodes['float3x3'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Float3x3(Value: UnicodeString);
begin
  Nodes['float3x3'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Float4x4: UnicodeString;
begin
  Result := Nodes['float4x4'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Float4x4(Value: UnicodeString);
begin
  Nodes['float4x4'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Int2: UnicodeString;
begin
  Result := Nodes['int2'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Int2(Value: UnicodeString);
begin
  Nodes['int2'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Int3: UnicodeString;
begin
  Result := Nodes['int3'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Int3(Value: UnicodeString);
begin
  Nodes['int3'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Int4: UnicodeString;
begin
  Result := Nodes['int4'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Int4(Value: UnicodeString);
begin
  Nodes['int4'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Sampler1D: IXMLFx_sampler1D_type;
begin
  Result := Nodes['sampler1D'] as IXMLFx_sampler1D_type;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Sampler3D: IXMLFx_sampler3D_type;
begin
  Result := Nodes['sampler3D'] as IXMLFx_sampler3D_type;
end;

function TXMLGlsl_program_type_bind_uniform.Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['samplerCUBE'] as IXMLFx_samplerCUBE_type;
end;

function TXMLGlsl_program_type_bind_uniform.Get_SamplerRECT: IXMLFx_samplerRECT_type;
begin
  Result := Nodes['samplerRECT'] as IXMLFx_samplerRECT_type;
end;

function TXMLGlsl_program_type_bind_uniform.Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['samplerDEPTH'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLGlsl_program_type_bind_uniform.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

function TXMLGlsl_program_type_bind_uniform.Get_Array_: IXMLGlsl_array_type;
begin
  Result := Nodes['array'] as IXMLGlsl_array_type;
end;

{ TXMLGlsl_program_type_bind_uniformList }

function TXMLGlsl_program_type_bind_uniformList.Add: IXMLGlsl_program_type_bind_uniform;
begin
  Result := AddItem(-1) as IXMLGlsl_program_type_bind_uniform;
end;

function TXMLGlsl_program_type_bind_uniformList.Insert(const Index: Integer): IXMLGlsl_program_type_bind_uniform;
begin
  Result := AddItem(Index) as IXMLGlsl_program_type_bind_uniform;
end;

function TXMLGlsl_program_type_bind_uniformList.Get_Item(Index: Integer): IXMLGlsl_program_type_bind_uniform;
begin
  Result := Nodes[Index] as IXMLGlsl_program_type_bind_uniform;
end;

{ TXMLGlsl_program_type_bind_uniform_param }

function TXMLGlsl_program_type_bind_uniform_param.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLGlsl_program_type_bind_uniform_param.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

{ TXMLProfile_glsl_type_technique_pass_evaluate }

procedure TXMLProfile_glsl_type_technique_pass_evaluate.DoRegisterChildClasses;
begin
  FClassesTree.Add('color_target', TXMLFx_colortarget_type);
  FClassesTree.Add('depth_target', TXMLFx_depthtarget_type);
  FClassesTree.Add('stencil_target', TXMLFx_stenciltarget_type);
  FClassesTree.Add('color_clear', TXMLFx_clearcolor_type);
  FClassesTree.Add('depth_clear', TXMLFx_cleardepth_type);
  FClassesTree.Add('stencil_clear', TXMLFx_clearstencil_type);
  FColor_target := CreateFilter(TXMLFx_colortarget_typeList, TXMLFx_colortarget_type, IXMLFx_colortarget_type) as IXMLFx_colortarget_typeList;
  FDepth_target := CreateFilter(TXMLFx_depthtarget_typeList, TXMLFx_depthtarget_type, IXMLFx_depthtarget_type) as IXMLFx_depthtarget_typeList;
  FStencil_target := CreateFilter(TXMLFx_stenciltarget_typeList, TXMLFx_stenciltarget_type, IXMLFx_stenciltarget_type) as IXMLFx_stenciltarget_typeList;
  FColor_clear := CreateFilter(TXMLFx_clearcolor_typeList, TXMLFx_clearcolor_type, IXMLFx_clearcolor_type) as IXMLFx_clearcolor_typeList;
  FDepth_clear := CreateFilter(TXMLFx_cleardepth_typeList, TXMLFx_cleardepth_type, IXMLFx_cleardepth_type) as IXMLFx_cleardepth_typeList;
  FStencil_clear := CreateFilter(TXMLFx_clearstencil_typeList, TXMLFx_clearstencil_type, IXMLFx_clearstencil_type) as IXMLFx_clearstencil_typeList;
  inherited;
end;

function TXMLProfile_glsl_type_technique_pass_evaluate.Get_Color_target: IXMLFx_colortarget_typeList;
begin
  Result := FColor_target;
end;

function TXMLProfile_glsl_type_technique_pass_evaluate.Get_Depth_target: IXMLFx_depthtarget_typeList;
begin
  Result := FDepth_target;
end;

function TXMLProfile_glsl_type_technique_pass_evaluate.Get_Stencil_target: IXMLFx_stenciltarget_typeList;
begin
  Result := FStencil_target;
end;

function TXMLProfile_glsl_type_technique_pass_evaluate.Get_Color_clear: IXMLFx_clearcolor_typeList;
begin
  Result := FColor_clear;
end;

function TXMLProfile_glsl_type_technique_pass_evaluate.Get_Depth_clear: IXMLFx_cleardepth_typeList;
begin
  Result := FDepth_clear;
end;

function TXMLProfile_glsl_type_technique_pass_evaluate.Get_Stencil_clear: IXMLFx_clearstencil_typeList;
begin
  Result := FStencil_clear;
end;

function TXMLProfile_glsl_type_technique_pass_evaluate.Get_Draw: UnicodeString;
begin
  Result := Nodes['draw'].Content;
end;

procedure TXMLProfile_glsl_type_technique_pass_evaluate.Set_Draw(Value: UnicodeString);
begin
  Nodes['draw'].Content := Value;
end;

{ TXMLProfile_cg_type }

procedure TXMLProfile_cg_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('code', TXMLFx_code_type);
  FClassesTree.Add('include', TXMLFx_include_type);
  FClassesTree.Add('newparam', TXMLCg_newparam_type);
  FClassesTree.Add('technique', TXMLProfile_cg_type_technique);
  FClassesTree.Add('extra', TXMLExtra_type);
  FCode := CreateFilter(TXMLFx_code_typeList, TXMLFx_code_type, IXMLFx_code_type) as IXMLFx_code_typeList;
  FInclude := CreateFilter(TXMLFx_include_typeList, TXMLFx_include_type, IXMLFx_include_type) as IXMLFx_include_typeList;
  FNewparam := CreateFilter(TXMLCg_newparam_typeList, TXMLCg_newparam_type, IXMLCg_newparam_type) as IXMLCg_newparam_typeList;
  FTechnique := CreateFilter(TXMLProfile_cg_type_techniqueList, TXMLProfile_cg_type_technique, IXMLProfile_cg_type_technique) as IXMLProfile_cg_type_techniqueList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_cg_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLProfile_cg_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLProfile_cg_type.Get_Platform: UnicodeString;
begin
  Result := Params['platform'];
end;

procedure TXMLProfile_cg_type.Set_Platform(Value: UnicodeString);
begin
  Params['platform'] := Value;
end;

function TXMLProfile_cg_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLProfile_cg_type.Get_Code: IXMLFx_code_typeList;
begin
  Result := FCode;
end;

function TXMLProfile_cg_type.Get_Include: IXMLFx_include_typeList;
begin
  Result := FInclude;
end;

function TXMLProfile_cg_type.Get_Newparam: IXMLCg_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLProfile_cg_type.Get_Technique: IXMLProfile_cg_type_techniqueList;
begin
  Result := FTechnique;
end;

function TXMLProfile_cg_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLCg_newparam_type }

procedure TXMLCg_newparam_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('sampler1D', TXMLFx_sampler1D_type);
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  FClassesTree.Add('sampler3D', TXMLFx_sampler3D_type);
  FClassesTree.Add('samplerRECT', TXMLFx_samplerRECT_type);
  FClassesTree.Add('samplerCUBE', TXMLFx_samplerCUBE_type);
  FClassesTree.Add('samplerDEPTH', TXMLFx_samplerDEPTH_type);
  FClassesTree.Add('array', TXMLCg_array_type);
  FClassesTree.Add('usertype', TXMLCg_user_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  inherited;
end;

function TXMLCg_newparam_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLCg_newparam_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLCg_newparam_type.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLCg_newparam_type.Get_Semantic: UnicodeString;
begin
  Result := Nodes['semantic'].Content;
end;

procedure TXMLCg_newparam_type.Set_Semantic(Value: UnicodeString);
begin
  Nodes['semantic'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Modifier: UnicodeString;
begin
  Result := Nodes['modifier'].Content;
end;

procedure TXMLCg_newparam_type.Set_Modifier(Value: UnicodeString);
begin
  Nodes['modifier'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool2: UnicodeString;
begin
  Result := Nodes['bool2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool2(Value: UnicodeString);
begin
  Nodes['bool2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool3: UnicodeString;
begin
  Result := Nodes['bool3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool3(Value: UnicodeString);
begin
  Nodes['bool3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool4: UnicodeString;
begin
  Result := Nodes['bool4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool4(Value: UnicodeString);
begin
  Nodes['bool4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool2x1: UnicodeString;
begin
  Result := Nodes['bool2x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool2x1(Value: UnicodeString);
begin
  Nodes['bool2x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool2x2: UnicodeString;
begin
  Result := Nodes['bool2x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool2x2(Value: UnicodeString);
begin
  Nodes['bool2x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool2x3: UnicodeString;
begin
  Result := Nodes['bool2x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool2x3(Value: UnicodeString);
begin
  Nodes['bool2x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool2x4: UnicodeString;
begin
  Result := Nodes['bool2x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool2x4(Value: UnicodeString);
begin
  Nodes['bool2x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool3x1: UnicodeString;
begin
  Result := Nodes['bool3x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool3x1(Value: UnicodeString);
begin
  Nodes['bool3x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool3x2: UnicodeString;
begin
  Result := Nodes['bool3x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool3x2(Value: UnicodeString);
begin
  Nodes['bool3x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool3x3: UnicodeString;
begin
  Result := Nodes['bool3x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool3x3(Value: UnicodeString);
begin
  Nodes['bool3x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool3x4: UnicodeString;
begin
  Result := Nodes['bool3x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool3x4(Value: UnicodeString);
begin
  Nodes['bool3x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool4x1: UnicodeString;
begin
  Result := Nodes['bool4x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool4x1(Value: UnicodeString);
begin
  Nodes['bool4x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool4x2: UnicodeString;
begin
  Result := Nodes['bool4x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool4x2(Value: UnicodeString);
begin
  Nodes['bool4x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool4x3: UnicodeString;
begin
  Result := Nodes['bool4x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool4x3(Value: UnicodeString);
begin
  Nodes['bool4x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Bool4x4: UnicodeString;
begin
  Result := Nodes['bool4x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Bool4x4(Value: UnicodeString);
begin
  Nodes['bool4x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float3: UnicodeString;
begin
  Result := Nodes['float3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float3(Value: UnicodeString);
begin
  Nodes['float3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float4: UnicodeString;
begin
  Result := Nodes['float4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float4(Value: UnicodeString);
begin
  Nodes['float4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float2x1: UnicodeString;
begin
  Result := Nodes['float2x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float2x1(Value: UnicodeString);
begin
  Nodes['float2x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float2x2: UnicodeString;
begin
  Result := Nodes['float2x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float2x2(Value: UnicodeString);
begin
  Nodes['float2x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float2x3: UnicodeString;
begin
  Result := Nodes['float2x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float2x3(Value: UnicodeString);
begin
  Nodes['float2x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float2x4: UnicodeString;
begin
  Result := Nodes['float2x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float2x4(Value: UnicodeString);
begin
  Nodes['float2x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float3x1: UnicodeString;
begin
  Result := Nodes['float3x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float3x1(Value: UnicodeString);
begin
  Nodes['float3x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float3x2: UnicodeString;
begin
  Result := Nodes['float3x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float3x2(Value: UnicodeString);
begin
  Nodes['float3x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float3x3: UnicodeString;
begin
  Result := Nodes['float3x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float3x3(Value: UnicodeString);
begin
  Nodes['float3x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float3x4: UnicodeString;
begin
  Result := Nodes['float3x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float3x4(Value: UnicodeString);
begin
  Nodes['float3x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float4x1: UnicodeString;
begin
  Result := Nodes['float4x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float4x1(Value: UnicodeString);
begin
  Nodes['float4x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float4x2: UnicodeString;
begin
  Result := Nodes['float4x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float4x2(Value: UnicodeString);
begin
  Nodes['float4x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float4x3: UnicodeString;
begin
  Result := Nodes['float4x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float4x3(Value: UnicodeString);
begin
  Nodes['float4x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Float4x4: UnicodeString;
begin
  Result := Nodes['float4x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Float4x4(Value: UnicodeString);
begin
  Nodes['float4x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int2: UnicodeString;
begin
  Result := Nodes['int2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int2(Value: UnicodeString);
begin
  Nodes['int2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int3: UnicodeString;
begin
  Result := Nodes['int3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int3(Value: UnicodeString);
begin
  Nodes['int3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int4: UnicodeString;
begin
  Result := Nodes['int4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int4(Value: UnicodeString);
begin
  Nodes['int4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int2x1: UnicodeString;
begin
  Result := Nodes['int2x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int2x1(Value: UnicodeString);
begin
  Nodes['int2x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int2x2: UnicodeString;
begin
  Result := Nodes['int2x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int2x2(Value: UnicodeString);
begin
  Nodes['int2x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int2x3: UnicodeString;
begin
  Result := Nodes['int2x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int2x3(Value: UnicodeString);
begin
  Nodes['int2x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int2x4: UnicodeString;
begin
  Result := Nodes['int2x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int2x4(Value: UnicodeString);
begin
  Nodes['int2x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int3x1: UnicodeString;
begin
  Result := Nodes['int3x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int3x1(Value: UnicodeString);
begin
  Nodes['int3x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int3x2: UnicodeString;
begin
  Result := Nodes['int3x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int3x2(Value: UnicodeString);
begin
  Nodes['int3x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int3x3: UnicodeString;
begin
  Result := Nodes['int3x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int3x3(Value: UnicodeString);
begin
  Nodes['int3x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int3x4: UnicodeString;
begin
  Result := Nodes['int3x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int3x4(Value: UnicodeString);
begin
  Nodes['int3x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int4x1: UnicodeString;
begin
  Result := Nodes['int4x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int4x1(Value: UnicodeString);
begin
  Nodes['int4x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int4x2: UnicodeString;
begin
  Result := Nodes['int4x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int4x2(Value: UnicodeString);
begin
  Nodes['int4x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int4x3: UnicodeString;
begin
  Result := Nodes['int4x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int4x3(Value: UnicodeString);
begin
  Nodes['int4x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Int4x4: UnicodeString;
begin
  Result := Nodes['int4x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Int4x4(Value: UnicodeString);
begin
  Nodes['int4x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half: Double;
begin
  Result := Nodes['half'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half(Value: Double);
begin
  Nodes['half'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half2: UnicodeString;
begin
  Result := Nodes['half2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half2(Value: UnicodeString);
begin
  Nodes['half2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half3: UnicodeString;
begin
  Result := Nodes['half3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half3(Value: UnicodeString);
begin
  Nodes['half3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half4: UnicodeString;
begin
  Result := Nodes['half4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half4(Value: UnicodeString);
begin
  Nodes['half4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half2x1: UnicodeString;
begin
  Result := Nodes['half2x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half2x1(Value: UnicodeString);
begin
  Nodes['half2x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half2x2: UnicodeString;
begin
  Result := Nodes['half2x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half2x2(Value: UnicodeString);
begin
  Nodes['half2x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half2x3: UnicodeString;
begin
  Result := Nodes['half2x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half2x3(Value: UnicodeString);
begin
  Nodes['half2x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half2x4: UnicodeString;
begin
  Result := Nodes['half2x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half2x4(Value: UnicodeString);
begin
  Nodes['half2x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half3x1: UnicodeString;
begin
  Result := Nodes['half3x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half3x1(Value: UnicodeString);
begin
  Nodes['half3x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half3x2: UnicodeString;
begin
  Result := Nodes['half3x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half3x2(Value: UnicodeString);
begin
  Nodes['half3x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half3x3: UnicodeString;
begin
  Result := Nodes['half3x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half3x3(Value: UnicodeString);
begin
  Nodes['half3x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half3x4: UnicodeString;
begin
  Result := Nodes['half3x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half3x4(Value: UnicodeString);
begin
  Nodes['half3x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half4x1: UnicodeString;
begin
  Result := Nodes['half4x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half4x1(Value: UnicodeString);
begin
  Nodes['half4x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half4x2: UnicodeString;
begin
  Result := Nodes['half4x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half4x2(Value: UnicodeString);
begin
  Nodes['half4x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half4x3: UnicodeString;
begin
  Result := Nodes['half4x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half4x3(Value: UnicodeString);
begin
  Nodes['half4x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Half4x4: UnicodeString;
begin
  Result := Nodes['half4x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Half4x4(Value: UnicodeString);
begin
  Nodes['half4x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed: Double;
begin
  Result := Nodes['fixed'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed(Value: Double);
begin
  Nodes['fixed'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed2: UnicodeString;
begin
  Result := Nodes['fixed2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed2(Value: UnicodeString);
begin
  Nodes['fixed2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed3: UnicodeString;
begin
  Result := Nodes['fixed3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed3(Value: UnicodeString);
begin
  Nodes['fixed3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed4: UnicodeString;
begin
  Result := Nodes['fixed4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed4(Value: UnicodeString);
begin
  Nodes['fixed4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed2x1: UnicodeString;
begin
  Result := Nodes['fixed2x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed2x1(Value: UnicodeString);
begin
  Nodes['fixed2x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed2x2: UnicodeString;
begin
  Result := Nodes['fixed2x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed2x2(Value: UnicodeString);
begin
  Nodes['fixed2x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed2x3: UnicodeString;
begin
  Result := Nodes['fixed2x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed2x3(Value: UnicodeString);
begin
  Nodes['fixed2x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed2x4: UnicodeString;
begin
  Result := Nodes['fixed2x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed2x4(Value: UnicodeString);
begin
  Nodes['fixed2x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed3x1: UnicodeString;
begin
  Result := Nodes['fixed3x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed3x1(Value: UnicodeString);
begin
  Nodes['fixed3x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed3x2: UnicodeString;
begin
  Result := Nodes['fixed3x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed3x2(Value: UnicodeString);
begin
  Nodes['fixed3x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed3x3: UnicodeString;
begin
  Result := Nodes['fixed3x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed3x3(Value: UnicodeString);
begin
  Nodes['fixed3x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed3x4: UnicodeString;
begin
  Result := Nodes['fixed3x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed3x4(Value: UnicodeString);
begin
  Nodes['fixed3x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed4x1: UnicodeString;
begin
  Result := Nodes['fixed4x1'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed4x1(Value: UnicodeString);
begin
  Nodes['fixed4x1'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed4x2: UnicodeString;
begin
  Result := Nodes['fixed4x2'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed4x2(Value: UnicodeString);
begin
  Nodes['fixed4x2'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed4x3: UnicodeString;
begin
  Result := Nodes['fixed4x3'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed4x3(Value: UnicodeString);
begin
  Nodes['fixed4x3'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Fixed4x4: UnicodeString;
begin
  Result := Nodes['fixed4x4'].Content;
end;

procedure TXMLCg_newparam_type.Set_Fixed4x4(Value: UnicodeString);
begin
  Nodes['fixed4x4'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Sampler1D: IXMLFx_sampler1D_type;
begin
  Result := Nodes['sampler1D'] as IXMLFx_sampler1D_type;
end;

function TXMLCg_newparam_type.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

function TXMLCg_newparam_type.Get_Sampler3D: IXMLFx_sampler3D_type;
begin
  Result := Nodes['sampler3D'] as IXMLFx_sampler3D_type;
end;

function TXMLCg_newparam_type.Get_SamplerRECT: IXMLFx_samplerRECT_type;
begin
  Result := Nodes['samplerRECT'] as IXMLFx_samplerRECT_type;
end;

function TXMLCg_newparam_type.Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['samplerCUBE'] as IXMLFx_samplerCUBE_type;
end;

function TXMLCg_newparam_type.Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['samplerDEPTH'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLCg_newparam_type.Get_String_: UnicodeString;
begin
  Result := Nodes['string'].Content;
end;

procedure TXMLCg_newparam_type.Set_String_(Value: UnicodeString);
begin
  Nodes['string'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLCg_newparam_type.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

function TXMLCg_newparam_type.Get_Array_: IXMLCg_array_type;
begin
  Result := Nodes['array'] as IXMLCg_array_type;
end;

function TXMLCg_newparam_type.Get_Usertype: IXMLCg_user_type;
begin
  Result := Nodes['usertype'] as IXMLCg_user_type;
end;

{ TXMLCg_newparam_typeList }

function TXMLCg_newparam_typeList.Add: IXMLCg_newparam_type;
begin
  Result := AddItem(-1) as IXMLCg_newparam_type;
end;

function TXMLCg_newparam_typeList.Insert(const Index: Integer): IXMLCg_newparam_type;
begin
  Result := AddItem(Index) as IXMLCg_newparam_type;
end;

function TXMLCg_newparam_typeList.Get_Item(Index: Integer): IXMLCg_newparam_type;
begin
  Result := Nodes[Index] as IXMLCg_newparam_type;
end;

{ TXMLCg_array_type }

procedure TXMLCg_array_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('sampler1D', TXMLFx_sampler1D_type);
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  FClassesTree.Add('sampler3D', TXMLFx_sampler3D_type);
  FClassesTree.Add('samplerRECT', TXMLFx_samplerRECT_type);
  FClassesTree.Add('samplerCUBE', TXMLFx_samplerCUBE_type);
  FClassesTree.Add('samplerDEPTH', TXMLFx_samplerDEPTH_type);
  FClassesTree.Add('array', TXMLCg_array_type);
  FClassesTree.Add('usertype', TXMLCg_user_type);
  inherited;
end;

function TXMLCg_array_type.Get_Length: LongWord;
begin
  Result := Params['length'];
end;

procedure TXMLCg_array_type.Set_Length(Value: LongWord);
begin
  Params['length'] := Value;
end;

function TXMLCg_array_type.Get_Resizable: Boolean;
begin
  Result := Params['resizable'];
end;

procedure TXMLCg_array_type.Set_Resizable(Value: Boolean);
begin
  Params['resizable'] := Value;
end;

function TXMLCg_array_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLCg_array_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool2: UnicodeString;
begin
  Result := Nodes['bool2'].Content;
end;

procedure TXMLCg_array_type.Set_Bool2(Value: UnicodeString);
begin
  Nodes['bool2'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool3: UnicodeString;
begin
  Result := Nodes['bool3'].Content;
end;

procedure TXMLCg_array_type.Set_Bool3(Value: UnicodeString);
begin
  Nodes['bool3'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool4: UnicodeString;
begin
  Result := Nodes['bool4'].Content;
end;

procedure TXMLCg_array_type.Set_Bool4(Value: UnicodeString);
begin
  Nodes['bool4'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool2x1: UnicodeString;
begin
  Result := Nodes['bool2x1'].Content;
end;

procedure TXMLCg_array_type.Set_Bool2x1(Value: UnicodeString);
begin
  Nodes['bool2x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool2x2: UnicodeString;
begin
  Result := Nodes['bool2x2'].Content;
end;

procedure TXMLCg_array_type.Set_Bool2x2(Value: UnicodeString);
begin
  Nodes['bool2x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool2x3: UnicodeString;
begin
  Result := Nodes['bool2x3'].Content;
end;

procedure TXMLCg_array_type.Set_Bool2x3(Value: UnicodeString);
begin
  Nodes['bool2x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool2x4: UnicodeString;
begin
  Result := Nodes['bool2x4'].Content;
end;

procedure TXMLCg_array_type.Set_Bool2x4(Value: UnicodeString);
begin
  Nodes['bool2x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool3x1: UnicodeString;
begin
  Result := Nodes['bool3x1'].Content;
end;

procedure TXMLCg_array_type.Set_Bool3x1(Value: UnicodeString);
begin
  Nodes['bool3x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool3x2: UnicodeString;
begin
  Result := Nodes['bool3x2'].Content;
end;

procedure TXMLCg_array_type.Set_Bool3x2(Value: UnicodeString);
begin
  Nodes['bool3x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool3x3: UnicodeString;
begin
  Result := Nodes['bool3x3'].Content;
end;

procedure TXMLCg_array_type.Set_Bool3x3(Value: UnicodeString);
begin
  Nodes['bool3x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool3x4: UnicodeString;
begin
  Result := Nodes['bool3x4'].Content;
end;

procedure TXMLCg_array_type.Set_Bool3x4(Value: UnicodeString);
begin
  Nodes['bool3x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool4x1: UnicodeString;
begin
  Result := Nodes['bool4x1'].Content;
end;

procedure TXMLCg_array_type.Set_Bool4x1(Value: UnicodeString);
begin
  Nodes['bool4x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool4x2: UnicodeString;
begin
  Result := Nodes['bool4x2'].Content;
end;

procedure TXMLCg_array_type.Set_Bool4x2(Value: UnicodeString);
begin
  Nodes['bool4x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool4x3: UnicodeString;
begin
  Result := Nodes['bool4x3'].Content;
end;

procedure TXMLCg_array_type.Set_Bool4x3(Value: UnicodeString);
begin
  Nodes['bool4x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Bool4x4: UnicodeString;
begin
  Result := Nodes['bool4x4'].Content;
end;

procedure TXMLCg_array_type.Set_Bool4x4(Value: UnicodeString);
begin
  Nodes['bool4x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLCg_array_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLCg_array_type.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLCg_array_type.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLCg_array_type.Get_Float3: UnicodeString;
begin
  Result := Nodes['float3'].Content;
end;

procedure TXMLCg_array_type.Set_Float3(Value: UnicodeString);
begin
  Nodes['float3'].Content := Value;
end;

function TXMLCg_array_type.Get_Float4: UnicodeString;
begin
  Result := Nodes['float4'].Content;
end;

procedure TXMLCg_array_type.Set_Float4(Value: UnicodeString);
begin
  Nodes['float4'].Content := Value;
end;

function TXMLCg_array_type.Get_Float2x1: UnicodeString;
begin
  Result := Nodes['float2x1'].Content;
end;

procedure TXMLCg_array_type.Set_Float2x1(Value: UnicodeString);
begin
  Nodes['float2x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Float2x2: UnicodeString;
begin
  Result := Nodes['float2x2'].Content;
end;

procedure TXMLCg_array_type.Set_Float2x2(Value: UnicodeString);
begin
  Nodes['float2x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Float2x3: UnicodeString;
begin
  Result := Nodes['float2x3'].Content;
end;

procedure TXMLCg_array_type.Set_Float2x3(Value: UnicodeString);
begin
  Nodes['float2x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Float2x4: UnicodeString;
begin
  Result := Nodes['float2x4'].Content;
end;

procedure TXMLCg_array_type.Set_Float2x4(Value: UnicodeString);
begin
  Nodes['float2x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Float3x1: UnicodeString;
begin
  Result := Nodes['float3x1'].Content;
end;

procedure TXMLCg_array_type.Set_Float3x1(Value: UnicodeString);
begin
  Nodes['float3x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Float3x2: UnicodeString;
begin
  Result := Nodes['float3x2'].Content;
end;

procedure TXMLCg_array_type.Set_Float3x2(Value: UnicodeString);
begin
  Nodes['float3x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Float3x3: UnicodeString;
begin
  Result := Nodes['float3x3'].Content;
end;

procedure TXMLCg_array_type.Set_Float3x3(Value: UnicodeString);
begin
  Nodes['float3x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Float3x4: UnicodeString;
begin
  Result := Nodes['float3x4'].Content;
end;

procedure TXMLCg_array_type.Set_Float3x4(Value: UnicodeString);
begin
  Nodes['float3x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Float4x1: UnicodeString;
begin
  Result := Nodes['float4x1'].Content;
end;

procedure TXMLCg_array_type.Set_Float4x1(Value: UnicodeString);
begin
  Nodes['float4x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Float4x2: UnicodeString;
begin
  Result := Nodes['float4x2'].Content;
end;

procedure TXMLCg_array_type.Set_Float4x2(Value: UnicodeString);
begin
  Nodes['float4x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Float4x3: UnicodeString;
begin
  Result := Nodes['float4x3'].Content;
end;

procedure TXMLCg_array_type.Set_Float4x3(Value: UnicodeString);
begin
  Nodes['float4x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Float4x4: UnicodeString;
begin
  Result := Nodes['float4x4'].Content;
end;

procedure TXMLCg_array_type.Set_Float4x4(Value: UnicodeString);
begin
  Nodes['float4x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLCg_array_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLCg_array_type.Get_Int2: UnicodeString;
begin
  Result := Nodes['int2'].Content;
end;

procedure TXMLCg_array_type.Set_Int2(Value: UnicodeString);
begin
  Nodes['int2'].Content := Value;
end;

function TXMLCg_array_type.Get_Int3: UnicodeString;
begin
  Result := Nodes['int3'].Content;
end;

procedure TXMLCg_array_type.Set_Int3(Value: UnicodeString);
begin
  Nodes['int3'].Content := Value;
end;

function TXMLCg_array_type.Get_Int4: UnicodeString;
begin
  Result := Nodes['int4'].Content;
end;

procedure TXMLCg_array_type.Set_Int4(Value: UnicodeString);
begin
  Nodes['int4'].Content := Value;
end;

function TXMLCg_array_type.Get_Int2x1: UnicodeString;
begin
  Result := Nodes['int2x1'].Content;
end;

procedure TXMLCg_array_type.Set_Int2x1(Value: UnicodeString);
begin
  Nodes['int2x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Int2x2: UnicodeString;
begin
  Result := Nodes['int2x2'].Content;
end;

procedure TXMLCg_array_type.Set_Int2x2(Value: UnicodeString);
begin
  Nodes['int2x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Int2x3: UnicodeString;
begin
  Result := Nodes['int2x3'].Content;
end;

procedure TXMLCg_array_type.Set_Int2x3(Value: UnicodeString);
begin
  Nodes['int2x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Int2x4: UnicodeString;
begin
  Result := Nodes['int2x4'].Content;
end;

procedure TXMLCg_array_type.Set_Int2x4(Value: UnicodeString);
begin
  Nodes['int2x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Int3x1: UnicodeString;
begin
  Result := Nodes['int3x1'].Content;
end;

procedure TXMLCg_array_type.Set_Int3x1(Value: UnicodeString);
begin
  Nodes['int3x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Int3x2: UnicodeString;
begin
  Result := Nodes['int3x2'].Content;
end;

procedure TXMLCg_array_type.Set_Int3x2(Value: UnicodeString);
begin
  Nodes['int3x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Int3x3: UnicodeString;
begin
  Result := Nodes['int3x3'].Content;
end;

procedure TXMLCg_array_type.Set_Int3x3(Value: UnicodeString);
begin
  Nodes['int3x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Int3x4: UnicodeString;
begin
  Result := Nodes['int3x4'].Content;
end;

procedure TXMLCg_array_type.Set_Int3x4(Value: UnicodeString);
begin
  Nodes['int3x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Int4x1: UnicodeString;
begin
  Result := Nodes['int4x1'].Content;
end;

procedure TXMLCg_array_type.Set_Int4x1(Value: UnicodeString);
begin
  Nodes['int4x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Int4x2: UnicodeString;
begin
  Result := Nodes['int4x2'].Content;
end;

procedure TXMLCg_array_type.Set_Int4x2(Value: UnicodeString);
begin
  Nodes['int4x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Int4x3: UnicodeString;
begin
  Result := Nodes['int4x3'].Content;
end;

procedure TXMLCg_array_type.Set_Int4x3(Value: UnicodeString);
begin
  Nodes['int4x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Int4x4: UnicodeString;
begin
  Result := Nodes['int4x4'].Content;
end;

procedure TXMLCg_array_type.Set_Int4x4(Value: UnicodeString);
begin
  Nodes['int4x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Half: Double;
begin
  Result := Nodes['half'].Content;
end;

procedure TXMLCg_array_type.Set_Half(Value: Double);
begin
  Nodes['half'].Content := Value;
end;

function TXMLCg_array_type.Get_Half2: UnicodeString;
begin
  Result := Nodes['half2'].Content;
end;

procedure TXMLCg_array_type.Set_Half2(Value: UnicodeString);
begin
  Nodes['half2'].Content := Value;
end;

function TXMLCg_array_type.Get_Half3: UnicodeString;
begin
  Result := Nodes['half3'].Content;
end;

procedure TXMLCg_array_type.Set_Half3(Value: UnicodeString);
begin
  Nodes['half3'].Content := Value;
end;

function TXMLCg_array_type.Get_Half4: UnicodeString;
begin
  Result := Nodes['half4'].Content;
end;

procedure TXMLCg_array_type.Set_Half4(Value: UnicodeString);
begin
  Nodes['half4'].Content := Value;
end;

function TXMLCg_array_type.Get_Half2x1: UnicodeString;
begin
  Result := Nodes['half2x1'].Content;
end;

procedure TXMLCg_array_type.Set_Half2x1(Value: UnicodeString);
begin
  Nodes['half2x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Half2x2: UnicodeString;
begin
  Result := Nodes['half2x2'].Content;
end;

procedure TXMLCg_array_type.Set_Half2x2(Value: UnicodeString);
begin
  Nodes['half2x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Half2x3: UnicodeString;
begin
  Result := Nodes['half2x3'].Content;
end;

procedure TXMLCg_array_type.Set_Half2x3(Value: UnicodeString);
begin
  Nodes['half2x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Half2x4: UnicodeString;
begin
  Result := Nodes['half2x4'].Content;
end;

procedure TXMLCg_array_type.Set_Half2x4(Value: UnicodeString);
begin
  Nodes['half2x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Half3x1: UnicodeString;
begin
  Result := Nodes['half3x1'].Content;
end;

procedure TXMLCg_array_type.Set_Half3x1(Value: UnicodeString);
begin
  Nodes['half3x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Half3x2: UnicodeString;
begin
  Result := Nodes['half3x2'].Content;
end;

procedure TXMLCg_array_type.Set_Half3x2(Value: UnicodeString);
begin
  Nodes['half3x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Half3x3: UnicodeString;
begin
  Result := Nodes['half3x3'].Content;
end;

procedure TXMLCg_array_type.Set_Half3x3(Value: UnicodeString);
begin
  Nodes['half3x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Half3x4: UnicodeString;
begin
  Result := Nodes['half3x4'].Content;
end;

procedure TXMLCg_array_type.Set_Half3x4(Value: UnicodeString);
begin
  Nodes['half3x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Half4x1: UnicodeString;
begin
  Result := Nodes['half4x1'].Content;
end;

procedure TXMLCg_array_type.Set_Half4x1(Value: UnicodeString);
begin
  Nodes['half4x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Half4x2: UnicodeString;
begin
  Result := Nodes['half4x2'].Content;
end;

procedure TXMLCg_array_type.Set_Half4x2(Value: UnicodeString);
begin
  Nodes['half4x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Half4x3: UnicodeString;
begin
  Result := Nodes['half4x3'].Content;
end;

procedure TXMLCg_array_type.Set_Half4x3(Value: UnicodeString);
begin
  Nodes['half4x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Half4x4: UnicodeString;
begin
  Result := Nodes['half4x4'].Content;
end;

procedure TXMLCg_array_type.Set_Half4x4(Value: UnicodeString);
begin
  Nodes['half4x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed: Double;
begin
  Result := Nodes['fixed'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed(Value: Double);
begin
  Nodes['fixed'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed2: UnicodeString;
begin
  Result := Nodes['fixed2'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed2(Value: UnicodeString);
begin
  Nodes['fixed2'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed3: UnicodeString;
begin
  Result := Nodes['fixed3'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed3(Value: UnicodeString);
begin
  Nodes['fixed3'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed4: UnicodeString;
begin
  Result := Nodes['fixed4'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed4(Value: UnicodeString);
begin
  Nodes['fixed4'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed2x1: UnicodeString;
begin
  Result := Nodes['fixed2x1'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed2x1(Value: UnicodeString);
begin
  Nodes['fixed2x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed2x2: UnicodeString;
begin
  Result := Nodes['fixed2x2'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed2x2(Value: UnicodeString);
begin
  Nodes['fixed2x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed2x3: UnicodeString;
begin
  Result := Nodes['fixed2x3'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed2x3(Value: UnicodeString);
begin
  Nodes['fixed2x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed2x4: UnicodeString;
begin
  Result := Nodes['fixed2x4'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed2x4(Value: UnicodeString);
begin
  Nodes['fixed2x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed3x1: UnicodeString;
begin
  Result := Nodes['fixed3x1'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed3x1(Value: UnicodeString);
begin
  Nodes['fixed3x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed3x2: UnicodeString;
begin
  Result := Nodes['fixed3x2'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed3x2(Value: UnicodeString);
begin
  Nodes['fixed3x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed3x3: UnicodeString;
begin
  Result := Nodes['fixed3x3'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed3x3(Value: UnicodeString);
begin
  Nodes['fixed3x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed3x4: UnicodeString;
begin
  Result := Nodes['fixed3x4'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed3x4(Value: UnicodeString);
begin
  Nodes['fixed3x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed4x1: UnicodeString;
begin
  Result := Nodes['fixed4x1'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed4x1(Value: UnicodeString);
begin
  Nodes['fixed4x1'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed4x2: UnicodeString;
begin
  Result := Nodes['fixed4x2'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed4x2(Value: UnicodeString);
begin
  Nodes['fixed4x2'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed4x3: UnicodeString;
begin
  Result := Nodes['fixed4x3'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed4x3(Value: UnicodeString);
begin
  Nodes['fixed4x3'].Content := Value;
end;

function TXMLCg_array_type.Get_Fixed4x4: UnicodeString;
begin
  Result := Nodes['fixed4x4'].Content;
end;

procedure TXMLCg_array_type.Set_Fixed4x4(Value: UnicodeString);
begin
  Nodes['fixed4x4'].Content := Value;
end;

function TXMLCg_array_type.Get_Sampler1D: IXMLFx_sampler1D_type;
begin
  Result := Nodes['sampler1D'] as IXMLFx_sampler1D_type;
end;

function TXMLCg_array_type.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

function TXMLCg_array_type.Get_Sampler3D: IXMLFx_sampler3D_type;
begin
  Result := Nodes['sampler3D'] as IXMLFx_sampler3D_type;
end;

function TXMLCg_array_type.Get_SamplerRECT: IXMLFx_samplerRECT_type;
begin
  Result := Nodes['samplerRECT'] as IXMLFx_samplerRECT_type;
end;

function TXMLCg_array_type.Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['samplerCUBE'] as IXMLFx_samplerCUBE_type;
end;

function TXMLCg_array_type.Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['samplerDEPTH'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLCg_array_type.Get_String_: UnicodeString;
begin
  Result := Nodes['string'].Content;
end;

procedure TXMLCg_array_type.Set_String_(Value: UnicodeString);
begin
  Nodes['string'].Content := Value;
end;

function TXMLCg_array_type.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLCg_array_type.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

function TXMLCg_array_type.Get_Array_: IXMLCg_array_type;
begin
  Result := Nodes['array'] as IXMLCg_array_type;
end;

function TXMLCg_array_type.Get_Usertype: IXMLCg_user_type;
begin
  Result := Nodes['usertype'] as IXMLCg_user_type;
end;

{ TXMLCg_user_type }

procedure TXMLCg_user_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('setparam', TXMLCg_setparam_type);
  Tag := 'setparam';
  ItemInterface := IXMLCg_setparam_type;
  inherited;
end;

function TXMLCg_user_type.Get_Typename: UnicodeString;
begin
  Result := Params['typename'];
end;

procedure TXMLCg_user_type.Set_Typename(Value: UnicodeString);
begin
  Params['typename'] := Value;
end;

function TXMLCg_user_type.Get_Source: UnicodeString;
begin
  Result := Params['source'];
end;

procedure TXMLCg_user_type.Set_Source(Value: UnicodeString);
begin
  Params['source'] := Value;
end;

function TXMLCg_user_type.Get_Setparam(Index: Integer): IXMLCg_setparam_type;
begin
  Result := Nodes[Index] as IXMLCg_setparam_type;
end;

function TXMLCg_user_type.Add: IXMLCg_setparam_type;
begin
  Result := AddItem(-1) as IXMLCg_setparam_type;
end;

function TXMLCg_user_type.Insert(const Index: Integer): IXMLCg_setparam_type;
begin
  Result := AddItem(Index) as IXMLCg_setparam_type;
end;

{ TXMLCg_setparam_type }

procedure TXMLCg_setparam_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('sampler1D', TXMLFx_sampler1D_type);
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  FClassesTree.Add('sampler3D', TXMLFx_sampler3D_type);
  FClassesTree.Add('samplerRECT', TXMLFx_samplerRECT_type);
  FClassesTree.Add('samplerCUBE', TXMLFx_samplerCUBE_type);
  FClassesTree.Add('samplerDEPTH', TXMLFx_samplerDEPTH_type);
  FClassesTree.Add('array', TXMLCg_array_type);
  FClassesTree.Add('usertype', TXMLCg_user_type);
  inherited;
end;

function TXMLCg_setparam_type.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLCg_setparam_type.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

function TXMLCg_setparam_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool2: UnicodeString;
begin
  Result := Nodes['bool2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool2(Value: UnicodeString);
begin
  Nodes['bool2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool3: UnicodeString;
begin
  Result := Nodes['bool3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool3(Value: UnicodeString);
begin
  Nodes['bool3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool4: UnicodeString;
begin
  Result := Nodes['bool4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool4(Value: UnicodeString);
begin
  Nodes['bool4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool2x1: UnicodeString;
begin
  Result := Nodes['bool2x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool2x1(Value: UnicodeString);
begin
  Nodes['bool2x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool2x2: UnicodeString;
begin
  Result := Nodes['bool2x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool2x2(Value: UnicodeString);
begin
  Nodes['bool2x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool2x3: UnicodeString;
begin
  Result := Nodes['bool2x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool2x3(Value: UnicodeString);
begin
  Nodes['bool2x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool2x4: UnicodeString;
begin
  Result := Nodes['bool2x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool2x4(Value: UnicodeString);
begin
  Nodes['bool2x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool3x1: UnicodeString;
begin
  Result := Nodes['bool3x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool3x1(Value: UnicodeString);
begin
  Nodes['bool3x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool3x2: UnicodeString;
begin
  Result := Nodes['bool3x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool3x2(Value: UnicodeString);
begin
  Nodes['bool3x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool3x3: UnicodeString;
begin
  Result := Nodes['bool3x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool3x3(Value: UnicodeString);
begin
  Nodes['bool3x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool3x4: UnicodeString;
begin
  Result := Nodes['bool3x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool3x4(Value: UnicodeString);
begin
  Nodes['bool3x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool4x1: UnicodeString;
begin
  Result := Nodes['bool4x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool4x1(Value: UnicodeString);
begin
  Nodes['bool4x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool4x2: UnicodeString;
begin
  Result := Nodes['bool4x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool4x2(Value: UnicodeString);
begin
  Nodes['bool4x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool4x3: UnicodeString;
begin
  Result := Nodes['bool4x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool4x3(Value: UnicodeString);
begin
  Nodes['bool4x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Bool4x4: UnicodeString;
begin
  Result := Nodes['bool4x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Bool4x4(Value: UnicodeString);
begin
  Nodes['bool4x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float3: UnicodeString;
begin
  Result := Nodes['float3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float3(Value: UnicodeString);
begin
  Nodes['float3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float4: UnicodeString;
begin
  Result := Nodes['float4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float4(Value: UnicodeString);
begin
  Nodes['float4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float2x1: UnicodeString;
begin
  Result := Nodes['float2x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float2x1(Value: UnicodeString);
begin
  Nodes['float2x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float2x2: UnicodeString;
begin
  Result := Nodes['float2x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float2x2(Value: UnicodeString);
begin
  Nodes['float2x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float2x3: UnicodeString;
begin
  Result := Nodes['float2x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float2x3(Value: UnicodeString);
begin
  Nodes['float2x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float2x4: UnicodeString;
begin
  Result := Nodes['float2x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float2x4(Value: UnicodeString);
begin
  Nodes['float2x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float3x1: UnicodeString;
begin
  Result := Nodes['float3x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float3x1(Value: UnicodeString);
begin
  Nodes['float3x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float3x2: UnicodeString;
begin
  Result := Nodes['float3x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float3x2(Value: UnicodeString);
begin
  Nodes['float3x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float3x3: UnicodeString;
begin
  Result := Nodes['float3x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float3x3(Value: UnicodeString);
begin
  Nodes['float3x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float3x4: UnicodeString;
begin
  Result := Nodes['float3x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float3x4(Value: UnicodeString);
begin
  Nodes['float3x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float4x1: UnicodeString;
begin
  Result := Nodes['float4x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float4x1(Value: UnicodeString);
begin
  Nodes['float4x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float4x2: UnicodeString;
begin
  Result := Nodes['float4x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float4x2(Value: UnicodeString);
begin
  Nodes['float4x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float4x3: UnicodeString;
begin
  Result := Nodes['float4x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float4x3(Value: UnicodeString);
begin
  Nodes['float4x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Float4x4: UnicodeString;
begin
  Result := Nodes['float4x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Float4x4(Value: UnicodeString);
begin
  Nodes['float4x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int2: UnicodeString;
begin
  Result := Nodes['int2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int2(Value: UnicodeString);
begin
  Nodes['int2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int3: UnicodeString;
begin
  Result := Nodes['int3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int3(Value: UnicodeString);
begin
  Nodes['int3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int4: UnicodeString;
begin
  Result := Nodes['int4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int4(Value: UnicodeString);
begin
  Nodes['int4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int2x1: UnicodeString;
begin
  Result := Nodes['int2x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int2x1(Value: UnicodeString);
begin
  Nodes['int2x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int2x2: UnicodeString;
begin
  Result := Nodes['int2x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int2x2(Value: UnicodeString);
begin
  Nodes['int2x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int2x3: UnicodeString;
begin
  Result := Nodes['int2x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int2x3(Value: UnicodeString);
begin
  Nodes['int2x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int2x4: UnicodeString;
begin
  Result := Nodes['int2x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int2x4(Value: UnicodeString);
begin
  Nodes['int2x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int3x1: UnicodeString;
begin
  Result := Nodes['int3x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int3x1(Value: UnicodeString);
begin
  Nodes['int3x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int3x2: UnicodeString;
begin
  Result := Nodes['int3x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int3x2(Value: UnicodeString);
begin
  Nodes['int3x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int3x3: UnicodeString;
begin
  Result := Nodes['int3x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int3x3(Value: UnicodeString);
begin
  Nodes['int3x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int3x4: UnicodeString;
begin
  Result := Nodes['int3x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int3x4(Value: UnicodeString);
begin
  Nodes['int3x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int4x1: UnicodeString;
begin
  Result := Nodes['int4x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int4x1(Value: UnicodeString);
begin
  Nodes['int4x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int4x2: UnicodeString;
begin
  Result := Nodes['int4x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int4x2(Value: UnicodeString);
begin
  Nodes['int4x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int4x3: UnicodeString;
begin
  Result := Nodes['int4x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int4x3(Value: UnicodeString);
begin
  Nodes['int4x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Int4x4: UnicodeString;
begin
  Result := Nodes['int4x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Int4x4(Value: UnicodeString);
begin
  Nodes['int4x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half: Double;
begin
  Result := Nodes['half'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half(Value: Double);
begin
  Nodes['half'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half2: UnicodeString;
begin
  Result := Nodes['half2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half2(Value: UnicodeString);
begin
  Nodes['half2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half3: UnicodeString;
begin
  Result := Nodes['half3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half3(Value: UnicodeString);
begin
  Nodes['half3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half4: UnicodeString;
begin
  Result := Nodes['half4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half4(Value: UnicodeString);
begin
  Nodes['half4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half2x1: UnicodeString;
begin
  Result := Nodes['half2x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half2x1(Value: UnicodeString);
begin
  Nodes['half2x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half2x2: UnicodeString;
begin
  Result := Nodes['half2x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half2x2(Value: UnicodeString);
begin
  Nodes['half2x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half2x3: UnicodeString;
begin
  Result := Nodes['half2x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half2x3(Value: UnicodeString);
begin
  Nodes['half2x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half2x4: UnicodeString;
begin
  Result := Nodes['half2x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half2x4(Value: UnicodeString);
begin
  Nodes['half2x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half3x1: UnicodeString;
begin
  Result := Nodes['half3x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half3x1(Value: UnicodeString);
begin
  Nodes['half3x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half3x2: UnicodeString;
begin
  Result := Nodes['half3x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half3x2(Value: UnicodeString);
begin
  Nodes['half3x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half3x3: UnicodeString;
begin
  Result := Nodes['half3x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half3x3(Value: UnicodeString);
begin
  Nodes['half3x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half3x4: UnicodeString;
begin
  Result := Nodes['half3x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half3x4(Value: UnicodeString);
begin
  Nodes['half3x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half4x1: UnicodeString;
begin
  Result := Nodes['half4x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half4x1(Value: UnicodeString);
begin
  Nodes['half4x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half4x2: UnicodeString;
begin
  Result := Nodes['half4x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half4x2(Value: UnicodeString);
begin
  Nodes['half4x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half4x3: UnicodeString;
begin
  Result := Nodes['half4x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half4x3(Value: UnicodeString);
begin
  Nodes['half4x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Half4x4: UnicodeString;
begin
  Result := Nodes['half4x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Half4x4(Value: UnicodeString);
begin
  Nodes['half4x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed: Double;
begin
  Result := Nodes['fixed'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed(Value: Double);
begin
  Nodes['fixed'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed2: UnicodeString;
begin
  Result := Nodes['fixed2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed2(Value: UnicodeString);
begin
  Nodes['fixed2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed3: UnicodeString;
begin
  Result := Nodes['fixed3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed3(Value: UnicodeString);
begin
  Nodes['fixed3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed4: UnicodeString;
begin
  Result := Nodes['fixed4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed4(Value: UnicodeString);
begin
  Nodes['fixed4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed2x1: UnicodeString;
begin
  Result := Nodes['fixed2x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed2x1(Value: UnicodeString);
begin
  Nodes['fixed2x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed2x2: UnicodeString;
begin
  Result := Nodes['fixed2x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed2x2(Value: UnicodeString);
begin
  Nodes['fixed2x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed2x3: UnicodeString;
begin
  Result := Nodes['fixed2x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed2x3(Value: UnicodeString);
begin
  Nodes['fixed2x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed2x4: UnicodeString;
begin
  Result := Nodes['fixed2x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed2x4(Value: UnicodeString);
begin
  Nodes['fixed2x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed3x1: UnicodeString;
begin
  Result := Nodes['fixed3x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed3x1(Value: UnicodeString);
begin
  Nodes['fixed3x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed3x2: UnicodeString;
begin
  Result := Nodes['fixed3x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed3x2(Value: UnicodeString);
begin
  Nodes['fixed3x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed3x3: UnicodeString;
begin
  Result := Nodes['fixed3x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed3x3(Value: UnicodeString);
begin
  Nodes['fixed3x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed3x4: UnicodeString;
begin
  Result := Nodes['fixed3x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed3x4(Value: UnicodeString);
begin
  Nodes['fixed3x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed4x1: UnicodeString;
begin
  Result := Nodes['fixed4x1'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed4x1(Value: UnicodeString);
begin
  Nodes['fixed4x1'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed4x2: UnicodeString;
begin
  Result := Nodes['fixed4x2'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed4x2(Value: UnicodeString);
begin
  Nodes['fixed4x2'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed4x3: UnicodeString;
begin
  Result := Nodes['fixed4x3'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed4x3(Value: UnicodeString);
begin
  Nodes['fixed4x3'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Fixed4x4: UnicodeString;
begin
  Result := Nodes['fixed4x4'].Content;
end;

procedure TXMLCg_setparam_type.Set_Fixed4x4(Value: UnicodeString);
begin
  Nodes['fixed4x4'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Sampler1D: IXMLFx_sampler1D_type;
begin
  Result := Nodes['sampler1D'] as IXMLFx_sampler1D_type;
end;

function TXMLCg_setparam_type.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

function TXMLCg_setparam_type.Get_Sampler3D: IXMLFx_sampler3D_type;
begin
  Result := Nodes['sampler3D'] as IXMLFx_sampler3D_type;
end;

function TXMLCg_setparam_type.Get_SamplerRECT: IXMLFx_samplerRECT_type;
begin
  Result := Nodes['samplerRECT'] as IXMLFx_samplerRECT_type;
end;

function TXMLCg_setparam_type.Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['samplerCUBE'] as IXMLFx_samplerCUBE_type;
end;

function TXMLCg_setparam_type.Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['samplerDEPTH'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLCg_setparam_type.Get_String_: UnicodeString;
begin
  Result := Nodes['string'].Content;
end;

procedure TXMLCg_setparam_type.Set_String_(Value: UnicodeString);
begin
  Nodes['string'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLCg_setparam_type.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

function TXMLCg_setparam_type.Get_Array_: IXMLCg_array_type;
begin
  Result := Nodes['array'] as IXMLCg_array_type;
end;

function TXMLCg_setparam_type.Get_Usertype: IXMLCg_user_type;
begin
  Result := Nodes['usertype'] as IXMLCg_user_type;
end;

{ TXMLProfile_cg_type_technique }

procedure TXMLProfile_cg_type_technique.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('pass', TXMLCg_pass_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  FPass := CreateFilter(TXMLCg_pass_typeList, TXMLCg_pass_type, IXMLCg_pass_type) as IXMLCg_pass_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_cg_type_technique.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLProfile_cg_type_technique.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLProfile_cg_type_technique.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLProfile_cg_type_technique.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLProfile_cg_type_technique.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLProfile_cg_type_technique.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLProfile_cg_type_technique.Get_Pass: IXMLCg_pass_typeList;
begin
  Result := FPass;
end;

function TXMLProfile_cg_type_technique.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLProfile_cg_type_techniqueList }

function TXMLProfile_cg_type_techniqueList.Add: IXMLProfile_cg_type_technique;
begin
  Result := AddItem(-1) as IXMLProfile_cg_type_technique;
end;

function TXMLProfile_cg_type_techniqueList.Insert(const Index: Integer): IXMLProfile_cg_type_technique;
begin
  Result := AddItem(Index) as IXMLProfile_cg_type_technique;
end;

function TXMLProfile_cg_type_techniqueList.Get_Item(Index: Integer): IXMLProfile_cg_type_technique;
begin
  Result := Nodes[Index] as IXMLProfile_cg_type_technique;
end;

{ TXMLCg_pass_type }

procedure TXMLCg_pass_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('states', TXMLCg_pass_type_states);
  FClassesTree.Add('program', TXMLCg_pass_type_program);
  FClassesTree.Add('evaluate', TXMLCg_pass_type_evaluate);
  FClassesTree.Add('extra', TXMLExtra_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLCg_pass_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLCg_pass_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLCg_pass_type.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLCg_pass_type.Get_States: IXMLCg_pass_type_states;
begin
  Result := Nodes['states'] as IXMLCg_pass_type_states;
end;

function TXMLCg_pass_type.Get_Program_: IXMLCg_pass_type_program;
begin
  Result := Nodes['program'] as IXMLCg_pass_type_program;
end;

function TXMLCg_pass_type.Get_Evaluate: IXMLCg_pass_type_evaluate;
begin
  Result := Nodes['evaluate'] as IXMLCg_pass_type_evaluate;
end;

function TXMLCg_pass_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLCg_pass_typeList }

function TXMLCg_pass_typeList.Add: IXMLCg_pass_type;
begin
  Result := AddItem(-1) as IXMLCg_pass_type;
end;

function TXMLCg_pass_typeList.Insert(const Index: Integer): IXMLCg_pass_type;
begin
  Result := AddItem(Index) as IXMLCg_pass_type;
end;

function TXMLCg_pass_typeList.Get_Item(Index: Integer): IXMLCg_pass_type;
begin
  Result := Nodes[Index] as IXMLCg_pass_type;
end;

{ TXMLCg_pass_type_states }

procedure TXMLCg_pass_type_states.DoRegisterChildClasses;
begin
  FClassesTree.Add('alpha_func', TXMLAlpha_func);
  FClassesTree.Add('blend_func', TXMLBlend_func);
  FClassesTree.Add('blend_func_separate', TXMLBlend_func_separate);
  FClassesTree.Add('blend_equation', TXMLBlend_equation);
  FClassesTree.Add('blend_equation_separate', TXMLBlend_equation_separate);
  FClassesTree.Add('color_material', TXMLColor_material);
  FClassesTree.Add('cull_face', TXMLCull_face);
  FClassesTree.Add('depth_func', TXMLDepth_func);
  FClassesTree.Add('fog_mode', TXMLFog_mode);
  FClassesTree.Add('fog_coord_src', TXMLFog_coord_src);
  FClassesTree.Add('front_face', TXMLFront_face);
  FClassesTree.Add('light_model_color_control', TXMLLight_model_color_control);
  FClassesTree.Add('logic_op', TXMLLogic_op);
  FClassesTree.Add('polygon_mode', TXMLPolygon_mode);
  FClassesTree.Add('shade_model', TXMLShade_model);
  FClassesTree.Add('stencil_func', TXMLStencil_func);
  FClassesTree.Add('stencil_op', TXMLStencil_op);
  FClassesTree.Add('stencil_func_separate', TXMLStencil_func_separate);
  FClassesTree.Add('stencil_op_separate', TXMLStencil_op_separate);
  FClassesTree.Add('stencil_mask_separate', TXMLStencil_mask_separate);
  FClassesTree.Add('light_enable', TXMLLight_enable);
  FClassesTree.Add('light_ambient', TXMLLight_ambient);
  FClassesTree.Add('light_diffuse', TXMLLight_diffuse);
  FClassesTree.Add('light_specular', TXMLLight_specular);
  FClassesTree.Add('light_position', TXMLLight_position);
  FClassesTree.Add('light_constant_attenuation', TXMLLight_constant_attenuation);
  FClassesTree.Add('light_linear_attenuation', TXMLLight_linear_attenuation);
  FClassesTree.Add('light_quadratic_attenuation', TXMLLight_quadratic_attenuation);
  FClassesTree.Add('light_spot_cutoff', TXMLLight_spot_cutoff);
  FClassesTree.Add('light_spot_direction', TXMLLight_spot_direction);
  FClassesTree.Add('light_spot_exponent', TXMLLight_spot_exponent);
  FClassesTree.Add('texture1D', TXMLTexture1D);
  FClassesTree.Add('texture2D', TXMLTexture2D);
  FClassesTree.Add('texture3D', TXMLTexture3D);
  FClassesTree.Add('textureCUBE', TXMLTextureCUBE);
  FClassesTree.Add('textureRECT', TXMLTextureRECT);
  FClassesTree.Add('textureDEPTH', TXMLTextureDEPTH);
  FClassesTree.Add('texture1D_enable', TXMLTexture1D_enable);
  FClassesTree.Add('texture2D_enable', TXMLTexture2D_enable);
  FClassesTree.Add('texture3D_enable', TXMLTexture3D_enable);
  FClassesTree.Add('textureCUBE_enable', TXMLTextureCUBE_enable);
  FClassesTree.Add('textureRECT_enable', TXMLTextureRECT_enable);
  FClassesTree.Add('textureDEPTH_enable', TXMLTextureDEPTH_enable);
  FClassesTree.Add('texture_env_color', TXMLTexture_env_color);
  FClassesTree.Add('texture_env_mode', TXMLTexture_env_mode);
  FClassesTree.Add('clip_plane', TXMLClip_plane);
  FClassesTree.Add('clip_plane_enable', TXMLClip_plane_enable);
  FClassesTree.Add('blend_color', TXMLBlend_color);
  FClassesTree.Add('color_mask', TXMLColor_mask);
  FClassesTree.Add('depth_bounds', TXMLDepth_bounds);
  FClassesTree.Add('depth_mask', TXMLDepth_mask);
  FClassesTree.Add('depth_range', TXMLDepth_range);
  FClassesTree.Add('fog_density', TXMLFog_density);
  FClassesTree.Add('fog_start', TXMLFog_start);
  FClassesTree.Add('fog_end', TXMLFog_end);
  FClassesTree.Add('fog_color', TXMLFog_color);
  FClassesTree.Add('light_model_ambient', TXMLLight_model_ambient);
  FClassesTree.Add('lighting_enable', TXMLLighting_enable);
  FClassesTree.Add('line_stipple', TXMLLine_stipple);
  FClassesTree.Add('line_width', TXMLLine_width);
  FClassesTree.Add('material_ambient', TXMLMaterial_ambient);
  FClassesTree.Add('material_diffuse', TXMLMaterial_diffuse);
  FClassesTree.Add('material_emission', TXMLMaterial_emission);
  FClassesTree.Add('material_shininess', TXMLMaterial_shininess);
  FClassesTree.Add('material_specular', TXMLMaterial_specular);
  FClassesTree.Add('model_view_matrix', TXMLModel_view_matrix);
  FClassesTree.Add('point_distance_attenuation', TXMLPoint_distance_attenuation);
  FClassesTree.Add('point_fade_threshold_size', TXMLPoint_fade_threshold_size);
  FClassesTree.Add('point_size', TXMLPoint_size);
  FClassesTree.Add('point_size_min', TXMLPoint_size_min);
  FClassesTree.Add('point_size_max', TXMLPoint_size_max);
  FClassesTree.Add('polygon_offset', TXMLPolygon_offset);
  FClassesTree.Add('projection_matrix', TXMLProjection_matrix);
  FClassesTree.Add('scissor', TXMLScissor);
  FClassesTree.Add('stencil_mask', TXMLStencil_mask);
  FClassesTree.Add('alpha_test_enable', TXMLAlpha_test_enable);
  FClassesTree.Add('blend_enable', TXMLBlend_enable);
  FClassesTree.Add('color_logic_op_enable', TXMLColor_logic_op_enable);
  FClassesTree.Add('color_material_enable', TXMLColor_material_enable);
  FClassesTree.Add('cull_face_enable', TXMLCull_face_enable);
  FClassesTree.Add('depth_bounds_enable', TXMLDepth_bounds_enable);
  FClassesTree.Add('depth_clamp_enable', TXMLDepth_clamp_enable);
  FClassesTree.Add('depth_test_enable', TXMLDepth_test_enable);
  FClassesTree.Add('dither_enable', TXMLDither_enable);
  FClassesTree.Add('fog_enable', TXMLFog_enable);
  FClassesTree.Add('light_model_local_viewer_enable', TXMLLight_model_local_viewer_enable);
  FClassesTree.Add('light_model_two_side_enable', TXMLLight_model_two_side_enable);
  FClassesTree.Add('line_smooth_enable', TXMLLine_smooth_enable);
  FClassesTree.Add('line_stipple_enable', TXMLLine_stipple_enable);
  FClassesTree.Add('logic_op_enable', TXMLLogic_op_enable);
  FClassesTree.Add('multisample_enable', TXMLMultisample_enable);
  FClassesTree.Add('normalize_enable', TXMLNormalize_enable);
  FClassesTree.Add('point_smooth_enable', TXMLPoint_smooth_enable);
  FClassesTree.Add('polygon_offset_fill_enable', TXMLPolygon_offset_fill_enable);
  FClassesTree.Add('polygon_offset_line_enable', TXMLPolygon_offset_line_enable);
  FClassesTree.Add('polygon_offset_point_enable', TXMLPolygon_offset_point_enable);
  FClassesTree.Add('polygon_smooth_enable', TXMLPolygon_smooth_enable);
  FClassesTree.Add('polygon_stipple_enable', TXMLPolygon_stipple_enable);
  FClassesTree.Add('rescale_normal_enable', TXMLRescale_normal_enable);
  FClassesTree.Add('sample_alpha_to_coverage_enable', TXMLSample_alpha_to_coverage_enable);
  FClassesTree.Add('sample_alpha_to_one_enable', TXMLSample_alpha_to_one_enable);
  FClassesTree.Add('sample_coverage_enable', TXMLSample_coverage_enable);
  FClassesTree.Add('scissor_test_enable', TXMLScissor_test_enable);
  FClassesTree.Add('stencil_test_enable', TXMLStencil_test_enable);
  inherited;
end;

function TXMLCg_pass_type_states.Get_Alpha_func: IXMLAlpha_func;
begin
  Result := Nodes['alpha_func'] as IXMLAlpha_func;
end;

function TXMLCg_pass_type_states.Get_Blend_func: IXMLBlend_func;
begin
  Result := Nodes['blend_func'] as IXMLBlend_func;
end;

function TXMLCg_pass_type_states.Get_Blend_func_separate: IXMLBlend_func_separate;
begin
  Result := Nodes['blend_func_separate'] as IXMLBlend_func_separate;
end;

function TXMLCg_pass_type_states.Get_Blend_equation: IXMLBlend_equation;
begin
  Result := Nodes['blend_equation'] as IXMLBlend_equation;
end;

function TXMLCg_pass_type_states.Get_Blend_equation_separate: IXMLBlend_equation_separate;
begin
  Result := Nodes['blend_equation_separate'] as IXMLBlend_equation_separate;
end;

function TXMLCg_pass_type_states.Get_Color_material: IXMLColor_material;
begin
  Result := Nodes['color_material'] as IXMLColor_material;
end;

function TXMLCg_pass_type_states.Get_Cull_face: IXMLCull_face;
begin
  Result := Nodes['cull_face'] as IXMLCull_face;
end;

function TXMLCg_pass_type_states.Get_Depth_func: IXMLDepth_func;
begin
  Result := Nodes['depth_func'] as IXMLDepth_func;
end;

function TXMLCg_pass_type_states.Get_Fog_mode: IXMLFog_mode;
begin
  Result := Nodes['fog_mode'] as IXMLFog_mode;
end;

function TXMLCg_pass_type_states.Get_Fog_coord_src: IXMLFog_coord_src;
begin
  Result := Nodes['fog_coord_src'] as IXMLFog_coord_src;
end;

function TXMLCg_pass_type_states.Get_Front_face: IXMLFront_face;
begin
  Result := Nodes['front_face'] as IXMLFront_face;
end;

function TXMLCg_pass_type_states.Get_Light_model_color_control: IXMLLight_model_color_control;
begin
  Result := Nodes['light_model_color_control'] as IXMLLight_model_color_control;
end;

function TXMLCg_pass_type_states.Get_Logic_op: IXMLLogic_op;
begin
  Result := Nodes['logic_op'] as IXMLLogic_op;
end;

function TXMLCg_pass_type_states.Get_Polygon_mode: IXMLPolygon_mode;
begin
  Result := Nodes['polygon_mode'] as IXMLPolygon_mode;
end;

function TXMLCg_pass_type_states.Get_Shade_model: IXMLShade_model;
begin
  Result := Nodes['shade_model'] as IXMLShade_model;
end;

function TXMLCg_pass_type_states.Get_Stencil_func: IXMLStencil_func;
begin
  Result := Nodes['stencil_func'] as IXMLStencil_func;
end;

function TXMLCg_pass_type_states.Get_Stencil_op: IXMLStencil_op;
begin
  Result := Nodes['stencil_op'] as IXMLStencil_op;
end;

function TXMLCg_pass_type_states.Get_Stencil_func_separate: IXMLStencil_func_separate;
begin
  Result := Nodes['stencil_func_separate'] as IXMLStencil_func_separate;
end;

function TXMLCg_pass_type_states.Get_Stencil_op_separate: IXMLStencil_op_separate;
begin
  Result := Nodes['stencil_op_separate'] as IXMLStencil_op_separate;
end;

function TXMLCg_pass_type_states.Get_Stencil_mask_separate: IXMLStencil_mask_separate;
begin
  Result := Nodes['stencil_mask_separate'] as IXMLStencil_mask_separate;
end;

function TXMLCg_pass_type_states.Get_Light_enable: IXMLLight_enable;
begin
  Result := Nodes['light_enable'] as IXMLLight_enable;
end;

function TXMLCg_pass_type_states.Get_Light_ambient: IXMLLight_ambient;
begin
  Result := Nodes['light_ambient'] as IXMLLight_ambient;
end;

function TXMLCg_pass_type_states.Get_Light_diffuse: IXMLLight_diffuse;
begin
  Result := Nodes['light_diffuse'] as IXMLLight_diffuse;
end;

function TXMLCg_pass_type_states.Get_Light_specular: IXMLLight_specular;
begin
  Result := Nodes['light_specular'] as IXMLLight_specular;
end;

function TXMLCg_pass_type_states.Get_Light_position: IXMLLight_position;
begin
  Result := Nodes['light_position'] as IXMLLight_position;
end;

function TXMLCg_pass_type_states.Get_Light_constant_attenuation: IXMLLight_constant_attenuation;
begin
  Result := Nodes['light_constant_attenuation'] as IXMLLight_constant_attenuation;
end;

function TXMLCg_pass_type_states.Get_Light_linear_attenuation: IXMLLight_linear_attenuation;
begin
  Result := Nodes['light_linear_attenuation'] as IXMLLight_linear_attenuation;
end;

function TXMLCg_pass_type_states.Get_Light_quadratic_attenuation: IXMLLight_quadratic_attenuation;
begin
  Result := Nodes['light_quadratic_attenuation'] as IXMLLight_quadratic_attenuation;
end;

function TXMLCg_pass_type_states.Get_Light_spot_cutoff: IXMLLight_spot_cutoff;
begin
  Result := Nodes['light_spot_cutoff'] as IXMLLight_spot_cutoff;
end;

function TXMLCg_pass_type_states.Get_Light_spot_direction: IXMLLight_spot_direction;
begin
  Result := Nodes['light_spot_direction'] as IXMLLight_spot_direction;
end;

function TXMLCg_pass_type_states.Get_Light_spot_exponent: IXMLLight_spot_exponent;
begin
  Result := Nodes['light_spot_exponent'] as IXMLLight_spot_exponent;
end;

function TXMLCg_pass_type_states.Get_Texture1D: IXMLTexture1D;
begin
  Result := Nodes['texture1D'] as IXMLTexture1D;
end;

function TXMLCg_pass_type_states.Get_Texture2D: IXMLTexture2D;
begin
  Result := Nodes['texture2D'] as IXMLTexture2D;
end;

function TXMLCg_pass_type_states.Get_Texture3D: IXMLTexture3D;
begin
  Result := Nodes['texture3D'] as IXMLTexture3D;
end;

function TXMLCg_pass_type_states.Get_TextureCUBE: IXMLTextureCUBE;
begin
  Result := Nodes['textureCUBE'] as IXMLTextureCUBE;
end;

function TXMLCg_pass_type_states.Get_TextureRECT: IXMLTextureRECT;
begin
  Result := Nodes['textureRECT'] as IXMLTextureRECT;
end;

function TXMLCg_pass_type_states.Get_TextureDEPTH: IXMLTextureDEPTH;
begin
  Result := Nodes['textureDEPTH'] as IXMLTextureDEPTH;
end;

function TXMLCg_pass_type_states.Get_Texture1D_enable: IXMLTexture1D_enable;
begin
  Result := Nodes['texture1D_enable'] as IXMLTexture1D_enable;
end;

function TXMLCg_pass_type_states.Get_Texture2D_enable: IXMLTexture2D_enable;
begin
  Result := Nodes['texture2D_enable'] as IXMLTexture2D_enable;
end;

function TXMLCg_pass_type_states.Get_Texture3D_enable: IXMLTexture3D_enable;
begin
  Result := Nodes['texture3D_enable'] as IXMLTexture3D_enable;
end;

function TXMLCg_pass_type_states.Get_TextureCUBE_enable: IXMLTextureCUBE_enable;
begin
  Result := Nodes['textureCUBE_enable'] as IXMLTextureCUBE_enable;
end;

function TXMLCg_pass_type_states.Get_TextureRECT_enable: IXMLTextureRECT_enable;
begin
  Result := Nodes['textureRECT_enable'] as IXMLTextureRECT_enable;
end;

function TXMLCg_pass_type_states.Get_TextureDEPTH_enable: IXMLTextureDEPTH_enable;
begin
  Result := Nodes['textureDEPTH_enable'] as IXMLTextureDEPTH_enable;
end;

function TXMLCg_pass_type_states.Get_Texture_env_color: IXMLTexture_env_color;
begin
  Result := Nodes['texture_env_color'] as IXMLTexture_env_color;
end;

function TXMLCg_pass_type_states.Get_Texture_env_mode: IXMLTexture_env_mode;
begin
  Result := Nodes['texture_env_mode'] as IXMLTexture_env_mode;
end;

function TXMLCg_pass_type_states.Get_Clip_plane: IXMLClip_plane;
begin
  Result := Nodes['clip_plane'] as IXMLClip_plane;
end;

function TXMLCg_pass_type_states.Get_Clip_plane_enable: IXMLClip_plane_enable;
begin
  Result := Nodes['clip_plane_enable'] as IXMLClip_plane_enable;
end;

function TXMLCg_pass_type_states.Get_Blend_color: IXMLBlend_color;
begin
  Result := Nodes['blend_color'] as IXMLBlend_color;
end;

function TXMLCg_pass_type_states.Get_Color_mask: IXMLColor_mask;
begin
  Result := Nodes['color_mask'] as IXMLColor_mask;
end;

function TXMLCg_pass_type_states.Get_Depth_bounds: IXMLDepth_bounds;
begin
  Result := Nodes['depth_bounds'] as IXMLDepth_bounds;
end;

function TXMLCg_pass_type_states.Get_Depth_mask: IXMLDepth_mask;
begin
  Result := Nodes['depth_mask'] as IXMLDepth_mask;
end;

function TXMLCg_pass_type_states.Get_Depth_range: IXMLDepth_range;
begin
  Result := Nodes['depth_range'] as IXMLDepth_range;
end;

function TXMLCg_pass_type_states.Get_Fog_density: IXMLFog_density;
begin
  Result := Nodes['fog_density'] as IXMLFog_density;
end;

function TXMLCg_pass_type_states.Get_Fog_start: IXMLFog_start;
begin
  Result := Nodes['fog_start'] as IXMLFog_start;
end;

function TXMLCg_pass_type_states.Get_Fog_end: IXMLFog_end;
begin
  Result := Nodes['fog_end'] as IXMLFog_end;
end;

function TXMLCg_pass_type_states.Get_Fog_color: IXMLFog_color;
begin
  Result := Nodes['fog_color'] as IXMLFog_color;
end;

function TXMLCg_pass_type_states.Get_Light_model_ambient: IXMLLight_model_ambient;
begin
  Result := Nodes['light_model_ambient'] as IXMLLight_model_ambient;
end;

function TXMLCg_pass_type_states.Get_Lighting_enable: IXMLLighting_enable;
begin
  Result := Nodes['lighting_enable'] as IXMLLighting_enable;
end;

function TXMLCg_pass_type_states.Get_Line_stipple: IXMLLine_stipple;
begin
  Result := Nodes['line_stipple'] as IXMLLine_stipple;
end;

function TXMLCg_pass_type_states.Get_Line_width: IXMLLine_width;
begin
  Result := Nodes['line_width'] as IXMLLine_width;
end;

function TXMLCg_pass_type_states.Get_Material_ambient: IXMLMaterial_ambient;
begin
  Result := Nodes['material_ambient'] as IXMLMaterial_ambient;
end;

function TXMLCg_pass_type_states.Get_Material_diffuse: IXMLMaterial_diffuse;
begin
  Result := Nodes['material_diffuse'] as IXMLMaterial_diffuse;
end;

function TXMLCg_pass_type_states.Get_Material_emission: IXMLMaterial_emission;
begin
  Result := Nodes['material_emission'] as IXMLMaterial_emission;
end;

function TXMLCg_pass_type_states.Get_Material_shininess: IXMLMaterial_shininess;
begin
  Result := Nodes['material_shininess'] as IXMLMaterial_shininess;
end;

function TXMLCg_pass_type_states.Get_Material_specular: IXMLMaterial_specular;
begin
  Result := Nodes['material_specular'] as IXMLMaterial_specular;
end;

function TXMLCg_pass_type_states.Get_Model_view_matrix: IXMLModel_view_matrix;
begin
  Result := Nodes['model_view_matrix'] as IXMLModel_view_matrix;
end;

function TXMLCg_pass_type_states.Get_Point_distance_attenuation: IXMLPoint_distance_attenuation;
begin
  Result := Nodes['point_distance_attenuation'] as IXMLPoint_distance_attenuation;
end;

function TXMLCg_pass_type_states.Get_Point_fade_threshold_size: IXMLPoint_fade_threshold_size;
begin
  Result := Nodes['point_fade_threshold_size'] as IXMLPoint_fade_threshold_size;
end;

function TXMLCg_pass_type_states.Get_Point_size: IXMLPoint_size;
begin
  Result := Nodes['point_size'] as IXMLPoint_size;
end;

function TXMLCg_pass_type_states.Get_Point_size_min: IXMLPoint_size_min;
begin
  Result := Nodes['point_size_min'] as IXMLPoint_size_min;
end;

function TXMLCg_pass_type_states.Get_Point_size_max: IXMLPoint_size_max;
begin
  Result := Nodes['point_size_max'] as IXMLPoint_size_max;
end;

function TXMLCg_pass_type_states.Get_Polygon_offset: IXMLPolygon_offset;
begin
  Result := Nodes['polygon_offset'] as IXMLPolygon_offset;
end;

function TXMLCg_pass_type_states.Get_Projection_matrix: IXMLProjection_matrix;
begin
  Result := Nodes['projection_matrix'] as IXMLProjection_matrix;
end;

function TXMLCg_pass_type_states.Get_Scissor: IXMLScissor;
begin
  Result := Nodes['scissor'] as IXMLScissor;
end;

function TXMLCg_pass_type_states.Get_Stencil_mask: IXMLStencil_mask;
begin
  Result := Nodes['stencil_mask'] as IXMLStencil_mask;
end;

function TXMLCg_pass_type_states.Get_Alpha_test_enable: IXMLAlpha_test_enable;
begin
  Result := Nodes['alpha_test_enable'] as IXMLAlpha_test_enable;
end;

function TXMLCg_pass_type_states.Get_Blend_enable: IXMLBlend_enable;
begin
  Result := Nodes['blend_enable'] as IXMLBlend_enable;
end;

function TXMLCg_pass_type_states.Get_Color_logic_op_enable: IXMLColor_logic_op_enable;
begin
  Result := Nodes['color_logic_op_enable'] as IXMLColor_logic_op_enable;
end;

function TXMLCg_pass_type_states.Get_Color_material_enable: IXMLColor_material_enable;
begin
  Result := Nodes['color_material_enable'] as IXMLColor_material_enable;
end;

function TXMLCg_pass_type_states.Get_Cull_face_enable: IXMLCull_face_enable;
begin
  Result := Nodes['cull_face_enable'] as IXMLCull_face_enable;
end;

function TXMLCg_pass_type_states.Get_Depth_bounds_enable: IXMLDepth_bounds_enable;
begin
  Result := Nodes['depth_bounds_enable'] as IXMLDepth_bounds_enable;
end;

function TXMLCg_pass_type_states.Get_Depth_clamp_enable: IXMLDepth_clamp_enable;
begin
  Result := Nodes['depth_clamp_enable'] as IXMLDepth_clamp_enable;
end;

function TXMLCg_pass_type_states.Get_Depth_test_enable: IXMLDepth_test_enable;
begin
  Result := Nodes['depth_test_enable'] as IXMLDepth_test_enable;
end;

function TXMLCg_pass_type_states.Get_Dither_enable: IXMLDither_enable;
begin
  Result := Nodes['dither_enable'] as IXMLDither_enable;
end;

function TXMLCg_pass_type_states.Get_Fog_enable: IXMLFog_enable;
begin
  Result := Nodes['fog_enable'] as IXMLFog_enable;
end;

function TXMLCg_pass_type_states.Get_Light_model_local_viewer_enable: IXMLLight_model_local_viewer_enable;
begin
  Result := Nodes['light_model_local_viewer_enable'] as IXMLLight_model_local_viewer_enable;
end;

function TXMLCg_pass_type_states.Get_Light_model_two_side_enable: IXMLLight_model_two_side_enable;
begin
  Result := Nodes['light_model_two_side_enable'] as IXMLLight_model_two_side_enable;
end;

function TXMLCg_pass_type_states.Get_Line_smooth_enable: IXMLLine_smooth_enable;
begin
  Result := Nodes['line_smooth_enable'] as IXMLLine_smooth_enable;
end;

function TXMLCg_pass_type_states.Get_Line_stipple_enable: IXMLLine_stipple_enable;
begin
  Result := Nodes['line_stipple_enable'] as IXMLLine_stipple_enable;
end;

function TXMLCg_pass_type_states.Get_Logic_op_enable: IXMLLogic_op_enable;
begin
  Result := Nodes['logic_op_enable'] as IXMLLogic_op_enable;
end;

function TXMLCg_pass_type_states.Get_Multisample_enable: IXMLMultisample_enable;
begin
  Result := Nodes['multisample_enable'] as IXMLMultisample_enable;
end;

function TXMLCg_pass_type_states.Get_Normalize_enable: IXMLNormalize_enable;
begin
  Result := Nodes['normalize_enable'] as IXMLNormalize_enable;
end;

function TXMLCg_pass_type_states.Get_Point_smooth_enable: IXMLPoint_smooth_enable;
begin
  Result := Nodes['point_smooth_enable'] as IXMLPoint_smooth_enable;
end;

function TXMLCg_pass_type_states.Get_Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable;
begin
  Result := Nodes['polygon_offset_fill_enable'] as IXMLPolygon_offset_fill_enable;
end;

function TXMLCg_pass_type_states.Get_Polygon_offset_line_enable: IXMLPolygon_offset_line_enable;
begin
  Result := Nodes['polygon_offset_line_enable'] as IXMLPolygon_offset_line_enable;
end;

function TXMLCg_pass_type_states.Get_Polygon_offset_point_enable: IXMLPolygon_offset_point_enable;
begin
  Result := Nodes['polygon_offset_point_enable'] as IXMLPolygon_offset_point_enable;
end;

function TXMLCg_pass_type_states.Get_Polygon_smooth_enable: IXMLPolygon_smooth_enable;
begin
  Result := Nodes['polygon_smooth_enable'] as IXMLPolygon_smooth_enable;
end;

function TXMLCg_pass_type_states.Get_Polygon_stipple_enable: IXMLPolygon_stipple_enable;
begin
  Result := Nodes['polygon_stipple_enable'] as IXMLPolygon_stipple_enable;
end;

function TXMLCg_pass_type_states.Get_Rescale_normal_enable: IXMLRescale_normal_enable;
begin
  Result := Nodes['rescale_normal_enable'] as IXMLRescale_normal_enable;
end;

function TXMLCg_pass_type_states.Get_Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable;
begin
  Result := Nodes['sample_alpha_to_coverage_enable'] as IXMLSample_alpha_to_coverage_enable;
end;

function TXMLCg_pass_type_states.Get_Sample_alpha_to_one_enable: IXMLSample_alpha_to_one_enable;
begin
  Result := Nodes['sample_alpha_to_one_enable'] as IXMLSample_alpha_to_one_enable;
end;

function TXMLCg_pass_type_states.Get_Sample_coverage_enable: IXMLSample_coverage_enable;
begin
  Result := Nodes['sample_coverage_enable'] as IXMLSample_coverage_enable;
end;

function TXMLCg_pass_type_states.Get_Scissor_test_enable: IXMLScissor_test_enable;
begin
  Result := Nodes['scissor_test_enable'] as IXMLScissor_test_enable;
end;

function TXMLCg_pass_type_states.Get_Stencil_test_enable: IXMLStencil_test_enable;
begin
  Result := Nodes['stencil_test_enable'] as IXMLStencil_test_enable;
end;

{ TXMLCg_pass_type_program }

procedure TXMLCg_pass_type_program.DoRegisterChildClasses;
begin
  FClassesTree.Add('shader', TXMLCg_pass_type_program_shader);
  Tag := 'shader';
  ItemInterface := IXMLCg_pass_type_program_shader;
  inherited;
end;

function TXMLCg_pass_type_program.Get_Shader(Index: Integer): IXMLCg_pass_type_program_shader;
begin
  Result := Nodes[Index] as IXMLCg_pass_type_program_shader;
end;

function TXMLCg_pass_type_program.Add: IXMLCg_pass_type_program_shader;
begin
  Result := AddItem(-1) as IXMLCg_pass_type_program_shader;
end;

function TXMLCg_pass_type_program.Insert(const Index: Integer): IXMLCg_pass_type_program_shader;
begin
  Result := AddItem(Index) as IXMLCg_pass_type_program_shader;
end;

{ TXMLCg_pass_type_program_shader }

procedure TXMLCg_pass_type_program_shader.DoRegisterChildClasses;
begin
  FClassesTree.Add('sources', TXMLCg_pass_type_program_shader_sources);
  FClassesTree.Add('compiler', TXMLFx_target_type);
  FClassesTree.Add('bind_uniform', TXMLCg_pass_type_program_shader_bind_uniform);
  FCompiler := CreateFilter(TXMLFx_target_typeList, TXMLFx_target_type, IXMLFx_target_type) as IXMLFx_target_typeList;
  FBind_uniform := CreateFilter(TXMLCg_pass_type_program_shader_bind_uniformList, TXMLCg_pass_type_program_shader_bind_uniform, IXMLCg_pass_type_program_shader_bind_uniform) as IXMLCg_pass_type_program_shader_bind_uniformList;
  inherited;
end;

function TXMLCg_pass_type_program_shader.Get_Stage: UnicodeString;
begin
  Result := Params['stage'];
end;

procedure TXMLCg_pass_type_program_shader.Set_Stage(Value: UnicodeString);
begin
  Params['stage'] := Value;
end;

function TXMLCg_pass_type_program_shader.Get_Sources: IXMLCg_pass_type_program_shader_sources;
begin
  Result := Nodes['sources'] as IXMLCg_pass_type_program_shader_sources;
end;

function TXMLCg_pass_type_program_shader.Get_Compiler: IXMLFx_target_typeList;
begin
  Result := FCompiler;
end;

function TXMLCg_pass_type_program_shader.Get_Bind_uniform: IXMLCg_pass_type_program_shader_bind_uniformList;
begin
  Result := FBind_uniform;
end;

{ TXMLCg_pass_type_program_shader_sources }

function TXMLCg_pass_type_program_shader_sources.Get_Entry: UnicodeString;
begin
  Result := Params['entry'];
end;

procedure TXMLCg_pass_type_program_shader_sources.Set_Entry(Value: UnicodeString);
begin
  Params['entry'] := Value;
end;

{ TXMLCg_pass_type_program_shader_bind_uniform }

procedure TXMLCg_pass_type_program_shader_bind_uniform.DoRegisterChildClasses;
begin
  FClassesTree.Add('param', TXMLCg_pass_type_program_shader_bind_uniform_param);
  FClassesTree.Add('sampler1D', TXMLFx_sampler1D_type);
  FClassesTree.Add('sampler2D', TXMLFx_sampler2D_type);
  FClassesTree.Add('sampler3D', TXMLFx_sampler3D_type);
  FClassesTree.Add('samplerRECT', TXMLFx_samplerRECT_type);
  FClassesTree.Add('samplerCUBE', TXMLFx_samplerCUBE_type);
  FClassesTree.Add('samplerDEPTH', TXMLFx_samplerDEPTH_type);
  FClassesTree.Add('array', TXMLCg_array_type);
  FClassesTree.Add('usertype', TXMLCg_user_type);
  inherited;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Symbol: UnicodeString;
begin
  Result := Params['symbol'];
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Symbol(Value: UnicodeString);
begin
  Params['symbol'] := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Param: IXMLCg_pass_type_program_shader_bind_uniform_param;
begin
  Result := Nodes['param'] as IXMLCg_pass_type_program_shader_bind_uniform_param;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool2: UnicodeString;
begin
  Result := Nodes['bool2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool2(Value: UnicodeString);
begin
  Nodes['bool2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool3: UnicodeString;
begin
  Result := Nodes['bool3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool3(Value: UnicodeString);
begin
  Nodes['bool3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool4: UnicodeString;
begin
  Result := Nodes['bool4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool4(Value: UnicodeString);
begin
  Nodes['bool4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool2x1: UnicodeString;
begin
  Result := Nodes['bool2x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool2x1(Value: UnicodeString);
begin
  Nodes['bool2x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool2x2: UnicodeString;
begin
  Result := Nodes['bool2x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool2x2(Value: UnicodeString);
begin
  Nodes['bool2x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool2x3: UnicodeString;
begin
  Result := Nodes['bool2x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool2x3(Value: UnicodeString);
begin
  Nodes['bool2x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool2x4: UnicodeString;
begin
  Result := Nodes['bool2x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool2x4(Value: UnicodeString);
begin
  Nodes['bool2x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool3x1: UnicodeString;
begin
  Result := Nodes['bool3x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool3x1(Value: UnicodeString);
begin
  Nodes['bool3x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool3x2: UnicodeString;
begin
  Result := Nodes['bool3x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool3x2(Value: UnicodeString);
begin
  Nodes['bool3x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool3x3: UnicodeString;
begin
  Result := Nodes['bool3x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool3x3(Value: UnicodeString);
begin
  Nodes['bool3x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool3x4: UnicodeString;
begin
  Result := Nodes['bool3x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool3x4(Value: UnicodeString);
begin
  Nodes['bool3x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool4x1: UnicodeString;
begin
  Result := Nodes['bool4x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool4x1(Value: UnicodeString);
begin
  Nodes['bool4x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool4x2: UnicodeString;
begin
  Result := Nodes['bool4x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool4x2(Value: UnicodeString);
begin
  Nodes['bool4x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool4x3: UnicodeString;
begin
  Result := Nodes['bool4x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool4x3(Value: UnicodeString);
begin
  Nodes['bool4x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Bool4x4: UnicodeString;
begin
  Result := Nodes['bool4x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Bool4x4(Value: UnicodeString);
begin
  Nodes['bool4x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float3: UnicodeString;
begin
  Result := Nodes['float3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float3(Value: UnicodeString);
begin
  Nodes['float3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float4: UnicodeString;
begin
  Result := Nodes['float4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float4(Value: UnicodeString);
begin
  Nodes['float4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float2x1: UnicodeString;
begin
  Result := Nodes['float2x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float2x1(Value: UnicodeString);
begin
  Nodes['float2x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float2x2: UnicodeString;
begin
  Result := Nodes['float2x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float2x2(Value: UnicodeString);
begin
  Nodes['float2x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float2x3: UnicodeString;
begin
  Result := Nodes['float2x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float2x3(Value: UnicodeString);
begin
  Nodes['float2x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float2x4: UnicodeString;
begin
  Result := Nodes['float2x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float2x4(Value: UnicodeString);
begin
  Nodes['float2x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float3x1: UnicodeString;
begin
  Result := Nodes['float3x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float3x1(Value: UnicodeString);
begin
  Nodes['float3x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float3x2: UnicodeString;
begin
  Result := Nodes['float3x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float3x2(Value: UnicodeString);
begin
  Nodes['float3x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float3x3: UnicodeString;
begin
  Result := Nodes['float3x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float3x3(Value: UnicodeString);
begin
  Nodes['float3x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float3x4: UnicodeString;
begin
  Result := Nodes['float3x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float3x4(Value: UnicodeString);
begin
  Nodes['float3x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float4x1: UnicodeString;
begin
  Result := Nodes['float4x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float4x1(Value: UnicodeString);
begin
  Nodes['float4x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float4x2: UnicodeString;
begin
  Result := Nodes['float4x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float4x2(Value: UnicodeString);
begin
  Nodes['float4x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float4x3: UnicodeString;
begin
  Result := Nodes['float4x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float4x3(Value: UnicodeString);
begin
  Nodes['float4x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Float4x4: UnicodeString;
begin
  Result := Nodes['float4x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Float4x4(Value: UnicodeString);
begin
  Nodes['float4x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int2: UnicodeString;
begin
  Result := Nodes['int2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int2(Value: UnicodeString);
begin
  Nodes['int2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int3: UnicodeString;
begin
  Result := Nodes['int3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int3(Value: UnicodeString);
begin
  Nodes['int3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int4: UnicodeString;
begin
  Result := Nodes['int4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int4(Value: UnicodeString);
begin
  Nodes['int4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int2x1: UnicodeString;
begin
  Result := Nodes['int2x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int2x1(Value: UnicodeString);
begin
  Nodes['int2x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int2x2: UnicodeString;
begin
  Result := Nodes['int2x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int2x2(Value: UnicodeString);
begin
  Nodes['int2x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int2x3: UnicodeString;
begin
  Result := Nodes['int2x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int2x3(Value: UnicodeString);
begin
  Nodes['int2x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int2x4: UnicodeString;
begin
  Result := Nodes['int2x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int2x4(Value: UnicodeString);
begin
  Nodes['int2x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int3x1: UnicodeString;
begin
  Result := Nodes['int3x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int3x1(Value: UnicodeString);
begin
  Nodes['int3x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int3x2: UnicodeString;
begin
  Result := Nodes['int3x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int3x2(Value: UnicodeString);
begin
  Nodes['int3x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int3x3: UnicodeString;
begin
  Result := Nodes['int3x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int3x3(Value: UnicodeString);
begin
  Nodes['int3x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int3x4: UnicodeString;
begin
  Result := Nodes['int3x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int3x4(Value: UnicodeString);
begin
  Nodes['int3x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int4x1: UnicodeString;
begin
  Result := Nodes['int4x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int4x1(Value: UnicodeString);
begin
  Nodes['int4x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int4x2: UnicodeString;
begin
  Result := Nodes['int4x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int4x2(Value: UnicodeString);
begin
  Nodes['int4x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int4x3: UnicodeString;
begin
  Result := Nodes['int4x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int4x3(Value: UnicodeString);
begin
  Nodes['int4x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Int4x4: UnicodeString;
begin
  Result := Nodes['int4x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Int4x4(Value: UnicodeString);
begin
  Nodes['int4x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half: Double;
begin
  Result := Nodes['half'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half(Value: Double);
begin
  Nodes['half'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half2: UnicodeString;
begin
  Result := Nodes['half2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half2(Value: UnicodeString);
begin
  Nodes['half2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half3: UnicodeString;
begin
  Result := Nodes['half3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half3(Value: UnicodeString);
begin
  Nodes['half3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half4: UnicodeString;
begin
  Result := Nodes['half4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half4(Value: UnicodeString);
begin
  Nodes['half4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half2x1: UnicodeString;
begin
  Result := Nodes['half2x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half2x1(Value: UnicodeString);
begin
  Nodes['half2x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half2x2: UnicodeString;
begin
  Result := Nodes['half2x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half2x2(Value: UnicodeString);
begin
  Nodes['half2x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half2x3: UnicodeString;
begin
  Result := Nodes['half2x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half2x3(Value: UnicodeString);
begin
  Nodes['half2x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half2x4: UnicodeString;
begin
  Result := Nodes['half2x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half2x4(Value: UnicodeString);
begin
  Nodes['half2x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half3x1: UnicodeString;
begin
  Result := Nodes['half3x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half3x1(Value: UnicodeString);
begin
  Nodes['half3x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half3x2: UnicodeString;
begin
  Result := Nodes['half3x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half3x2(Value: UnicodeString);
begin
  Nodes['half3x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half3x3: UnicodeString;
begin
  Result := Nodes['half3x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half3x3(Value: UnicodeString);
begin
  Nodes['half3x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half3x4: UnicodeString;
begin
  Result := Nodes['half3x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half3x4(Value: UnicodeString);
begin
  Nodes['half3x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half4x1: UnicodeString;
begin
  Result := Nodes['half4x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half4x1(Value: UnicodeString);
begin
  Nodes['half4x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half4x2: UnicodeString;
begin
  Result := Nodes['half4x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half4x2(Value: UnicodeString);
begin
  Nodes['half4x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half4x3: UnicodeString;
begin
  Result := Nodes['half4x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half4x3(Value: UnicodeString);
begin
  Nodes['half4x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Half4x4: UnicodeString;
begin
  Result := Nodes['half4x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Half4x4(Value: UnicodeString);
begin
  Nodes['half4x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed: Double;
begin
  Result := Nodes['fixed'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed(Value: Double);
begin
  Nodes['fixed'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed2: UnicodeString;
begin
  Result := Nodes['fixed2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed2(Value: UnicodeString);
begin
  Nodes['fixed2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed3: UnicodeString;
begin
  Result := Nodes['fixed3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed3(Value: UnicodeString);
begin
  Nodes['fixed3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed4: UnicodeString;
begin
  Result := Nodes['fixed4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed4(Value: UnicodeString);
begin
  Nodes['fixed4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed2x1: UnicodeString;
begin
  Result := Nodes['fixed2x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed2x1(Value: UnicodeString);
begin
  Nodes['fixed2x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed2x2: UnicodeString;
begin
  Result := Nodes['fixed2x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed2x2(Value: UnicodeString);
begin
  Nodes['fixed2x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed2x3: UnicodeString;
begin
  Result := Nodes['fixed2x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed2x3(Value: UnicodeString);
begin
  Nodes['fixed2x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed2x4: UnicodeString;
begin
  Result := Nodes['fixed2x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed2x4(Value: UnicodeString);
begin
  Nodes['fixed2x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed3x1: UnicodeString;
begin
  Result := Nodes['fixed3x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed3x1(Value: UnicodeString);
begin
  Nodes['fixed3x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed3x2: UnicodeString;
begin
  Result := Nodes['fixed3x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed3x2(Value: UnicodeString);
begin
  Nodes['fixed3x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed3x3: UnicodeString;
begin
  Result := Nodes['fixed3x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed3x3(Value: UnicodeString);
begin
  Nodes['fixed3x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed3x4: UnicodeString;
begin
  Result := Nodes['fixed3x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed3x4(Value: UnicodeString);
begin
  Nodes['fixed3x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed4x1: UnicodeString;
begin
  Result := Nodes['fixed4x1'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed4x1(Value: UnicodeString);
begin
  Nodes['fixed4x1'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed4x2: UnicodeString;
begin
  Result := Nodes['fixed4x2'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed4x2(Value: UnicodeString);
begin
  Nodes['fixed4x2'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed4x3: UnicodeString;
begin
  Result := Nodes['fixed4x3'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed4x3(Value: UnicodeString);
begin
  Nodes['fixed4x3'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Fixed4x4: UnicodeString;
begin
  Result := Nodes['fixed4x4'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Fixed4x4(Value: UnicodeString);
begin
  Nodes['fixed4x4'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Sampler1D: IXMLFx_sampler1D_type;
begin
  Result := Nodes['sampler1D'] as IXMLFx_sampler1D_type;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Sampler2D: IXMLFx_sampler2D_type;
begin
  Result := Nodes['sampler2D'] as IXMLFx_sampler2D_type;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Sampler3D: IXMLFx_sampler3D_type;
begin
  Result := Nodes['sampler3D'] as IXMLFx_sampler3D_type;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_SamplerRECT: IXMLFx_samplerRECT_type;
begin
  Result := Nodes['samplerRECT'] as IXMLFx_samplerRECT_type;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_SamplerCUBE: IXMLFx_samplerCUBE_type;
begin
  Result := Nodes['samplerCUBE'] as IXMLFx_samplerCUBE_type;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_SamplerDEPTH: IXMLFx_samplerDEPTH_type;
begin
  Result := Nodes['samplerDEPTH'] as IXMLFx_samplerDEPTH_type;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_String_: UnicodeString;
begin
  Result := Nodes['string'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_String_(Value: UnicodeString);
begin
  Nodes['string'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Array_: IXMLCg_array_type;
begin
  Result := Nodes['array'] as IXMLCg_array_type;
end;

function TXMLCg_pass_type_program_shader_bind_uniform.Get_Usertype: IXMLCg_user_type;
begin
  Result := Nodes['usertype'] as IXMLCg_user_type;
end;

{ TXMLCg_pass_type_program_shader_bind_uniformList }

function TXMLCg_pass_type_program_shader_bind_uniformList.Add: IXMLCg_pass_type_program_shader_bind_uniform;
begin
  Result := AddItem(-1) as IXMLCg_pass_type_program_shader_bind_uniform;
end;

function TXMLCg_pass_type_program_shader_bind_uniformList.Insert(const Index: Integer): IXMLCg_pass_type_program_shader_bind_uniform;
begin
  Result := AddItem(Index) as IXMLCg_pass_type_program_shader_bind_uniform;
end;

function TXMLCg_pass_type_program_shader_bind_uniformList.Get_Item(Index: Integer): IXMLCg_pass_type_program_shader_bind_uniform;
begin
  Result := Nodes[Index] as IXMLCg_pass_type_program_shader_bind_uniform;
end;

{ TXMLCg_pass_type_program_shader_bind_uniform_param }

function TXMLCg_pass_type_program_shader_bind_uniform_param.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLCg_pass_type_program_shader_bind_uniform_param.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

{ TXMLCg_pass_type_evaluate }

procedure TXMLCg_pass_type_evaluate.DoRegisterChildClasses;
begin
  FClassesTree.Add('color_target', TXMLFx_colortarget_type);
  FClassesTree.Add('depth_target', TXMLFx_depthtarget_type);
  FClassesTree.Add('stencil_target', TXMLFx_stenciltarget_type);
  FClassesTree.Add('color_clear', TXMLFx_clearcolor_type);
  FClassesTree.Add('depth_clear', TXMLFx_cleardepth_type);
  FClassesTree.Add('stencil_clear', TXMLFx_clearstencil_type);
  FColor_target := CreateFilter(TXMLFx_colortarget_typeList, TXMLFx_colortarget_type, IXMLFx_colortarget_type) as IXMLFx_colortarget_typeList;
  FDepth_target := CreateFilter(TXMLFx_depthtarget_typeList, TXMLFx_depthtarget_type, IXMLFx_depthtarget_type) as IXMLFx_depthtarget_typeList;
  FStencil_target := CreateFilter(TXMLFx_stenciltarget_typeList, TXMLFx_stenciltarget_type, IXMLFx_stenciltarget_type) as IXMLFx_stenciltarget_typeList;
  FColor_clear := CreateFilter(TXMLFx_clearcolor_typeList, TXMLFx_clearcolor_type, IXMLFx_clearcolor_type) as IXMLFx_clearcolor_typeList;
  FDepth_clear := CreateFilter(TXMLFx_cleardepth_typeList, TXMLFx_cleardepth_type, IXMLFx_cleardepth_type) as IXMLFx_cleardepth_typeList;
  FStencil_clear := CreateFilter(TXMLFx_clearstencil_typeList, TXMLFx_clearstencil_type, IXMLFx_clearstencil_type) as IXMLFx_clearstencil_typeList;
  inherited;
end;

function TXMLCg_pass_type_evaluate.Get_Color_target: IXMLFx_colortarget_typeList;
begin
  Result := FColor_target;
end;

function TXMLCg_pass_type_evaluate.Get_Depth_target: IXMLFx_depthtarget_typeList;
begin
  Result := FDepth_target;
end;

function TXMLCg_pass_type_evaluate.Get_Stencil_target: IXMLFx_stenciltarget_typeList;
begin
  Result := FStencil_target;
end;

function TXMLCg_pass_type_evaluate.Get_Color_clear: IXMLFx_clearcolor_typeList;
begin
  Result := FColor_clear;
end;

function TXMLCg_pass_type_evaluate.Get_Depth_clear: IXMLFx_cleardepth_typeList;
begin
  Result := FDepth_clear;
end;

function TXMLCg_pass_type_evaluate.Get_Stencil_clear: IXMLFx_clearstencil_typeList;
begin
  Result := FStencil_clear;
end;

function TXMLCg_pass_type_evaluate.Get_Draw: UnicodeString;
begin
  Result := Nodes['draw'].Content;
end;

procedure TXMLCg_pass_type_evaluate.Set_Draw(Value: UnicodeString);
begin
  Nodes['draw'].Content := Value;
end;

{ TXMLProfile_gles_type }

procedure TXMLProfile_gles_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('newparam', TXMLGles_newparam_type);
  FClassesTree.Add('technique', TXMLProfile_gles_type_technique);
  FClassesTree.Add('extra', TXMLExtra_type);
  FNewparam := CreateFilter(TXMLGles_newparam_typeList, TXMLGles_newparam_type, IXMLGles_newparam_type) as IXMLGles_newparam_typeList;
  FTechnique := CreateFilter(TXMLProfile_gles_type_techniqueList, TXMLProfile_gles_type_technique, IXMLProfile_gles_type_technique) as IXMLProfile_gles_type_techniqueList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_gles_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLProfile_gles_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLProfile_gles_type.Get_Platform: UnicodeString;
begin
  Result := Params['platform'];
end;

procedure TXMLProfile_gles_type.Set_Platform(Value: UnicodeString);
begin
  Params['platform'] := Value;
end;

function TXMLProfile_gles_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLProfile_gles_type.Get_Newparam: IXMLGles_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLProfile_gles_type.Get_Technique: IXMLProfile_gles_type_techniqueList;
begin
  Result := FTechnique;
end;

function TXMLProfile_gles_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLGles_newparam_type }

procedure TXMLGles_newparam_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('sampler2D', TXMLGles_sampler_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  inherited;
end;

function TXMLGles_newparam_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLGles_newparam_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLGles_newparam_type.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLGles_newparam_type.Get_Semantic: UnicodeString;
begin
  Result := Nodes['semantic'].Content;
end;

procedure TXMLGles_newparam_type.Set_Semantic(Value: UnicodeString);
begin
  Nodes['semantic'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Modifier: UnicodeString;
begin
  Result := Nodes['modifier'].Content;
end;

procedure TXMLGles_newparam_type.Set_Modifier(Value: UnicodeString);
begin
  Nodes['modifier'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLGles_newparam_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Bool2: UnicodeString;
begin
  Result := Nodes['bool2'].Content;
end;

procedure TXMLGles_newparam_type.Set_Bool2(Value: UnicodeString);
begin
  Nodes['bool2'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Bool3: UnicodeString;
begin
  Result := Nodes['bool3'].Content;
end;

procedure TXMLGles_newparam_type.Set_Bool3(Value: UnicodeString);
begin
  Nodes['bool3'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Bool4: UnicodeString;
begin
  Result := Nodes['bool4'].Content;
end;

procedure TXMLGles_newparam_type.Set_Bool4(Value: UnicodeString);
begin
  Nodes['bool4'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLGles_newparam_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Int2: UnicodeString;
begin
  Result := Nodes['int2'].Content;
end;

procedure TXMLGles_newparam_type.Set_Int2(Value: UnicodeString);
begin
  Nodes['int2'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Int3: UnicodeString;
begin
  Result := Nodes['int3'].Content;
end;

procedure TXMLGles_newparam_type.Set_Int3(Value: UnicodeString);
begin
  Nodes['int3'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Int4: UnicodeString;
begin
  Result := Nodes['int4'].Content;
end;

procedure TXMLGles_newparam_type.Set_Int4(Value: UnicodeString);
begin
  Nodes['int4'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float3: UnicodeString;
begin
  Result := Nodes['float3'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float3(Value: UnicodeString);
begin
  Nodes['float3'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float4: UnicodeString;
begin
  Result := Nodes['float4'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float4(Value: UnicodeString);
begin
  Nodes['float4'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float1x1: Double;
begin
  Result := Nodes['float1x1'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float1x1(Value: Double);
begin
  Nodes['float1x1'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float1x2: UnicodeString;
begin
  Result := Nodes['float1x2'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float1x2(Value: UnicodeString);
begin
  Nodes['float1x2'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float1x3: UnicodeString;
begin
  Result := Nodes['float1x3'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float1x3(Value: UnicodeString);
begin
  Nodes['float1x3'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float1x4: UnicodeString;
begin
  Result := Nodes['float1x4'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float1x4(Value: UnicodeString);
begin
  Nodes['float1x4'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float2x1: UnicodeString;
begin
  Result := Nodes['float2x1'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float2x1(Value: UnicodeString);
begin
  Nodes['float2x1'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float2x2: UnicodeString;
begin
  Result := Nodes['float2x2'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float2x2(Value: UnicodeString);
begin
  Nodes['float2x2'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float2x3: UnicodeString;
begin
  Result := Nodes['float2x3'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float2x3(Value: UnicodeString);
begin
  Nodes['float2x3'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float2x4: UnicodeString;
begin
  Result := Nodes['float2x4'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float2x4(Value: UnicodeString);
begin
  Nodes['float2x4'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float3x1: UnicodeString;
begin
  Result := Nodes['float3x1'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float3x1(Value: UnicodeString);
begin
  Nodes['float3x1'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float3x2: UnicodeString;
begin
  Result := Nodes['float3x2'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float3x2(Value: UnicodeString);
begin
  Nodes['float3x2'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float3x3: UnicodeString;
begin
  Result := Nodes['float3x3'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float3x3(Value: UnicodeString);
begin
  Nodes['float3x3'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float3x4: UnicodeString;
begin
  Result := Nodes['float3x4'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float3x4(Value: UnicodeString);
begin
  Nodes['float3x4'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float4x1: UnicodeString;
begin
  Result := Nodes['float4x1'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float4x1(Value: UnicodeString);
begin
  Nodes['float4x1'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float4x2: UnicodeString;
begin
  Result := Nodes['float4x2'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float4x2(Value: UnicodeString);
begin
  Nodes['float4x2'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float4x3: UnicodeString;
begin
  Result := Nodes['float4x3'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float4x3(Value: UnicodeString);
begin
  Nodes['float4x3'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Float4x4: UnicodeString;
begin
  Result := Nodes['float4x4'].Content;
end;

procedure TXMLGles_newparam_type.Set_Float4x4(Value: UnicodeString);
begin
  Nodes['float4x4'].Content := Value;
end;

function TXMLGles_newparam_type.Get_Sampler2D: IXMLGles_sampler_type;
begin
  Result := Nodes['sampler2D'] as IXMLGles_sampler_type;
end;

function TXMLGles_newparam_type.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLGles_newparam_type.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

{ TXMLGles_newparam_typeList }

function TXMLGles_newparam_typeList.Add: IXMLGles_newparam_type;
begin
  Result := AddItem(-1) as IXMLGles_newparam_type;
end;

function TXMLGles_newparam_typeList.Insert(const Index: Integer): IXMLGles_newparam_type;
begin
  Result := AddItem(Index) as IXMLGles_newparam_type;
end;

function TXMLGles_newparam_typeList.Get_Item(Index: Integer): IXMLGles_newparam_type;
begin
  Result := Nodes[Index] as IXMLGles_newparam_type;
end;

{ TXMLGles_sampler_type }

procedure TXMLGles_sampler_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('instance_image', TXMLInstance_image_type);
  FClassesTree.Add('texcoord', TXMLGles_sampler_type_texcoord);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLGles_sampler_type.Get_Instance_image: IXMLInstance_image_type;
begin
  Result := Nodes['instance_image'] as IXMLInstance_image_type;
end;

function TXMLGles_sampler_type.Get_Texcoord: IXMLGles_sampler_type_texcoord;
begin
  Result := Nodes['texcoord'] as IXMLGles_sampler_type_texcoord;
end;

function TXMLGles_sampler_type.Get_Wrap_s: UnicodeString;
begin
  Result := Nodes['wrap_s'].Content;
end;

procedure TXMLGles_sampler_type.Set_Wrap_s(Value: UnicodeString);
begin
  Nodes['wrap_s'].Content := Value;
end;

function TXMLGles_sampler_type.Get_Wrap_t: UnicodeString;
begin
  Result := Nodes['wrap_t'].Content;
end;

procedure TXMLGles_sampler_type.Set_Wrap_t(Value: UnicodeString);
begin
  Nodes['wrap_t'].Content := Value;
end;

function TXMLGles_sampler_type.Get_Minfilter: UnicodeString;
begin
  Result := Nodes['minfilter'].Content;
end;

procedure TXMLGles_sampler_type.Set_Minfilter(Value: UnicodeString);
begin
  Nodes['minfilter'].Content := Value;
end;

function TXMLGles_sampler_type.Get_Magfilter: UnicodeString;
begin
  Result := Nodes['magfilter'].Content;
end;

procedure TXMLGles_sampler_type.Set_Magfilter(Value: UnicodeString);
begin
  Nodes['magfilter'].Content := Value;
end;

function TXMLGles_sampler_type.Get_Mipfilter: UnicodeString;
begin
  Result := Nodes['mipfilter'].Content;
end;

procedure TXMLGles_sampler_type.Set_Mipfilter(Value: UnicodeString);
begin
  Nodes['mipfilter'].Content := Value;
end;

function TXMLGles_sampler_type.Get_Mip_max_level: Byte;
begin
  Result := Nodes['mip_max_level'].Content;
end;

procedure TXMLGles_sampler_type.Set_Mip_max_level(Value: Byte);
begin
  Nodes['mip_max_level'].Content := Value;
end;

function TXMLGles_sampler_type.Get_Mip_bias: Single;
begin
  Result := Nodes['mip_bias'].Content;
end;

procedure TXMLGles_sampler_type.Set_Mip_bias(Value: Single);
begin
  Nodes['mip_bias'].Content := Value;
end;

function TXMLGles_sampler_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLGles_sampler_type_texcoord }

function TXMLGles_sampler_type_texcoord.Get_Semantic: UnicodeString;
begin
  Result := Params['semantic'];
end;

procedure TXMLGles_sampler_type_texcoord.Set_Semantic(Value: UnicodeString);
begin
  Params['semantic'] := Value;
end;

{ TXMLProfile_gles_type_technique }

procedure TXMLProfile_gles_type_technique.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('pass', TXMLProfile_gles_type_technique_pass);
  FClassesTree.Add('extra', TXMLExtra_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  FPass := CreateFilter(TXMLProfile_gles_type_technique_passList, TXMLProfile_gles_type_technique_pass, IXMLProfile_gles_type_technique_pass) as IXMLProfile_gles_type_technique_passList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_gles_type_technique.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLProfile_gles_type_technique.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLProfile_gles_type_technique.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLProfile_gles_type_technique.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLProfile_gles_type_technique.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLProfile_gles_type_technique.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLProfile_gles_type_technique.Get_Pass: IXMLProfile_gles_type_technique_passList;
begin
  Result := FPass;
end;

function TXMLProfile_gles_type_technique.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLProfile_gles_type_techniqueList }

function TXMLProfile_gles_type_techniqueList.Add: IXMLProfile_gles_type_technique;
begin
  Result := AddItem(-1) as IXMLProfile_gles_type_technique;
end;

function TXMLProfile_gles_type_techniqueList.Insert(const Index: Integer): IXMLProfile_gles_type_technique;
begin
  Result := AddItem(Index) as IXMLProfile_gles_type_technique;
end;

function TXMLProfile_gles_type_techniqueList.Get_Item(Index: Integer): IXMLProfile_gles_type_technique;
begin
  Result := Nodes[Index] as IXMLProfile_gles_type_technique;
end;

{ TXMLProfile_gles_type_technique_pass }

procedure TXMLProfile_gles_type_technique_pass.DoRegisterChildClasses;
begin
  FClassesTree.Add('annotate', TXMLFx_annotate_type);
  FClassesTree.Add('states', TXMLProfile_gles_type_technique_pass_states);
  FClassesTree.Add('evaluate', TXMLProfile_gles_type_technique_pass_evaluate);
  FClassesTree.Add('extra', TXMLExtra_type);
  FAnnotate := CreateFilter(TXMLFx_annotate_typeList, TXMLFx_annotate_type, IXMLFx_annotate_type) as IXMLFx_annotate_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLProfile_gles_type_technique_pass.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLProfile_gles_type_technique_pass.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLProfile_gles_type_technique_pass.Get_Annotate: IXMLFx_annotate_typeList;
begin
  Result := FAnnotate;
end;

function TXMLProfile_gles_type_technique_pass.Get_States: IXMLProfile_gles_type_technique_pass_states;
begin
  Result := Nodes['states'] as IXMLProfile_gles_type_technique_pass_states;
end;

function TXMLProfile_gles_type_technique_pass.Get_Evaluate: IXMLProfile_gles_type_technique_pass_evaluate;
begin
  Result := Nodes['evaluate'] as IXMLProfile_gles_type_technique_pass_evaluate;
end;

function TXMLProfile_gles_type_technique_pass.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLProfile_gles_type_technique_passList }

function TXMLProfile_gles_type_technique_passList.Add: IXMLProfile_gles_type_technique_pass;
begin
  Result := AddItem(-1) as IXMLProfile_gles_type_technique_pass;
end;

function TXMLProfile_gles_type_technique_passList.Insert(const Index: Integer): IXMLProfile_gles_type_technique_pass;
begin
  Result := AddItem(Index) as IXMLProfile_gles_type_technique_pass;
end;

function TXMLProfile_gles_type_technique_passList.Get_Item(Index: Integer): IXMLProfile_gles_type_technique_pass;
begin
  Result := Nodes[Index] as IXMLProfile_gles_type_technique_pass;
end;

{ TXMLProfile_gles_type_technique_pass_states }

procedure TXMLProfile_gles_type_technique_pass_states.DoRegisterChildClasses;
begin
  FClassesTree.Add('alpha_func', TXMLAlpha_func);
  FClassesTree.Add('blend_func', TXMLBlend_func);
  FClassesTree.Add('clip_plane', TXMLClip_plane);
  FClassesTree.Add('color_mask', TXMLColor_mask);
  FClassesTree.Add('cull_face', TXMLCull_face);
  FClassesTree.Add('depth_func', TXMLDepth_func);
  FClassesTree.Add('depth_mask', TXMLDepth_mask);
  FClassesTree.Add('depth_range', TXMLDepth_range);
  FClassesTree.Add('fog_color', TXMLFog_color);
  FClassesTree.Add('fog_density', TXMLFog_density);
  FClassesTree.Add('fog_mode', TXMLFog_mode);
  FClassesTree.Add('fog_start', TXMLFog_start);
  FClassesTree.Add('fog_end', TXMLFog_end);
  FClassesTree.Add('front_face', TXMLFront_face);
  FClassesTree.Add('logic_op', TXMLLogic_op);
  FClassesTree.Add('light_ambient', TXMLLight_ambient);
  FClassesTree.Add('light_diffuse', TXMLLight_diffuse);
  FClassesTree.Add('light_specular', TXMLLight_specular);
  FClassesTree.Add('light_position', TXMLLight_position);
  FClassesTree.Add('light_constant_attenuation', TXMLLight_constant_attenuation);
  FClassesTree.Add('light_linear_attenuation', TXMLLight_linear_attenuation);
  FClassesTree.Add('light_quadratic_attenuation', TXMLLight_quadratic_attenuation);
  FClassesTree.Add('light_spot_cutoff', TXMLLight_spot_cutoff);
  FClassesTree.Add('light_spot_direction', TXMLLight_spot_direction);
  FClassesTree.Add('light_spot_exponent', TXMLLight_spot_exponent);
  FClassesTree.Add('light_model_ambient', TXMLLight_model_ambient);
  FClassesTree.Add('line_width', TXMLLine_width);
  FClassesTree.Add('material_ambient', TXMLMaterial_ambient);
  FClassesTree.Add('material_diffuse', TXMLMaterial_diffuse);
  FClassesTree.Add('material_emission', TXMLMaterial_emission);
  FClassesTree.Add('material_shininess', TXMLMaterial_shininess);
  FClassesTree.Add('material_specular', TXMLMaterial_specular);
  FClassesTree.Add('model_view_matrix', TXMLModel_view_matrix);
  FClassesTree.Add('point_distance_attenuation', TXMLPoint_distance_attenuation);
  FClassesTree.Add('point_fade_threshold_size', TXMLPoint_fade_threshold_size);
  FClassesTree.Add('point_size', TXMLPoint_size);
  FClassesTree.Add('point_size_min', TXMLPoint_size_min);
  FClassesTree.Add('point_size_max', TXMLPoint_size_max);
  FClassesTree.Add('polygon_offset', TXMLPolygon_offset);
  FClassesTree.Add('projection_matrix', TXMLProjection_matrix);
  FClassesTree.Add('scissor', TXMLScissor);
  FClassesTree.Add('shade_model', TXMLShade_model);
  FClassesTree.Add('stencil_func', TXMLStencil_func);
  FClassesTree.Add('stencil_mask', TXMLStencil_mask);
  FClassesTree.Add('stencil_op', TXMLStencil_op);
  FClassesTree.Add('texture_pipeline', TXMLTexture_pipeline);
  FClassesTree.Add('alpha_test_enable', TXMLAlpha_test_enable);
  FClassesTree.Add('blend_enable', TXMLBlend_enable);
  FClassesTree.Add('clip_plane_enable', TXMLClip_plane_enable);
  FClassesTree.Add('color_logic_op_enable', TXMLColor_logic_op_enable);
  FClassesTree.Add('color_material_enable', TXMLColor_material_enable);
  FClassesTree.Add('cull_face_enable', TXMLCull_face_enable);
  FClassesTree.Add('depth_test_enable', TXMLDepth_test_enable);
  FClassesTree.Add('dither_enable', TXMLDither_enable);
  FClassesTree.Add('fog_enable', TXMLFog_enable);
  FClassesTree.Add('light_enable', TXMLLight_enable);
  FClassesTree.Add('lighting_enable', TXMLLighting_enable);
  FClassesTree.Add('light_model_two_side_enable', TXMLLight_model_two_side_enable);
  FClassesTree.Add('line_smooth_enable', TXMLLine_smooth_enable);
  FClassesTree.Add('multisample_enable', TXMLMultisample_enable);
  FClassesTree.Add('normalize_enable', TXMLNormalize_enable);
  FClassesTree.Add('point_smooth_enable', TXMLPoint_smooth_enable);
  FClassesTree.Add('polygon_offset_fill_enable', TXMLPolygon_offset_fill_enable);
  FClassesTree.Add('rescale_normal_enable', TXMLRescale_normal_enable);
  FClassesTree.Add('sample_alpha_to_coverage_enable', TXMLSample_alpha_to_coverage_enable);
  FClassesTree.Add('sample_alpha_to_one_enable', TXMLSample_alpha_to_one_enable);
  FClassesTree.Add('sample_coverage_enable', TXMLSample_coverage_enable);
  FClassesTree.Add('scissor_test_enable', TXMLScissor_test_enable);
  FClassesTree.Add('stencil_test_enable', TXMLStencil_test_enable);
  inherited;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Alpha_func: IXMLAlpha_func;
begin
  Result := Nodes['alpha_func'] as IXMLAlpha_func;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Blend_func: IXMLBlend_func;
begin
  Result := Nodes['blend_func'] as IXMLBlend_func;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Clip_plane: IXMLClip_plane;
begin
  Result := Nodes['clip_plane'] as IXMLClip_plane;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Color_mask: IXMLColor_mask;
begin
  Result := Nodes['color_mask'] as IXMLColor_mask;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Cull_face: IXMLCull_face;
begin
  Result := Nodes['cull_face'] as IXMLCull_face;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Depth_func: IXMLDepth_func;
begin
  Result := Nodes['depth_func'] as IXMLDepth_func;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Depth_mask: IXMLDepth_mask;
begin
  Result := Nodes['depth_mask'] as IXMLDepth_mask;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Depth_range: IXMLDepth_range;
begin
  Result := Nodes['depth_range'] as IXMLDepth_range;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Fog_color: IXMLFog_color;
begin
  Result := Nodes['fog_color'] as IXMLFog_color;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Fog_density: IXMLFog_density;
begin
  Result := Nodes['fog_density'] as IXMLFog_density;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Fog_mode: IXMLFog_mode;
begin
  Result := Nodes['fog_mode'] as IXMLFog_mode;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Fog_start: IXMLFog_start;
begin
  Result := Nodes['fog_start'] as IXMLFog_start;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Fog_end: IXMLFog_end;
begin
  Result := Nodes['fog_end'] as IXMLFog_end;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Front_face: IXMLFront_face;
begin
  Result := Nodes['front_face'] as IXMLFront_face;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Logic_op: IXMLLogic_op;
begin
  Result := Nodes['logic_op'] as IXMLLogic_op;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_ambient: IXMLLight_ambient;
begin
  Result := Nodes['light_ambient'] as IXMLLight_ambient;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_diffuse: IXMLLight_diffuse;
begin
  Result := Nodes['light_diffuse'] as IXMLLight_diffuse;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_specular: IXMLLight_specular;
begin
  Result := Nodes['light_specular'] as IXMLLight_specular;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_position: IXMLLight_position;
begin
  Result := Nodes['light_position'] as IXMLLight_position;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_constant_attenuation: IXMLLight_constant_attenuation;
begin
  Result := Nodes['light_constant_attenuation'] as IXMLLight_constant_attenuation;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_linear_attenuation: IXMLLight_linear_attenuation;
begin
  Result := Nodes['light_linear_attenuation'] as IXMLLight_linear_attenuation;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_quadratic_attenuation: IXMLLight_quadratic_attenuation;
begin
  Result := Nodes['light_quadratic_attenuation'] as IXMLLight_quadratic_attenuation;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_spot_cutoff: IXMLLight_spot_cutoff;
begin
  Result := Nodes['light_spot_cutoff'] as IXMLLight_spot_cutoff;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_spot_direction: IXMLLight_spot_direction;
begin
  Result := Nodes['light_spot_direction'] as IXMLLight_spot_direction;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_spot_exponent: IXMLLight_spot_exponent;
begin
  Result := Nodes['light_spot_exponent'] as IXMLLight_spot_exponent;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_model_ambient: IXMLLight_model_ambient;
begin
  Result := Nodes['light_model_ambient'] as IXMLLight_model_ambient;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Line_width: IXMLLine_width;
begin
  Result := Nodes['line_width'] as IXMLLine_width;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Material_ambient: IXMLMaterial_ambient;
begin
  Result := Nodes['material_ambient'] as IXMLMaterial_ambient;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Material_diffuse: IXMLMaterial_diffuse;
begin
  Result := Nodes['material_diffuse'] as IXMLMaterial_diffuse;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Material_emission: IXMLMaterial_emission;
begin
  Result := Nodes['material_emission'] as IXMLMaterial_emission;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Material_shininess: IXMLMaterial_shininess;
begin
  Result := Nodes['material_shininess'] as IXMLMaterial_shininess;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Material_specular: IXMLMaterial_specular;
begin
  Result := Nodes['material_specular'] as IXMLMaterial_specular;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Model_view_matrix: IXMLModel_view_matrix;
begin
  Result := Nodes['model_view_matrix'] as IXMLModel_view_matrix;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Point_distance_attenuation: IXMLPoint_distance_attenuation;
begin
  Result := Nodes['point_distance_attenuation'] as IXMLPoint_distance_attenuation;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Point_fade_threshold_size: IXMLPoint_fade_threshold_size;
begin
  Result := Nodes['point_fade_threshold_size'] as IXMLPoint_fade_threshold_size;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Point_size: IXMLPoint_size;
begin
  Result := Nodes['point_size'] as IXMLPoint_size;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Point_size_min: IXMLPoint_size_min;
begin
  Result := Nodes['point_size_min'] as IXMLPoint_size_min;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Point_size_max: IXMLPoint_size_max;
begin
  Result := Nodes['point_size_max'] as IXMLPoint_size_max;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Polygon_offset: IXMLPolygon_offset;
begin
  Result := Nodes['polygon_offset'] as IXMLPolygon_offset;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Projection_matrix: IXMLProjection_matrix;
begin
  Result := Nodes['projection_matrix'] as IXMLProjection_matrix;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Scissor: IXMLScissor;
begin
  Result := Nodes['scissor'] as IXMLScissor;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Shade_model: IXMLShade_model;
begin
  Result := Nodes['shade_model'] as IXMLShade_model;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Stencil_func: IXMLStencil_func;
begin
  Result := Nodes['stencil_func'] as IXMLStencil_func;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Stencil_mask: IXMLStencil_mask;
begin
  Result := Nodes['stencil_mask'] as IXMLStencil_mask;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Stencil_op: IXMLStencil_op;
begin
  Result := Nodes['stencil_op'] as IXMLStencil_op;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Texture_pipeline: IXMLTexture_pipeline;
begin
  Result := Nodes['texture_pipeline'] as IXMLTexture_pipeline;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Alpha_test_enable: IXMLAlpha_test_enable;
begin
  Result := Nodes['alpha_test_enable'] as IXMLAlpha_test_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Blend_enable: IXMLBlend_enable;
begin
  Result := Nodes['blend_enable'] as IXMLBlend_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Clip_plane_enable: IXMLClip_plane_enable;
begin
  Result := Nodes['clip_plane_enable'] as IXMLClip_plane_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Color_logic_op_enable: IXMLColor_logic_op_enable;
begin
  Result := Nodes['color_logic_op_enable'] as IXMLColor_logic_op_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Color_material_enable: IXMLColor_material_enable;
begin
  Result := Nodes['color_material_enable'] as IXMLColor_material_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Cull_face_enable: IXMLCull_face_enable;
begin
  Result := Nodes['cull_face_enable'] as IXMLCull_face_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Depth_test_enable: IXMLDepth_test_enable;
begin
  Result := Nodes['depth_test_enable'] as IXMLDepth_test_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Dither_enable: IXMLDither_enable;
begin
  Result := Nodes['dither_enable'] as IXMLDither_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Fog_enable: IXMLFog_enable;
begin
  Result := Nodes['fog_enable'] as IXMLFog_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_enable: IXMLLight_enable;
begin
  Result := Nodes['light_enable'] as IXMLLight_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Lighting_enable: IXMLLighting_enable;
begin
  Result := Nodes['lighting_enable'] as IXMLLighting_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Light_model_two_side_enable: IXMLLight_model_two_side_enable;
begin
  Result := Nodes['light_model_two_side_enable'] as IXMLLight_model_two_side_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Line_smooth_enable: IXMLLine_smooth_enable;
begin
  Result := Nodes['line_smooth_enable'] as IXMLLine_smooth_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Multisample_enable: IXMLMultisample_enable;
begin
  Result := Nodes['multisample_enable'] as IXMLMultisample_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Normalize_enable: IXMLNormalize_enable;
begin
  Result := Nodes['normalize_enable'] as IXMLNormalize_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Point_smooth_enable: IXMLPoint_smooth_enable;
begin
  Result := Nodes['point_smooth_enable'] as IXMLPoint_smooth_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Polygon_offset_fill_enable: IXMLPolygon_offset_fill_enable;
begin
  Result := Nodes['polygon_offset_fill_enable'] as IXMLPolygon_offset_fill_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Rescale_normal_enable: IXMLRescale_normal_enable;
begin
  Result := Nodes['rescale_normal_enable'] as IXMLRescale_normal_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Sample_alpha_to_coverage_enable: IXMLSample_alpha_to_coverage_enable;
begin
  Result := Nodes['sample_alpha_to_coverage_enable'] as IXMLSample_alpha_to_coverage_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Sample_alpha_to_one_enable: IXMLSample_alpha_to_one_enable;
begin
  Result := Nodes['sample_alpha_to_one_enable'] as IXMLSample_alpha_to_one_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Sample_coverage_enable: IXMLSample_coverage_enable;
begin
  Result := Nodes['sample_coverage_enable'] as IXMLSample_coverage_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Scissor_test_enable: IXMLScissor_test_enable;
begin
  Result := Nodes['scissor_test_enable'] as IXMLScissor_test_enable;
end;

function TXMLProfile_gles_type_technique_pass_states.Get_Stencil_test_enable: IXMLStencil_test_enable;
begin
  Result := Nodes['stencil_test_enable'] as IXMLStencil_test_enable;
end;

{ TXMLTexture_pipeline }

procedure TXMLTexture_pipeline.DoRegisterChildClasses;
begin
  FClassesTree.Add('value', TXMLGles_texture_pipeline_type);
  inherited;
end;

function TXMLTexture_pipeline.Get_Value: IXMLGles_texture_pipeline_type;
begin
  Result := Nodes['value'] as IXMLGles_texture_pipeline_type;
end;

{ TXMLGles_texture_pipeline_type }

procedure TXMLGles_texture_pipeline_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('texcombiner', TXMLGles_texcombiner_command_type);
  FClassesTree.Add('texenv', TXMLGles_texenv_command_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTexcombiner := CreateFilter(TXMLGles_texcombiner_command_typeList, TXMLGles_texcombiner_command_type, IXMLGles_texcombiner_command_type) as IXMLGles_texcombiner_command_typeList;
  FTexenv := CreateFilter(TXMLGles_texenv_command_typeList, TXMLGles_texenv_command_type, IXMLGles_texenv_command_type) as IXMLGles_texenv_command_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLGles_texture_pipeline_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLGles_texture_pipeline_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLGles_texture_pipeline_type.Get_Texcombiner: IXMLGles_texcombiner_command_typeList;
begin
  Result := FTexcombiner;
end;

function TXMLGles_texture_pipeline_type.Get_Texenv: IXMLGles_texenv_command_typeList;
begin
  Result := FTexenv;
end;

function TXMLGles_texture_pipeline_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLGles_texcombiner_command_type }

procedure TXMLGles_texcombiner_command_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('constant', TXMLGles_texture_constant_type);
  FClassesTree.Add('RGB', TXMLGles_texcombiner_command_rgb_type);
  FClassesTree.Add('alpha', TXMLGles_texcombiner_command_alpha_type);
  inherited;
end;

function TXMLGles_texcombiner_command_type.Get_Constant: IXMLGles_texture_constant_type;
begin
  Result := Nodes['constant'] as IXMLGles_texture_constant_type;
end;

function TXMLGles_texcombiner_command_type.Get_RGB: IXMLGles_texcombiner_command_rgb_type;
begin
  Result := Nodes['RGB'] as IXMLGles_texcombiner_command_rgb_type;
end;

function TXMLGles_texcombiner_command_type.Get_Alpha: IXMLGles_texcombiner_command_alpha_type;
begin
  Result := Nodes['alpha'] as IXMLGles_texcombiner_command_alpha_type;
end;

{ TXMLGles_texcombiner_command_typeList }

function TXMLGles_texcombiner_command_typeList.Add: IXMLGles_texcombiner_command_type;
begin
  Result := AddItem(-1) as IXMLGles_texcombiner_command_type;
end;

function TXMLGles_texcombiner_command_typeList.Insert(const Index: Integer): IXMLGles_texcombiner_command_type;
begin
  Result := AddItem(Index) as IXMLGles_texcombiner_command_type;
end;

function TXMLGles_texcombiner_command_typeList.Get_Item(Index: Integer): IXMLGles_texcombiner_command_type;
begin
  Result := Nodes[Index] as IXMLGles_texcombiner_command_type;
end;

{ TXMLGles_texture_constant_type }

function TXMLGles_texture_constant_type.Get_Value: UnicodeString;
begin
  Result := Params['value'];
end;

procedure TXMLGles_texture_constant_type.Set_Value(Value: UnicodeString);
begin
  Params['value'] := Value;
end;

function TXMLGles_texture_constant_type.Get_Param: UnicodeString;
begin
  Result := Params['param'];
end;

procedure TXMLGles_texture_constant_type.Set_Param(Value: UnicodeString);
begin
  Params['param'] := Value;
end;

{ TXMLGles_texcombiner_command_rgb_type }

procedure TXMLGles_texcombiner_command_rgb_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('argument', TXMLGles_texcombiner_argument_rgb_type);
  Tag := 'argument';
  ItemInterface := IXMLGles_texcombiner_argument_rgb_type;
  inherited;
end;

function TXMLGles_texcombiner_command_rgb_type.Get_Operator_: UnicodeString;
begin
  Result := Params['operator'];
end;

procedure TXMLGles_texcombiner_command_rgb_type.Set_Operator_(Value: UnicodeString);
begin
  Params['operator'] := Value;
end;

function TXMLGles_texcombiner_command_rgb_type.Get_Scale: Single;
begin
  Result := Params['scale'];
end;

procedure TXMLGles_texcombiner_command_rgb_type.Set_Scale(Value: Single);
begin
  Params['scale'] := Value;
end;

function TXMLGles_texcombiner_command_rgb_type.Get_Argument(Index: Integer): IXMLGles_texcombiner_argument_rgb_type;
begin
  Result := Nodes[Index] as IXMLGles_texcombiner_argument_rgb_type;
end;

function TXMLGles_texcombiner_command_rgb_type.Add: IXMLGles_texcombiner_argument_rgb_type;
begin
  Result := AddItem(-1) as IXMLGles_texcombiner_argument_rgb_type;
end;

function TXMLGles_texcombiner_command_rgb_type.Insert(const Index: Integer): IXMLGles_texcombiner_argument_rgb_type;
begin
  Result := AddItem(Index) as IXMLGles_texcombiner_argument_rgb_type;
end;

{ TXMLGles_texcombiner_argument_rgb_type }

function TXMLGles_texcombiner_argument_rgb_type.Get_Source: UnicodeString;
begin
  Result := Params['source'];
end;

procedure TXMLGles_texcombiner_argument_rgb_type.Set_Source(Value: UnicodeString);
begin
  Params['source'] := Value;
end;

function TXMLGles_texcombiner_argument_rgb_type.Get_Operand: UnicodeString;
begin
  Result := Params['operand'];
end;

procedure TXMLGles_texcombiner_argument_rgb_type.Set_Operand(Value: UnicodeString);
begin
  Params['operand'] := Value;
end;

function TXMLGles_texcombiner_argument_rgb_type.Get_Sampler: UnicodeString;
begin
  Result := Params['sampler'];
end;

procedure TXMLGles_texcombiner_argument_rgb_type.Set_Sampler(Value: UnicodeString);
begin
  Params['sampler'] := Value;
end;

{ TXMLGles_texcombiner_command_alpha_type }

procedure TXMLGles_texcombiner_command_alpha_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('argument', TXMLGles_texcombiner_argument_alpha_type);
  Tag := 'argument';
  ItemInterface := IXMLGles_texcombiner_argument_alpha_type;
  inherited;
end;

function TXMLGles_texcombiner_command_alpha_type.Get_Operator_: UnicodeString;
begin
  Result := Params['operator'];
end;

procedure TXMLGles_texcombiner_command_alpha_type.Set_Operator_(Value: UnicodeString);
begin
  Params['operator'] := Value;
end;

function TXMLGles_texcombiner_command_alpha_type.Get_Scale: Single;
begin
  Result := Params['scale'];
end;

procedure TXMLGles_texcombiner_command_alpha_type.Set_Scale(Value: Single);
begin
  Params['scale'] := Value;
end;

function TXMLGles_texcombiner_command_alpha_type.Get_Argument(Index: Integer): IXMLGles_texcombiner_argument_alpha_type;
begin
  Result := Nodes[Index] as IXMLGles_texcombiner_argument_alpha_type;
end;

function TXMLGles_texcombiner_command_alpha_type.Add: IXMLGles_texcombiner_argument_alpha_type;
begin
  Result := AddItem(-1) as IXMLGles_texcombiner_argument_alpha_type;
end;

function TXMLGles_texcombiner_command_alpha_type.Insert(const Index: Integer): IXMLGles_texcombiner_argument_alpha_type;
begin
  Result := AddItem(Index) as IXMLGles_texcombiner_argument_alpha_type;
end;

{ TXMLGles_texcombiner_argument_alpha_type }

function TXMLGles_texcombiner_argument_alpha_type.Get_Source: UnicodeString;
begin
  Result := Params['source'];
end;

procedure TXMLGles_texcombiner_argument_alpha_type.Set_Source(Value: UnicodeString);
begin
  Params['source'] := Value;
end;

function TXMLGles_texcombiner_argument_alpha_type.Get_Operand: UnicodeString;
begin
  Result := Params['operand'];
end;

procedure TXMLGles_texcombiner_argument_alpha_type.Set_Operand(Value: UnicodeString);
begin
  Params['operand'] := Value;
end;

function TXMLGles_texcombiner_argument_alpha_type.Get_Sampler: UnicodeString;
begin
  Result := Params['sampler'];
end;

procedure TXMLGles_texcombiner_argument_alpha_type.Set_Sampler(Value: UnicodeString);
begin
  Params['sampler'] := Value;
end;

{ TXMLGles_texenv_command_type }

procedure TXMLGles_texenv_command_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('constant', TXMLGles_texture_constant_type);
  inherited;
end;

function TXMLGles_texenv_command_type.Get_Operator_: UnicodeString;
begin
  Result := Params['operator'];
end;

procedure TXMLGles_texenv_command_type.Set_Operator_(Value: UnicodeString);
begin
  Params['operator'] := Value;
end;

function TXMLGles_texenv_command_type.Get_Sampler: UnicodeString;
begin
  Result := Params['sampler'];
end;

procedure TXMLGles_texenv_command_type.Set_Sampler(Value: UnicodeString);
begin
  Params['sampler'] := Value;
end;

function TXMLGles_texenv_command_type.Get_Constant: IXMLGles_texture_constant_type;
begin
  Result := Nodes['constant'] as IXMLGles_texture_constant_type;
end;

{ TXMLGles_texenv_command_typeList }

function TXMLGles_texenv_command_typeList.Add: IXMLGles_texenv_command_type;
begin
  Result := AddItem(-1) as IXMLGles_texenv_command_type;
end;

function TXMLGles_texenv_command_typeList.Insert(const Index: Integer): IXMLGles_texenv_command_type;
begin
  Result := AddItem(Index) as IXMLGles_texenv_command_type;
end;

function TXMLGles_texenv_command_typeList.Get_Item(Index: Integer): IXMLGles_texenv_command_type;
begin
  Result := Nodes[Index] as IXMLGles_texenv_command_type;
end;

{ TXMLProfile_gles_type_technique_pass_evaluate }

procedure TXMLProfile_gles_type_technique_pass_evaluate.DoRegisterChildClasses;
begin
  FClassesTree.Add('color_target', TXMLFx_colortarget_type);
  FClassesTree.Add('depth_target', TXMLFx_depthtarget_type);
  FClassesTree.Add('stencil_target', TXMLFx_stenciltarget_type);
  FClassesTree.Add('color_clear', TXMLFx_clearcolor_type);
  FClassesTree.Add('depth_clear', TXMLFx_cleardepth_type);
  FClassesTree.Add('stencil_clear', TXMLFx_clearstencil_type);
  FColor_target := CreateFilter(TXMLFx_colortarget_typeList, TXMLFx_colortarget_type, IXMLFx_colortarget_type) as IXMLFx_colortarget_typeList;
  FDepth_target := CreateFilter(TXMLFx_depthtarget_typeList, TXMLFx_depthtarget_type, IXMLFx_depthtarget_type) as IXMLFx_depthtarget_typeList;
  FStencil_target := CreateFilter(TXMLFx_stenciltarget_typeList, TXMLFx_stenciltarget_type, IXMLFx_stenciltarget_type) as IXMLFx_stenciltarget_typeList;
  FColor_clear := CreateFilter(TXMLFx_clearcolor_typeList, TXMLFx_clearcolor_type, IXMLFx_clearcolor_type) as IXMLFx_clearcolor_typeList;
  FDepth_clear := CreateFilter(TXMLFx_cleardepth_typeList, TXMLFx_cleardepth_type, IXMLFx_cleardepth_type) as IXMLFx_cleardepth_typeList;
  FStencil_clear := CreateFilter(TXMLFx_clearstencil_typeList, TXMLFx_clearstencil_type, IXMLFx_clearstencil_type) as IXMLFx_clearstencil_typeList;
  inherited;
end;

function TXMLProfile_gles_type_technique_pass_evaluate.Get_Color_target: IXMLFx_colortarget_typeList;
begin
  Result := FColor_target;
end;

function TXMLProfile_gles_type_technique_pass_evaluate.Get_Depth_target: IXMLFx_depthtarget_typeList;
begin
  Result := FDepth_target;
end;

function TXMLProfile_gles_type_technique_pass_evaluate.Get_Stencil_target: IXMLFx_stenciltarget_typeList;
begin
  Result := FStencil_target;
end;

function TXMLProfile_gles_type_technique_pass_evaluate.Get_Color_clear: IXMLFx_clearcolor_typeList;
begin
  Result := FColor_clear;
end;

function TXMLProfile_gles_type_technique_pass_evaluate.Get_Depth_clear: IXMLFx_cleardepth_typeList;
begin
  Result := FDepth_clear;
end;

function TXMLProfile_gles_type_technique_pass_evaluate.Get_Stencil_clear: IXMLFx_clearstencil_typeList;
begin
  Result := FStencil_clear;
end;

function TXMLProfile_gles_type_technique_pass_evaluate.Get_Draw: UnicodeString;
begin
  Result := Nodes['draw'].Content;
end;

procedure TXMLProfile_gles_type_technique_pass_evaluate.Set_Draw(Value: UnicodeString);
begin
  Nodes['draw'].Content := Value;
end;

{ TXMLLibrary_force_fields_type }

procedure TXMLLibrary_force_fields_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('force_field', TXMLForce_field_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FForce_field := CreateFilter(TXMLForce_field_typeList, TXMLForce_field_type, IXMLForce_field_type) as IXMLForce_field_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_force_fields_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_force_fields_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_force_fields_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_force_fields_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_force_fields_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_force_fields_type.Get_Force_field: IXMLForce_field_typeList;
begin
  Result := FForce_field;
end;

function TXMLLibrary_force_fields_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_force_fields_typeList }

function TXMLLibrary_force_fields_typeList.Add: IXMLLibrary_force_fields_type;
begin
  Result := AddItem(-1) as IXMLLibrary_force_fields_type;
end;

function TXMLLibrary_force_fields_typeList.Insert(const Index: Integer): IXMLLibrary_force_fields_type;
begin
  Result := AddItem(Index) as IXMLLibrary_force_fields_type;
end;

function TXMLLibrary_force_fields_typeList.Get_Item(Index: Integer): IXMLLibrary_force_fields_type;
begin
  Result := Nodes[Index] as IXMLLibrary_force_fields_type;
end;

{ TXMLForce_field_type }

procedure TXMLForce_field_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLForce_field_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLForce_field_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLForce_field_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLForce_field_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLForce_field_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLForce_field_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLForce_field_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLForce_field_typeList }

function TXMLForce_field_typeList.Add: IXMLForce_field_type;
begin
  Result := AddItem(-1) as IXMLForce_field_type;
end;

function TXMLForce_field_typeList.Insert(const Index: Integer): IXMLForce_field_type;
begin
  Result := AddItem(Index) as IXMLForce_field_type;
end;

function TXMLForce_field_typeList.Get_Item(Index: Integer): IXMLForce_field_type;
begin
  Result := Nodes[Index] as IXMLForce_field_type;
end;

{ TXMLLibrary_images_type }

procedure TXMLLibrary_images_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('image', TXMLImage_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FImage := CreateFilter(TXMLImage_typeList, TXMLImage_type, IXMLImage_type) as IXMLImage_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_images_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_images_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_images_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_images_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_images_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_images_type.Get_Image: IXMLImage_typeList;
begin
  Result := FImage;
end;

function TXMLLibrary_images_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_images_typeList }

function TXMLLibrary_images_typeList.Add: IXMLLibrary_images_type;
begin
  Result := AddItem(-1) as IXMLLibrary_images_type;
end;

function TXMLLibrary_images_typeList.Insert(const Index: Integer): IXMLLibrary_images_type;
begin
  Result := AddItem(Index) as IXMLLibrary_images_type;
end;

function TXMLLibrary_images_typeList.Get_Item(Index: Integer): IXMLLibrary_images_type;
begin
  Result := Nodes[Index] as IXMLLibrary_images_type;
end;

{ TXMLImage_type }

procedure TXMLImage_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('renderable', TXMLImage_type_renderable);
  FClassesTree.Add('init_from', TXMLImage_type_init_from);
  FClassesTree.Add('create_2d', TXMLImage_type_create_2d);
  FClassesTree.Add('create_3d', TXMLImage_type_create_3d);
  FClassesTree.Add('create_cube', TXMLImage_type_create_cube);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLImage_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLImage_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLImage_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLImage_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLImage_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLImage_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLImage_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLImage_type.Get_Renderable: IXMLImage_type_renderable;
begin
  Result := Nodes['renderable'] as IXMLImage_type_renderable;
end;

function TXMLImage_type.Get_Init_from: IXMLImage_type_init_from;
begin
  Result := Nodes['init_from'] as IXMLImage_type_init_from;
end;

function TXMLImage_type.Get_Create_2d: IXMLImage_type_create_2d;
begin
  Result := Nodes['create_2d'] as IXMLImage_type_create_2d;
end;

function TXMLImage_type.Get_Create_3d: IXMLImage_type_create_3d;
begin
  Result := Nodes['create_3d'] as IXMLImage_type_create_3d;
end;

function TXMLImage_type.Get_Create_cube: IXMLImage_type_create_cube;
begin
  Result := Nodes['create_cube'] as IXMLImage_type_create_cube;
end;

function TXMLImage_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLImage_typeList }

function TXMLImage_typeList.Add: IXMLImage_type;
begin
  Result := AddItem(-1) as IXMLImage_type;
end;

function TXMLImage_typeList.Insert(const Index: Integer): IXMLImage_type;
begin
  Result := AddItem(Index) as IXMLImage_type;
end;

function TXMLImage_typeList.Get_Item(Index: Integer): IXMLImage_type;
begin
  Result := Nodes[Index] as IXMLImage_type;
end;

{ TXMLImage_type_renderable }

function TXMLImage_type_renderable.Get_Share: Boolean;
begin
  Result := Params['share'];
end;

procedure TXMLImage_type_renderable.Set_Share(Value: Boolean);
begin
  Params['share'] := Value;
end;

{ TXMLImage_source_type }

procedure TXMLImage_source_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('hex', TXMLImage_source_type_hex);
  inherited;
end;

function TXMLImage_source_type.Get_Ref: UnicodeString;
begin
  Result := Nodes['ref'].Content;
end;

procedure TXMLImage_source_type.Set_Ref(Value: UnicodeString);
begin
  Nodes['ref'].Content := Value;
end;

function TXMLImage_source_type.Get_Hex: IXMLImage_source_type_hex;
begin
  Result := Nodes['hex'] as IXMLImage_source_type_hex;
end;

{ TXMLImage_source_type_hex }

function TXMLImage_source_type_hex.Get_Format: UnicodeString;
begin
  Result := Params['format'];
end;

procedure TXMLImage_source_type_hex.Set_Format(Value: UnicodeString);
begin
  Params['format'] := Value;
end;

{ TXMLImage_type_init_from }

function TXMLImage_type_init_from.Get_Mips_generate: Boolean;
begin
  Result := Params['mips_generate'];
end;

procedure TXMLImage_type_init_from.Set_Mips_generate(Value: Boolean);
begin
  Params['mips_generate'] := Value;
end;

{ TXMLImage_type_create_2d }

procedure TXMLImage_type_create_2d.DoRegisterChildClasses;
begin
  FClassesTree.Add('size_exact', TXMLImage_type_create_2d_size_exact);
  FClassesTree.Add('size_ratio', TXMLImage_type_create_2d_size_ratio);
  FClassesTree.Add('mips', TXMLImage_mips_type);
  FClassesTree.Add('array', TXMLImage_type_create_2d_array);
  FClassesTree.Add('format', TXMLImage_type_create_2d_format);
  FClassesTree.Add('init_from', TXMLImage_type_create_2d_init_from);
  FInit_from := CreateFilter(TXMLImage_type_create_2d_init_fromList, TXMLImage_type_create_2d_init_from, IXMLImage_type_create_2d_init_from) as IXMLImage_type_create_2d_init_fromList;
  inherited;
end;

function TXMLImage_type_create_2d.Get_Size_exact: IXMLImage_type_create_2d_size_exact;
begin
  Result := Nodes['size_exact'] as IXMLImage_type_create_2d_size_exact;
end;

function TXMLImage_type_create_2d.Get_Size_ratio: IXMLImage_type_create_2d_size_ratio;
begin
  Result := Nodes['size_ratio'] as IXMLImage_type_create_2d_size_ratio;
end;

function TXMLImage_type_create_2d.Get_Mips: IXMLImage_mips_type;
begin
  Result := Nodes['mips'] as IXMLImage_mips_type;
end;

function TXMLImage_type_create_2d.Get_Unnormalized: UnicodeString;
begin
  Result := Nodes['unnormalized'].Content;
end;

procedure TXMLImage_type_create_2d.Set_Unnormalized(Value: UnicodeString);
begin
  Nodes['unnormalized'].Content := Value;
end;

function TXMLImage_type_create_2d.Get_Array_: IXMLImage_type_create_2d_array;
begin
  Result := Nodes['array'] as IXMLImage_type_create_2d_array;
end;

function TXMLImage_type_create_2d.Get_Format: IXMLImage_type_create_2d_format;
begin
  Result := Nodes['format'] as IXMLImage_type_create_2d_format;
end;

function TXMLImage_type_create_2d.Get_Init_from: IXMLImage_type_create_2d_init_fromList;
begin
  Result := FInit_from;
end;

{ TXMLImage_type_create_2d_size_exact }

function TXMLImage_type_create_2d_size_exact.Get_Width: LongWord;
begin
  Result := Params['width'];
end;

procedure TXMLImage_type_create_2d_size_exact.Set_Width(Value: LongWord);
begin
  Params['width'] := Value;
end;

function TXMLImage_type_create_2d_size_exact.Get_Height: LongWord;
begin
  Result := Params['height'];
end;

procedure TXMLImage_type_create_2d_size_exact.Set_Height(Value: LongWord);
begin
  Params['height'] := Value;
end;

{ TXMLImage_type_create_2d_size_ratio }

function TXMLImage_type_create_2d_size_ratio.Get_Width: Single;
begin
  Result := Params['width'];
end;

procedure TXMLImage_type_create_2d_size_ratio.Set_Width(Value: Single);
begin
  Params['width'] := Value;
end;

function TXMLImage_type_create_2d_size_ratio.Get_Height: Single;
begin
  Result := Params['height'];
end;

procedure TXMLImage_type_create_2d_size_ratio.Set_Height(Value: Single);
begin
  Params['height'] := Value;
end;

{ TXMLImage_mips_type }

function TXMLImage_mips_type.Get_Levels: LongWord;
begin
  Result := Params['levels'];
end;

procedure TXMLImage_mips_type.Set_Levels(Value: LongWord);
begin
  Params['levels'] := Value;
end;

function TXMLImage_mips_type.Get_Auto_generate: Boolean;
begin
  Result := Params['auto_generate'];
end;

procedure TXMLImage_mips_type.Set_Auto_generate(Value: Boolean);
begin
  Params['auto_generate'] := Value;
end;

{ TXMLImage_type_create_2d_array }

function TXMLImage_type_create_2d_array.Get_Length: LongWord;
begin
  Result := Params['length'];
end;

procedure TXMLImage_type_create_2d_array.Set_Length(Value: LongWord);
begin
  Params['length'] := Value;
end;

{ TXMLImage_type_create_2d_format }

procedure TXMLImage_type_create_2d_format.DoRegisterChildClasses;
begin
  FClassesTree.Add('hint', TXMLImage_type_create_2d_format_hint);
  inherited;
end;

function TXMLImage_type_create_2d_format.Get_Hint: IXMLImage_type_create_2d_format_hint;
begin
  Result := Nodes['hint'] as IXMLImage_type_create_2d_format_hint;
end;

function TXMLImage_type_create_2d_format.Get_Exact: UnicodeString;
begin
  Result := Nodes['exact'].Content;
end;

procedure TXMLImage_type_create_2d_format.Set_Exact(Value: UnicodeString);
begin
  Nodes['exact'].Content := Value;
end;

{ TXMLImage_type_create_2d_format_hint }

function TXMLImage_type_create_2d_format_hint.Get_Channels: UnicodeString;
begin
  Result := Params['channels'];
end;

procedure TXMLImage_type_create_2d_format_hint.Set_Channels(Value: UnicodeString);
begin
  Params['channels'] := Value;
end;

function TXMLImage_type_create_2d_format_hint.Get_Range: UnicodeString;
begin
  Result := Params['range'];
end;

procedure TXMLImage_type_create_2d_format_hint.Set_Range(Value: UnicodeString);
begin
  Params['range'] := Value;
end;

function TXMLImage_type_create_2d_format_hint.Get_Precision: UnicodeString;
begin
  Result := Params['precision'];
end;

procedure TXMLImage_type_create_2d_format_hint.Set_Precision(Value: UnicodeString);
begin
  Params['precision'] := Value;
end;

function TXMLImage_type_create_2d_format_hint.Get_Space: UnicodeString;
begin
  Result := Params['space'];
end;

procedure TXMLImage_type_create_2d_format_hint.Set_Space(Value: UnicodeString);
begin
  Params['space'] := Value;
end;

{ TXMLImage_type_create_2d_init_from }

function TXMLImage_type_create_2d_init_from.Get_Mip_index: LongWord;
begin
  Result := Params['mip_index'];
end;

procedure TXMLImage_type_create_2d_init_from.Set_Mip_index(Value: LongWord);
begin
  Params['mip_index'] := Value;
end;

function TXMLImage_type_create_2d_init_from.Get_Array_index: LongWord;
begin
  Result := Params['array_index'];
end;

procedure TXMLImage_type_create_2d_init_from.Set_Array_index(Value: LongWord);
begin
  Params['array_index'] := Value;
end;

{ TXMLImage_type_create_2d_init_fromList }

function TXMLImage_type_create_2d_init_fromList.Add: IXMLImage_type_create_2d_init_from;
begin
  Result := AddItem(-1) as IXMLImage_type_create_2d_init_from;
end;

function TXMLImage_type_create_2d_init_fromList.Insert(const Index: Integer): IXMLImage_type_create_2d_init_from;
begin
  Result := AddItem(Index) as IXMLImage_type_create_2d_init_from;
end;

function TXMLImage_type_create_2d_init_fromList.Get_Item(Index: Integer): IXMLImage_type_create_2d_init_from;
begin
  Result := Nodes[Index] as IXMLImage_type_create_2d_init_from;
end;

{ TXMLImage_type_create_3d }

procedure TXMLImage_type_create_3d.DoRegisterChildClasses;
begin
  FClassesTree.Add('size', TXMLImage_type_create_3d_size);
  FClassesTree.Add('mips', TXMLImage_mips_type);
  FClassesTree.Add('array', TXMLImage_type_create_3d_array);
  FClassesTree.Add('format', TXMLImage_type_create_3d_format);
  FClassesTree.Add('init_from', TXMLImage_type_create_3d_init_from);
  FInit_from := CreateFilter(TXMLImage_type_create_3d_init_fromList, TXMLImage_type_create_3d_init_from, IXMLImage_type_create_3d_init_from) as IXMLImage_type_create_3d_init_fromList;
  inherited;
end;

function TXMLImage_type_create_3d.Get_Size: IXMLImage_type_create_3d_size;
begin
  Result := Nodes['size'] as IXMLImage_type_create_3d_size;
end;

function TXMLImage_type_create_3d.Get_Mips: IXMLImage_mips_type;
begin
  Result := Nodes['mips'] as IXMLImage_mips_type;
end;

function TXMLImage_type_create_3d.Get_Array_: IXMLImage_type_create_3d_array;
begin
  Result := Nodes['array'] as IXMLImage_type_create_3d_array;
end;

function TXMLImage_type_create_3d.Get_Format: IXMLImage_type_create_3d_format;
begin
  Result := Nodes['format'] as IXMLImage_type_create_3d_format;
end;

function TXMLImage_type_create_3d.Get_Init_from: IXMLImage_type_create_3d_init_fromList;
begin
  Result := FInit_from;
end;

{ TXMLImage_type_create_3d_size }

function TXMLImage_type_create_3d_size.Get_Width: LongWord;
begin
  Result := Params['width'];
end;

procedure TXMLImage_type_create_3d_size.Set_Width(Value: LongWord);
begin
  Params['width'] := Value;
end;

function TXMLImage_type_create_3d_size.Get_Height: LongWord;
begin
  Result := Params['height'];
end;

procedure TXMLImage_type_create_3d_size.Set_Height(Value: LongWord);
begin
  Params['height'] := Value;
end;

function TXMLImage_type_create_3d_size.Get_Depth: LongWord;
begin
  Result := Params['depth'];
end;

procedure TXMLImage_type_create_3d_size.Set_Depth(Value: LongWord);
begin
  Params['depth'] := Value;
end;

{ TXMLImage_type_create_3d_array }

function TXMLImage_type_create_3d_array.Get_Length: LongWord;
begin
  Result := Params['length'];
end;

procedure TXMLImage_type_create_3d_array.Set_Length(Value: LongWord);
begin
  Params['length'] := Value;
end;

{ TXMLImage_type_create_3d_format }

procedure TXMLImage_type_create_3d_format.DoRegisterChildClasses;
begin
  FClassesTree.Add('hint', TXMLImage_type_create_3d_format_hint);
  inherited;
end;

function TXMLImage_type_create_3d_format.Get_Hint: IXMLImage_type_create_3d_format_hint;
begin
  Result := Nodes['hint'] as IXMLImage_type_create_3d_format_hint;
end;

function TXMLImage_type_create_3d_format.Get_Exact: UnicodeString;
begin
  Result := Nodes['exact'].Content;
end;

procedure TXMLImage_type_create_3d_format.Set_Exact(Value: UnicodeString);
begin
  Nodes['exact'].Content := Value;
end;

{ TXMLImage_type_create_3d_format_hint }

function TXMLImage_type_create_3d_format_hint.Get_Channels: UnicodeString;
begin
  Result := Params['channels'];
end;

procedure TXMLImage_type_create_3d_format_hint.Set_Channels(Value: UnicodeString);
begin
  Params['channels'] := Value;
end;

function TXMLImage_type_create_3d_format_hint.Get_Range: UnicodeString;
begin
  Result := Params['range'];
end;

procedure TXMLImage_type_create_3d_format_hint.Set_Range(Value: UnicodeString);
begin
  Params['range'] := Value;
end;

function TXMLImage_type_create_3d_format_hint.Get_Precision: UnicodeString;
begin
  Result := Params['precision'];
end;

procedure TXMLImage_type_create_3d_format_hint.Set_Precision(Value: UnicodeString);
begin
  Params['precision'] := Value;
end;

function TXMLImage_type_create_3d_format_hint.Get_Space: UnicodeString;
begin
  Result := Params['space'];
end;

procedure TXMLImage_type_create_3d_format_hint.Set_Space(Value: UnicodeString);
begin
  Params['space'] := Value;
end;

{ TXMLImage_type_create_3d_init_from }

function TXMLImage_type_create_3d_init_from.Get_Depth: LongWord;
begin
  Result := Params['depth'];
end;

procedure TXMLImage_type_create_3d_init_from.Set_Depth(Value: LongWord);
begin
  Params['depth'] := Value;
end;

function TXMLImage_type_create_3d_init_from.Get_Mip_index: LongWord;
begin
  Result := Params['mip_index'];
end;

procedure TXMLImage_type_create_3d_init_from.Set_Mip_index(Value: LongWord);
begin
  Params['mip_index'] := Value;
end;

function TXMLImage_type_create_3d_init_from.Get_Array_index: LongWord;
begin
  Result := Params['array_index'];
end;

procedure TXMLImage_type_create_3d_init_from.Set_Array_index(Value: LongWord);
begin
  Params['array_index'] := Value;
end;

{ TXMLImage_type_create_3d_init_fromList }

function TXMLImage_type_create_3d_init_fromList.Add: IXMLImage_type_create_3d_init_from;
begin
  Result := AddItem(-1) as IXMLImage_type_create_3d_init_from;
end;

function TXMLImage_type_create_3d_init_fromList.Insert(const Index: Integer): IXMLImage_type_create_3d_init_from;
begin
  Result := AddItem(Index) as IXMLImage_type_create_3d_init_from;
end;

function TXMLImage_type_create_3d_init_fromList.Get_Item(Index: Integer): IXMLImage_type_create_3d_init_from;
begin
  Result := Nodes[Index] as IXMLImage_type_create_3d_init_from;
end;

{ TXMLImage_type_create_cube }

procedure TXMLImage_type_create_cube.DoRegisterChildClasses;
begin
  FClassesTree.Add('size', TXMLImage_type_create_cube_size);
  FClassesTree.Add('mips', TXMLImage_mips_type);
  FClassesTree.Add('array', TXMLImage_type_create_cube_array);
  FClassesTree.Add('format', TXMLImage_type_create_cube_format);
  FClassesTree.Add('init_from', TXMLImage_type_create_cube_init_from);
  FInit_from := CreateFilter(TXMLImage_type_create_cube_init_fromList, TXMLImage_type_create_cube_init_from, IXMLImage_type_create_cube_init_from) as IXMLImage_type_create_cube_init_fromList;
  inherited;
end;

function TXMLImage_type_create_cube.Get_Size: IXMLImage_type_create_cube_size;
begin
  Result := Nodes['size'] as IXMLImage_type_create_cube_size;
end;

function TXMLImage_type_create_cube.Get_Mips: IXMLImage_mips_type;
begin
  Result := Nodes['mips'] as IXMLImage_mips_type;
end;

function TXMLImage_type_create_cube.Get_Array_: IXMLImage_type_create_cube_array;
begin
  Result := Nodes['array'] as IXMLImage_type_create_cube_array;
end;

function TXMLImage_type_create_cube.Get_Format: IXMLImage_type_create_cube_format;
begin
  Result := Nodes['format'] as IXMLImage_type_create_cube_format;
end;

function TXMLImage_type_create_cube.Get_Init_from: IXMLImage_type_create_cube_init_fromList;
begin
  Result := FInit_from;
end;

{ TXMLImage_type_create_cube_size }

function TXMLImage_type_create_cube_size.Get_Width: LongWord;
begin
  Result := Params['width'];
end;

procedure TXMLImage_type_create_cube_size.Set_Width(Value: LongWord);
begin
  Params['width'] := Value;
end;

{ TXMLImage_type_create_cube_array }

function TXMLImage_type_create_cube_array.Get_Length: LongWord;
begin
  Result := Params['length'];
end;

procedure TXMLImage_type_create_cube_array.Set_Length(Value: LongWord);
begin
  Params['length'] := Value;
end;

{ TXMLImage_type_create_cube_format }

procedure TXMLImage_type_create_cube_format.DoRegisterChildClasses;
begin
  FClassesTree.Add('hint', TXMLImage_type_create_cube_format_hint);
  inherited;
end;

function TXMLImage_type_create_cube_format.Get_Hint: IXMLImage_type_create_cube_format_hint;
begin
  Result := Nodes['hint'] as IXMLImage_type_create_cube_format_hint;
end;

function TXMLImage_type_create_cube_format.Get_Exact: UnicodeString;
begin
  Result := Nodes['exact'].Content;
end;

procedure TXMLImage_type_create_cube_format.Set_Exact(Value: UnicodeString);
begin
  Nodes['exact'].Content := Value;
end;

{ TXMLImage_type_create_cube_format_hint }

function TXMLImage_type_create_cube_format_hint.Get_Channels: UnicodeString;
begin
  Result := Params['channels'];
end;

procedure TXMLImage_type_create_cube_format_hint.Set_Channels(Value: UnicodeString);
begin
  Params['channels'] := Value;
end;

function TXMLImage_type_create_cube_format_hint.Get_Range: UnicodeString;
begin
  Result := Params['range'];
end;

procedure TXMLImage_type_create_cube_format_hint.Set_Range(Value: UnicodeString);
begin
  Params['range'] := Value;
end;

function TXMLImage_type_create_cube_format_hint.Get_Precision: UnicodeString;
begin
  Result := Params['precision'];
end;

procedure TXMLImage_type_create_cube_format_hint.Set_Precision(Value: UnicodeString);
begin
  Params['precision'] := Value;
end;

function TXMLImage_type_create_cube_format_hint.Get_Space: UnicodeString;
begin
  Result := Params['space'];
end;

procedure TXMLImage_type_create_cube_format_hint.Set_Space(Value: UnicodeString);
begin
  Params['space'] := Value;
end;

{ TXMLImage_type_create_cube_init_from }

function TXMLImage_type_create_cube_init_from.Get_Face: UnicodeString;
begin
  Result := Params['face'];
end;

procedure TXMLImage_type_create_cube_init_from.Set_Face(Value: UnicodeString);
begin
  Params['face'] := Value;
end;

function TXMLImage_type_create_cube_init_from.Get_Mip_index: LongWord;
begin
  Result := Params['mip_index'];
end;

procedure TXMLImage_type_create_cube_init_from.Set_Mip_index(Value: LongWord);
begin
  Params['mip_index'] := Value;
end;

function TXMLImage_type_create_cube_init_from.Get_Array_index: LongWord;
begin
  Result := Params['array_index'];
end;

procedure TXMLImage_type_create_cube_init_from.Set_Array_index(Value: LongWord);
begin
  Params['array_index'] := Value;
end;

{ TXMLImage_type_create_cube_init_fromList }

function TXMLImage_type_create_cube_init_fromList.Add: IXMLImage_type_create_cube_init_from;
begin
  Result := AddItem(-1) as IXMLImage_type_create_cube_init_from;
end;

function TXMLImage_type_create_cube_init_fromList.Insert(const Index: Integer): IXMLImage_type_create_cube_init_from;
begin
  Result := AddItem(Index) as IXMLImage_type_create_cube_init_from;
end;

function TXMLImage_type_create_cube_init_fromList.Get_Item(Index: Integer): IXMLImage_type_create_cube_init_from;
begin
  Result := Nodes[Index] as IXMLImage_type_create_cube_init_from;
end;

{ TXMLLibrary_lights_type }

procedure TXMLLibrary_lights_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('light', TXMLLight_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FLight := CreateFilter(TXMLLight_typeList, TXMLLight_type, IXMLLight_type) as IXMLLight_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_lights_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_lights_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_lights_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_lights_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_lights_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_lights_type.Get_Light: IXMLLight_typeList;
begin
  Result := FLight;
end;

function TXMLLibrary_lights_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_lights_typeList }

function TXMLLibrary_lights_typeList.Add: IXMLLibrary_lights_type;
begin
  Result := AddItem(-1) as IXMLLibrary_lights_type;
end;

function TXMLLibrary_lights_typeList.Insert(const Index: Integer): IXMLLibrary_lights_type;
begin
  Result := AddItem(Index) as IXMLLibrary_lights_type;
end;

function TXMLLibrary_lights_typeList.Get_Item(Index: Integer): IXMLLibrary_lights_type;
begin
  Result := Nodes[Index] as IXMLLibrary_lights_type;
end;

{ TXMLLight_type }

procedure TXMLLight_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('technique_common', TXMLLight_type_technique_common);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLight_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLight_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLight_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLight_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLight_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLight_type.Get_Technique_common: IXMLLight_type_technique_common;
begin
  Result := Nodes['technique_common'] as IXMLLight_type_technique_common;
end;

function TXMLLight_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLLight_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLight_typeList }

function TXMLLight_typeList.Add: IXMLLight_type;
begin
  Result := AddItem(-1) as IXMLLight_type;
end;

function TXMLLight_typeList.Insert(const Index: Integer): IXMLLight_type;
begin
  Result := AddItem(Index) as IXMLLight_type;
end;

function TXMLLight_typeList.Get_Item(Index: Integer): IXMLLight_type;
begin
  Result := Nodes[Index] as IXMLLight_type;
end;

{ TXMLLight_type_technique_common }

procedure TXMLLight_type_technique_common.DoRegisterChildClasses;
begin
  FClassesTree.Add('ambient', TXMLLight_type_technique_common_ambient);
  FClassesTree.Add('directional', TXMLLight_type_technique_common_directional);
  FClassesTree.Add('point', TXMLLight_type_technique_common_point);
  FClassesTree.Add('spot', TXMLLight_type_technique_common_spot);
  inherited;
end;

function TXMLLight_type_technique_common.Get_Ambient: IXMLLight_type_technique_common_ambient;
begin
  Result := Nodes['ambient'] as IXMLLight_type_technique_common_ambient;
end;

function TXMLLight_type_technique_common.Get_Directional: IXMLLight_type_technique_common_directional;
begin
  Result := Nodes['directional'] as IXMLLight_type_technique_common_directional;
end;

function TXMLLight_type_technique_common.Get_Point: IXMLLight_type_technique_common_point;
begin
  Result := Nodes['point'] as IXMLLight_type_technique_common_point;
end;

function TXMLLight_type_technique_common.Get_Spot: IXMLLight_type_technique_common_spot;
begin
  Result := Nodes['spot'] as IXMLLight_type_technique_common_spot;
end;

{ TXMLLight_type_technique_common_ambient }

procedure TXMLLight_type_technique_common_ambient.DoRegisterChildClasses;
begin
  FClassesTree.Add('color', TXMLTargetable_float3_type);
  inherited;
end;

function TXMLLight_type_technique_common_ambient.Get_Color: IXMLTargetable_float3_type;
begin
  Result := Nodes['color'] as IXMLTargetable_float3_type;
end;

{ TXMLTargetable_float3_type }

function TXMLTargetable_float3_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLTargetable_float3_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLLight_type_technique_common_directional }

procedure TXMLLight_type_technique_common_directional.DoRegisterChildClasses;
begin
  FClassesTree.Add('color', TXMLTargetable_float3_type);
  inherited;
end;

function TXMLLight_type_technique_common_directional.Get_Color: IXMLTargetable_float3_type;
begin
  Result := Nodes['color'] as IXMLTargetable_float3_type;
end;

{ TXMLLight_type_technique_common_point }

procedure TXMLLight_type_technique_common_point.DoRegisterChildClasses;
begin
  FClassesTree.Add('color', TXMLTargetable_float3_type);
  FClassesTree.Add('constant_attenuation', TXMLTargetable_float_type);
  FClassesTree.Add('linear_attenuation', TXMLTargetable_float_type);
  FClassesTree.Add('quadratic_attenuation', TXMLTargetable_float_type);
  inherited;
end;

function TXMLLight_type_technique_common_point.Get_Color: IXMLTargetable_float3_type;
begin
  Result := Nodes['color'] as IXMLTargetable_float3_type;
end;

function TXMLLight_type_technique_common_point.Get_Constant_attenuation: IXMLTargetable_float_type;
begin
  Result := Nodes['constant_attenuation'] as IXMLTargetable_float_type;
end;

function TXMLLight_type_technique_common_point.Get_Linear_attenuation: IXMLTargetable_float_type;
begin
  Result := Nodes['linear_attenuation'] as IXMLTargetable_float_type;
end;

function TXMLLight_type_technique_common_point.Get_Quadratic_attenuation: IXMLTargetable_float_type;
begin
  Result := Nodes['quadratic_attenuation'] as IXMLTargetable_float_type;
end;

{ TXMLLight_type_technique_common_spot }

procedure TXMLLight_type_technique_common_spot.DoRegisterChildClasses;
begin
  FClassesTree.Add('color', TXMLTargetable_float3_type);
  FClassesTree.Add('constant_attenuation', TXMLTargetable_float_type);
  FClassesTree.Add('linear_attenuation', TXMLTargetable_float_type);
  FClassesTree.Add('quadratic_attenuation', TXMLTargetable_float_type);
  FClassesTree.Add('falloff_angle', TXMLTargetable_float_type);
  FClassesTree.Add('falloff_exponent', TXMLTargetable_float_type);
  inherited;
end;

function TXMLLight_type_technique_common_spot.Get_Color: IXMLTargetable_float3_type;
begin
  Result := Nodes['color'] as IXMLTargetable_float3_type;
end;

function TXMLLight_type_technique_common_spot.Get_Constant_attenuation: IXMLTargetable_float_type;
begin
  Result := Nodes['constant_attenuation'] as IXMLTargetable_float_type;
end;

function TXMLLight_type_technique_common_spot.Get_Linear_attenuation: IXMLTargetable_float_type;
begin
  Result := Nodes['linear_attenuation'] as IXMLTargetable_float_type;
end;

function TXMLLight_type_technique_common_spot.Get_Quadratic_attenuation: IXMLTargetable_float_type;
begin
  Result := Nodes['quadratic_attenuation'] as IXMLTargetable_float_type;
end;

function TXMLLight_type_technique_common_spot.Get_Falloff_angle: IXMLTargetable_float_type;
begin
  Result := Nodes['falloff_angle'] as IXMLTargetable_float_type;
end;

function TXMLLight_type_technique_common_spot.Get_Falloff_exponent: IXMLTargetable_float_type;
begin
  Result := Nodes['falloff_exponent'] as IXMLTargetable_float_type;
end;

{ TXMLLibrary_materials_type }

procedure TXMLLibrary_materials_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('material', TXMLMaterial_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FMaterial := CreateFilter(TXMLMaterial_typeList, TXMLMaterial_type, IXMLMaterial_type) as IXMLMaterial_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_materials_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_materials_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_materials_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_materials_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_materials_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_materials_type.Get_Material: IXMLMaterial_typeList;
begin
  Result := FMaterial;
end;

function TXMLLibrary_materials_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_materials_typeList }

function TXMLLibrary_materials_typeList.Add: IXMLLibrary_materials_type;
begin
  Result := AddItem(-1) as IXMLLibrary_materials_type;
end;

function TXMLLibrary_materials_typeList.Insert(const Index: Integer): IXMLLibrary_materials_type;
begin
  Result := AddItem(Index) as IXMLLibrary_materials_type;
end;

function TXMLLibrary_materials_typeList.Get_Item(Index: Integer): IXMLLibrary_materials_type;
begin
  Result := Nodes[Index] as IXMLLibrary_materials_type;
end;

{ TXMLMaterial_type }

procedure TXMLMaterial_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('instance_effect', TXMLInstance_effect_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLMaterial_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMaterial_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMaterial_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLMaterial_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLMaterial_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLMaterial_type.Get_Instance_effect: IXMLInstance_effect_type;
begin
  Result := Nodes['instance_effect'] as IXMLInstance_effect_type;
end;

function TXMLMaterial_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLMaterial_typeList }

function TXMLMaterial_typeList.Add: IXMLMaterial_type;
begin
  Result := AddItem(-1) as IXMLMaterial_type;
end;

function TXMLMaterial_typeList.Insert(const Index: Integer): IXMLMaterial_type;
begin
  Result := AddItem(Index) as IXMLMaterial_type;
end;

function TXMLMaterial_typeList.Get_Item(Index: Integer): IXMLMaterial_type;
begin
  Result := Nodes[Index] as IXMLMaterial_type;
end;

{ TXMLInstance_effect_type }

procedure TXMLInstance_effect_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('technique_hint', TXMLInstance_effect_type_technique_hint);
  FClassesTree.Add('setparam', TXMLInstance_effect_type_setparam);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTechnique_hint := CreateFilter(TXMLInstance_effect_type_technique_hintList, TXMLInstance_effect_type_technique_hint, IXMLInstance_effect_type_technique_hint) as IXMLInstance_effect_type_technique_hintList;
  FSetparam := CreateFilter(TXMLInstance_effect_type_setparamList, TXMLInstance_effect_type_setparam, IXMLInstance_effect_type_setparam) as IXMLInstance_effect_type_setparamList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLInstance_effect_type.Get_Url: UnicodeString;
begin
  Result := Params['url'];
end;

procedure TXMLInstance_effect_type.Set_Url(Value: UnicodeString);
begin
  Params['url'] := Value;
end;

function TXMLInstance_effect_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_effect_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLInstance_effect_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInstance_effect_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInstance_effect_type.Get_Technique_hint: IXMLInstance_effect_type_technique_hintList;
begin
  Result := FTechnique_hint;
end;

function TXMLInstance_effect_type.Get_Setparam: IXMLInstance_effect_type_setparamList;
begin
  Result := FSetparam;
end;

function TXMLInstance_effect_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_effect_type_technique_hint }

function TXMLInstance_effect_type_technique_hint.Get_Platform: UnicodeString;
begin
  Result := Params['platform'];
end;

procedure TXMLInstance_effect_type_technique_hint.Set_Platform(Value: UnicodeString);
begin
  Params['platform'] := Value;
end;

function TXMLInstance_effect_type_technique_hint.Get_Profile: UnicodeString;
begin
  Result := Params['profile'];
end;

procedure TXMLInstance_effect_type_technique_hint.Set_Profile(Value: UnicodeString);
begin
  Params['profile'] := Value;
end;

function TXMLInstance_effect_type_technique_hint.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLInstance_effect_type_technique_hint.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

{ TXMLInstance_effect_type_technique_hintList }

function TXMLInstance_effect_type_technique_hintList.Add: IXMLInstance_effect_type_technique_hint;
begin
  Result := AddItem(-1) as IXMLInstance_effect_type_technique_hint;
end;

function TXMLInstance_effect_type_technique_hintList.Insert(const Index: Integer): IXMLInstance_effect_type_technique_hint;
begin
  Result := AddItem(Index) as IXMLInstance_effect_type_technique_hint;
end;

function TXMLInstance_effect_type_technique_hintList.Get_Item(Index: Integer): IXMLInstance_effect_type_technique_hint;
begin
  Result := Nodes[Index] as IXMLInstance_effect_type_technique_hint;
end;

{ TXMLInstance_effect_type_setparam }

procedure TXMLInstance_effect_type_setparam.DoRegisterChildClasses;
begin
  FClassesTree.Add('sampler_image', TXMLInstance_image_type);
  FClassesTree.Add('sampler_states', TXMLSampler_states);
  inherited;
end;

function TXMLInstance_effect_type_setparam.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLInstance_effect_type_setparam.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Bool2: UnicodeString;
begin
  Result := Nodes['bool2'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Bool2(Value: UnicodeString);
begin
  Nodes['bool2'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Bool3: UnicodeString;
begin
  Result := Nodes['bool3'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Bool3(Value: UnicodeString);
begin
  Nodes['bool3'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Bool4: UnicodeString;
begin
  Result := Nodes['bool4'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Bool4(Value: UnicodeString);
begin
  Nodes['bool4'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Int2: UnicodeString;
begin
  Result := Nodes['int2'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Int2(Value: UnicodeString);
begin
  Nodes['int2'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Int3: UnicodeString;
begin
  Result := Nodes['int3'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Int3(Value: UnicodeString);
begin
  Nodes['int3'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Int4: UnicodeString;
begin
  Result := Nodes['int4'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Int4(Value: UnicodeString);
begin
  Nodes['int4'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float3: UnicodeString;
begin
  Result := Nodes['float3'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float3(Value: UnicodeString);
begin
  Nodes['float3'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float4: UnicodeString;
begin
  Result := Nodes['float4'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float4(Value: UnicodeString);
begin
  Nodes['float4'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float2x1: UnicodeString;
begin
  Result := Nodes['float2x1'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float2x1(Value: UnicodeString);
begin
  Nodes['float2x1'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float2x2: UnicodeString;
begin
  Result := Nodes['float2x2'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float2x2(Value: UnicodeString);
begin
  Nodes['float2x2'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float2x3: UnicodeString;
begin
  Result := Nodes['float2x3'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float2x3(Value: UnicodeString);
begin
  Nodes['float2x3'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float2x4: UnicodeString;
begin
  Result := Nodes['float2x4'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float2x4(Value: UnicodeString);
begin
  Nodes['float2x4'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float3x1: UnicodeString;
begin
  Result := Nodes['float3x1'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float3x1(Value: UnicodeString);
begin
  Nodes['float3x1'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float3x2: UnicodeString;
begin
  Result := Nodes['float3x2'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float3x2(Value: UnicodeString);
begin
  Nodes['float3x2'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float3x3: UnicodeString;
begin
  Result := Nodes['float3x3'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float3x3(Value: UnicodeString);
begin
  Nodes['float3x3'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float3x4: UnicodeString;
begin
  Result := Nodes['float3x4'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float3x4(Value: UnicodeString);
begin
  Nodes['float3x4'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float4x1: UnicodeString;
begin
  Result := Nodes['float4x1'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float4x1(Value: UnicodeString);
begin
  Nodes['float4x1'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float4x2: UnicodeString;
begin
  Result := Nodes['float4x2'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float4x2(Value: UnicodeString);
begin
  Nodes['float4x2'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float4x3: UnicodeString;
begin
  Result := Nodes['float4x3'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float4x3(Value: UnicodeString);
begin
  Nodes['float4x3'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Float4x4: UnicodeString;
begin
  Result := Nodes['float4x4'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Float4x4(Value: UnicodeString);
begin
  Nodes['float4x4'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Enum: UnicodeString;
begin
  Result := Nodes['enum'].Content;
end;

procedure TXMLInstance_effect_type_setparam.Set_Enum(Value: UnicodeString);
begin
  Nodes['enum'].Content := Value;
end;

function TXMLInstance_effect_type_setparam.Get_Sampler_image: IXMLInstance_image_type;
begin
  Result := Nodes['sampler_image'] as IXMLInstance_image_type;
end;

function TXMLInstance_effect_type_setparam.Get_Sampler_states: IXMLSampler_states;
begin
  Result := Nodes['sampler_states'] as IXMLSampler_states;
end;

{ TXMLInstance_effect_type_setparamList }

function TXMLInstance_effect_type_setparamList.Add: IXMLInstance_effect_type_setparam;
begin
  Result := AddItem(-1) as IXMLInstance_effect_type_setparam;
end;

function TXMLInstance_effect_type_setparamList.Insert(const Index: Integer): IXMLInstance_effect_type_setparam;
begin
  Result := AddItem(Index) as IXMLInstance_effect_type_setparam;
end;

function TXMLInstance_effect_type_setparamList.Get_Item(Index: Integer): IXMLInstance_effect_type_setparam;
begin
  Result := Nodes[Index] as IXMLInstance_effect_type_setparam;
end;

{ TXMLSampler_states }

procedure TXMLSampler_states.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLSampler_states.Get_Wrap_s: UnicodeString;
begin
  Result := Nodes['wrap_s'].Content;
end;

procedure TXMLSampler_states.Set_Wrap_s(Value: UnicodeString);
begin
  Nodes['wrap_s'].Content := Value;
end;

function TXMLSampler_states.Get_Wrap_t: UnicodeString;
begin
  Result := Nodes['wrap_t'].Content;
end;

procedure TXMLSampler_states.Set_Wrap_t(Value: UnicodeString);
begin
  Nodes['wrap_t'].Content := Value;
end;

function TXMLSampler_states.Get_Wrap_p: UnicodeString;
begin
  Result := Nodes['wrap_p'].Content;
end;

procedure TXMLSampler_states.Set_Wrap_p(Value: UnicodeString);
begin
  Nodes['wrap_p'].Content := Value;
end;

function TXMLSampler_states.Get_Minfilter: UnicodeString;
begin
  Result := Nodes['minfilter'].Content;
end;

procedure TXMLSampler_states.Set_Minfilter(Value: UnicodeString);
begin
  Nodes['minfilter'].Content := Value;
end;

function TXMLSampler_states.Get_Magfilter: UnicodeString;
begin
  Result := Nodes['magfilter'].Content;
end;

procedure TXMLSampler_states.Set_Magfilter(Value: UnicodeString);
begin
  Nodes['magfilter'].Content := Value;
end;

function TXMLSampler_states.Get_Mipfilter: UnicodeString;
begin
  Result := Nodes['mipfilter'].Content;
end;

procedure TXMLSampler_states.Set_Mipfilter(Value: UnicodeString);
begin
  Nodes['mipfilter'].Content := Value;
end;

function TXMLSampler_states.Get_Border_color: UnicodeString;
begin
  Result := Nodes['border_color'].Content;
end;

procedure TXMLSampler_states.Set_Border_color(Value: UnicodeString);
begin
  Nodes['border_color'].Content := Value;
end;

function TXMLSampler_states.Get_Mip_max_level: Byte;
begin
  Result := Nodes['mip_max_level'].Content;
end;

procedure TXMLSampler_states.Set_Mip_max_level(Value: Byte);
begin
  Nodes['mip_max_level'].Content := Value;
end;

function TXMLSampler_states.Get_Mip_min_level: Byte;
begin
  Result := Nodes['mip_min_level'].Content;
end;

procedure TXMLSampler_states.Set_Mip_min_level(Value: Byte);
begin
  Nodes['mip_min_level'].Content := Value;
end;

function TXMLSampler_states.Get_Mip_bias: Single;
begin
  Result := Nodes['mip_bias'].Content;
end;

procedure TXMLSampler_states.Set_Mip_bias(Value: Single);
begin
  Nodes['mip_bias'].Content := Value;
end;

function TXMLSampler_states.Get_Max_anisotropy: LongWord;
begin
  Result := Nodes['max_anisotropy'].Content;
end;

procedure TXMLSampler_states.Set_Max_anisotropy(Value: LongWord);
begin
  Nodes['max_anisotropy'].Content := Value;
end;

function TXMLSampler_states.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_nodes_type }

procedure TXMLLibrary_nodes_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('node', TXMLNode_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FNode := CreateFilter(TXMLNode_typeList, TXMLNode_type, IXMLNode_type) as IXMLNode_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_nodes_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_nodes_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_nodes_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_nodes_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_nodes_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_nodes_type.Get_Node: IXMLNode_typeList;
begin
  Result := FNode;
end;

function TXMLLibrary_nodes_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_nodes_typeList }

function TXMLLibrary_nodes_typeList.Add: IXMLLibrary_nodes_type;
begin
  Result := AddItem(-1) as IXMLLibrary_nodes_type;
end;

function TXMLLibrary_nodes_typeList.Insert(const Index: Integer): IXMLLibrary_nodes_type;
begin
  Result := AddItem(Index) as IXMLLibrary_nodes_type;
end;

function TXMLLibrary_nodes_typeList.Get_Item(Index: Integer): IXMLLibrary_nodes_type;
begin
  Result := Nodes[Index] as IXMLLibrary_nodes_type;
end;

{ TXMLNode_type }

procedure TXMLNode_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('lookat', TXMLLookat_type);
  FClassesTree.Add('matrix', TXMLMatrix_type);
  FClassesTree.Add('rotate', TXMLRotate_type);
  FClassesTree.Add('scale', TXMLScale_type);
  FClassesTree.Add('skew', TXMLSkew_type);
  FClassesTree.Add('translate', TXMLTranslate_type);
  FClassesTree.Add('instance_camera', TXMLInstance_camera_type);
  FClassesTree.Add('instance_controller', TXMLInstance_controller_type);
  FClassesTree.Add('instance_geometry', TXMLInstance_geometry_type);
  FClassesTree.Add('instance_light', TXMLInstance_light_type);
  FClassesTree.Add('instance_node', TXMLInstance_node_type);
  FClassesTree.Add('node', TXMLNode_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FLookat := CreateFilter(TXMLLookat_typeList, TXMLLookat_type, IXMLLookat_type) as IXMLLookat_typeList;
  FMatrix := CreateFilter(TXMLMatrix_typeList, TXMLMatrix_type, IXMLMatrix_type) as IXMLMatrix_typeList;
  FRotate := CreateFilter(TXMLRotate_typeList, TXMLRotate_type, IXMLRotate_type) as IXMLRotate_typeList;
  FScale := CreateFilter(TXMLScale_typeList, TXMLScale_type, IXMLScale_type) as IXMLScale_typeList;
  FSkew := CreateFilter(TXMLSkew_typeList, TXMLSkew_type, IXMLSkew_type) as IXMLSkew_typeList;
  FTranslate := CreateFilter(TXMLTranslate_typeList, TXMLTranslate_type, IXMLTranslate_type) as IXMLTranslate_typeList;
  FInstance_camera := CreateFilter(TXMLInstance_camera_typeList, TXMLInstance_camera_type, IXMLInstance_camera_type) as IXMLInstance_camera_typeList;
  FInstance_controller := CreateFilter(TXMLInstance_controller_typeList, TXMLInstance_controller_type, IXMLInstance_controller_type) as IXMLInstance_controller_typeList;
  FInstance_geometry := CreateFilter(TXMLInstance_geometry_typeList, TXMLInstance_geometry_type, IXMLInstance_geometry_type) as IXMLInstance_geometry_typeList;
  FInstance_light := CreateFilter(TXMLInstance_light_typeList, TXMLInstance_light_type, IXMLInstance_light_type) as IXMLInstance_light_typeList;
  FInstance_node := CreateFilter(TXMLInstance_node_typeList, TXMLInstance_node_type, IXMLInstance_node_type) as IXMLInstance_node_typeList;
  FNode := CreateFilter(TXMLNode_typeList, TXMLNode_type, IXMLNode_type) as IXMLNode_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLNode_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLNode_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLNode_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLNode_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLNode_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLNode_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLNode_type.Get_Type_: UnicodeString;
begin
  Result := Params['type'];
end;

procedure TXMLNode_type.Set_Type_(Value: UnicodeString);
begin
  Params['type'] := Value;
end;

function TXMLNode_type.Get_Layer: UnicodeString;
begin
  Result := Params['layer'];
end;

procedure TXMLNode_type.Set_Layer(Value: UnicodeString);
begin
  Params['layer'] := Value;
end;

function TXMLNode_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLNode_type.Get_Lookat: IXMLLookat_typeList;
begin
  Result := FLookat;
end;

function TXMLNode_type.Get_Matrix: IXMLMatrix_typeList;
begin
  Result := FMatrix;
end;

function TXMLNode_type.Get_Rotate: IXMLRotate_typeList;
begin
  Result := FRotate;
end;

function TXMLNode_type.Get_Scale: IXMLScale_typeList;
begin
  Result := FScale;
end;

function TXMLNode_type.Get_Skew: IXMLSkew_typeList;
begin
  Result := FSkew;
end;

function TXMLNode_type.Get_Translate: IXMLTranslate_typeList;
begin
  Result := FTranslate;
end;

function TXMLNode_type.Get_Instance_camera: IXMLInstance_camera_typeList;
begin
  Result := FInstance_camera;
end;

function TXMLNode_type.Get_Instance_controller: IXMLInstance_controller_typeList;
begin
  Result := FInstance_controller;
end;

function TXMLNode_type.Get_Instance_geometry: IXMLInstance_geometry_typeList;
begin
  Result := FInstance_geometry;
end;

function TXMLNode_type.Get_Instance_light: IXMLInstance_light_typeList;
begin
  Result := FInstance_light;
end;

function TXMLNode_type.Get_Instance_node: IXMLInstance_node_typeList;
begin
  Result := FInstance_node;
end;

function TXMLNode_type.Get_Node: IXMLNode_typeList;
begin
  Result := FNode;
end;

function TXMLNode_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLNode_typeList }

function TXMLNode_typeList.Add: IXMLNode_type;
begin
  Result := AddItem(-1) as IXMLNode_type;
end;

function TXMLNode_typeList.Insert(const Index: Integer): IXMLNode_type;
begin
  Result := AddItem(Index) as IXMLNode_type;
end;

function TXMLNode_typeList.Get_Item(Index: Integer): IXMLNode_type;
begin
  Result := Nodes[Index] as IXMLNode_type;
end;

{ TXMLLookat_type }

function TXMLLookat_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLLookat_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLLookat_typeList }

function TXMLLookat_typeList.Add: IXMLLookat_type;
begin
  Result := AddItem(-1) as IXMLLookat_type;
end;

function TXMLLookat_typeList.Insert(const Index: Integer): IXMLLookat_type;
begin
  Result := AddItem(Index) as IXMLLookat_type;
end;

function TXMLLookat_typeList.Get_Item(Index: Integer): IXMLLookat_type;
begin
  Result := Nodes[Index] as IXMLLookat_type;
end;

{ TXMLMatrix_type }

function TXMLMatrix_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLMatrix_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLMatrix_typeList }

function TXMLMatrix_typeList.Add: IXMLMatrix_type;
begin
  Result := AddItem(-1) as IXMLMatrix_type;
end;

function TXMLMatrix_typeList.Insert(const Index: Integer): IXMLMatrix_type;
begin
  Result := AddItem(Index) as IXMLMatrix_type;
end;

function TXMLMatrix_typeList.Get_Item(Index: Integer): IXMLMatrix_type;
begin
  Result := Nodes[Index] as IXMLMatrix_type;
end;

{ TXMLRotate_type }

{ TXMLRotate_typeList }

function TXMLRotate_typeList.Add: IXMLRotate_type;
begin
  Result := AddItem(-1) as IXMLRotate_type;
end;

function TXMLRotate_typeList.Insert(const Index: Integer): IXMLRotate_type;
begin
  Result := AddItem(Index) as IXMLRotate_type;
end;

function TXMLRotate_typeList.Get_Item(Index: Integer): IXMLRotate_type;
begin
  Result := Nodes[Index] as IXMLRotate_type;
end;

{ TXMLScale_type }

{ TXMLScale_typeList }

function TXMLScale_typeList.Add: IXMLScale_type;
begin
  Result := AddItem(-1) as IXMLScale_type;
end;

function TXMLScale_typeList.Insert(const Index: Integer): IXMLScale_type;
begin
  Result := AddItem(Index) as IXMLScale_type;
end;

function TXMLScale_typeList.Get_Item(Index: Integer): IXMLScale_type;
begin
  Result := Nodes[Index] as IXMLScale_type;
end;

{ TXMLSkew_type }

function TXMLSkew_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLSkew_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLSkew_typeList }

function TXMLSkew_typeList.Add: IXMLSkew_type;
begin
  Result := AddItem(-1) as IXMLSkew_type;
end;

function TXMLSkew_typeList.Insert(const Index: Integer): IXMLSkew_type;
begin
  Result := AddItem(Index) as IXMLSkew_type;
end;

function TXMLSkew_typeList.Get_Item(Index: Integer): IXMLSkew_type;
begin
  Result := Nodes[Index] as IXMLSkew_type;
end;

{ TXMLTranslate_type }

{ TXMLTranslate_typeList }

function TXMLTranslate_typeList.Add: IXMLTranslate_type;
begin
  Result := AddItem(-1) as IXMLTranslate_type;
end;

function TXMLTranslate_typeList.Insert(const Index: Integer): IXMLTranslate_type;
begin
  Result := AddItem(Index) as IXMLTranslate_type;
end;

function TXMLTranslate_typeList.Get_Item(Index: Integer): IXMLTranslate_type;
begin
  Result := Nodes[Index] as IXMLTranslate_type;
end;

{ TXMLInstance_camera_type }

{ TXMLInstance_camera_typeList }

function TXMLInstance_camera_typeList.Add: IXMLInstance_camera_type;
begin
  Result := AddItem(-1) as IXMLInstance_camera_type;
end;

function TXMLInstance_camera_typeList.Insert(const Index: Integer): IXMLInstance_camera_type;
begin
  Result := AddItem(Index) as IXMLInstance_camera_type;
end;

function TXMLInstance_camera_typeList.Get_Item(Index: Integer): IXMLInstance_camera_type;
begin
  Result := Nodes[Index] as IXMLInstance_camera_type;
end;

{ TXMLInstance_controller_type }

procedure TXMLInstance_controller_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('bind_material', TXMLBind_material_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FSkeleton := CreateFilter(TXMLAnyURIList, TXML, IXML) as IXMLAnyURIList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLInstance_controller_type.Get_Url: UnicodeString;
begin
  Result := Params['url'];
end;

procedure TXMLInstance_controller_type.Set_Url(Value: UnicodeString);
begin
  Params['url'] := Value;
end;

function TXMLInstance_controller_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_controller_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLInstance_controller_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInstance_controller_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInstance_controller_type.Get_Skeleton: IXMLAnyURIList;
begin
  Result := FSkeleton;
end;

function TXMLInstance_controller_type.Get_Bind_material: IXMLBind_material_type;
begin
  Result := Nodes['bind_material'] as IXMLBind_material_type;
end;

function TXMLInstance_controller_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_controller_typeList }

function TXMLInstance_controller_typeList.Add: IXMLInstance_controller_type;
begin
  Result := AddItem(-1) as IXMLInstance_controller_type;
end;

function TXMLInstance_controller_typeList.Insert(const Index: Integer): IXMLInstance_controller_type;
begin
  Result := AddItem(Index) as IXMLInstance_controller_type;
end;

function TXMLInstance_controller_typeList.Get_Item(Index: Integer): IXMLInstance_controller_type;
begin
  Result := Nodes[Index] as IXMLInstance_controller_type;
end;

{ TXMLBind_material_type }

procedure TXMLBind_material_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('param', TXMLParam_type);
  FClassesTree.Add('technique_common', TXMLBind_material_type_technique_common);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FParam := CreateFilter(TXMLParam_typeList, TXMLParam_type, IXMLParam_type) as IXMLParam_typeList;
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLBind_material_type.Get_Param: IXMLParam_typeList;
begin
  Result := FParam;
end;

function TXMLBind_material_type.Get_Technique_common: IXMLBind_material_type_technique_common;
begin
  Result := Nodes['technique_common'] as IXMLBind_material_type_technique_common;
end;

function TXMLBind_material_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLBind_material_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLBind_material_type_technique_common }

procedure TXMLBind_material_type_technique_common.DoRegisterChildClasses;
begin
  FClassesTree.Add('instance_material', TXMLInstance_material_type);
  Tag := 'instance_material';
  ItemInterface := IXMLInstance_material_type;
  inherited;
end;

function TXMLBind_material_type_technique_common.Get_Instance_material(Index: Integer): IXMLInstance_material_type;
begin
  Result := Nodes[Index] as IXMLInstance_material_type;
end;

function TXMLBind_material_type_technique_common.Add: IXMLInstance_material_type;
begin
  Result := AddItem(-1) as IXMLInstance_material_type;
end;

function TXMLBind_material_type_technique_common.Insert(const Index: Integer): IXMLInstance_material_type;
begin
  Result := AddItem(Index) as IXMLInstance_material_type;
end;

{ TXMLInstance_material_type }

procedure TXMLInstance_material_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('bind', TXMLInstance_material_type_bind);
  FClassesTree.Add('bind_vertex_input', TXMLInstance_material_type_bind_vertex_input);
  FClassesTree.Add('extra', TXMLExtra_type);
  FBind := CreateFilter(TXMLInstance_material_type_bindList, TXMLInstance_material_type_bind, IXMLInstance_material_type_bind) as IXMLInstance_material_type_bindList;
  FBind_vertex_input := CreateFilter(TXMLInstance_material_type_bind_vertex_inputList, TXMLInstance_material_type_bind_vertex_input, IXMLInstance_material_type_bind_vertex_input) as IXMLInstance_material_type_bind_vertex_inputList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLInstance_material_type.Get_Symbol: UnicodeString;
begin
  Result := Params['symbol'];
end;

procedure TXMLInstance_material_type.Set_Symbol(Value: UnicodeString);
begin
  Params['symbol'] := Value;
end;

function TXMLInstance_material_type.Get_Target: UnicodeString;
begin
  Result := Params['target'];
end;

procedure TXMLInstance_material_type.Set_Target(Value: UnicodeString);
begin
  Params['target'] := Value;
end;

function TXMLInstance_material_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_material_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLInstance_material_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInstance_material_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInstance_material_type.Get_Bind: IXMLInstance_material_type_bindList;
begin
  Result := FBind;
end;

function TXMLInstance_material_type.Get_Bind_vertex_input: IXMLInstance_material_type_bind_vertex_inputList;
begin
  Result := FBind_vertex_input;
end;

function TXMLInstance_material_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_material_type_bind }

function TXMLInstance_material_type_bind.Get_Semantic: UnicodeString;
begin
  Result := Params['semantic'];
end;

procedure TXMLInstance_material_type_bind.Set_Semantic(Value: UnicodeString);
begin
  Params['semantic'] := Value;
end;

function TXMLInstance_material_type_bind.Get_Target: UnicodeString;
begin
  Result := Params['target'];
end;

procedure TXMLInstance_material_type_bind.Set_Target(Value: UnicodeString);
begin
  Params['target'] := Value;
end;

{ TXMLInstance_material_type_bindList }

function TXMLInstance_material_type_bindList.Add: IXMLInstance_material_type_bind;
begin
  Result := AddItem(-1) as IXMLInstance_material_type_bind;
end;

function TXMLInstance_material_type_bindList.Insert(const Index: Integer): IXMLInstance_material_type_bind;
begin
  Result := AddItem(Index) as IXMLInstance_material_type_bind;
end;

function TXMLInstance_material_type_bindList.Get_Item(Index: Integer): IXMLInstance_material_type_bind;
begin
  Result := Nodes[Index] as IXMLInstance_material_type_bind;
end;

{ TXMLInstance_material_type_bind_vertex_input }

function TXMLInstance_material_type_bind_vertex_input.Get_Semantic: UnicodeString;
begin
  Result := Params['semantic'];
end;

procedure TXMLInstance_material_type_bind_vertex_input.Set_Semantic(Value: UnicodeString);
begin
  Params['semantic'] := Value;
end;

function TXMLInstance_material_type_bind_vertex_input.Get_Input_semantic: UnicodeString;
begin
  Result := Params['input_semantic'];
end;

procedure TXMLInstance_material_type_bind_vertex_input.Set_Input_semantic(Value: UnicodeString);
begin
  Params['input_semantic'] := Value;
end;

function TXMLInstance_material_type_bind_vertex_input.Get_Input_set: Int64;
begin
  Result := Params['input_set'];
end;

procedure TXMLInstance_material_type_bind_vertex_input.Set_Input_set(Value: Int64);
begin
  Params['input_set'] := Value;
end;

{ TXMLInstance_material_type_bind_vertex_inputList }

function TXMLInstance_material_type_bind_vertex_inputList.Add: IXMLInstance_material_type_bind_vertex_input;
begin
  Result := AddItem(-1) as IXMLInstance_material_type_bind_vertex_input;
end;

function TXMLInstance_material_type_bind_vertex_inputList.Insert(const Index: Integer): IXMLInstance_material_type_bind_vertex_input;
begin
  Result := AddItem(Index) as IXMLInstance_material_type_bind_vertex_input;
end;

function TXMLInstance_material_type_bind_vertex_inputList.Get_Item(Index: Integer): IXMLInstance_material_type_bind_vertex_input;
begin
  Result := Nodes[Index] as IXMLInstance_material_type_bind_vertex_input;
end;

{ TXMLInstance_geometry_type }

procedure TXMLInstance_geometry_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('bind_material', TXMLBind_material_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLInstance_geometry_type.Get_Url: UnicodeString;
begin
  Result := Params['url'];
end;

procedure TXMLInstance_geometry_type.Set_Url(Value: UnicodeString);
begin
  Params['url'] := Value;
end;

function TXMLInstance_geometry_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_geometry_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLInstance_geometry_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInstance_geometry_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInstance_geometry_type.Get_Bind_material: IXMLBind_material_type;
begin
  Result := Nodes['bind_material'] as IXMLBind_material_type;
end;

function TXMLInstance_geometry_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_geometry_typeList }

function TXMLInstance_geometry_typeList.Add: IXMLInstance_geometry_type;
begin
  Result := AddItem(-1) as IXMLInstance_geometry_type;
end;

function TXMLInstance_geometry_typeList.Insert(const Index: Integer): IXMLInstance_geometry_type;
begin
  Result := AddItem(Index) as IXMLInstance_geometry_type;
end;

function TXMLInstance_geometry_typeList.Get_Item(Index: Integer): IXMLInstance_geometry_type;
begin
  Result := Nodes[Index] as IXMLInstance_geometry_type;
end;

{ TXMLInstance_light_type }

{ TXMLInstance_light_typeList }

function TXMLInstance_light_typeList.Add: IXMLInstance_light_type;
begin
  Result := AddItem(-1) as IXMLInstance_light_type;
end;

function TXMLInstance_light_typeList.Insert(const Index: Integer): IXMLInstance_light_type;
begin
  Result := AddItem(Index) as IXMLInstance_light_type;
end;

function TXMLInstance_light_typeList.Get_Item(Index: Integer): IXMLInstance_light_type;
begin
  Result := Nodes[Index] as IXMLInstance_light_type;
end;

{ TXMLInstance_node_type }

function TXMLInstance_node_type.Get_Proxy: UnicodeString;
begin
  Result := Params['proxy'];
end;

procedure TXMLInstance_node_type.Set_Proxy(Value: UnicodeString);
begin
  Params['proxy'] := Value;
end;

{ TXMLInstance_node_typeList }

function TXMLInstance_node_typeList.Add: IXMLInstance_node_type;
begin
  Result := AddItem(-1) as IXMLInstance_node_type;
end;

function TXMLInstance_node_typeList.Insert(const Index: Integer): IXMLInstance_node_type;
begin
  Result := AddItem(Index) as IXMLInstance_node_type;
end;

function TXMLInstance_node_typeList.Get_Item(Index: Integer): IXMLInstance_node_type;
begin
  Result := Nodes[Index] as IXMLInstance_node_type;
end;

{ TXMLLibrary_physics_materials_type }

procedure TXMLLibrary_physics_materials_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('physics_material', TXMLPhysics_material_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FPhysics_material := CreateFilter(TXMLPhysics_material_typeList, TXMLPhysics_material_type, IXMLPhysics_material_type) as IXMLPhysics_material_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_physics_materials_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_physics_materials_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_physics_materials_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_physics_materials_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_physics_materials_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_physics_materials_type.Get_Physics_material: IXMLPhysics_material_typeList;
begin
  Result := FPhysics_material;
end;

function TXMLLibrary_physics_materials_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_physics_materials_typeList }

function TXMLLibrary_physics_materials_typeList.Add: IXMLLibrary_physics_materials_type;
begin
  Result := AddItem(-1) as IXMLLibrary_physics_materials_type;
end;

function TXMLLibrary_physics_materials_typeList.Insert(const Index: Integer): IXMLLibrary_physics_materials_type;
begin
  Result := AddItem(Index) as IXMLLibrary_physics_materials_type;
end;

function TXMLLibrary_physics_materials_typeList.Get_Item(Index: Integer): IXMLLibrary_physics_materials_type;
begin
  Result := Nodes[Index] as IXMLLibrary_physics_materials_type;
end;

{ TXMLPhysics_material_type }

procedure TXMLPhysics_material_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('technique_common', TXMLPhysics_material_type_technique_common);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLPhysics_material_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLPhysics_material_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLPhysics_material_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLPhysics_material_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLPhysics_material_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLPhysics_material_type.Get_Technique_common: IXMLPhysics_material_type_technique_common;
begin
  Result := Nodes['technique_common'] as IXMLPhysics_material_type_technique_common;
end;

function TXMLPhysics_material_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLPhysics_material_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLPhysics_material_typeList }

function TXMLPhysics_material_typeList.Add: IXMLPhysics_material_type;
begin
  Result := AddItem(-1) as IXMLPhysics_material_type;
end;

function TXMLPhysics_material_typeList.Insert(const Index: Integer): IXMLPhysics_material_type;
begin
  Result := AddItem(Index) as IXMLPhysics_material_type;
end;

function TXMLPhysics_material_typeList.Get_Item(Index: Integer): IXMLPhysics_material_type;
begin
  Result := Nodes[Index] as IXMLPhysics_material_type;
end;

{ TXMLPhysics_material_type_technique_common }

procedure TXMLPhysics_material_type_technique_common.DoRegisterChildClasses;
begin
  FClassesTree.Add('dynamic_friction', TXMLTargetable_float_type);
  FClassesTree.Add('restitution', TXMLTargetable_float_type);
  FClassesTree.Add('static_friction', TXMLTargetable_float_type);
  inherited;
end;

function TXMLPhysics_material_type_technique_common.Get_Dynamic_friction: IXMLTargetable_float_type;
begin
  Result := Nodes['dynamic_friction'] as IXMLTargetable_float_type;
end;

function TXMLPhysics_material_type_technique_common.Get_Restitution: IXMLTargetable_float_type;
begin
  Result := Nodes['restitution'] as IXMLTargetable_float_type;
end;

function TXMLPhysics_material_type_technique_common.Get_Static_friction: IXMLTargetable_float_type;
begin
  Result := Nodes['static_friction'] as IXMLTargetable_float_type;
end;

{ TXMLLibrary_physics_models_type }

procedure TXMLLibrary_physics_models_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('physics_model', TXMLPhysics_model_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FPhysics_model := CreateFilter(TXMLPhysics_model_typeList, TXMLPhysics_model_type, IXMLPhysics_model_type) as IXMLPhysics_model_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_physics_models_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_physics_models_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_physics_models_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_physics_models_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_physics_models_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_physics_models_type.Get_Physics_model: IXMLPhysics_model_typeList;
begin
  Result := FPhysics_model;
end;

function TXMLLibrary_physics_models_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_physics_models_typeList }

function TXMLLibrary_physics_models_typeList.Add: IXMLLibrary_physics_models_type;
begin
  Result := AddItem(-1) as IXMLLibrary_physics_models_type;
end;

function TXMLLibrary_physics_models_typeList.Insert(const Index: Integer): IXMLLibrary_physics_models_type;
begin
  Result := AddItem(Index) as IXMLLibrary_physics_models_type;
end;

function TXMLLibrary_physics_models_typeList.Get_Item(Index: Integer): IXMLLibrary_physics_models_type;
begin
  Result := Nodes[Index] as IXMLLibrary_physics_models_type;
end;

{ TXMLPhysics_model_type }

procedure TXMLPhysics_model_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('rigid_body', TXMLRigid_body_type);
  FClassesTree.Add('rigid_constraint', TXMLRigid_constraint_type);
  FClassesTree.Add('instance_physics_model', TXMLInstance_physics_model_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FRigid_body := CreateFilter(TXMLRigid_body_typeList, TXMLRigid_body_type, IXMLRigid_body_type) as IXMLRigid_body_typeList;
  FRigid_constraint := CreateFilter(TXMLRigid_constraint_typeList, TXMLRigid_constraint_type, IXMLRigid_constraint_type) as IXMLRigid_constraint_typeList;
  FInstance_physics_model := CreateFilter(TXMLInstance_physics_model_typeList, TXMLInstance_physics_model_type, IXMLInstance_physics_model_type) as IXMLInstance_physics_model_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLPhysics_model_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLPhysics_model_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLPhysics_model_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLPhysics_model_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLPhysics_model_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLPhysics_model_type.Get_Rigid_body: IXMLRigid_body_typeList;
begin
  Result := FRigid_body;
end;

function TXMLPhysics_model_type.Get_Rigid_constraint: IXMLRigid_constraint_typeList;
begin
  Result := FRigid_constraint;
end;

function TXMLPhysics_model_type.Get_Instance_physics_model: IXMLInstance_physics_model_typeList;
begin
  Result := FInstance_physics_model;
end;

function TXMLPhysics_model_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLPhysics_model_typeList }

function TXMLPhysics_model_typeList.Add: IXMLPhysics_model_type;
begin
  Result := AddItem(-1) as IXMLPhysics_model_type;
end;

function TXMLPhysics_model_typeList.Insert(const Index: Integer): IXMLPhysics_model_type;
begin
  Result := AddItem(Index) as IXMLPhysics_model_type;
end;

function TXMLPhysics_model_typeList.Get_Item(Index: Integer): IXMLPhysics_model_type;
begin
  Result := Nodes[Index] as IXMLPhysics_model_type;
end;

{ TXMLRigid_body_type }

procedure TXMLRigid_body_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('technique_common', TXMLRigid_body_type_technique_common);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLRigid_body_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLRigid_body_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLRigid_body_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLRigid_body_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLRigid_body_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLRigid_body_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLRigid_body_type.Get_Technique_common: IXMLRigid_body_type_technique_common;
begin
  Result := Nodes['technique_common'] as IXMLRigid_body_type_technique_common;
end;

function TXMLRigid_body_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLRigid_body_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLRigid_body_typeList }

function TXMLRigid_body_typeList.Add: IXMLRigid_body_type;
begin
  Result := AddItem(-1) as IXMLRigid_body_type;
end;

function TXMLRigid_body_typeList.Insert(const Index: Integer): IXMLRigid_body_type;
begin
  Result := AddItem(Index) as IXMLRigid_body_type;
end;

function TXMLRigid_body_typeList.Get_Item(Index: Integer): IXMLRigid_body_type;
begin
  Result := Nodes[Index] as IXMLRigid_body_type;
end;

{ TXMLRigid_body_type_technique_common }

procedure TXMLRigid_body_type_technique_common.DoRegisterChildClasses;
begin
  FClassesTree.Add('dynamic', TXMLRigid_body_type_technique_common_dynamic);
  FClassesTree.Add('mass', TXMLTargetable_float_type);
  FClassesTree.Add('mass_frame', TXMLRigid_body_type_technique_common_mass_frame);
  FClassesTree.Add('inertia', TXMLTargetable_float3_type);
  FClassesTree.Add('instance_physics_material', TXMLInstance_physics_material_type);
  FClassesTree.Add('physics_material', TXMLPhysics_material_type);
  FClassesTree.Add('shape', TXMLRigid_body_type_technique_common_shape);
  FShape := CreateFilter(TXMLRigid_body_type_technique_common_shapeList, TXMLRigid_body_type_technique_common_shape, IXMLRigid_body_type_technique_common_shape) as IXMLRigid_body_type_technique_common_shapeList;
  inherited;
end;

function TXMLRigid_body_type_technique_common.Get_Dynamic: IXMLRigid_body_type_technique_common_dynamic;
begin
  Result := Nodes['dynamic'] as IXMLRigid_body_type_technique_common_dynamic;
end;

function TXMLRigid_body_type_technique_common.Get_Mass: IXMLTargetable_float_type;
begin
  Result := Nodes['mass'] as IXMLTargetable_float_type;
end;

function TXMLRigid_body_type_technique_common.Get_Mass_frame: IXMLRigid_body_type_technique_common_mass_frame;
begin
  Result := Nodes['mass_frame'] as IXMLRigid_body_type_technique_common_mass_frame;
end;

function TXMLRigid_body_type_technique_common.Get_Inertia: IXMLTargetable_float3_type;
begin
  Result := Nodes['inertia'] as IXMLTargetable_float3_type;
end;

function TXMLRigid_body_type_technique_common.Get_Instance_physics_material: IXMLInstance_physics_material_type;
begin
  Result := Nodes['instance_physics_material'] as IXMLInstance_physics_material_type;
end;

function TXMLRigid_body_type_technique_common.Get_Physics_material: IXMLPhysics_material_type;
begin
  Result := Nodes['physics_material'] as IXMLPhysics_material_type;
end;

function TXMLRigid_body_type_technique_common.Get_Shape: IXMLRigid_body_type_technique_common_shapeList;
begin
  Result := FShape;
end;

{ TXMLRigid_body_type_technique_common_dynamic }

function TXMLRigid_body_type_technique_common_dynamic.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLRigid_body_type_technique_common_dynamic.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLRigid_body_type_technique_common_mass_frame }

procedure TXMLRigid_body_type_technique_common_mass_frame.DoRegisterChildClasses;
begin
  FClassesTree.Add('translate', TXMLTranslate_type);
  FClassesTree.Add('rotate', TXMLRotate_type);
  FTranslate := CreateFilter(TXMLTranslate_typeList, TXMLTranslate_type, IXMLTranslate_type) as IXMLTranslate_typeList;
  FRotate := CreateFilter(TXMLRotate_typeList, TXMLRotate_type, IXMLRotate_type) as IXMLRotate_typeList;
  inherited;
end;

function TXMLRigid_body_type_technique_common_mass_frame.Get_Translate: IXMLTranslate_typeList;
begin
  Result := FTranslate;
end;

function TXMLRigid_body_type_technique_common_mass_frame.Get_Rotate: IXMLRotate_typeList;
begin
  Result := FRotate;
end;

{ TXMLInstance_physics_material_type }

{ TXMLRigid_body_type_technique_common_shape }

procedure TXMLRigid_body_type_technique_common_shape.DoRegisterChildClasses;
begin
  FClassesTree.Add('hollow', TXMLRigid_body_type_technique_common_shape_hollow);
  FClassesTree.Add('mass', TXMLTargetable_float_type);
  FClassesTree.Add('density', TXMLTargetable_float_type);
  FClassesTree.Add('instance_physics_material', TXMLInstance_physics_material_type);
  FClassesTree.Add('physics_material', TXMLPhysics_material_type);
  FClassesTree.Add('instance_geometry', TXMLInstance_geometry_type);
  FClassesTree.Add('plane', TXMLPlane_type);
  FClassesTree.Add('box', TXMLBox_type);
  FClassesTree.Add('sphere', TXMLSphere_type);
  FClassesTree.Add('cylinder', TXMLCylinder_type);
  FClassesTree.Add('capsule', TXMLCapsule_type);
  FClassesTree.Add('translate', TXMLTranslate_type);
  FClassesTree.Add('rotate', TXMLRotate_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTranslate := CreateFilter(TXMLTranslate_typeList, TXMLTranslate_type, IXMLTranslate_type) as IXMLTranslate_typeList;
  FRotate := CreateFilter(TXMLRotate_typeList, TXMLRotate_type, IXMLRotate_type) as IXMLRotate_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Hollow: IXMLRigid_body_type_technique_common_shape_hollow;
begin
  Result := Nodes['hollow'] as IXMLRigid_body_type_technique_common_shape_hollow;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Mass: IXMLTargetable_float_type;
begin
  Result := Nodes['mass'] as IXMLTargetable_float_type;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Density: IXMLTargetable_float_type;
begin
  Result := Nodes['density'] as IXMLTargetable_float_type;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Instance_physics_material: IXMLInstance_physics_material_type;
begin
  Result := Nodes['instance_physics_material'] as IXMLInstance_physics_material_type;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Physics_material: IXMLPhysics_material_type;
begin
  Result := Nodes['physics_material'] as IXMLPhysics_material_type;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Instance_geometry: IXMLInstance_geometry_type;
begin
  Result := Nodes['instance_geometry'] as IXMLInstance_geometry_type;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Plane: IXMLPlane_type;
begin
  Result := Nodes['plane'] as IXMLPlane_type;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Box: IXMLBox_type;
begin
  Result := Nodes['box'] as IXMLBox_type;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Sphere: IXMLSphere_type;
begin
  Result := Nodes['sphere'] as IXMLSphere_type;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Cylinder: IXMLCylinder_type;
begin
  Result := Nodes['cylinder'] as IXMLCylinder_type;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Capsule: IXMLCapsule_type;
begin
  Result := Nodes['capsule'] as IXMLCapsule_type;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Translate: IXMLTranslate_typeList;
begin
  Result := FTranslate;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Rotate: IXMLRotate_typeList;
begin
  Result := FRotate;
end;

function TXMLRigid_body_type_technique_common_shape.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLRigid_body_type_technique_common_shapeList }

function TXMLRigid_body_type_technique_common_shapeList.Add: IXMLRigid_body_type_technique_common_shape;
begin
  Result := AddItem(-1) as IXMLRigid_body_type_technique_common_shape;
end;

function TXMLRigid_body_type_technique_common_shapeList.Insert(const Index: Integer): IXMLRigid_body_type_technique_common_shape;
begin
  Result := AddItem(Index) as IXMLRigid_body_type_technique_common_shape;
end;

function TXMLRigid_body_type_technique_common_shapeList.Get_Item(Index: Integer): IXMLRigid_body_type_technique_common_shape;
begin
  Result := Nodes[Index] as IXMLRigid_body_type_technique_common_shape;
end;

{ TXMLRigid_body_type_technique_common_shape_hollow }

function TXMLRigid_body_type_technique_common_shape_hollow.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLRigid_body_type_technique_common_shape_hollow.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLBox_type }

procedure TXMLBox_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLBox_type.Get_Half_extents: UnicodeString;
begin
  Result := Nodes['half_extents'].Content;
end;

procedure TXMLBox_type.Set_Half_extents(Value: UnicodeString);
begin
  Nodes['half_extents'].Content := Value;
end;

function TXMLBox_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLCylinder_type }

procedure TXMLCylinder_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLCylinder_type.Get_Height: Double;
begin
  Result := Nodes['height'].Content;
end;

procedure TXMLCylinder_type.Set_Height(Value: Double);
begin
  Nodes['height'].Content := Value;
end;

function TXMLCylinder_type.Get_Radius: UnicodeString;
begin
  Result := Nodes['radius'].Content;
end;

procedure TXMLCylinder_type.Set_Radius(Value: UnicodeString);
begin
  Nodes['radius'].Content := Value;
end;

function TXMLCylinder_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLCapsule_type }

procedure TXMLCapsule_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLCapsule_type.Get_Height: Double;
begin
  Result := Nodes['height'].Content;
end;

procedure TXMLCapsule_type.Set_Height(Value: Double);
begin
  Nodes['height'].Content := Value;
end;

function TXMLCapsule_type.Get_Radius: UnicodeString;
begin
  Result := Nodes['radius'].Content;
end;

procedure TXMLCapsule_type.Set_Radius(Value: UnicodeString);
begin
  Nodes['radius'].Content := Value;
end;

function TXMLCapsule_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLRigid_constraint_type }

procedure TXMLRigid_constraint_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('ref_attachment', TXMLRigid_constraint_type_ref_attachment);
  FClassesTree.Add('attachment', TXMLRigid_constraint_type_attachment);
  FClassesTree.Add('technique_common', TXMLRigid_constraint_type_technique_common);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLRigid_constraint_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLRigid_constraint_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLRigid_constraint_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLRigid_constraint_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLRigid_constraint_type.Get_Ref_attachment: IXMLRigid_constraint_type_ref_attachment;
begin
  Result := Nodes['ref_attachment'] as IXMLRigid_constraint_type_ref_attachment;
end;

function TXMLRigid_constraint_type.Get_Attachment: IXMLRigid_constraint_type_attachment;
begin
  Result := Nodes['attachment'] as IXMLRigid_constraint_type_attachment;
end;

function TXMLRigid_constraint_type.Get_Technique_common: IXMLRigid_constraint_type_technique_common;
begin
  Result := Nodes['technique_common'] as IXMLRigid_constraint_type_technique_common;
end;

function TXMLRigid_constraint_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLRigid_constraint_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLRigid_constraint_typeList }

function TXMLRigid_constraint_typeList.Add: IXMLRigid_constraint_type;
begin
  Result := AddItem(-1) as IXMLRigid_constraint_type;
end;

function TXMLRigid_constraint_typeList.Insert(const Index: Integer): IXMLRigid_constraint_type;
begin
  Result := AddItem(Index) as IXMLRigid_constraint_type;
end;

function TXMLRigid_constraint_typeList.Get_Item(Index: Integer): IXMLRigid_constraint_type;
begin
  Result := Nodes[Index] as IXMLRigid_constraint_type;
end;

{ TXMLRigid_constraint_type_ref_attachment }

procedure TXMLRigid_constraint_type_ref_attachment.DoRegisterChildClasses;
begin
  FClassesTree.Add('translate', TXMLTranslate_type);
  FClassesTree.Add('rotate', TXMLRotate_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTranslate := CreateFilter(TXMLTranslate_typeList, TXMLTranslate_type, IXMLTranslate_type) as IXMLTranslate_typeList;
  FRotate := CreateFilter(TXMLRotate_typeList, TXMLRotate_type, IXMLRotate_type) as IXMLRotate_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLRigid_constraint_type_ref_attachment.Get_Rigid_body: UnicodeString;
begin
  Result := Params['rigid_body'];
end;

procedure TXMLRigid_constraint_type_ref_attachment.Set_Rigid_body(Value: UnicodeString);
begin
  Params['rigid_body'] := Value;
end;

function TXMLRigid_constraint_type_ref_attachment.Get_Translate: IXMLTranslate_typeList;
begin
  Result := FTranslate;
end;

function TXMLRigid_constraint_type_ref_attachment.Get_Rotate: IXMLRotate_typeList;
begin
  Result := FRotate;
end;

function TXMLRigid_constraint_type_ref_attachment.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLRigid_constraint_type_attachment }

procedure TXMLRigid_constraint_type_attachment.DoRegisterChildClasses;
begin
  FClassesTree.Add('translate', TXMLTranslate_type);
  FClassesTree.Add('rotate', TXMLRotate_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTranslate := CreateFilter(TXMLTranslate_typeList, TXMLTranslate_type, IXMLTranslate_type) as IXMLTranslate_typeList;
  FRotate := CreateFilter(TXMLRotate_typeList, TXMLRotate_type, IXMLRotate_type) as IXMLRotate_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLRigid_constraint_type_attachment.Get_Rigid_body: UnicodeString;
begin
  Result := Params['rigid_body'];
end;

procedure TXMLRigid_constraint_type_attachment.Set_Rigid_body(Value: UnicodeString);
begin
  Params['rigid_body'] := Value;
end;

function TXMLRigid_constraint_type_attachment.Get_Translate: IXMLTranslate_typeList;
begin
  Result := FTranslate;
end;

function TXMLRigid_constraint_type_attachment.Get_Rotate: IXMLRotate_typeList;
begin
  Result := FRotate;
end;

function TXMLRigid_constraint_type_attachment.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLRigid_constraint_type_technique_common }

procedure TXMLRigid_constraint_type_technique_common.DoRegisterChildClasses;
begin
  FClassesTree.Add('enabled', TXMLRigid_constraint_type_technique_common_enabled);
  FClassesTree.Add('interpenetrate', TXMLRigid_constraint_type_technique_common_interpenetrate);
  FClassesTree.Add('limits', TXMLRigid_constraint_type_technique_common_limits);
  FClassesTree.Add('spring', TXMLRigid_constraint_type_technique_common_spring);
  inherited;
end;

function TXMLRigid_constraint_type_technique_common.Get_Enabled: IXMLRigid_constraint_type_technique_common_enabled;
begin
  Result := Nodes['enabled'] as IXMLRigid_constraint_type_technique_common_enabled;
end;

function TXMLRigid_constraint_type_technique_common.Get_Interpenetrate: IXMLRigid_constraint_type_technique_common_interpenetrate;
begin
  Result := Nodes['interpenetrate'] as IXMLRigid_constraint_type_technique_common_interpenetrate;
end;

function TXMLRigid_constraint_type_technique_common.Get_Limits: IXMLRigid_constraint_type_technique_common_limits;
begin
  Result := Nodes['limits'] as IXMLRigid_constraint_type_technique_common_limits;
end;

function TXMLRigid_constraint_type_technique_common.Get_Spring: IXMLRigid_constraint_type_technique_common_spring;
begin
  Result := Nodes['spring'] as IXMLRigid_constraint_type_technique_common_spring;
end;

{ TXMLRigid_constraint_type_technique_common_enabled }

function TXMLRigid_constraint_type_technique_common_enabled.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLRigid_constraint_type_technique_common_enabled.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLRigid_constraint_type_technique_common_interpenetrate }

function TXMLRigid_constraint_type_technique_common_interpenetrate.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLRigid_constraint_type_technique_common_interpenetrate.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLRigid_constraint_type_technique_common_limits }

procedure TXMLRigid_constraint_type_technique_common_limits.DoRegisterChildClasses;
begin
  FClassesTree.Add('swing_cone_and_twist', TXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist);
  FClassesTree.Add('linear', TXMLRigid_constraint_type_technique_common_limits_linear);
  inherited;
end;

function TXMLRigid_constraint_type_technique_common_limits.Get_Swing_cone_and_twist: IXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist;
begin
  Result := Nodes['swing_cone_and_twist'] as IXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist;
end;

function TXMLRigid_constraint_type_technique_common_limits.Get_Linear: IXMLRigid_constraint_type_technique_common_limits_linear;
begin
  Result := Nodes['linear'] as IXMLRigid_constraint_type_technique_common_limits_linear;
end;

{ TXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist }

procedure TXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist.DoRegisterChildClasses;
begin
  FClassesTree.Add('min', TXMLTargetable_float3_type);
  FClassesTree.Add('max', TXMLTargetable_float3_type);
  inherited;
end;

function TXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist.Get_Min: IXMLTargetable_float3_type;
begin
  Result := Nodes['min'] as IXMLTargetable_float3_type;
end;

function TXMLRigid_constraint_type_technique_common_limits_swing_cone_and_twist.Get_Max: IXMLTargetable_float3_type;
begin
  Result := Nodes['max'] as IXMLTargetable_float3_type;
end;

{ TXMLRigid_constraint_type_technique_common_limits_linear }

procedure TXMLRigid_constraint_type_technique_common_limits_linear.DoRegisterChildClasses;
begin
  FClassesTree.Add('min', TXMLTargetable_float3_type);
  FClassesTree.Add('max', TXMLTargetable_float3_type);
  inherited;
end;

function TXMLRigid_constraint_type_technique_common_limits_linear.Get_Min: IXMLTargetable_float3_type;
begin
  Result := Nodes['min'] as IXMLTargetable_float3_type;
end;

function TXMLRigid_constraint_type_technique_common_limits_linear.Get_Max: IXMLTargetable_float3_type;
begin
  Result := Nodes['max'] as IXMLTargetable_float3_type;
end;

{ TXMLRigid_constraint_type_technique_common_spring }

procedure TXMLRigid_constraint_type_technique_common_spring.DoRegisterChildClasses;
begin
  FClassesTree.Add('angular', TXMLRigid_constraint_type_technique_common_spring_angular);
  FClassesTree.Add('linear', TXMLRigid_constraint_type_technique_common_spring_linear);
  inherited;
end;

function TXMLRigid_constraint_type_technique_common_spring.Get_Angular: IXMLRigid_constraint_type_technique_common_spring_angular;
begin
  Result := Nodes['angular'] as IXMLRigid_constraint_type_technique_common_spring_angular;
end;

function TXMLRigid_constraint_type_technique_common_spring.Get_Linear: IXMLRigid_constraint_type_technique_common_spring_linear;
begin
  Result := Nodes['linear'] as IXMLRigid_constraint_type_technique_common_spring_linear;
end;

{ TXMLRigid_constraint_type_technique_common_spring_angular }

procedure TXMLRigid_constraint_type_technique_common_spring_angular.DoRegisterChildClasses;
begin
  FClassesTree.Add('stiffness', TXMLTargetable_float_type);
  FClassesTree.Add('damping', TXMLTargetable_float_type);
  FClassesTree.Add('target_value', TXMLTargetable_float_type);
  inherited;
end;

function TXMLRigid_constraint_type_technique_common_spring_angular.Get_Stiffness: IXMLTargetable_float_type;
begin
  Result := Nodes['stiffness'] as IXMLTargetable_float_type;
end;

function TXMLRigid_constraint_type_technique_common_spring_angular.Get_Damping: IXMLTargetable_float_type;
begin
  Result := Nodes['damping'] as IXMLTargetable_float_type;
end;

function TXMLRigid_constraint_type_technique_common_spring_angular.Get_Target_value: IXMLTargetable_float_type;
begin
  Result := Nodes['target_value'] as IXMLTargetable_float_type;
end;

{ TXMLRigid_constraint_type_technique_common_spring_linear }

procedure TXMLRigid_constraint_type_technique_common_spring_linear.DoRegisterChildClasses;
begin
  FClassesTree.Add('stiffness', TXMLTargetable_float_type);
  FClassesTree.Add('damping', TXMLTargetable_float_type);
  FClassesTree.Add('target_value', TXMLTargetable_float_type);
  inherited;
end;

function TXMLRigid_constraint_type_technique_common_spring_linear.Get_Stiffness: IXMLTargetable_float_type;
begin
  Result := Nodes['stiffness'] as IXMLTargetable_float_type;
end;

function TXMLRigid_constraint_type_technique_common_spring_linear.Get_Damping: IXMLTargetable_float_type;
begin
  Result := Nodes['damping'] as IXMLTargetable_float_type;
end;

function TXMLRigid_constraint_type_technique_common_spring_linear.Get_Target_value: IXMLTargetable_float_type;
begin
  Result := Nodes['target_value'] as IXMLTargetable_float_type;
end;

{ TXMLInstance_physics_model_type }

procedure TXMLInstance_physics_model_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('instance_force_field', TXMLInstance_force_field_type);
  FClassesTree.Add('instance_rigid_body', TXMLInstance_rigid_body_type);
  FClassesTree.Add('instance_rigid_constraint', TXMLInstance_rigid_constraint_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInstance_force_field := CreateFilter(TXMLInstance_force_field_typeList, TXMLInstance_force_field_type, IXMLInstance_force_field_type) as IXMLInstance_force_field_typeList;
  FInstance_rigid_body := CreateFilter(TXMLInstance_rigid_body_typeList, TXMLInstance_rigid_body_type, IXMLInstance_rigid_body_type) as IXMLInstance_rigid_body_typeList;
  FInstance_rigid_constraint := CreateFilter(TXMLInstance_rigid_constraint_typeList, TXMLInstance_rigid_constraint_type, IXMLInstance_rigid_constraint_type) as IXMLInstance_rigid_constraint_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLInstance_physics_model_type.Get_Url: UnicodeString;
begin
  Result := Params['url'];
end;

procedure TXMLInstance_physics_model_type.Set_Url(Value: UnicodeString);
begin
  Params['url'] := Value;
end;

function TXMLInstance_physics_model_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_physics_model_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLInstance_physics_model_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInstance_physics_model_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInstance_physics_model_type.Get_Parent: UnicodeString;
begin
  Result := Params['parent'];
end;

procedure TXMLInstance_physics_model_type.Set_Parent(Value: UnicodeString);
begin
  Params['parent'] := Value;
end;

function TXMLInstance_physics_model_type.Get_Instance_force_field: IXMLInstance_force_field_typeList;
begin
  Result := FInstance_force_field;
end;

function TXMLInstance_physics_model_type.Get_Instance_rigid_body: IXMLInstance_rigid_body_typeList;
begin
  Result := FInstance_rigid_body;
end;

function TXMLInstance_physics_model_type.Get_Instance_rigid_constraint: IXMLInstance_rigid_constraint_typeList;
begin
  Result := FInstance_rigid_constraint;
end;

function TXMLInstance_physics_model_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_physics_model_typeList }

function TXMLInstance_physics_model_typeList.Add: IXMLInstance_physics_model_type;
begin
  Result := AddItem(-1) as IXMLInstance_physics_model_type;
end;

function TXMLInstance_physics_model_typeList.Insert(const Index: Integer): IXMLInstance_physics_model_type;
begin
  Result := AddItem(Index) as IXMLInstance_physics_model_type;
end;

function TXMLInstance_physics_model_typeList.Get_Item(Index: Integer): IXMLInstance_physics_model_type;
begin
  Result := Nodes[Index] as IXMLInstance_physics_model_type;
end;

{ TXMLInstance_force_field_type }

{ TXMLInstance_force_field_typeList }

function TXMLInstance_force_field_typeList.Add: IXMLInstance_force_field_type;
begin
  Result := AddItem(-1) as IXMLInstance_force_field_type;
end;

function TXMLInstance_force_field_typeList.Insert(const Index: Integer): IXMLInstance_force_field_type;
begin
  Result := AddItem(Index) as IXMLInstance_force_field_type;
end;

function TXMLInstance_force_field_typeList.Get_Item(Index: Integer): IXMLInstance_force_field_type;
begin
  Result := Nodes[Index] as IXMLInstance_force_field_type;
end;

{ TXMLInstance_rigid_body_type }

procedure TXMLInstance_rigid_body_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('technique_common', TXMLInstance_rigid_body_type_technique_common);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLInstance_rigid_body_type.Get_Body: UnicodeString;
begin
  Result := Params['body'];
end;

procedure TXMLInstance_rigid_body_type.Set_Body(Value: UnicodeString);
begin
  Params['body'] := Value;
end;

function TXMLInstance_rigid_body_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_rigid_body_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLInstance_rigid_body_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInstance_rigid_body_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInstance_rigid_body_type.Get_Target: UnicodeString;
begin
  Result := Params['target'];
end;

procedure TXMLInstance_rigid_body_type.Set_Target(Value: UnicodeString);
begin
  Params['target'] := Value;
end;

function TXMLInstance_rigid_body_type.Get_Technique_common: IXMLInstance_rigid_body_type_technique_common;
begin
  Result := Nodes['technique_common'] as IXMLInstance_rigid_body_type_technique_common;
end;

function TXMLInstance_rigid_body_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLInstance_rigid_body_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_rigid_body_typeList }

function TXMLInstance_rigid_body_typeList.Add: IXMLInstance_rigid_body_type;
begin
  Result := AddItem(-1) as IXMLInstance_rigid_body_type;
end;

function TXMLInstance_rigid_body_typeList.Insert(const Index: Integer): IXMLInstance_rigid_body_type;
begin
  Result := AddItem(Index) as IXMLInstance_rigid_body_type;
end;

function TXMLInstance_rigid_body_typeList.Get_Item(Index: Integer): IXMLInstance_rigid_body_type;
begin
  Result := Nodes[Index] as IXMLInstance_rigid_body_type;
end;

{ TXMLInstance_rigid_body_type_technique_common }

procedure TXMLInstance_rigid_body_type_technique_common.DoRegisterChildClasses;
begin
  FClassesTree.Add('dynamic', TXMLInstance_rigid_body_type_technique_common_dynamic);
  FClassesTree.Add('mass', TXMLTargetable_float_type);
  FClassesTree.Add('mass_frame', TXMLInstance_rigid_body_type_technique_common_mass_frame);
  FClassesTree.Add('inertia', TXMLTargetable_float3_type);
  FClassesTree.Add('instance_physics_material', TXMLInstance_physics_material_type);
  FClassesTree.Add('physics_material', TXMLPhysics_material_type);
  FClassesTree.Add('shape', TXMLInstance_rigid_body_type_technique_common_shape);
  FShape := CreateFilter(TXMLInstance_rigid_body_type_technique_common_shapeList, TXMLInstance_rigid_body_type_technique_common_shape, IXMLInstance_rigid_body_type_technique_common_shape) as IXMLInstance_rigid_body_type_technique_common_shapeList;
  inherited;
end;

function TXMLInstance_rigid_body_type_technique_common.Get_Angular_velocity: UnicodeString;
begin
  Result := Nodes['angular_velocity'].Content;
end;

procedure TXMLInstance_rigid_body_type_technique_common.Set_Angular_velocity(Value: UnicodeString);
begin
  Nodes['angular_velocity'].Content := Value;
end;

function TXMLInstance_rigid_body_type_technique_common.Get_Velocity: UnicodeString;
begin
  Result := Nodes['velocity'].Content;
end;

procedure TXMLInstance_rigid_body_type_technique_common.Set_Velocity(Value: UnicodeString);
begin
  Nodes['velocity'].Content := Value;
end;

function TXMLInstance_rigid_body_type_technique_common.Get_Dynamic: IXMLInstance_rigid_body_type_technique_common_dynamic;
begin
  Result := Nodes['dynamic'] as IXMLInstance_rigid_body_type_technique_common_dynamic;
end;

function TXMLInstance_rigid_body_type_technique_common.Get_Mass: IXMLTargetable_float_type;
begin
  Result := Nodes['mass'] as IXMLTargetable_float_type;
end;

function TXMLInstance_rigid_body_type_technique_common.Get_Mass_frame: IXMLInstance_rigid_body_type_technique_common_mass_frame;
begin
  Result := Nodes['mass_frame'] as IXMLInstance_rigid_body_type_technique_common_mass_frame;
end;

function TXMLInstance_rigid_body_type_technique_common.Get_Inertia: IXMLTargetable_float3_type;
begin
  Result := Nodes['inertia'] as IXMLTargetable_float3_type;
end;

function TXMLInstance_rigid_body_type_technique_common.Get_Instance_physics_material: IXMLInstance_physics_material_type;
begin
  Result := Nodes['instance_physics_material'] as IXMLInstance_physics_material_type;
end;

function TXMLInstance_rigid_body_type_technique_common.Get_Physics_material: IXMLPhysics_material_type;
begin
  Result := Nodes['physics_material'] as IXMLPhysics_material_type;
end;

function TXMLInstance_rigid_body_type_technique_common.Get_Shape: IXMLInstance_rigid_body_type_technique_common_shapeList;
begin
  Result := FShape;
end;

{ TXMLInstance_rigid_body_type_technique_common_dynamic }

function TXMLInstance_rigid_body_type_technique_common_dynamic.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_rigid_body_type_technique_common_dynamic.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLInstance_rigid_body_type_technique_common_mass_frame }

procedure TXMLInstance_rigid_body_type_technique_common_mass_frame.DoRegisterChildClasses;
begin
  FClassesTree.Add('translate', TXMLTranslate_type);
  FClassesTree.Add('rotate', TXMLRotate_type);
  FTranslate := CreateFilter(TXMLTranslate_typeList, TXMLTranslate_type, IXMLTranslate_type) as IXMLTranslate_typeList;
  FRotate := CreateFilter(TXMLRotate_typeList, TXMLRotate_type, IXMLRotate_type) as IXMLRotate_typeList;
  inherited;
end;

function TXMLInstance_rigid_body_type_technique_common_mass_frame.Get_Translate: IXMLTranslate_typeList;
begin
  Result := FTranslate;
end;

function TXMLInstance_rigid_body_type_technique_common_mass_frame.Get_Rotate: IXMLRotate_typeList;
begin
  Result := FRotate;
end;

{ TXMLInstance_rigid_body_type_technique_common_shape }

procedure TXMLInstance_rigid_body_type_technique_common_shape.DoRegisterChildClasses;
begin
  FClassesTree.Add('hollow', TXMLInstance_rigid_body_type_technique_common_shape_hollow);
  FClassesTree.Add('mass', TXMLTargetable_float_type);
  FClassesTree.Add('density', TXMLTargetable_float_type);
  FClassesTree.Add('instance_physics_material', TXMLInstance_physics_material_type);
  FClassesTree.Add('physics_material', TXMLPhysics_material_type);
  FClassesTree.Add('instance_geometry', TXMLInstance_geometry_type);
  FClassesTree.Add('plane', TXMLPlane_type);
  FClassesTree.Add('box', TXMLBox_type);
  FClassesTree.Add('sphere', TXMLSphere_type);
  FClassesTree.Add('cylinder', TXMLCylinder_type);
  FClassesTree.Add('capsule', TXMLCapsule_type);
  FClassesTree.Add('translate', TXMLTranslate_type);
  FClassesTree.Add('rotate', TXMLRotate_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTranslate := CreateFilter(TXMLTranslate_typeList, TXMLTranslate_type, IXMLTranslate_type) as IXMLTranslate_typeList;
  FRotate := CreateFilter(TXMLRotate_typeList, TXMLRotate_type, IXMLRotate_type) as IXMLRotate_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Hollow: IXMLInstance_rigid_body_type_technique_common_shape_hollow;
begin
  Result := Nodes['hollow'] as IXMLInstance_rigid_body_type_technique_common_shape_hollow;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Mass: IXMLTargetable_float_type;
begin
  Result := Nodes['mass'] as IXMLTargetable_float_type;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Density: IXMLTargetable_float_type;
begin
  Result := Nodes['density'] as IXMLTargetable_float_type;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Instance_physics_material: IXMLInstance_physics_material_type;
begin
  Result := Nodes['instance_physics_material'] as IXMLInstance_physics_material_type;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Physics_material: IXMLPhysics_material_type;
begin
  Result := Nodes['physics_material'] as IXMLPhysics_material_type;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Instance_geometry: IXMLInstance_geometry_type;
begin
  Result := Nodes['instance_geometry'] as IXMLInstance_geometry_type;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Plane: IXMLPlane_type;
begin
  Result := Nodes['plane'] as IXMLPlane_type;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Box: IXMLBox_type;
begin
  Result := Nodes['box'] as IXMLBox_type;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Sphere: IXMLSphere_type;
begin
  Result := Nodes['sphere'] as IXMLSphere_type;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Cylinder: IXMLCylinder_type;
begin
  Result := Nodes['cylinder'] as IXMLCylinder_type;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Capsule: IXMLCapsule_type;
begin
  Result := Nodes['capsule'] as IXMLCapsule_type;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Translate: IXMLTranslate_typeList;
begin
  Result := FTranslate;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Rotate: IXMLRotate_typeList;
begin
  Result := FRotate;
end;

function TXMLInstance_rigid_body_type_technique_common_shape.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_rigid_body_type_technique_common_shapeList }

function TXMLInstance_rigid_body_type_technique_common_shapeList.Add: IXMLInstance_rigid_body_type_technique_common_shape;
begin
  Result := AddItem(-1) as IXMLInstance_rigid_body_type_technique_common_shape;
end;

function TXMLInstance_rigid_body_type_technique_common_shapeList.Insert(const Index: Integer): IXMLInstance_rigid_body_type_technique_common_shape;
begin
  Result := AddItem(Index) as IXMLInstance_rigid_body_type_technique_common_shape;
end;

function TXMLInstance_rigid_body_type_technique_common_shapeList.Get_Item(Index: Integer): IXMLInstance_rigid_body_type_technique_common_shape;
begin
  Result := Nodes[Index] as IXMLInstance_rigid_body_type_technique_common_shape;
end;

{ TXMLInstance_rigid_body_type_technique_common_shape_hollow }

function TXMLInstance_rigid_body_type_technique_common_shape_hollow.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_rigid_body_type_technique_common_shape_hollow.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLInstance_rigid_constraint_type }

procedure TXMLInstance_rigid_constraint_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('extra', TXMLExtra_type);
  Tag := 'extra';
  ItemInterface := IXMLExtra_type;
  inherited;
end;

function TXMLInstance_rigid_constraint_type.Get_Constraint: UnicodeString;
begin
  Result := Params['constraint'];
end;

procedure TXMLInstance_rigid_constraint_type.Set_Constraint(Value: UnicodeString);
begin
  Params['constraint'] := Value;
end;

function TXMLInstance_rigid_constraint_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_rigid_constraint_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLInstance_rigid_constraint_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInstance_rigid_constraint_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInstance_rigid_constraint_type.Get_Extra(Index: Integer): IXMLExtra_type;
begin
  Result := Nodes[Index] as IXMLExtra_type;
end;

function TXMLInstance_rigid_constraint_type.Add: IXMLExtra_type;
begin
  Result := AddItem(-1) as IXMLExtra_type;
end;

function TXMLInstance_rigid_constraint_type.Insert(const Index: Integer): IXMLExtra_type;
begin
  Result := AddItem(Index) as IXMLExtra_type;
end;

{ TXMLInstance_rigid_constraint_typeList }

function TXMLInstance_rigid_constraint_typeList.Add: IXMLInstance_rigid_constraint_type;
begin
  Result := AddItem(-1) as IXMLInstance_rigid_constraint_type;
end;

function TXMLInstance_rigid_constraint_typeList.Insert(const Index: Integer): IXMLInstance_rigid_constraint_type;
begin
  Result := AddItem(Index) as IXMLInstance_rigid_constraint_type;
end;

function TXMLInstance_rigid_constraint_typeList.Get_Item(Index: Integer): IXMLInstance_rigid_constraint_type;
begin
  Result := Nodes[Index] as IXMLInstance_rigid_constraint_type;
end;

{ TXMLLibrary_physics_scenes_type }

procedure TXMLLibrary_physics_scenes_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('physics_scene', TXMLPhysics_scene_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FPhysics_scene := CreateFilter(TXMLPhysics_scene_typeList, TXMLPhysics_scene_type, IXMLPhysics_scene_type) as IXMLPhysics_scene_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_physics_scenes_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_physics_scenes_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_physics_scenes_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_physics_scenes_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_physics_scenes_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_physics_scenes_type.Get_Physics_scene: IXMLPhysics_scene_typeList;
begin
  Result := FPhysics_scene;
end;

function TXMLLibrary_physics_scenes_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_physics_scenes_typeList }

function TXMLLibrary_physics_scenes_typeList.Add: IXMLLibrary_physics_scenes_type;
begin
  Result := AddItem(-1) as IXMLLibrary_physics_scenes_type;
end;

function TXMLLibrary_physics_scenes_typeList.Insert(const Index: Integer): IXMLLibrary_physics_scenes_type;
begin
  Result := AddItem(Index) as IXMLLibrary_physics_scenes_type;
end;

function TXMLLibrary_physics_scenes_typeList.Get_Item(Index: Integer): IXMLLibrary_physics_scenes_type;
begin
  Result := Nodes[Index] as IXMLLibrary_physics_scenes_type;
end;

{ TXMLPhysics_scene_type }

procedure TXMLPhysics_scene_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('instance_force_field', TXMLInstance_force_field_type);
  FClassesTree.Add('instance_physics_model', TXMLInstance_physics_model_type);
  FClassesTree.Add('technique_common', TXMLPhysics_scene_type_technique_common);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInstance_force_field := CreateFilter(TXMLInstance_force_field_typeList, TXMLInstance_force_field_type, IXMLInstance_force_field_type) as IXMLInstance_force_field_typeList;
  FInstance_physics_model := CreateFilter(TXMLInstance_physics_model_typeList, TXMLInstance_physics_model_type, IXMLInstance_physics_model_type) as IXMLInstance_physics_model_typeList;
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLPhysics_scene_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLPhysics_scene_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLPhysics_scene_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLPhysics_scene_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLPhysics_scene_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLPhysics_scene_type.Get_Instance_force_field: IXMLInstance_force_field_typeList;
begin
  Result := FInstance_force_field;
end;

function TXMLPhysics_scene_type.Get_Instance_physics_model: IXMLInstance_physics_model_typeList;
begin
  Result := FInstance_physics_model;
end;

function TXMLPhysics_scene_type.Get_Technique_common: IXMLPhysics_scene_type_technique_common;
begin
  Result := Nodes['technique_common'] as IXMLPhysics_scene_type_technique_common;
end;

function TXMLPhysics_scene_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLPhysics_scene_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLPhysics_scene_typeList }

function TXMLPhysics_scene_typeList.Add: IXMLPhysics_scene_type;
begin
  Result := AddItem(-1) as IXMLPhysics_scene_type;
end;

function TXMLPhysics_scene_typeList.Insert(const Index: Integer): IXMLPhysics_scene_type;
begin
  Result := AddItem(Index) as IXMLPhysics_scene_type;
end;

function TXMLPhysics_scene_typeList.Get_Item(Index: Integer): IXMLPhysics_scene_type;
begin
  Result := Nodes[Index] as IXMLPhysics_scene_type;
end;

{ TXMLPhysics_scene_type_technique_common }

procedure TXMLPhysics_scene_type_technique_common.DoRegisterChildClasses;
begin
  FClassesTree.Add('gravity', TXMLTargetable_float3_type);
  FClassesTree.Add('time_step', TXMLTargetable_float_type);
  inherited;
end;

function TXMLPhysics_scene_type_technique_common.Get_Gravity: IXMLTargetable_float3_type;
begin
  Result := Nodes['gravity'] as IXMLTargetable_float3_type;
end;

function TXMLPhysics_scene_type_technique_common.Get_Time_step: IXMLTargetable_float_type;
begin
  Result := Nodes['time_step'] as IXMLTargetable_float_type;
end;

{ TXMLLibrary_visual_scenes_type }

procedure TXMLLibrary_visual_scenes_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('visual_scene', TXMLVisual_scene_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FVisual_scene := CreateFilter(TXMLVisual_scene_typeList, TXMLVisual_scene_type, IXMLVisual_scene_type) as IXMLVisual_scene_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_visual_scenes_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_visual_scenes_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_visual_scenes_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_visual_scenes_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_visual_scenes_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_visual_scenes_type.Get_Visual_scene: IXMLVisual_scene_typeList;
begin
  Result := FVisual_scene;
end;

function TXMLLibrary_visual_scenes_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_visual_scenes_typeList }

function TXMLLibrary_visual_scenes_typeList.Add: IXMLLibrary_visual_scenes_type;
begin
  Result := AddItem(-1) as IXMLLibrary_visual_scenes_type;
end;

function TXMLLibrary_visual_scenes_typeList.Insert(const Index: Integer): IXMLLibrary_visual_scenes_type;
begin
  Result := AddItem(Index) as IXMLLibrary_visual_scenes_type;
end;

function TXMLLibrary_visual_scenes_typeList.Get_Item(Index: Integer): IXMLLibrary_visual_scenes_type;
begin
  Result := Nodes[Index] as IXMLLibrary_visual_scenes_type;
end;

{ TXMLVisual_scene_type }

procedure TXMLVisual_scene_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('node', TXMLNode_type);
  FClassesTree.Add('evaluate_scene', TXMLVisual_scene_type_evaluate_scene);
  FClassesTree.Add('extra', TXMLExtra_type);
  FNode := CreateFilter(TXMLNode_typeList, TXMLNode_type, IXMLNode_type) as IXMLNode_typeList;
  FEvaluate_scene := CreateFilter(TXMLVisual_scene_type_evaluate_sceneList, TXMLVisual_scene_type_evaluate_scene, IXMLVisual_scene_type_evaluate_scene) as IXMLVisual_scene_type_evaluate_sceneList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLVisual_scene_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLVisual_scene_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLVisual_scene_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLVisual_scene_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLVisual_scene_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLVisual_scene_type.Get_Node: IXMLNode_typeList;
begin
  Result := FNode;
end;

function TXMLVisual_scene_type.Get_Evaluate_scene: IXMLVisual_scene_type_evaluate_sceneList;
begin
  Result := FEvaluate_scene;
end;

function TXMLVisual_scene_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLVisual_scene_typeList }

function TXMLVisual_scene_typeList.Add: IXMLVisual_scene_type;
begin
  Result := AddItem(-1) as IXMLVisual_scene_type;
end;

function TXMLVisual_scene_typeList.Insert(const Index: Integer): IXMLVisual_scene_type;
begin
  Result := AddItem(Index) as IXMLVisual_scene_type;
end;

function TXMLVisual_scene_typeList.Get_Item(Index: Integer): IXMLVisual_scene_type;
begin
  Result := Nodes[Index] as IXMLVisual_scene_type;
end;

{ TXMLVisual_scene_type_evaluate_scene }

procedure TXMLVisual_scene_type_evaluate_scene.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('render', TXMLVisual_scene_type_evaluate_scene_render);
  FClassesTree.Add('extra', TXMLExtra_type);
  FRender := CreateFilter(TXMLVisual_scene_type_evaluate_scene_renderList, TXMLVisual_scene_type_evaluate_scene_render, IXMLVisual_scene_type_evaluate_scene_render) as IXMLVisual_scene_type_evaluate_scene_renderList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLVisual_scene_type_evaluate_scene.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLVisual_scene_type_evaluate_scene.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLVisual_scene_type_evaluate_scene.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLVisual_scene_type_evaluate_scene.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLVisual_scene_type_evaluate_scene.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLVisual_scene_type_evaluate_scene.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLVisual_scene_type_evaluate_scene.Get_Enable: Boolean;
begin
  Result := Params['enable'];
end;

procedure TXMLVisual_scene_type_evaluate_scene.Set_Enable(Value: Boolean);
begin
  Params['enable'] := Value;
end;

function TXMLVisual_scene_type_evaluate_scene.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLVisual_scene_type_evaluate_scene.Get_Render: IXMLVisual_scene_type_evaluate_scene_renderList;
begin
  Result := FRender;
end;

function TXMLVisual_scene_type_evaluate_scene.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLVisual_scene_type_evaluate_sceneList }

function TXMLVisual_scene_type_evaluate_sceneList.Add: IXMLVisual_scene_type_evaluate_scene;
begin
  Result := AddItem(-1) as IXMLVisual_scene_type_evaluate_scene;
end;

function TXMLVisual_scene_type_evaluate_sceneList.Insert(const Index: Integer): IXMLVisual_scene_type_evaluate_scene;
begin
  Result := AddItem(Index) as IXMLVisual_scene_type_evaluate_scene;
end;

function TXMLVisual_scene_type_evaluate_sceneList.Get_Item(Index: Integer): IXMLVisual_scene_type_evaluate_scene;
begin
  Result := Nodes[Index] as IXMLVisual_scene_type_evaluate_scene;
end;

{ TXMLVisual_scene_type_evaluate_scene_render }

procedure TXMLVisual_scene_type_evaluate_scene_render.DoRegisterChildClasses;
begin
  FClassesTree.Add('instance_material', TXMLVisual_scene_type_evaluate_scene_render_instance_material);
  FClassesTree.Add('extra', TXMLExtra_type);
  FLayer := CreateFilter(TXMLNCNameList, TXML, IXML) as IXMLNCNameList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLVisual_scene_type_evaluate_scene_render.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLVisual_scene_type_evaluate_scene_render.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLVisual_scene_type_evaluate_scene_render.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLVisual_scene_type_evaluate_scene_render.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLVisual_scene_type_evaluate_scene_render.Get_Camera_node: UnicodeString;
begin
  Result := Params['camera_node'];
end;

procedure TXMLVisual_scene_type_evaluate_scene_render.Set_Camera_node(Value: UnicodeString);
begin
  Params['camera_node'] := Value;
end;

function TXMLVisual_scene_type_evaluate_scene_render.Get_Layer: IXMLNCNameList;
begin
  Result := FLayer;
end;

function TXMLVisual_scene_type_evaluate_scene_render.Get_Instance_material: IXMLVisual_scene_type_evaluate_scene_render_instance_material;
begin
  Result := Nodes['instance_material'] as IXMLVisual_scene_type_evaluate_scene_render_instance_material;
end;

function TXMLVisual_scene_type_evaluate_scene_render.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLVisual_scene_type_evaluate_scene_renderList }

function TXMLVisual_scene_type_evaluate_scene_renderList.Add: IXMLVisual_scene_type_evaluate_scene_render;
begin
  Result := AddItem(-1) as IXMLVisual_scene_type_evaluate_scene_render;
end;

function TXMLVisual_scene_type_evaluate_scene_renderList.Insert(const Index: Integer): IXMLVisual_scene_type_evaluate_scene_render;
begin
  Result := AddItem(Index) as IXMLVisual_scene_type_evaluate_scene_render;
end;

function TXMLVisual_scene_type_evaluate_scene_renderList.Get_Item(Index: Integer): IXMLVisual_scene_type_evaluate_scene_render;
begin
  Result := Nodes[Index] as IXMLVisual_scene_type_evaluate_scene_render;
end;

{ TXMLVisual_scene_type_evaluate_scene_render_instance_material }

procedure TXMLVisual_scene_type_evaluate_scene_render_instance_material.DoRegisterChildClasses;
begin
  FClassesTree.Add('technique_override', TXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override);
  FClassesTree.Add('bind', TXMLVisual_scene_type_evaluate_scene_render_instance_material_bind);
  FClassesTree.Add('extra', TXMLExtra_type);
  FBind := CreateFilter(TXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList, TXMLVisual_scene_type_evaluate_scene_render_instance_material_bind, IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind) as IXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLVisual_scene_type_evaluate_scene_render_instance_material.Get_Url: UnicodeString;
begin
  Result := Params['url'];
end;

procedure TXMLVisual_scene_type_evaluate_scene_render_instance_material.Set_Url(Value: UnicodeString);
begin
  Params['url'] := Value;
end;

function TXMLVisual_scene_type_evaluate_scene_render_instance_material.Get_Technique_override: IXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override;
begin
  Result := Nodes['technique_override'] as IXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override;
end;

function TXMLVisual_scene_type_evaluate_scene_render_instance_material.Get_Bind: IXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList;
begin
  Result := FBind;
end;

function TXMLVisual_scene_type_evaluate_scene_render_instance_material.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override }

function TXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

function TXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override.Get_Pass: UnicodeString;
begin
  Result := Params['pass'];
end;

procedure TXMLVisual_scene_type_evaluate_scene_render_instance_material_technique_override.Set_Pass(Value: UnicodeString);
begin
  Params['pass'] := Value;
end;

{ TXMLVisual_scene_type_evaluate_scene_render_instance_material_bind }

function TXMLVisual_scene_type_evaluate_scene_render_instance_material_bind.Get_Semantic: UnicodeString;
begin
  Result := Params['semantic'];
end;

procedure TXMLVisual_scene_type_evaluate_scene_render_instance_material_bind.Set_Semantic(Value: UnicodeString);
begin
  Params['semantic'] := Value;
end;

function TXMLVisual_scene_type_evaluate_scene_render_instance_material_bind.Get_Target: UnicodeString;
begin
  Result := Params['target'];
end;

procedure TXMLVisual_scene_type_evaluate_scene_render_instance_material_bind.Set_Target(Value: UnicodeString);
begin
  Params['target'] := Value;
end;

{ TXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList }

function TXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList.Add: IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind;
begin
  Result := AddItem(-1) as IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind;
end;

function TXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList.Insert(const Index: Integer): IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind;
begin
  Result := AddItem(Index) as IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind;
end;

function TXMLVisual_scene_type_evaluate_scene_render_instance_material_bindList.Get_Item(Index: Integer): IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind;
begin
  Result := Nodes[Index] as IXMLVisual_scene_type_evaluate_scene_render_instance_material_bind;
end;

{ TXMLLibrary_joints_type }

procedure TXMLLibrary_joints_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('joint', TXMLJoint_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FJoint := CreateFilter(TXMLJoint_typeList, TXMLJoint_type, IXMLJoint_type) as IXMLJoint_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_joints_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_joints_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_joints_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_joints_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_joints_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_joints_type.Get_Joint: IXMLJoint_typeList;
begin
  Result := FJoint;
end;

function TXMLLibrary_joints_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_joints_typeList }

function TXMLLibrary_joints_typeList.Add: IXMLLibrary_joints_type;
begin
  Result := AddItem(-1) as IXMLLibrary_joints_type;
end;

function TXMLLibrary_joints_typeList.Insert(const Index: Integer): IXMLLibrary_joints_type;
begin
  Result := AddItem(Index) as IXMLLibrary_joints_type;
end;

function TXMLLibrary_joints_typeList.Get_Item(Index: Integer): IXMLLibrary_joints_type;
begin
  Result := Nodes[Index] as IXMLLibrary_joints_type;
end;

{ TXMLJoint_type }

procedure TXMLJoint_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('prismatic', TXMLAxis_constraint_type);
  FClassesTree.Add('revolute', TXMLAxis_constraint_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FPrismatic := CreateFilter(TXMLAxis_constraint_typeList, TXMLAxis_constraint_type, IXMLAxis_constraint_type) as IXMLAxis_constraint_typeList;
  FRevolute := CreateFilter(TXMLAxis_constraint_typeList, TXMLAxis_constraint_type, IXMLAxis_constraint_type) as IXMLAxis_constraint_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLJoint_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLJoint_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLJoint_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLJoint_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLJoint_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLJoint_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLJoint_type.Get_Prismatic: IXMLAxis_constraint_typeList;
begin
  Result := FPrismatic;
end;

function TXMLJoint_type.Get_Revolute: IXMLAxis_constraint_typeList;
begin
  Result := FRevolute;
end;

function TXMLJoint_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLJoint_typeList }

function TXMLJoint_typeList.Add: IXMLJoint_type;
begin
  Result := AddItem(-1) as IXMLJoint_type;
end;

function TXMLJoint_typeList.Insert(const Index: Integer): IXMLJoint_type;
begin
  Result := AddItem(Index) as IXMLJoint_type;
end;

function TXMLJoint_typeList.Get_Item(Index: Integer): IXMLJoint_type;
begin
  Result := Nodes[Index] as IXMLJoint_type;
end;

{ TXMLAxis_constraint_type }

procedure TXMLAxis_constraint_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('axis', TXMLAxis_type);
  FClassesTree.Add('limits', TXMLJoint_limits_type);
  inherited;
end;

function TXMLAxis_constraint_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLAxis_constraint_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLAxis_constraint_type.Get_Axis: IXMLAxis_type;
begin
  Result := Nodes['axis'] as IXMLAxis_type;
end;

function TXMLAxis_constraint_type.Get_Limits: IXMLJoint_limits_type;
begin
  Result := Nodes['limits'] as IXMLJoint_limits_type;
end;

{ TXMLAxis_constraint_typeList }

function TXMLAxis_constraint_typeList.Add: IXMLAxis_constraint_type;
begin
  Result := AddItem(-1) as IXMLAxis_constraint_type;
end;

function TXMLAxis_constraint_typeList.Insert(const Index: Integer): IXMLAxis_constraint_type;
begin
  Result := AddItem(Index) as IXMLAxis_constraint_type;
end;

function TXMLAxis_constraint_typeList.Get_Item(Index: Integer): IXMLAxis_constraint_type;
begin
  Result := Nodes[Index] as IXMLAxis_constraint_type;
end;

{ TXMLAxis_type }

function TXMLAxis_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLAxis_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLAxis_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLAxis_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

{ TXMLJoint_limits_type }

procedure TXMLJoint_limits_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('min', TXMLMinmax_type);
  FClassesTree.Add('max', TXMLMinmax_type);
  inherited;
end;

function TXMLJoint_limits_type.Get_Min: IXMLMinmax_type;
begin
  Result := Nodes['min'] as IXMLMinmax_type;
end;

function TXMLJoint_limits_type.Get_Max: IXMLMinmax_type;
begin
  Result := Nodes['max'] as IXMLMinmax_type;
end;

{ TXMLMinmax_type }

function TXMLMinmax_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLMinmax_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLMinmax_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLMinmax_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLLibrary_kinematics_models_type }

procedure TXMLLibrary_kinematics_models_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('kinematics_model', TXMLKinematics_model_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FKinematics_model := CreateFilter(TXMLKinematics_model_typeList, TXMLKinematics_model_type, IXMLKinematics_model_type) as IXMLKinematics_model_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_kinematics_models_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_kinematics_models_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_kinematics_models_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_kinematics_models_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_kinematics_models_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_kinematics_models_type.Get_Kinematics_model: IXMLKinematics_model_typeList;
begin
  Result := FKinematics_model;
end;

function TXMLLibrary_kinematics_models_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_kinematics_models_typeList }

function TXMLLibrary_kinematics_models_typeList.Add: IXMLLibrary_kinematics_models_type;
begin
  Result := AddItem(-1) as IXMLLibrary_kinematics_models_type;
end;

function TXMLLibrary_kinematics_models_typeList.Insert(const Index: Integer): IXMLLibrary_kinematics_models_type;
begin
  Result := AddItem(Index) as IXMLLibrary_kinematics_models_type;
end;

function TXMLLibrary_kinematics_models_typeList.Get_Item(Index: Integer): IXMLLibrary_kinematics_models_type;
begin
  Result := Nodes[Index] as IXMLLibrary_kinematics_models_type;
end;

{ TXMLKinematics_model_type }

procedure TXMLKinematics_model_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('technique_common', TXMLKinematics_model_technique_type);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLKinematics_model_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLKinematics_model_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLKinematics_model_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLKinematics_model_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLKinematics_model_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLKinematics_model_type.Get_Technique_common: IXMLKinematics_model_technique_type;
begin
  Result := Nodes['technique_common'] as IXMLKinematics_model_technique_type;
end;

function TXMLKinematics_model_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLKinematics_model_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLKinematics_model_typeList }

function TXMLKinematics_model_typeList.Add: IXMLKinematics_model_type;
begin
  Result := AddItem(-1) as IXMLKinematics_model_type;
end;

function TXMLKinematics_model_typeList.Insert(const Index: Integer): IXMLKinematics_model_type;
begin
  Result := AddItem(Index) as IXMLKinematics_model_type;
end;

function TXMLKinematics_model_typeList.Get_Item(Index: Integer): IXMLKinematics_model_type;
begin
  Result := Nodes[Index] as IXMLKinematics_model_type;
end;

{ TXMLKinematics_model_technique_type }

procedure TXMLKinematics_model_technique_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('newparam', TXMLKinematics_newparam_type);
  FClassesTree.Add('instance_joint', TXMLInstance_joint_type);
  FClassesTree.Add('joint', TXMLJoint_type);
  FClassesTree.Add('link', TXMLLink_type);
  FClassesTree.Add('formula', TXMLFormula_type);
  FClassesTree.Add('instance_formula', TXMLInstance_formula_type);
  FNewparam := CreateFilter(TXMLKinematics_newparam_typeList, TXMLKinematics_newparam_type, IXMLKinematics_newparam_type) as IXMLKinematics_newparam_typeList;
  FInstance_joint := CreateFilter(TXMLInstance_joint_typeList, TXMLInstance_joint_type, IXMLInstance_joint_type) as IXMLInstance_joint_typeList;
  FJoint := CreateFilter(TXMLJoint_typeList, TXMLJoint_type, IXMLJoint_type) as IXMLJoint_typeList;
  FLink := CreateFilter(TXMLLink_typeList, TXMLLink_type, IXMLLink_type) as IXMLLink_typeList;
  FFormula := CreateFilter(TXMLFormula_typeList, TXMLFormula_type, IXMLFormula_type) as IXMLFormula_typeList;
  FInstance_formula := CreateFilter(TXMLInstance_formula_typeList, TXMLInstance_formula_type, IXMLInstance_formula_type) as IXMLInstance_formula_typeList;
  inherited;
end;

function TXMLKinematics_model_technique_type.Get_Newparam: IXMLKinematics_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLKinematics_model_technique_type.Get_Instance_joint: IXMLInstance_joint_typeList;
begin
  Result := FInstance_joint;
end;

function TXMLKinematics_model_technique_type.Get_Joint: IXMLJoint_typeList;
begin
  Result := FJoint;
end;

function TXMLKinematics_model_technique_type.Get_Link: IXMLLink_typeList;
begin
  Result := FLink;
end;

function TXMLKinematics_model_technique_type.Get_Formula: IXMLFormula_typeList;
begin
  Result := FFormula;
end;

function TXMLKinematics_model_technique_type.Get_Instance_formula: IXMLInstance_formula_typeList;
begin
  Result := FInstance_formula;
end;

{ TXMLKinematics_newparam_type }

function TXMLKinematics_newparam_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLKinematics_newparam_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLKinematics_newparam_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLKinematics_newparam_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLKinematics_newparam_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLKinematics_newparam_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLKinematics_newparam_type.Get_SIDREF: UnicodeString;
begin
  Result := Nodes['SIDREF'].Content;
end;

procedure TXMLKinematics_newparam_type.Set_SIDREF(Value: UnicodeString);
begin
  Nodes['SIDREF'].Content := Value;
end;

function TXMLKinematics_newparam_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLKinematics_newparam_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

{ TXMLKinematics_newparam_typeList }

function TXMLKinematics_newparam_typeList.Add: IXMLKinematics_newparam_type;
begin
  Result := AddItem(-1) as IXMLKinematics_newparam_type;
end;

function TXMLKinematics_newparam_typeList.Insert(const Index: Integer): IXMLKinematics_newparam_type;
begin
  Result := AddItem(Index) as IXMLKinematics_newparam_type;
end;

function TXMLKinematics_newparam_typeList.Get_Item(Index: Integer): IXMLKinematics_newparam_type;
begin
  Result := Nodes[Index] as IXMLKinematics_newparam_type;
end;

{ TXMLInstance_joint_type }

{ TXMLInstance_joint_typeList }

function TXMLInstance_joint_typeList.Add: IXMLInstance_joint_type;
begin
  Result := AddItem(-1) as IXMLInstance_joint_type;
end;

function TXMLInstance_joint_typeList.Insert(const Index: Integer): IXMLInstance_joint_type;
begin
  Result := AddItem(Index) as IXMLInstance_joint_type;
end;

function TXMLInstance_joint_typeList.Get_Item(Index: Integer): IXMLInstance_joint_type;
begin
  Result := Nodes[Index] as IXMLInstance_joint_type;
end;

{ TXMLLink_type }

procedure TXMLLink_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('rotate', TXMLRotate_type);
  FClassesTree.Add('translate', TXMLTranslate_type);
  FClassesTree.Add('attachment_full', TXMLLink_type_attachment_full);
  FClassesTree.Add('attachment_start', TXMLLink_type_attachment_start);
  FClassesTree.Add('attachment_end', TXMLLink_type_attachment_end);
  FRotate := CreateFilter(TXMLRotate_typeList, TXMLRotate_type, IXMLRotate_type) as IXMLRotate_typeList;
  FTranslate := CreateFilter(TXMLTranslate_typeList, TXMLTranslate_type, IXMLTranslate_type) as IXMLTranslate_typeList;
  FAttachment_full := CreateFilter(TXMLLink_type_attachment_fullList, TXMLLink_type_attachment_full, IXMLLink_type_attachment_full) as IXMLLink_type_attachment_fullList;
  FAttachment_start := CreateFilter(TXMLLink_type_attachment_startList, TXMLLink_type_attachment_start, IXMLLink_type_attachment_start) as IXMLLink_type_attachment_startList;
  FAttachment_end := CreateFilter(TXMLLink_type_attachment_endList, TXMLLink_type_attachment_end, IXMLLink_type_attachment_end) as IXMLLink_type_attachment_endList;
  inherited;
end;

function TXMLLink_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLLink_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLLink_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLink_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLink_type.Get_Rotate: IXMLRotate_typeList;
begin
  Result := FRotate;
end;

function TXMLLink_type.Get_Translate: IXMLTranslate_typeList;
begin
  Result := FTranslate;
end;

function TXMLLink_type.Get_Attachment_full: IXMLLink_type_attachment_fullList;
begin
  Result := FAttachment_full;
end;

function TXMLLink_type.Get_Attachment_start: IXMLLink_type_attachment_startList;
begin
  Result := FAttachment_start;
end;

function TXMLLink_type.Get_Attachment_end: IXMLLink_type_attachment_endList;
begin
  Result := FAttachment_end;
end;

{ TXMLLink_typeList }

function TXMLLink_typeList.Add: IXMLLink_type;
begin
  Result := AddItem(-1) as IXMLLink_type;
end;

function TXMLLink_typeList.Insert(const Index: Integer): IXMLLink_type;
begin
  Result := AddItem(Index) as IXMLLink_type;
end;

function TXMLLink_typeList.Get_Item(Index: Integer): IXMLLink_type;
begin
  Result := Nodes[Index] as IXMLLink_type;
end;

{ TXMLLink_type_attachment_full }

procedure TXMLLink_type_attachment_full.DoRegisterChildClasses;
begin
  FClassesTree.Add('rotate', TXMLRotate_type);
  FClassesTree.Add('translate', TXMLTranslate_type);
  FClassesTree.Add('link', TXMLLink_type);
  FRotate := CreateFilter(TXMLRotate_typeList, TXMLRotate_type, IXMLRotate_type) as IXMLRotate_typeList;
  FTranslate := CreateFilter(TXMLTranslate_typeList, TXMLTranslate_type, IXMLTranslate_type) as IXMLTranslate_typeList;
  inherited;
end;

function TXMLLink_type_attachment_full.Get_Joint: UnicodeString;
begin
  Result := Params['joint'];
end;

procedure TXMLLink_type_attachment_full.Set_Joint(Value: UnicodeString);
begin
  Params['joint'] := Value;
end;

function TXMLLink_type_attachment_full.Get_Rotate: IXMLRotate_typeList;
begin
  Result := FRotate;
end;

function TXMLLink_type_attachment_full.Get_Translate: IXMLTranslate_typeList;
begin
  Result := FTranslate;
end;

function TXMLLink_type_attachment_full.Get_Link: IXMLLink_type;
begin
  Result := Nodes['link'] as IXMLLink_type;
end;

{ TXMLLink_type_attachment_fullList }

function TXMLLink_type_attachment_fullList.Add: IXMLLink_type_attachment_full;
begin
  Result := AddItem(-1) as IXMLLink_type_attachment_full;
end;

function TXMLLink_type_attachment_fullList.Insert(const Index: Integer): IXMLLink_type_attachment_full;
begin
  Result := AddItem(Index) as IXMLLink_type_attachment_full;
end;

function TXMLLink_type_attachment_fullList.Get_Item(Index: Integer): IXMLLink_type_attachment_full;
begin
  Result := Nodes[Index] as IXMLLink_type_attachment_full;
end;

{ TXMLLink_type_attachment_start }

procedure TXMLLink_type_attachment_start.DoRegisterChildClasses;
begin
  FClassesTree.Add('rotate', TXMLRotate_type);
  FClassesTree.Add('translate', TXMLTranslate_type);
  FRotate := CreateFilter(TXMLRotate_typeList, TXMLRotate_type, IXMLRotate_type) as IXMLRotate_typeList;
  FTranslate := CreateFilter(TXMLTranslate_typeList, TXMLTranslate_type, IXMLTranslate_type) as IXMLTranslate_typeList;
  inherited;
end;

function TXMLLink_type_attachment_start.Get_Joint: UnicodeString;
begin
  Result := Params['joint'];
end;

procedure TXMLLink_type_attachment_start.Set_Joint(Value: UnicodeString);
begin
  Params['joint'] := Value;
end;

function TXMLLink_type_attachment_start.Get_Rotate: IXMLRotate_typeList;
begin
  Result := FRotate;
end;

function TXMLLink_type_attachment_start.Get_Translate: IXMLTranslate_typeList;
begin
  Result := FTranslate;
end;

{ TXMLLink_type_attachment_startList }

function TXMLLink_type_attachment_startList.Add: IXMLLink_type_attachment_start;
begin
  Result := AddItem(-1) as IXMLLink_type_attachment_start;
end;

function TXMLLink_type_attachment_startList.Insert(const Index: Integer): IXMLLink_type_attachment_start;
begin
  Result := AddItem(Index) as IXMLLink_type_attachment_start;
end;

function TXMLLink_type_attachment_startList.Get_Item(Index: Integer): IXMLLink_type_attachment_start;
begin
  Result := Nodes[Index] as IXMLLink_type_attachment_start;
end;

{ TXMLLink_type_attachment_end }

procedure TXMLLink_type_attachment_end.DoRegisterChildClasses;
begin
  FClassesTree.Add('rotate', TXMLRotate_type);
  FClassesTree.Add('translate', TXMLTranslate_type);
  FRotate := CreateFilter(TXMLRotate_typeList, TXMLRotate_type, IXMLRotate_type) as IXMLRotate_typeList;
  FTranslate := CreateFilter(TXMLTranslate_typeList, TXMLTranslate_type, IXMLTranslate_type) as IXMLTranslate_typeList;
  inherited;
end;

function TXMLLink_type_attachment_end.Get_Joint: UnicodeString;
begin
  Result := Params['joint'];
end;

procedure TXMLLink_type_attachment_end.Set_Joint(Value: UnicodeString);
begin
  Params['joint'] := Value;
end;

function TXMLLink_type_attachment_end.Get_Rotate: IXMLRotate_typeList;
begin
  Result := FRotate;
end;

function TXMLLink_type_attachment_end.Get_Translate: IXMLTranslate_typeList;
begin
  Result := FTranslate;
end;

{ TXMLLink_type_attachment_endList }

function TXMLLink_type_attachment_endList.Add: IXMLLink_type_attachment_end;
begin
  Result := AddItem(-1) as IXMLLink_type_attachment_end;
end;

function TXMLLink_type_attachment_endList.Insert(const Index: Integer): IXMLLink_type_attachment_end;
begin
  Result := AddItem(Index) as IXMLLink_type_attachment_end;
end;

function TXMLLink_type_attachment_endList.Get_Item(Index: Integer): IXMLLink_type_attachment_end;
begin
  Result := Nodes[Index] as IXMLLink_type_attachment_end;
end;

{ TXMLFormula_type }

procedure TXMLFormula_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('newparam', TXMLFormula_newparam_type);
  FClassesTree.Add('target', TXMLCommon_float_or_param_type);
  FClassesTree.Add('technique_common', TXMLFormula_technique_type);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FNewparam := CreateFilter(TXMLFormula_newparam_typeList, TXMLFormula_newparam_type, IXMLFormula_newparam_type) as IXMLFormula_newparam_typeList;
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  inherited;
end;

function TXMLFormula_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLFormula_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLFormula_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLFormula_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLFormula_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLFormula_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLFormula_type.Get_Newparam: IXMLFormula_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLFormula_type.Get_Target: IXMLCommon_float_or_param_type;
begin
  Result := Nodes['target'] as IXMLCommon_float_or_param_type;
end;

function TXMLFormula_type.Get_Technique_common: IXMLFormula_technique_type;
begin
  Result := Nodes['technique_common'] as IXMLFormula_technique_type;
end;

function TXMLFormula_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

{ TXMLFormula_typeList }

function TXMLFormula_typeList.Add: IXMLFormula_type;
begin
  Result := AddItem(-1) as IXMLFormula_type;
end;

function TXMLFormula_typeList.Insert(const Index: Integer): IXMLFormula_type;
begin
  Result := AddItem(Index) as IXMLFormula_type;
end;

function TXMLFormula_typeList.Get_Item(Index: Integer): IXMLFormula_type;
begin
  Result := Nodes[Index] as IXMLFormula_type;
end;

{ TXMLFormula_newparam_type }

function TXMLFormula_newparam_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLFormula_newparam_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLFormula_newparam_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLFormula_newparam_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLFormula_newparam_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLFormula_newparam_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLFormula_newparam_type.Get_SIDREF: UnicodeString;
begin
  Result := Nodes['SIDREF'].Content;
end;

procedure TXMLFormula_newparam_type.Set_SIDREF(Value: UnicodeString);
begin
  Nodes['SIDREF'].Content := Value;
end;

function TXMLFormula_newparam_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLFormula_newparam_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

{ TXMLFormula_newparam_typeList }

function TXMLFormula_newparam_typeList.Add: IXMLFormula_newparam_type;
begin
  Result := AddItem(-1) as IXMLFormula_newparam_type;
end;

function TXMLFormula_newparam_typeList.Insert(const Index: Integer): IXMLFormula_newparam_type;
begin
  Result := AddItem(Index) as IXMLFormula_newparam_type;
end;

function TXMLFormula_newparam_typeList.Get_Item(Index: Integer): IXMLFormula_newparam_type;
begin
  Result := Nodes[Index] as IXMLFormula_newparam_type;
end;

{ TXMLCommon_float_or_param_type }

procedure TXMLCommon_float_or_param_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('param', TXMLCommon_param_type);
  inherited;
end;

function TXMLCommon_float_or_param_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLCommon_float_or_param_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLCommon_float_or_param_type.Get_Param: IXMLCommon_param_type;
begin
  Result := Nodes['param'] as IXMLCommon_param_type;
end;

{ TXMLCommon_param_type }

{ TXMLFormula_technique_type }

procedure TXMLFormula_technique_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('math', TXMLMathtype);
  inherited;
end;

function TXMLFormula_technique_type.Get_Math: IXMLMathtype;
begin
  Result := Nodes['math'] as IXMLMathtype;
end;

{ TXMLMathtype }

procedure TXMLMathtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMathtype.Get_Baseline: UnicodeString;
begin
  Result := Params['baseline'];
end;

procedure TXMLMathtype.Set_Baseline(Value: UnicodeString);
begin
  Params['baseline'] := Value;
end;

function TXMLMathtype.Get_Overflow: UnicodeString;
begin
  Result := Params['overflow'];
end;

procedure TXMLMathtype.Set_Overflow(Value: UnicodeString);
begin
  Params['overflow'] := Value;
end;

function TXMLMathtype.Get_Altimg: UnicodeString;
begin
  Result := Params['altimg'];
end;

procedure TXMLMathtype.Set_Altimg(Value: UnicodeString);
begin
  Params['altimg'] := Value;
end;

function TXMLMathtype.Get_Alttext: UnicodeString;
begin
  Result := Params['alttext'];
end;

procedure TXMLMathtype.Set_Alttext(Value: UnicodeString);
begin
  Params['alttext'] := Value;
end;

function TXMLMathtype.Get_Type_: UnicodeString;
begin
  Result := Params['type'];
end;

procedure TXMLMathtype.Set_Type_(Value: UnicodeString);
begin
  Params['type'] := Value;
end;

function TXMLMathtype.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLMathtype.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLMathtype.Get_Height: UnicodeString;
begin
  Result := Params['height'];
end;

procedure TXMLMathtype.Set_Height(Value: UnicodeString);
begin
  Params['height'] := Value;
end;

function TXMLMathtype.Get_Width: UnicodeString;
begin
  Result := Params['width'];
end;

procedure TXMLMathtype.Set_Width(Value: UnicodeString);
begin
  Params['width'] := Value;
end;

function TXMLMathtype.Get_Macros: UnicodeString;
begin
  Result := Params['macros'];
end;

procedure TXMLMathtype.Set_Macros(Value: UnicodeString);
begin
  Params['macros'] := Value;
end;

function TXMLMathtype.Get_Display: UnicodeString;
begin
  Result := Params['display'];
end;

procedure TXMLMathtype.Set_Display(Value: UnicodeString);
begin
  Params['display'] := Value;
end;

function TXMLMathtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMathtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMathtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMathtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMathtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMathtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMathtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMathtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMathtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMathtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMathtype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMathtype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMathtype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMathtype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMathtype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMathtype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMathtype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMathtype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMathtype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMathtype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMathtype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMathtype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMathtype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMathtype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMathtype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMathtype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMathtype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMathtype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMathtype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMathtype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMathtype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMathtype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMathtype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMathtype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMathtype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMathtype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMathtype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMathtype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMathtype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMathtype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMathtype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMathtype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMathtype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMathtype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMathtype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMathtype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMathtype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMathtype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMathtype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMathtype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMathtype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMathtype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMathtype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMathtype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMathtype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMathtype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMathtype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMathtype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMathtype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMathtype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMathtype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMathtype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMathtype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMathtype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMathtype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMathtype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMathtype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMathtype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMathtype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMathtype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMathtype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMathtype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMathtype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMathtype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMathtype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMathtype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMathtype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMathtype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMathtype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMathtype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMathtype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMathtype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMathtype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMathtype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMathtype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMathtype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMathtype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMathtype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMathtype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMathtype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMathtype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMathtype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMathtype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMathtype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMathtype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMathtype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMathtype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMathtype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMathtype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMathtype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMathtype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMathtype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMathtype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMathtype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMathtype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMathtype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMathtype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMathtype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMathtype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMathtype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMathtype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMathtype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMathtype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMathtype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMitype }

procedure TXMLMitype.DoRegisterChildClasses;
begin
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mglyph', TXMLMglyphtype);
  inherited;
end;

function TXMLMitype.Get_Mathvariant: UnicodeString;
begin
  Result := Params['mathvariant'];
end;

procedure TXMLMitype.Set_Mathvariant(Value: UnicodeString);
begin
  Params['mathvariant'] := Value;
end;

function TXMLMitype.Get_Mathsize: UnicodeString;
begin
  Result := Params['mathsize'];
end;

procedure TXMLMitype.Set_Mathsize(Value: UnicodeString);
begin
  Params['mathsize'] := Value;
end;

function TXMLMitype.Get_Mathcolor: UnicodeString;
begin
  Result := Params['mathcolor'];
end;

procedure TXMLMitype.Set_Mathcolor(Value: UnicodeString);
begin
  Params['mathcolor'] := Value;
end;

function TXMLMitype.Get_Mathbackground: UnicodeString;
begin
  Result := Params['mathbackground'];
end;

procedure TXMLMitype.Set_Mathbackground(Value: UnicodeString);
begin
  Params['mathbackground'] := Value;
end;

function TXMLMitype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMitype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMitype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMitype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMitype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMitype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMitype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMitype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMitype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMitype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMitype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMitype.Get_Mglyph: IXMLMglyphtype;
begin
  Result := Nodes['mglyph'] as IXMLMglyphtype;
end;

{ TXMLMalignmarktype }

function TXMLMalignmarktype.Get_Edge: UnicodeString;
begin
  Result := Params['edge'];
end;

procedure TXMLMalignmarktype.Set_Edge(Value: UnicodeString);
begin
  Params['edge'] := Value;
end;

function TXMLMalignmarktype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMalignmarktype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMalignmarktype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMalignmarktype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMalignmarktype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMalignmarktype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMalignmarktype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMalignmarktype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMalignmarktype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMalignmarktype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLMglyphtype }

function TXMLMglyphtype.Get_Alt: UnicodeString;
begin
  Result := Params['alt'];
end;

procedure TXMLMglyphtype.Set_Alt(Value: UnicodeString);
begin
  Params['alt'] := Value;
end;

function TXMLMglyphtype.Get_Fontfamily: UnicodeString;
begin
  Result := Params['fontfamily'];
end;

procedure TXMLMglyphtype.Set_Fontfamily(Value: UnicodeString);
begin
  Params['fontfamily'] := Value;
end;

function TXMLMglyphtype.Get_Index: LongWord;
begin
  Result := Params['index'];
end;

procedure TXMLMglyphtype.Set_Index(Value: LongWord);
begin
  Params['index'] := Value;
end;

{ TXMLMotype }

procedure TXMLMotype.DoRegisterChildClasses;
begin
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mglyph', TXMLMglyphtype);
  inherited;
end;

function TXMLMotype.Get_Form: UnicodeString;
begin
  Result := Params['form'];
end;

procedure TXMLMotype.Set_Form(Value: UnicodeString);
begin
  Params['form'] := Value;
end;

function TXMLMotype.Get_Lspace: UnicodeString;
begin
  Result := Params['lspace'];
end;

procedure TXMLMotype.Set_Lspace(Value: UnicodeString);
begin
  Params['lspace'] := Value;
end;

function TXMLMotype.Get_Rspace: UnicodeString;
begin
  Result := Params['rspace'];
end;

procedure TXMLMotype.Set_Rspace(Value: UnicodeString);
begin
  Params['rspace'] := Value;
end;

function TXMLMotype.Get_Fence: Boolean;
begin
  Result := Params['fence'];
end;

procedure TXMLMotype.Set_Fence(Value: Boolean);
begin
  Params['fence'] := Value;
end;

function TXMLMotype.Get_Separator: Boolean;
begin
  Result := Params['separator'];
end;

procedure TXMLMotype.Set_Separator(Value: Boolean);
begin
  Params['separator'] := Value;
end;

function TXMLMotype.Get_Stretchy: Boolean;
begin
  Result := Params['stretchy'];
end;

procedure TXMLMotype.Set_Stretchy(Value: Boolean);
begin
  Params['stretchy'] := Value;
end;

function TXMLMotype.Get_Symmetric: Boolean;
begin
  Result := Params['symmetric'];
end;

procedure TXMLMotype.Set_Symmetric(Value: Boolean);
begin
  Params['symmetric'] := Value;
end;

function TXMLMotype.Get_Movablelimits: Boolean;
begin
  Result := Params['movablelimits'];
end;

procedure TXMLMotype.Set_Movablelimits(Value: Boolean);
begin
  Params['movablelimits'] := Value;
end;

function TXMLMotype.Get_Accent: Boolean;
begin
  Result := Params['accent'];
end;

procedure TXMLMotype.Set_Accent(Value: Boolean);
begin
  Params['accent'] := Value;
end;

function TXMLMotype.Get_Largeop: Boolean;
begin
  Result := Params['largeop'];
end;

procedure TXMLMotype.Set_Largeop(Value: Boolean);
begin
  Params['largeop'] := Value;
end;

function TXMLMotype.Get_Minsize: UnicodeString;
begin
  Result := Params['minsize'];
end;

procedure TXMLMotype.Set_Minsize(Value: UnicodeString);
begin
  Params['minsize'] := Value;
end;

function TXMLMotype.Get_Maxsize: UnicodeString;
begin
  Result := Params['maxsize'];
end;

procedure TXMLMotype.Set_Maxsize(Value: UnicodeString);
begin
  Params['maxsize'] := Value;
end;

function TXMLMotype.Get_Mathvariant: UnicodeString;
begin
  Result := Params['mathvariant'];
end;

procedure TXMLMotype.Set_Mathvariant(Value: UnicodeString);
begin
  Params['mathvariant'] := Value;
end;

function TXMLMotype.Get_Mathsize: UnicodeString;
begin
  Result := Params['mathsize'];
end;

procedure TXMLMotype.Set_Mathsize(Value: UnicodeString);
begin
  Params['mathsize'] := Value;
end;

function TXMLMotype.Get_Mathcolor: UnicodeString;
begin
  Result := Params['mathcolor'];
end;

procedure TXMLMotype.Set_Mathcolor(Value: UnicodeString);
begin
  Params['mathcolor'] := Value;
end;

function TXMLMotype.Get_Mathbackground: UnicodeString;
begin
  Result := Params['mathbackground'];
end;

procedure TXMLMotype.Set_Mathbackground(Value: UnicodeString);
begin
  Params['mathbackground'] := Value;
end;

function TXMLMotype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMotype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMotype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMotype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMotype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMotype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMotype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMotype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMotype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMotype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMotype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMotype.Get_Mglyph: IXMLMglyphtype;
begin
  Result := Nodes['mglyph'] as IXMLMglyphtype;
end;

{ TXMLMntype }

procedure TXMLMntype.DoRegisterChildClasses;
begin
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mglyph', TXMLMglyphtype);
  inherited;
end;

function TXMLMntype.Get_Mathvariant: UnicodeString;
begin
  Result := Params['mathvariant'];
end;

procedure TXMLMntype.Set_Mathvariant(Value: UnicodeString);
begin
  Params['mathvariant'] := Value;
end;

function TXMLMntype.Get_Mathsize: UnicodeString;
begin
  Result := Params['mathsize'];
end;

procedure TXMLMntype.Set_Mathsize(Value: UnicodeString);
begin
  Params['mathsize'] := Value;
end;

function TXMLMntype.Get_Mathcolor: UnicodeString;
begin
  Result := Params['mathcolor'];
end;

procedure TXMLMntype.Set_Mathcolor(Value: UnicodeString);
begin
  Params['mathcolor'] := Value;
end;

function TXMLMntype.Get_Mathbackground: UnicodeString;
begin
  Result := Params['mathbackground'];
end;

procedure TXMLMntype.Set_Mathbackground(Value: UnicodeString);
begin
  Params['mathbackground'] := Value;
end;

function TXMLMntype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMntype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMntype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMntype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMntype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMntype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMntype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMntype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMntype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMntype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMntype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMntype.Get_Mglyph: IXMLMglyphtype;
begin
  Result := Nodes['mglyph'] as IXMLMglyphtype;
end;

{ TXMLMtexttype }

procedure TXMLMtexttype.DoRegisterChildClasses;
begin
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mglyph', TXMLMglyphtype);
  inherited;
end;

function TXMLMtexttype.Get_Mathvariant: UnicodeString;
begin
  Result := Params['mathvariant'];
end;

procedure TXMLMtexttype.Set_Mathvariant(Value: UnicodeString);
begin
  Params['mathvariant'] := Value;
end;

function TXMLMtexttype.Get_Mathsize: UnicodeString;
begin
  Result := Params['mathsize'];
end;

procedure TXMLMtexttype.Set_Mathsize(Value: UnicodeString);
begin
  Params['mathsize'] := Value;
end;

function TXMLMtexttype.Get_Mathcolor: UnicodeString;
begin
  Result := Params['mathcolor'];
end;

procedure TXMLMtexttype.Set_Mathcolor(Value: UnicodeString);
begin
  Params['mathcolor'] := Value;
end;

function TXMLMtexttype.Get_Mathbackground: UnicodeString;
begin
  Result := Params['mathbackground'];
end;

procedure TXMLMtexttype.Set_Mathbackground(Value: UnicodeString);
begin
  Params['mathbackground'] := Value;
end;

function TXMLMtexttype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMtexttype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMtexttype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMtexttype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMtexttype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMtexttype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMtexttype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMtexttype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMtexttype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMtexttype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMtexttype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMtexttype.Get_Mglyph: IXMLMglyphtype;
begin
  Result := Nodes['mglyph'] as IXMLMglyphtype;
end;

{ TXMLMstype }

procedure TXMLMstype.DoRegisterChildClasses;
begin
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mglyph', TXMLMglyphtype);
  inherited;
end;

function TXMLMstype.Get_Lquote: UnicodeString;
begin
  Result := Params['lquote'];
end;

procedure TXMLMstype.Set_Lquote(Value: UnicodeString);
begin
  Params['lquote'] := Value;
end;

function TXMLMstype.Get_Rquote: UnicodeString;
begin
  Result := Params['rquote'];
end;

procedure TXMLMstype.Set_Rquote(Value: UnicodeString);
begin
  Params['rquote'] := Value;
end;

function TXMLMstype.Get_Mathvariant: UnicodeString;
begin
  Result := Params['mathvariant'];
end;

procedure TXMLMstype.Set_Mathvariant(Value: UnicodeString);
begin
  Params['mathvariant'] := Value;
end;

function TXMLMstype.Get_Mathsize: UnicodeString;
begin
  Result := Params['mathsize'];
end;

procedure TXMLMstype.Set_Mathsize(Value: UnicodeString);
begin
  Params['mathsize'] := Value;
end;

function TXMLMstype.Get_Mathcolor: UnicodeString;
begin
  Result := Params['mathcolor'];
end;

procedure TXMLMstype.Set_Mathcolor(Value: UnicodeString);
begin
  Params['mathcolor'] := Value;
end;

function TXMLMstype.Get_Mathbackground: UnicodeString;
begin
  Result := Params['mathbackground'];
end;

procedure TXMLMstype.Set_Mathbackground(Value: UnicodeString);
begin
  Params['mathbackground'] := Value;
end;

function TXMLMstype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMstype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMstype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMstype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMstype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMstype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMstype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMstype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMstype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMstype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMstype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMstype.Get_Mglyph: IXMLMglyphtype;
begin
  Result := Nodes['mglyph'] as IXMLMglyphtype;
end;

{ TXMLMrowtype }

procedure TXMLMrowtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMrowtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMrowtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMrowtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMrowtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMrowtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMrowtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMrowtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMrowtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMrowtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMrowtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMrowtype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMrowtype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMrowtype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMrowtype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMrowtype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMrowtype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMrowtype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMrowtype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMrowtype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMrowtype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMrowtype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMrowtype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMrowtype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMrowtype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMrowtype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMrowtype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMrowtype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMrowtype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMrowtype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMrowtype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMrowtype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMrowtype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMrowtype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMrowtype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMrowtype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMrowtype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMrowtype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMrowtype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMrowtype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMrowtype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMrowtype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMrowtype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMrowtype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMrowtype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMrowtype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMrowtype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMrowtype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMrowtype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMrowtype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMrowtype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMrowtype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMrowtype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMrowtype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMrowtype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMrowtype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMrowtype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMrowtype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMrowtype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMrowtype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMrowtype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMrowtype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMrowtype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMrowtype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMrowtype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMrowtype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMrowtype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMrowtype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMrowtype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMrowtype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMrowtype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMrowtype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMrowtype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMrowtype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMrowtype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMrowtype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMrowtype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMrowtype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMrowtype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMrowtype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMrowtype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMrowtype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMrowtype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMrowtype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMrowtype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMrowtype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMrowtype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMrowtype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMrowtype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMrowtype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMrowtype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMrowtype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMrowtype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMrowtype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMrowtype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMrowtype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMrowtype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMrowtype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMrowtype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMrowtype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMrowtype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMrowtype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMrowtype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMrowtype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMrowtype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMrowtype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMrowtype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMrowtype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMrowtype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMrowtype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMrowtype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMrowtype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMrowtype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMrowtype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMrowtype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMfractype }

procedure TXMLMfractype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMfractype.Get_Bevelled: Boolean;
begin
  Result := Params['bevelled'];
end;

procedure TXMLMfractype.Set_Bevelled(Value: Boolean);
begin
  Params['bevelled'] := Value;
end;

function TXMLMfractype.Get_Denomalign: UnicodeString;
begin
  Result := Params['denomalign'];
end;

procedure TXMLMfractype.Set_Denomalign(Value: UnicodeString);
begin
  Params['denomalign'] := Value;
end;

function TXMLMfractype.Get_Numalign: UnicodeString;
begin
  Result := Params['numalign'];
end;

procedure TXMLMfractype.Set_Numalign(Value: UnicodeString);
begin
  Params['numalign'] := Value;
end;

function TXMLMfractype.Get_Linethickness: UnicodeString;
begin
  Result := Params['linethickness'];
end;

procedure TXMLMfractype.Set_Linethickness(Value: UnicodeString);
begin
  Params['linethickness'] := Value;
end;

function TXMLMfractype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMfractype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMfractype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMfractype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMfractype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMfractype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMfractype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMfractype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMfractype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMfractype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMfractype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMfractype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMfractype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMfractype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMfractype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMfractype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMfractype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMfractype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMfractype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMfractype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMfractype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMfractype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMfractype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMfractype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMfractype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMfractype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMfractype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMfractype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMfractype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMfractype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMfractype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMfractype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMfractype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMfractype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMfractype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMfractype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMfractype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMfractype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMfractype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMfractype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMfractype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMfractype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMfractype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMfractype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMfractype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMfractype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMfractype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMfractype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMfractype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMfractype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMfractype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMfractype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMfractype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMfractype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMfractype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMfractype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMfractype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMfractype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMfractype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMfractype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMfractype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMfractype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMfractype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMfractype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMfractype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMfractype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMfractype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMfractype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMfractype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMfractype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMfractype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMfractype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMfractype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMfractype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMfractype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMfractype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMfractype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMfractype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMfractype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMfractype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMfractype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMfractype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMfractype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMfractype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMfractype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMfractype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMfractype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMfractype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMfractype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMfractype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMfractype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMfractype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMfractype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMfractype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMfractype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMfractype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMfractype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMfractype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMfractype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMfractype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMfractype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMfractype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMfractype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMfractype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMfractype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMfractype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMfractype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMfractype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMfractype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMfractype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMfractype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMfractype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMfractype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMfractype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMsqrttype }

procedure TXMLMsqrttype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMsqrttype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMsqrttype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMsqrttype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMsqrttype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMsqrttype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMsqrttype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMsqrttype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMsqrttype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMsqrttype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMsqrttype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMsqrttype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMsqrttype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMsqrttype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMsqrttype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMsqrttype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMsqrttype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMsqrttype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMsqrttype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMsqrttype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMsqrttype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMsqrttype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMsqrttype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMsqrttype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMsqrttype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMsqrttype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMsqrttype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMsqrttype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMsqrttype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMsqrttype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMsqrttype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMsqrttype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMsqrttype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMsqrttype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMsqrttype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMsqrttype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMsqrttype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMsqrttype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMsqrttype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMsqrttype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMsqrttype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMsqrttype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMsqrttype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMsqrttype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMsqrttype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMsqrttype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMsqrttype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMsqrttype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMsqrttype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMsqrttype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMsqrttype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMsqrttype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMsqrttype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMsqrttype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMsqrttype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMsqrttype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMsqrttype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMsqrttype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMsqrttype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMsqrttype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMsqrttype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMsqrttype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMsqrttype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMsqrttype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMsqrttype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMsqrttype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMsqrttype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMsqrttype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMsqrttype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMsqrttype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMsqrttype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMsqrttype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMsqrttype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMsqrttype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMsqrttype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMsqrttype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMsqrttype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMsqrttype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMsqrttype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsqrttype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMsqrttype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMsqrttype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMsqrttype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMsqrttype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMsqrttype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMsqrttype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMsqrttype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMsqrttype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMsqrttype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMsqrttype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMsqrttype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMsqrttype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMsqrttype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMsqrttype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMsqrttype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMsqrttype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMsqrttype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMsqrttype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMsqrttype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMsqrttype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMsqrttype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMsqrttype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMsqrttype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMsqrttype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMsqrttype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMsqrttype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMsqrttype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMsqrttype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMsqrttype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMsqrttype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMsqrttype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMsqrttype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMsqrttype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMsqrttype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMsqrttype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMroottype }

procedure TXMLMroottype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMroottype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMroottype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMroottype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMroottype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMroottype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMroottype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMroottype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMroottype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMroottype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMroottype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMroottype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMroottype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMroottype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMroottype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMroottype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMroottype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMroottype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMroottype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMroottype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMroottype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMroottype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMroottype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMroottype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMroottype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMroottype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMroottype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMroottype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMroottype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMroottype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMroottype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMroottype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMroottype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMroottype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMroottype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMroottype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMroottype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMroottype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMroottype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMroottype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMroottype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMroottype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMroottype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMroottype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMroottype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMroottype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMroottype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMroottype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMroottype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMroottype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMroottype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMroottype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMroottype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMroottype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMroottype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMroottype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMroottype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMroottype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMroottype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMroottype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMroottype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMroottype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMroottype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMroottype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMroottype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMroottype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMroottype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMroottype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMroottype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMroottype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMroottype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMroottype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMroottype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMroottype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMroottype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMroottype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMroottype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMroottype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMroottype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMroottype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMroottype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMroottype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMroottype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMroottype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMroottype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMroottype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMroottype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMroottype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMroottype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMroottype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMroottype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMroottype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMroottype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMroottype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMroottype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMroottype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMroottype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMroottype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMroottype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMroottype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMroottype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMroottype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMroottype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMroottype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMroottype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMroottype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMroottype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMroottype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMroottype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMroottype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMroottype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMroottype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMroottype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMroottype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMroottype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMpaddedtype }

procedure TXMLMpaddedtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMpaddedtype.Get_Width: UnicodeString;
begin
  Result := Params['width'];
end;

procedure TXMLMpaddedtype.Set_Width(Value: UnicodeString);
begin
  Params['width'] := Value;
end;

function TXMLMpaddedtype.Get_Lspace: UnicodeString;
begin
  Result := Params['lspace'];
end;

procedure TXMLMpaddedtype.Set_Lspace(Value: UnicodeString);
begin
  Params['lspace'] := Value;
end;

function TXMLMpaddedtype.Get_Height: UnicodeString;
begin
  Result := Params['height'];
end;

procedure TXMLMpaddedtype.Set_Height(Value: UnicodeString);
begin
  Params['height'] := Value;
end;

function TXMLMpaddedtype.Get_Depth: UnicodeString;
begin
  Result := Params['depth'];
end;

procedure TXMLMpaddedtype.Set_Depth(Value: UnicodeString);
begin
  Params['depth'] := Value;
end;

function TXMLMpaddedtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMpaddedtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMpaddedtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMpaddedtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMpaddedtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMpaddedtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMpaddedtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMpaddedtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMpaddedtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMpaddedtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMpaddedtype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMpaddedtype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMpaddedtype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMpaddedtype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMpaddedtype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMpaddedtype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMpaddedtype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMpaddedtype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMpaddedtype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMpaddedtype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMpaddedtype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMpaddedtype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMpaddedtype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMpaddedtype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMpaddedtype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMpaddedtype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMpaddedtype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMpaddedtype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMpaddedtype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMpaddedtype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMpaddedtype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMpaddedtype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMpaddedtype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMpaddedtype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMpaddedtype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMpaddedtype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMpaddedtype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMpaddedtype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMpaddedtype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMpaddedtype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMpaddedtype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMpaddedtype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMpaddedtype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMpaddedtype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMpaddedtype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMpaddedtype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMpaddedtype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMpaddedtype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMpaddedtype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMpaddedtype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMpaddedtype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMpaddedtype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMpaddedtype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMpaddedtype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMpaddedtype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMpaddedtype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMpaddedtype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMpaddedtype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMpaddedtype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMpaddedtype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMpaddedtype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMpaddedtype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMpaddedtype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMpaddedtype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMpaddedtype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMpaddedtype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMpaddedtype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMpaddedtype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMpaddedtype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMpaddedtype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMpaddedtype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMpaddedtype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMpaddedtype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMpaddedtype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMpaddedtype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMpaddedtype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMpaddedtype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMpaddedtype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMpaddedtype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMpaddedtype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMpaddedtype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMpaddedtype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMpaddedtype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMpaddedtype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMpaddedtype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMpaddedtype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMpaddedtype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMpaddedtype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMpaddedtype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMpaddedtype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMpaddedtype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMpaddedtype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMpaddedtype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMpaddedtype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMpaddedtype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMpaddedtype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMpaddedtype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMpaddedtype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMpaddedtype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMpaddedtype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMpaddedtype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMpaddedtype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMpaddedtype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMpaddedtype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMpaddedtype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMpaddedtype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMpaddedtype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMpaddedtype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMpaddedtype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMpaddedtype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMpaddedtype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMpaddedtype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMpaddedtype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMpaddedtype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMphantomtype }

procedure TXMLMphantomtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMphantomtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMphantomtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMphantomtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMphantomtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMphantomtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMphantomtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMphantomtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMphantomtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMphantomtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMphantomtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMphantomtype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMphantomtype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMphantomtype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMphantomtype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMphantomtype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMphantomtype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMphantomtype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMphantomtype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMphantomtype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMphantomtype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMphantomtype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMphantomtype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMphantomtype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMphantomtype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMphantomtype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMphantomtype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMphantomtype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMphantomtype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMphantomtype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMphantomtype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMphantomtype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMphantomtype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMphantomtype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMphantomtype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMphantomtype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMphantomtype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMphantomtype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMphantomtype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMphantomtype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMphantomtype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMphantomtype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMphantomtype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMphantomtype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMphantomtype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMphantomtype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMphantomtype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMphantomtype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMphantomtype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMphantomtype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMphantomtype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMphantomtype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMphantomtype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMphantomtype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMphantomtype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMphantomtype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMphantomtype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMphantomtype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMphantomtype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMphantomtype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMphantomtype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMphantomtype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMphantomtype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMphantomtype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMphantomtype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMphantomtype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMphantomtype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMphantomtype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMphantomtype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMphantomtype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMphantomtype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMphantomtype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMphantomtype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMphantomtype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMphantomtype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMphantomtype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMphantomtype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMphantomtype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMphantomtype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMphantomtype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMphantomtype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMphantomtype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMphantomtype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMphantomtype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMphantomtype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMphantomtype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMphantomtype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMphantomtype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMphantomtype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMphantomtype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMphantomtype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMphantomtype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMphantomtype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMphantomtype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMphantomtype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMphantomtype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMphantomtype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMphantomtype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMphantomtype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMphantomtype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMphantomtype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMphantomtype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMphantomtype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMphantomtype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMphantomtype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMphantomtype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMphantomtype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMphantomtype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMphantomtype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMphantomtype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMphantomtype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMphantomtype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMphantomtype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMphantomtype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMphantomtype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMfencedtype }

procedure TXMLMfencedtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMfencedtype.Get_Open: UnicodeString;
begin
  Result := Params['open'];
end;

procedure TXMLMfencedtype.Set_Open(Value: UnicodeString);
begin
  Params['open'] := Value;
end;

function TXMLMfencedtype.Get_Close: UnicodeString;
begin
  Result := Params['close'];
end;

procedure TXMLMfencedtype.Set_Close(Value: UnicodeString);
begin
  Params['close'] := Value;
end;

function TXMLMfencedtype.Get_Separators: UnicodeString;
begin
  Result := Params['separators'];
end;

procedure TXMLMfencedtype.Set_Separators(Value: UnicodeString);
begin
  Params['separators'] := Value;
end;

function TXMLMfencedtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMfencedtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMfencedtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMfencedtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMfencedtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMfencedtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMfencedtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMfencedtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMfencedtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMfencedtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMfencedtype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMfencedtype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMfencedtype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMfencedtype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMfencedtype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMfencedtype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMfencedtype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMfencedtype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMfencedtype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMfencedtype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMfencedtype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMfencedtype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMfencedtype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMfencedtype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMfencedtype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMfencedtype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMfencedtype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMfencedtype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMfencedtype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMfencedtype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMfencedtype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMfencedtype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMfencedtype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMfencedtype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMfencedtype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMfencedtype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMfencedtype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMfencedtype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMfencedtype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMfencedtype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMfencedtype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMfencedtype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMfencedtype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMfencedtype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMfencedtype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMfencedtype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMfencedtype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMfencedtype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMfencedtype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMfencedtype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMfencedtype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMfencedtype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMfencedtype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMfencedtype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMfencedtype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMfencedtype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMfencedtype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMfencedtype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMfencedtype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMfencedtype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMfencedtype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMfencedtype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMfencedtype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMfencedtype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMfencedtype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMfencedtype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMfencedtype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMfencedtype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMfencedtype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMfencedtype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMfencedtype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMfencedtype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMfencedtype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMfencedtype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMfencedtype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMfencedtype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMfencedtype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMfencedtype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMfencedtype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMfencedtype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMfencedtype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMfencedtype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMfencedtype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMfencedtype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMfencedtype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMfencedtype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMfencedtype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMfencedtype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMfencedtype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMfencedtype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMfencedtype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMfencedtype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMfencedtype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMfencedtype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMfencedtype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMfencedtype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMfencedtype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMfencedtype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMfencedtype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMfencedtype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMfencedtype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMfencedtype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMfencedtype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMfencedtype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMfencedtype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMfencedtype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMfencedtype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMfencedtype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMfencedtype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMfencedtype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMfencedtype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMfencedtype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMfencedtype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMfencedtype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMenclosetype }

procedure TXMLMenclosetype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMenclosetype.Get_Notation: UnicodeString;
begin
  Result := Params['notation'];
end;

procedure TXMLMenclosetype.Set_Notation(Value: UnicodeString);
begin
  Params['notation'] := Value;
end;

function TXMLMenclosetype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMenclosetype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMenclosetype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMenclosetype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMenclosetype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMenclosetype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMenclosetype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMenclosetype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMenclosetype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMenclosetype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMenclosetype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMenclosetype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMenclosetype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMenclosetype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMenclosetype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMenclosetype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMenclosetype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMenclosetype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMenclosetype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMenclosetype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMenclosetype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMenclosetype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMenclosetype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMenclosetype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMenclosetype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMenclosetype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMenclosetype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMenclosetype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMenclosetype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMenclosetype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMenclosetype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMenclosetype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMenclosetype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMenclosetype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMenclosetype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMenclosetype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMenclosetype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMenclosetype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMenclosetype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMenclosetype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMenclosetype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMenclosetype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMenclosetype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMenclosetype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMenclosetype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMenclosetype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMenclosetype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMenclosetype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMenclosetype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMenclosetype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMenclosetype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMenclosetype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMenclosetype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMenclosetype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMenclosetype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMenclosetype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMenclosetype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMenclosetype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMenclosetype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMenclosetype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMenclosetype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMenclosetype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMenclosetype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMenclosetype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMenclosetype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMenclosetype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMenclosetype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMenclosetype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMenclosetype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMenclosetype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMenclosetype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMenclosetype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMenclosetype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMenclosetype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMenclosetype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMenclosetype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMenclosetype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMenclosetype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMenclosetype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMenclosetype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMenclosetype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMenclosetype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMenclosetype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMenclosetype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMenclosetype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMenclosetype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMenclosetype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMenclosetype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMenclosetype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMenclosetype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMenclosetype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMenclosetype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMenclosetype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMenclosetype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMenclosetype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMenclosetype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMenclosetype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMenclosetype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMenclosetype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMenclosetype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMenclosetype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMenclosetype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMenclosetype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMenclosetype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMenclosetype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMenclosetype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMenclosetype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMenclosetype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMenclosetype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMenclosetype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMenclosetype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMenclosetype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMenclosetype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMenclosetype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMsubtype }

procedure TXMLMsubtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMsubtype.Get_Subscriptshift: UnicodeString;
begin
  Result := Params['subscriptshift'];
end;

procedure TXMLMsubtype.Set_Subscriptshift(Value: UnicodeString);
begin
  Params['subscriptshift'] := Value;
end;

function TXMLMsubtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMsubtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMsubtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMsubtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMsubtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMsubtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMsubtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMsubtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMsubtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMsubtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMsubtype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMsubtype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMsubtype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMsubtype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMsubtype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMsubtype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMsubtype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMsubtype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMsubtype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMsubtype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMsubtype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMsubtype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMsubtype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMsubtype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMsubtype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMsubtype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMsubtype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMsubtype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMsubtype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMsubtype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMsubtype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMsubtype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMsubtype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMsubtype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMsubtype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMsubtype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMsubtype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMsubtype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMsubtype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMsubtype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMsubtype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMsubtype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMsubtype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMsubtype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMsubtype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMsubtype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMsubtype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMsubtype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMsubtype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMsubtype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMsubtype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMsubtype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMsubtype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMsubtype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMsubtype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMsubtype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMsubtype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMsubtype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMsubtype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMsubtype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMsubtype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMsubtype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMsubtype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMsubtype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMsubtype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMsubtype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMsubtype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMsubtype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMsubtype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMsubtype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMsubtype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMsubtype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMsubtype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMsubtype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMsubtype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMsubtype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMsubtype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMsubtype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubtype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMsubtype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMsubtype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMsubtype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMsubtype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMsubtype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMsubtype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMsubtype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMsubtype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMsubtype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMsubtype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMsubtype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMsubtype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMsubtype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMsubtype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMsubtype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMsubtype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMsubtype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMsubtype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMsubtype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMsubtype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMsubtype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMsubtype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMsubtype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMsubtype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMsubtype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMsubtype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMsubtype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMsubtype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMsubtype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMsubtype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMsubtype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMsubtype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMsubtype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMsubtype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMsubtype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMsuptype }

procedure TXMLMsuptype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMsuptype.Get_Superscriptshift: UnicodeString;
begin
  Result := Params['superscriptshift'];
end;

procedure TXMLMsuptype.Set_Superscriptshift(Value: UnicodeString);
begin
  Params['superscriptshift'] := Value;
end;

function TXMLMsuptype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMsuptype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMsuptype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMsuptype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMsuptype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMsuptype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMsuptype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMsuptype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMsuptype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMsuptype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMsuptype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMsuptype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMsuptype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMsuptype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMsuptype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMsuptype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMsuptype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMsuptype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMsuptype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMsuptype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMsuptype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMsuptype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMsuptype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMsuptype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMsuptype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMsuptype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMsuptype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMsuptype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMsuptype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMsuptype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMsuptype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMsuptype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMsuptype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMsuptype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMsuptype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMsuptype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMsuptype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMsuptype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMsuptype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMsuptype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMsuptype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMsuptype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMsuptype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMsuptype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMsuptype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMsuptype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMsuptype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMsuptype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMsuptype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMsuptype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMsuptype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMsuptype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMsuptype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMsuptype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMsuptype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMsuptype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMsuptype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMsuptype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMsuptype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMsuptype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMsuptype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMsuptype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMsuptype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMsuptype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMsuptype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMsuptype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMsuptype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMsuptype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMsuptype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMsuptype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMsuptype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMsuptype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMsuptype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMsuptype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMsuptype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMsuptype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMsuptype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMsuptype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsuptype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMsuptype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMsuptype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMsuptype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMsuptype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMsuptype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMsuptype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMsuptype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMsuptype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMsuptype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMsuptype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMsuptype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMsuptype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMsuptype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMsuptype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMsuptype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMsuptype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMsuptype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMsuptype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMsuptype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMsuptype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMsuptype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMsuptype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMsuptype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMsuptype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMsuptype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMsuptype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMsuptype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMsuptype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMsuptype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMsuptype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMsuptype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMsuptype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMsuptype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMsuptype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMsuptype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMsubsuptype }

procedure TXMLMsubsuptype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMsubsuptype.Get_Subscriptshift: UnicodeString;
begin
  Result := Params['subscriptshift'];
end;

procedure TXMLMsubsuptype.Set_Subscriptshift(Value: UnicodeString);
begin
  Params['subscriptshift'] := Value;
end;

function TXMLMsubsuptype.Get_Superscriptshift: UnicodeString;
begin
  Result := Params['superscriptshift'];
end;

procedure TXMLMsubsuptype.Set_Superscriptshift(Value: UnicodeString);
begin
  Params['superscriptshift'] := Value;
end;

function TXMLMsubsuptype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMsubsuptype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMsubsuptype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMsubsuptype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMsubsuptype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMsubsuptype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMsubsuptype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMsubsuptype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMsubsuptype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMsubsuptype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMsubsuptype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMsubsuptype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMsubsuptype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMsubsuptype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMsubsuptype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMsubsuptype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMsubsuptype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMsubsuptype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMsubsuptype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMsubsuptype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMsubsuptype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMsubsuptype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMsubsuptype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMsubsuptype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMsubsuptype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMsubsuptype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMsubsuptype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMsubsuptype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMsubsuptype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMsubsuptype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMsubsuptype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMsubsuptype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMsubsuptype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMsubsuptype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMsubsuptype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMsubsuptype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMsubsuptype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMsubsuptype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMsubsuptype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMsubsuptype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMsubsuptype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMsubsuptype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMsubsuptype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMsubsuptype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMsubsuptype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMsubsuptype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMsubsuptype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMsubsuptype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMsubsuptype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMsubsuptype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMsubsuptype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMsubsuptype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMsubsuptype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMsubsuptype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMsubsuptype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMsubsuptype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMsubsuptype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMsubsuptype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMsubsuptype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMsubsuptype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMsubsuptype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMsubsuptype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMsubsuptype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMsubsuptype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMsubsuptype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMsubsuptype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMsubsuptype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMsubsuptype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMsubsuptype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMsubsuptype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMsubsuptype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMsubsuptype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMsubsuptype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMsubsuptype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMsubsuptype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMsubsuptype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMsubsuptype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMsubsuptype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMsubsuptype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMsubsuptype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMsubsuptype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMsubsuptype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMsubsuptype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMsubsuptype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMsubsuptype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMsubsuptype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMsubsuptype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMsubsuptype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMsubsuptype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMsubsuptype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMsubsuptype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMsubsuptype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMsubsuptype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMsubsuptype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMsubsuptype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMsubsuptype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMsubsuptype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMsubsuptype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMsubsuptype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMsubsuptype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMsubsuptype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMsubsuptype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMsubsuptype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMsubsuptype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMsubsuptype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMsubsuptype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMsubsuptype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMsubsuptype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMsubsuptype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMsubsuptype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMsubsuptype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMsubsuptype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMsubsuptype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMsubsuptype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMundertype }

procedure TXMLMundertype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMundertype.Get_Accentunder: Boolean;
begin
  Result := Params['accentunder'];
end;

procedure TXMLMundertype.Set_Accentunder(Value: Boolean);
begin
  Params['accentunder'] := Value;
end;

function TXMLMundertype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMundertype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMundertype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMundertype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMundertype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMundertype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMundertype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMundertype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMundertype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMundertype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMundertype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMundertype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMundertype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMundertype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMundertype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMundertype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMundertype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMundertype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMundertype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMundertype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMundertype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMundertype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMundertype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMundertype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMundertype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMundertype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMundertype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMundertype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMundertype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMundertype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMundertype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMundertype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMundertype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMundertype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMundertype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMundertype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMundertype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMundertype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMundertype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMundertype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMundertype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMundertype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMundertype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMundertype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMundertype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMundertype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMundertype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMundertype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMundertype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMundertype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMundertype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMundertype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMundertype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMundertype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMundertype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMundertype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMundertype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMundertype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMundertype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMundertype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMundertype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMundertype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMundertype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMundertype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMundertype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMundertype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMundertype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMundertype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMundertype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMundertype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMundertype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMundertype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMundertype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMundertype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMundertype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMundertype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMundertype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMundertype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMundertype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMundertype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMundertype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMundertype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMundertype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMundertype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMundertype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMundertype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMundertype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMundertype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMundertype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMundertype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMundertype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMundertype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMundertype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMundertype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMundertype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMundertype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMundertype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMundertype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMundertype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMundertype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMundertype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMundertype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMundertype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMundertype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMundertype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMundertype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMundertype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMundertype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMundertype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMundertype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMundertype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMundertype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMundertype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMundertype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMovertype }

procedure TXMLMovertype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMovertype.Get_Accent: Boolean;
begin
  Result := Params['accent'];
end;

procedure TXMLMovertype.Set_Accent(Value: Boolean);
begin
  Params['accent'] := Value;
end;

function TXMLMovertype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMovertype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMovertype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMovertype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMovertype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMovertype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMovertype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMovertype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMovertype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMovertype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMovertype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMovertype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMovertype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMovertype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMovertype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMovertype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMovertype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMovertype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMovertype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMovertype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMovertype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMovertype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMovertype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMovertype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMovertype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMovertype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMovertype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMovertype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMovertype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMovertype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMovertype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMovertype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMovertype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMovertype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMovertype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMovertype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMovertype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMovertype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMovertype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMovertype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMovertype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMovertype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMovertype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMovertype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMovertype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMovertype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMovertype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMovertype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMovertype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMovertype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMovertype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMovertype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMovertype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMovertype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMovertype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMovertype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMovertype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMovertype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMovertype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMovertype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMovertype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMovertype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMovertype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMovertype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMovertype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMovertype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMovertype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMovertype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMovertype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMovertype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMovertype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMovertype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMovertype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMovertype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMovertype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMovertype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMovertype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMovertype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMovertype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMovertype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMovertype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMovertype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMovertype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMovertype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMovertype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMovertype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMovertype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMovertype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMovertype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMovertype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMovertype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMovertype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMovertype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMovertype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMovertype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMovertype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMovertype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMovertype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMovertype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMovertype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMovertype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMovertype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMovertype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMovertype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMovertype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMovertype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMovertype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMovertype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMovertype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMovertype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMovertype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMovertype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMovertype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMovertype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMunderovertype }

procedure TXMLMunderovertype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMunderovertype.Get_Accent: Boolean;
begin
  Result := Params['accent'];
end;

procedure TXMLMunderovertype.Set_Accent(Value: Boolean);
begin
  Params['accent'] := Value;
end;

function TXMLMunderovertype.Get_Accentunder: Boolean;
begin
  Result := Params['accentunder'];
end;

procedure TXMLMunderovertype.Set_Accentunder(Value: Boolean);
begin
  Params['accentunder'] := Value;
end;

function TXMLMunderovertype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMunderovertype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMunderovertype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMunderovertype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMunderovertype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMunderovertype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMunderovertype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMunderovertype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMunderovertype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMunderovertype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMunderovertype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMunderovertype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMunderovertype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMunderovertype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMunderovertype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMunderovertype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMunderovertype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMunderovertype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMunderovertype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMunderovertype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMunderovertype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMunderovertype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMunderovertype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMunderovertype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMunderovertype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMunderovertype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMunderovertype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMunderovertype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMunderovertype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMunderovertype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMunderovertype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMunderovertype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMunderovertype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMunderovertype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMunderovertype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMunderovertype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMunderovertype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMunderovertype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMunderovertype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMunderovertype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMunderovertype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMunderovertype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMunderovertype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMunderovertype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMunderovertype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMunderovertype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMunderovertype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMunderovertype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMunderovertype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMunderovertype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMunderovertype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMunderovertype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMunderovertype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMunderovertype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMunderovertype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMunderovertype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMunderovertype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMunderovertype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMunderovertype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMunderovertype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMunderovertype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMunderovertype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMunderovertype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMunderovertype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMunderovertype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMunderovertype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMunderovertype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMunderovertype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMunderovertype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMunderovertype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMunderovertype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMunderovertype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMunderovertype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMunderovertype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMunderovertype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMunderovertype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMunderovertype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMunderovertype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMunderovertype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMunderovertype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMunderovertype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMunderovertype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMunderovertype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMunderovertype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMunderovertype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMunderovertype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMunderovertype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMunderovertype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMunderovertype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMunderovertype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMunderovertype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMunderovertype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMunderovertype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMunderovertype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMunderovertype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMunderovertype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMunderovertype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMunderovertype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMunderovertype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMunderovertype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMunderovertype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMunderovertype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMunderovertype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMunderovertype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMunderovertype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMunderovertype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMunderovertype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMunderovertype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMunderovertype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMunderovertype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMunderovertype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMunderovertype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMunderovertype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMunderovertype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMmultiscriptstype }

procedure TXMLMmultiscriptstype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('none', TXMLNonetype);
  FClassesTree.Add('mprescripts', TXMLMprescriptstype);
  inherited;
end;

function TXMLMmultiscriptstype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMmultiscriptstype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMmultiscriptstype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMmultiscriptstype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMmultiscriptstype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMmultiscriptstype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMmultiscriptstype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMmultiscriptstype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMmultiscriptstype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMmultiscriptstype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMmultiscriptstype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMmultiscriptstype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMmultiscriptstype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMmultiscriptstype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMmultiscriptstype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMmultiscriptstype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMmultiscriptstype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMmultiscriptstype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMmultiscriptstype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMmultiscriptstype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMmultiscriptstype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMmultiscriptstype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMmultiscriptstype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMmultiscriptstype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMmultiscriptstype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMmultiscriptstype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMmultiscriptstype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMmultiscriptstype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMmultiscriptstype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMmultiscriptstype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMmultiscriptstype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMmultiscriptstype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMmultiscriptstype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMmultiscriptstype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMmultiscriptstype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMmultiscriptstype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMmultiscriptstype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMmultiscriptstype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMmultiscriptstype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMmultiscriptstype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMmultiscriptstype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMmultiscriptstype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMmultiscriptstype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMmultiscriptstype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMmultiscriptstype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMmultiscriptstype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMmultiscriptstype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMmultiscriptstype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMmultiscriptstype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMmultiscriptstype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMmultiscriptstype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMmultiscriptstype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMmultiscriptstype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMmultiscriptstype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMmultiscriptstype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMmultiscriptstype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMmultiscriptstype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMmultiscriptstype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMmultiscriptstype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMmultiscriptstype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMmultiscriptstype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMmultiscriptstype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMmultiscriptstype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMmultiscriptstype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMmultiscriptstype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMmultiscriptstype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMmultiscriptstype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMmultiscriptstype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMmultiscriptstype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMmultiscriptstype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMmultiscriptstype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMmultiscriptstype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMmultiscriptstype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMmultiscriptstype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMmultiscriptstype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMmultiscriptstype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMmultiscriptstype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMmultiscriptstype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMmultiscriptstype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMmultiscriptstype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMmultiscriptstype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMmultiscriptstype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMmultiscriptstype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMmultiscriptstype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMmultiscriptstype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMmultiscriptstype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMmultiscriptstype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMmultiscriptstype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMmultiscriptstype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMmultiscriptstype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMmultiscriptstype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMmultiscriptstype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMmultiscriptstype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMmultiscriptstype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMmultiscriptstype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMmultiscriptstype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMmultiscriptstype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMmultiscriptstype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMmultiscriptstype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMmultiscriptstype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMmultiscriptstype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMmultiscriptstype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMmultiscriptstype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMmultiscriptstype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMmultiscriptstype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMmultiscriptstype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMmultiscriptstype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMmultiscriptstype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMmultiscriptstype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMmultiscriptstype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMmultiscriptstype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMmultiscriptstype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMmultiscriptstype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMmultiscriptstype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLMmultiscriptstype.Get_None: IXMLNonetype;
begin
  Result := Nodes['none'] as IXMLNonetype;
end;

function TXMLMmultiscriptstype.Get_Mprescripts: IXMLMprescriptstype;
begin
  Result := Nodes['mprescripts'] as IXMLMprescriptstype;
end;

{ TXMLMtabletype }

procedure TXMLMtabletype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mtr', TXMLMtrtype);
  FClassesTree.Add('mlabeledtr', TXMLMlabeledtrtype);
  inherited;
end;

function TXMLMtabletype.Get_Rowalign: UnicodeString;
begin
  Result := Params['rowalign'];
end;

procedure TXMLMtabletype.Set_Rowalign(Value: UnicodeString);
begin
  Params['rowalign'] := Value;
end;

function TXMLMtabletype.Get_Columnalign: UnicodeString;
begin
  Result := Params['columnalign'];
end;

procedure TXMLMtabletype.Set_Columnalign(Value: UnicodeString);
begin
  Params['columnalign'] := Value;
end;

function TXMLMtabletype.Get_Groupalign: UnicodeString;
begin
  Result := Params['groupalign'];
end;

procedure TXMLMtabletype.Set_Groupalign(Value: UnicodeString);
begin
  Params['groupalign'] := Value;
end;

function TXMLMtabletype.Get_Align: UnicodeString;
begin
  Result := Params['align'];
end;

procedure TXMLMtabletype.Set_Align(Value: UnicodeString);
begin
  Params['align'] := Value;
end;

function TXMLMtabletype.Get_Alignmentscope: UnicodeString;
begin
  Result := Params['alignmentscope'];
end;

procedure TXMLMtabletype.Set_Alignmentscope(Value: UnicodeString);
begin
  Params['alignmentscope'] := Value;
end;

function TXMLMtabletype.Get_Columnwidth: UnicodeString;
begin
  Result := Params['columnwidth'];
end;

procedure TXMLMtabletype.Set_Columnwidth(Value: UnicodeString);
begin
  Params['columnwidth'] := Value;
end;

function TXMLMtabletype.Get_Width: UnicodeString;
begin
  Result := Params['width'];
end;

procedure TXMLMtabletype.Set_Width(Value: UnicodeString);
begin
  Params['width'] := Value;
end;

function TXMLMtabletype.Get_Rowspacing: UnicodeString;
begin
  Result := Params['rowspacing'];
end;

procedure TXMLMtabletype.Set_Rowspacing(Value: UnicodeString);
begin
  Params['rowspacing'] := Value;
end;

function TXMLMtabletype.Get_Columnspacing: UnicodeString;
begin
  Result := Params['columnspacing'];
end;

procedure TXMLMtabletype.Set_Columnspacing(Value: UnicodeString);
begin
  Params['columnspacing'] := Value;
end;

function TXMLMtabletype.Get_Rowlines: UnicodeString;
begin
  Result := Params['rowlines'];
end;

procedure TXMLMtabletype.Set_Rowlines(Value: UnicodeString);
begin
  Params['rowlines'] := Value;
end;

function TXMLMtabletype.Get_Columnlines: UnicodeString;
begin
  Result := Params['columnlines'];
end;

procedure TXMLMtabletype.Set_Columnlines(Value: UnicodeString);
begin
  Params['columnlines'] := Value;
end;

function TXMLMtabletype.Get_Frame: UnicodeString;
begin
  Result := Params['frame'];
end;

procedure TXMLMtabletype.Set_Frame(Value: UnicodeString);
begin
  Params['frame'] := Value;
end;

function TXMLMtabletype.Get_Framespacing: UnicodeString;
begin
  Result := Params['framespacing'];
end;

procedure TXMLMtabletype.Set_Framespacing(Value: UnicodeString);
begin
  Params['framespacing'] := Value;
end;

function TXMLMtabletype.Get_Equalrows: Boolean;
begin
  Result := Params['equalrows'];
end;

procedure TXMLMtabletype.Set_Equalrows(Value: Boolean);
begin
  Params['equalrows'] := Value;
end;

function TXMLMtabletype.Get_Equalcolumns: Boolean;
begin
  Result := Params['equalcolumns'];
end;

procedure TXMLMtabletype.Set_Equalcolumns(Value: Boolean);
begin
  Params['equalcolumns'] := Value;
end;

function TXMLMtabletype.Get_Displaystyle: Boolean;
begin
  Result := Params['displaystyle'];
end;

procedure TXMLMtabletype.Set_Displaystyle(Value: Boolean);
begin
  Params['displaystyle'] := Value;
end;

function TXMLMtabletype.Get_Side: UnicodeString;
begin
  Result := Params['side'];
end;

procedure TXMLMtabletype.Set_Side(Value: UnicodeString);
begin
  Params['side'] := Value;
end;

function TXMLMtabletype.Get_Minlabelspacing: UnicodeString;
begin
  Result := Params['minlabelspacing'];
end;

procedure TXMLMtabletype.Set_Minlabelspacing(Value: UnicodeString);
begin
  Params['minlabelspacing'] := Value;
end;

function TXMLMtabletype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMtabletype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMtabletype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMtabletype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMtabletype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMtabletype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMtabletype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMtabletype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMtabletype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMtabletype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMtabletype.Get_Mtr: IXMLMtrtype;
begin
  Result := Nodes['mtr'] as IXMLMtrtype;
end;

function TXMLMtabletype.Get_Mlabeledtr: IXMLMlabeledtrtype;
begin
  Result := Nodes['mlabeledtr'] as IXMLMlabeledtrtype;
end;

{ TXMLMtrtype }

procedure TXMLMtrtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mtd', TXMLMtdtype);
  inherited;
end;

function TXMLMtrtype.Get_Rowalign: UnicodeString;
begin
  Result := Params['rowalign'];
end;

procedure TXMLMtrtype.Set_Rowalign(Value: UnicodeString);
begin
  Params['rowalign'] := Value;
end;

function TXMLMtrtype.Get_Columnalign: UnicodeString;
begin
  Result := Params['columnalign'];
end;

procedure TXMLMtrtype.Set_Columnalign(Value: UnicodeString);
begin
  Params['columnalign'] := Value;
end;

function TXMLMtrtype.Get_Groupalign: UnicodeString;
begin
  Result := Params['groupalign'];
end;

procedure TXMLMtrtype.Set_Groupalign(Value: UnicodeString);
begin
  Params['groupalign'] := Value;
end;

function TXMLMtrtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMtrtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMtrtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMtrtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMtrtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMtrtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMtrtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMtrtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMtrtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMtrtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMtrtype.Get_Mtd: IXMLMtdtype;
begin
  Result := Nodes['mtd'] as IXMLMtdtype;
end;

{ TXMLMtdtype }

procedure TXMLMtdtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMtdtype.Get_Rowalign: UnicodeString;
begin
  Result := Params['rowalign'];
end;

procedure TXMLMtdtype.Set_Rowalign(Value: UnicodeString);
begin
  Params['rowalign'] := Value;
end;

function TXMLMtdtype.Get_Columnalign: UnicodeString;
begin
  Result := Params['columnalign'];
end;

procedure TXMLMtdtype.Set_Columnalign(Value: UnicodeString);
begin
  Params['columnalign'] := Value;
end;

function TXMLMtdtype.Get_Groupalign: UnicodeString;
begin
  Result := Params['groupalign'];
end;

procedure TXMLMtdtype.Set_Groupalign(Value: UnicodeString);
begin
  Params['groupalign'] := Value;
end;

function TXMLMtdtype.Get_Columnspan: LongWord;
begin
  Result := Params['columnspan'];
end;

procedure TXMLMtdtype.Set_Columnspan(Value: LongWord);
begin
  Params['columnspan'] := Value;
end;

function TXMLMtdtype.Get_Rowspan: LongWord;
begin
  Result := Params['rowspan'];
end;

procedure TXMLMtdtype.Set_Rowspan(Value: LongWord);
begin
  Params['rowspan'] := Value;
end;

function TXMLMtdtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMtdtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMtdtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMtdtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMtdtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMtdtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMtdtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMtdtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMtdtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMtdtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMtdtype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMtdtype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMtdtype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMtdtype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMtdtype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMtdtype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMtdtype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMtdtype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMtdtype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMtdtype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMtdtype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMtdtype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMtdtype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMtdtype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMtdtype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMtdtype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMtdtype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMtdtype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMtdtype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMtdtype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMtdtype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMtdtype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMtdtype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMtdtype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMtdtype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMtdtype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMtdtype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMtdtype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMtdtype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMtdtype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMtdtype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMtdtype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMtdtype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMtdtype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMtdtype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMtdtype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMtdtype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMtdtype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMtdtype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMtdtype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMtdtype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMtdtype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMtdtype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMtdtype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMtdtype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMtdtype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMtdtype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMtdtype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMtdtype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMtdtype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMtdtype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMtdtype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMtdtype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMtdtype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMtdtype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMtdtype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMtdtype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMtdtype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMtdtype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMtdtype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMtdtype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMtdtype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMtdtype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMtdtype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMtdtype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMtdtype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMtdtype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMtdtype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMtdtype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMtdtype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMtdtype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMtdtype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMtdtype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMtdtype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMtdtype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMtdtype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMtdtype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMtdtype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMtdtype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMtdtype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMtdtype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMtdtype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMtdtype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMtdtype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMtdtype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMtdtype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMtdtype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMtdtype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMtdtype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMtdtype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMtdtype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMtdtype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMtdtype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMtdtype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMtdtype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMtdtype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMtdtype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMtdtype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMtdtype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMtdtype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMtdtype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMtdtype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMtdtype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMtdtype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMaligngrouptype }

function TXMLMaligngrouptype.Get_Groupalign: UnicodeString;
begin
  Result := Params['groupalign'];
end;

procedure TXMLMaligngrouptype.Set_Groupalign(Value: UnicodeString);
begin
  Params['groupalign'] := Value;
end;

function TXMLMaligngrouptype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMaligngrouptype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMaligngrouptype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMaligngrouptype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMaligngrouptype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMaligngrouptype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMaligngrouptype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMaligngrouptype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMaligngrouptype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMaligngrouptype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLMspacetype }

function TXMLMspacetype.Get_Width: UnicodeString;
begin
  Result := Params['width'];
end;

procedure TXMLMspacetype.Set_Width(Value: UnicodeString);
begin
  Params['width'] := Value;
end;

function TXMLMspacetype.Get_Height: UnicodeString;
begin
  Result := Params['height'];
end;

procedure TXMLMspacetype.Set_Height(Value: UnicodeString);
begin
  Params['height'] := Value;
end;

function TXMLMspacetype.Get_Depth: UnicodeString;
begin
  Result := Params['depth'];
end;

procedure TXMLMspacetype.Set_Depth(Value: UnicodeString);
begin
  Params['depth'] := Value;
end;

function TXMLMspacetype.Get_Linebreak: UnicodeString;
begin
  Result := Params['linebreak'];
end;

procedure TXMLMspacetype.Set_Linebreak(Value: UnicodeString);
begin
  Params['linebreak'] := Value;
end;

function TXMLMspacetype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMspacetype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMspacetype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMspacetype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMspacetype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMspacetype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMspacetype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMspacetype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMspacetype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMspacetype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLMactiontype }

procedure TXMLMactiontype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMactiontype.Get_Actiontype: UnicodeString;
begin
  Result := Params['actiontype'];
end;

procedure TXMLMactiontype.Set_Actiontype(Value: UnicodeString);
begin
  Params['actiontype'] := Value;
end;

function TXMLMactiontype.Get_Selection: LongWord;
begin
  Result := Params['selection'];
end;

procedure TXMLMactiontype.Set_Selection(Value: LongWord);
begin
  Params['selection'] := Value;
end;

function TXMLMactiontype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMactiontype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMactiontype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMactiontype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMactiontype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMactiontype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMactiontype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMactiontype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMactiontype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMactiontype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMactiontype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMactiontype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMactiontype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMactiontype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMactiontype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMactiontype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMactiontype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMactiontype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMactiontype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMactiontype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMactiontype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMactiontype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMactiontype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMactiontype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMactiontype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMactiontype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMactiontype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMactiontype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMactiontype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMactiontype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMactiontype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMactiontype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMactiontype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMactiontype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMactiontype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMactiontype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMactiontype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMactiontype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMactiontype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMactiontype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMactiontype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMactiontype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMactiontype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMactiontype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMactiontype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMactiontype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMactiontype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMactiontype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMactiontype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMactiontype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMactiontype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMactiontype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMactiontype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMactiontype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMactiontype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMactiontype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMactiontype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMactiontype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMactiontype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMactiontype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMactiontype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMactiontype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMactiontype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMactiontype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMactiontype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMactiontype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMactiontype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMactiontype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMactiontype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMactiontype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMactiontype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMactiontype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMactiontype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMactiontype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMactiontype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMactiontype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMactiontype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMactiontype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMactiontype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMactiontype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMactiontype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMactiontype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMactiontype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMactiontype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMactiontype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMactiontype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMactiontype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMactiontype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMactiontype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMactiontype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMactiontype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMactiontype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMactiontype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMactiontype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMactiontype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMactiontype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMactiontype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMactiontype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMactiontype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMactiontype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMactiontype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMactiontype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMactiontype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMactiontype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMactiontype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMactiontype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMactiontype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMactiontype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMactiontype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMactiontype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMactiontype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMactiontype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMactiontype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMactiontype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMerrortype }

procedure TXMLMerrortype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMerrortype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMerrortype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMerrortype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMerrortype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMerrortype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMerrortype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMerrortype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMerrortype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMerrortype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMerrortype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMerrortype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMerrortype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMerrortype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMerrortype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMerrortype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMerrortype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMerrortype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMerrortype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMerrortype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMerrortype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMerrortype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMerrortype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMerrortype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMerrortype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMerrortype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMerrortype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMerrortype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMerrortype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMerrortype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMerrortype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMerrortype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMerrortype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMerrortype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMerrortype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMerrortype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMerrortype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMerrortype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMerrortype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMerrortype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMerrortype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMerrortype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMerrortype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMerrortype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMerrortype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMerrortype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMerrortype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMerrortype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMerrortype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMerrortype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMerrortype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMerrortype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMerrortype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMerrortype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMerrortype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMerrortype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMerrortype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMerrortype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMerrortype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMerrortype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMerrortype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMerrortype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMerrortype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMerrortype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMerrortype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMerrortype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMerrortype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMerrortype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMerrortype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMerrortype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMerrortype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMerrortype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMerrortype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMerrortype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMerrortype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMerrortype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMerrortype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMerrortype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMerrortype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMerrortype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMerrortype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMerrortype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMerrortype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMerrortype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMerrortype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMerrortype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMerrortype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMerrortype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMerrortype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMerrortype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMerrortype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMerrortype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMerrortype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMerrortype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMerrortype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMerrortype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMerrortype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMerrortype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMerrortype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMerrortype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMerrortype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMerrortype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMerrortype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMerrortype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMerrortype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMerrortype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMerrortype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMerrortype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMerrortype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMerrortype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMerrortype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMerrortype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMerrortype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMerrortype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMerrortype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLMstyletype }

procedure TXMLMstyletype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLMstyletype.Get_Scriptlevel: Integer;
begin
  Result := Params['scriptlevel'];
end;

procedure TXMLMstyletype.Set_Scriptlevel(Value: Integer);
begin
  Params['scriptlevel'] := Value;
end;

function TXMLMstyletype.Get_Displaystyle: Boolean;
begin
  Result := Params['displaystyle'];
end;

procedure TXMLMstyletype.Set_Displaystyle(Value: Boolean);
begin
  Params['displaystyle'] := Value;
end;

function TXMLMstyletype.Get_Scriptsizemultiplier: UnicodeString;
begin
  Result := Params['scriptsizemultiplier'];
end;

procedure TXMLMstyletype.Set_Scriptsizemultiplier(Value: UnicodeString);
begin
  Params['scriptsizemultiplier'] := Value;
end;

function TXMLMstyletype.Get_Scriptminsize: UnicodeString;
begin
  Result := Params['scriptminsize'];
end;

procedure TXMLMstyletype.Set_Scriptminsize(Value: UnicodeString);
begin
  Params['scriptminsize'] := Value;
end;

function TXMLMstyletype.Get_Color: UnicodeString;
begin
  Result := Params['color'];
end;

procedure TXMLMstyletype.Set_Color(Value: UnicodeString);
begin
  Params['color'] := Value;
end;

function TXMLMstyletype.Get_Background: UnicodeString;
begin
  Result := Params['background'];
end;

procedure TXMLMstyletype.Set_Background(Value: UnicodeString);
begin
  Params['background'] := Value;
end;

function TXMLMstyletype.Get_Veryverythinmathspace: UnicodeString;
begin
  Result := Params['veryverythinmathspace'];
end;

procedure TXMLMstyletype.Set_Veryverythinmathspace(Value: UnicodeString);
begin
  Params['veryverythinmathspace'] := Value;
end;

function TXMLMstyletype.Get_Verythinmathspace: UnicodeString;
begin
  Result := Params['verythinmathspace'];
end;

procedure TXMLMstyletype.Set_Verythinmathspace(Value: UnicodeString);
begin
  Params['verythinmathspace'] := Value;
end;

function TXMLMstyletype.Get_Thinmathspace: UnicodeString;
begin
  Result := Params['thinmathspace'];
end;

procedure TXMLMstyletype.Set_Thinmathspace(Value: UnicodeString);
begin
  Params['thinmathspace'] := Value;
end;

function TXMLMstyletype.Get_Mediummathspace: UnicodeString;
begin
  Result := Params['mediummathspace'];
end;

procedure TXMLMstyletype.Set_Mediummathspace(Value: UnicodeString);
begin
  Params['mediummathspace'] := Value;
end;

function TXMLMstyletype.Get_Thickmathspace: UnicodeString;
begin
  Result := Params['thickmathspace'];
end;

procedure TXMLMstyletype.Set_Thickmathspace(Value: UnicodeString);
begin
  Params['thickmathspace'] := Value;
end;

function TXMLMstyletype.Get_Verythickmathspace: UnicodeString;
begin
  Result := Params['verythickmathspace'];
end;

procedure TXMLMstyletype.Set_Verythickmathspace(Value: UnicodeString);
begin
  Params['verythickmathspace'] := Value;
end;

function TXMLMstyletype.Get_Veryverythickmathspace: UnicodeString;
begin
  Result := Params['veryverythickmathspace'];
end;

procedure TXMLMstyletype.Set_Veryverythickmathspace(Value: UnicodeString);
begin
  Params['veryverythickmathspace'] := Value;
end;

function TXMLMstyletype.Get_Linethickness: UnicodeString;
begin
  Result := Params['linethickness'];
end;

procedure TXMLMstyletype.Set_Linethickness(Value: UnicodeString);
begin
  Params['linethickness'] := Value;
end;

function TXMLMstyletype.Get_Form: UnicodeString;
begin
  Result := Params['form'];
end;

procedure TXMLMstyletype.Set_Form(Value: UnicodeString);
begin
  Params['form'] := Value;
end;

function TXMLMstyletype.Get_Lspace: UnicodeString;
begin
  Result := Params['lspace'];
end;

procedure TXMLMstyletype.Set_Lspace(Value: UnicodeString);
begin
  Params['lspace'] := Value;
end;

function TXMLMstyletype.Get_Rspace: UnicodeString;
begin
  Result := Params['rspace'];
end;

procedure TXMLMstyletype.Set_Rspace(Value: UnicodeString);
begin
  Params['rspace'] := Value;
end;

function TXMLMstyletype.Get_Fence: Boolean;
begin
  Result := Params['fence'];
end;

procedure TXMLMstyletype.Set_Fence(Value: Boolean);
begin
  Params['fence'] := Value;
end;

function TXMLMstyletype.Get_Separator: Boolean;
begin
  Result := Params['separator'];
end;

procedure TXMLMstyletype.Set_Separator(Value: Boolean);
begin
  Params['separator'] := Value;
end;

function TXMLMstyletype.Get_Stretchy: Boolean;
begin
  Result := Params['stretchy'];
end;

procedure TXMLMstyletype.Set_Stretchy(Value: Boolean);
begin
  Params['stretchy'] := Value;
end;

function TXMLMstyletype.Get_Symmetric: Boolean;
begin
  Result := Params['symmetric'];
end;

procedure TXMLMstyletype.Set_Symmetric(Value: Boolean);
begin
  Params['symmetric'] := Value;
end;

function TXMLMstyletype.Get_Movablelimits: Boolean;
begin
  Result := Params['movablelimits'];
end;

procedure TXMLMstyletype.Set_Movablelimits(Value: Boolean);
begin
  Params['movablelimits'] := Value;
end;

function TXMLMstyletype.Get_Accent: Boolean;
begin
  Result := Params['accent'];
end;

procedure TXMLMstyletype.Set_Accent(Value: Boolean);
begin
  Params['accent'] := Value;
end;

function TXMLMstyletype.Get_Largeop: Boolean;
begin
  Result := Params['largeop'];
end;

procedure TXMLMstyletype.Set_Largeop(Value: Boolean);
begin
  Params['largeop'] := Value;
end;

function TXMLMstyletype.Get_Minsize: UnicodeString;
begin
  Result := Params['minsize'];
end;

procedure TXMLMstyletype.Set_Minsize(Value: UnicodeString);
begin
  Params['minsize'] := Value;
end;

function TXMLMstyletype.Get_Maxsize: UnicodeString;
begin
  Result := Params['maxsize'];
end;

procedure TXMLMstyletype.Set_Maxsize(Value: UnicodeString);
begin
  Params['maxsize'] := Value;
end;

function TXMLMstyletype.Get_Mathvariant: UnicodeString;
begin
  Result := Params['mathvariant'];
end;

procedure TXMLMstyletype.Set_Mathvariant(Value: UnicodeString);
begin
  Params['mathvariant'] := Value;
end;

function TXMLMstyletype.Get_Mathsize: UnicodeString;
begin
  Result := Params['mathsize'];
end;

procedure TXMLMstyletype.Set_Mathsize(Value: UnicodeString);
begin
  Params['mathsize'] := Value;
end;

function TXMLMstyletype.Get_Mathcolor: UnicodeString;
begin
  Result := Params['mathcolor'];
end;

procedure TXMLMstyletype.Set_Mathcolor(Value: UnicodeString);
begin
  Params['mathcolor'] := Value;
end;

function TXMLMstyletype.Get_Mathbackground: UnicodeString;
begin
  Result := Params['mathbackground'];
end;

procedure TXMLMstyletype.Set_Mathbackground(Value: UnicodeString);
begin
  Params['mathbackground'] := Value;
end;

function TXMLMstyletype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMstyletype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMstyletype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMstyletype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMstyletype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMstyletype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMstyletype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMstyletype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMstyletype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMstyletype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMstyletype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMstyletype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMstyletype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMstyletype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMstyletype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMstyletype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMstyletype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMstyletype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMstyletype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMstyletype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMstyletype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMstyletype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMstyletype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMstyletype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMstyletype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMstyletype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMstyletype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMstyletype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMstyletype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMstyletype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMstyletype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMstyletype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMstyletype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMstyletype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMstyletype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMstyletype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMstyletype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLMstyletype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMstyletype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMstyletype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMstyletype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMstyletype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMstyletype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMstyletype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMstyletype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMstyletype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMstyletype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMstyletype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMstyletype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMstyletype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMstyletype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMstyletype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMstyletype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMstyletype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMstyletype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMstyletype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMstyletype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMstyletype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMstyletype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMstyletype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMstyletype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMstyletype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMstyletype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMstyletype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMstyletype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMstyletype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMstyletype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMstyletype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMstyletype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMstyletype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMstyletype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMstyletype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMstyletype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMstyletype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMstyletype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMstyletype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMstyletype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMstyletype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMstyletype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMstyletype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMstyletype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMstyletype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMstyletype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMstyletype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMstyletype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMstyletype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMstyletype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMstyletype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMstyletype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMstyletype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMstyletype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMstyletype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMstyletype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMstyletype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMstyletype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMstyletype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMstyletype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMstyletype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMstyletype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMstyletype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMstyletype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMstyletype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMstyletype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMstyletype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMstyletype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMstyletype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMstyletype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMstyletype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMstyletype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMstyletype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMstyletype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMstyletype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMstyletype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMstyletype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLCntype }

procedure TXMLCntype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('sep', TXMLSeptype);
  inherited;
end;

function TXMLCntype.Get_Base: LongWord;
begin
  Result := Params['base'];
end;

procedure TXMLCntype.Set_Base(Value: LongWord);
begin
  Params['base'] := Value;
end;

function TXMLCntype.Get_Type_: UnicodeString;
begin
  Result := Params['type'];
end;

procedure TXMLCntype.Set_Type_(Value: UnicodeString);
begin
  Params['type'] := Value;
end;

function TXMLCntype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLCntype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLCntype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLCntype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLCntype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLCntype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLCntype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLCntype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLCntype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLCntype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLCntype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLCntype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLCntype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLCntype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLCntype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLCntype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLCntype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLCntype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLCntype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLCntype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLCntype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLCntype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLCntype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLCntype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLCntype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLCntype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLCntype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLCntype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLCntype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLCntype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLCntype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLCntype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLCntype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLCntype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLCntype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLCntype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLCntype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLCntype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLCntype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLCntype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLCntype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLCntype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLCntype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLCntype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLCntype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLCntype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLCntype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLCntype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLCntype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLCntype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLCntype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLCntype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLCntype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLCntype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLCntype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLCntype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLCntype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLCntype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLCntype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLCntype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLCntype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLCntype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLCntype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLCntype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLCntype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLCntype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLCntype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLCntype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLCntype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLCntype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLCntype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLCntype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLCntype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLCntype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLCntype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLCntype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLCntype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLCntype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLCntype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLCntype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLCntype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLCntype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLCntype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLCntype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLCntype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLCntype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLCntype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLCntype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLCntype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLCntype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLCntype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLCntype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLCntype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLCntype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLCntype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLCntype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLCntype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLCntype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLCntype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLCntype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLCntype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLCntype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLCntype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLCntype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLCntype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLCntype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLCntype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLCntype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLCntype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLCntype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLCntype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLCntype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLCntype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLCntype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLCntype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLCntype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLCntype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLCntype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLCntype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLCntype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLCntype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLCntype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLCntype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLCntype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLCntype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLCntype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLCntype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLCntype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLCntype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLCntype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLCntype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLCntype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLCntype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLCntype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLCntype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLCntype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLCntype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLCntype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLCntype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLCntype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLCntype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLCntype.Get_Sep: IXMLSeptype;
begin
  Result := Nodes['sep'] as IXMLSeptype;
end;

{ TXMLCitype }

procedure TXMLCitype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLCitype.Get_Type_: UnicodeString;
begin
  Result := Params['type'];
end;

procedure TXMLCitype.Set_Type_(Value: UnicodeString);
begin
  Params['type'] := Value;
end;

function TXMLCitype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLCitype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLCitype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLCitype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLCitype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLCitype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLCitype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLCitype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLCitype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLCitype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLCitype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLCitype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLCitype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLCitype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLCitype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLCitype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLCitype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLCitype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLCitype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLCitype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLCitype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLCitype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLCitype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLCitype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLCitype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLCitype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLCitype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLCitype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLCitype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLCitype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLCitype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLCitype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLCitype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLCitype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLCitype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLCitype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLCitype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLCitype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLCitype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLCitype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLCitype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLCitype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLCitype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLCitype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLCitype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLCitype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLCitype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLCitype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLCitype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLCitype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLCitype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLCitype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLCitype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLCitype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLCitype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLCitype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLCitype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLCitype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLCitype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLCitype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLCitype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLCitype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLCitype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLCitype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLCitype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLCitype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLCitype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLCitype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLCitype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLCitype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLCitype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLCitype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLCitype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLCitype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLCitype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLCitype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLCitype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLCitype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLCitype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLCitype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLCitype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLCitype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLCitype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLCitype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLCitype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLCitype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLCitype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLCitype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLCitype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLCitype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLCitype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLCitype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLCitype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLCitype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLCitype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLCitype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLCitype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLCitype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLCitype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLCitype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLCitype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLCitype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLCitype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLCitype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLCitype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLCitype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLCitype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLCitype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLCitype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLCitype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLCitype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLCitype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLCitype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLCitype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLCitype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLCitype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLCitype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLCitype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLCitype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLCitype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLCitype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLCitype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLCitype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLCitype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLCitype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLCitype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLCitype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLCitype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLCitype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLCitype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLCitype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLCitype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLCitype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLCitype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLCitype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLCitype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLCitype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLCitype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLCitype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLCitype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLCitype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLCsymboltype }

procedure TXMLCsymboltype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  inherited;
end;

function TXMLCsymboltype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLCsymboltype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLCsymboltype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLCsymboltype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLCsymboltype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLCsymboltype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLCsymboltype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLCsymboltype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLCsymboltype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLCsymboltype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLCsymboltype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLCsymboltype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLCsymboltype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLCsymboltype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLCsymboltype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLCsymboltype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLCsymboltype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLCsymboltype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLCsymboltype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLCsymboltype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLCsymboltype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLCsymboltype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLCsymboltype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLCsymboltype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLCsymboltype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLCsymboltype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLCsymboltype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLCsymboltype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLCsymboltype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLCsymboltype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLCsymboltype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLCsymboltype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLCsymboltype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLCsymboltype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLCsymboltype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLCsymboltype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLCsymboltype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLCsymboltype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLCsymboltype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLCsymboltype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLCsymboltype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLCsymboltype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLCsymboltype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLCsymboltype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLCsymboltype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLCsymboltype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLCsymboltype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLCsymboltype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLCsymboltype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLCsymboltype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLCsymboltype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLCsymboltype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLCsymboltype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLCsymboltype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLCsymboltype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLCsymboltype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLCsymboltype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLCsymboltype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLCsymboltype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLCsymboltype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLCsymboltype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLCsymboltype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLCsymboltype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLCsymboltype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLCsymboltype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLCsymboltype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLCsymboltype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLCsymboltype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLCsymboltype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLCsymboltype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLCsymboltype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLCsymboltype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLCsymboltype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLCsymboltype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLCsymboltype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLCsymboltype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLCsymboltype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLCsymboltype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLCsymboltype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLCsymboltype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLCsymboltype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLCsymboltype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLCsymboltype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLCsymboltype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLCsymboltype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLCsymboltype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLCsymboltype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLCsymboltype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLCsymboltype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLCsymboltype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLCsymboltype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLCsymboltype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLCsymboltype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLCsymboltype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLCsymboltype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLCsymboltype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLCsymboltype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLCsymboltype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLCsymboltype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLCsymboltype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLCsymboltype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLCsymboltype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLCsymboltype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLCsymboltype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLCsymboltype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLCsymboltype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLCsymboltype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLCsymboltype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLCsymboltype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLCsymboltype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLCsymboltype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLCsymboltype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLCsymboltype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLCsymboltype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLCsymboltype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLCsymboltype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLCsymboltype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLCsymboltype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

{ TXMLArithtype }

function TXMLArithtype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLArithtype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLArithtype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLArithtype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLArithtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLArithtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLArithtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLArithtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLArithtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLArithtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLArithtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLArithtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLArithtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLArithtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLFunctionstype }

function TXMLFunctionstype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLFunctionstype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLFunctionstype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLFunctionstype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLFunctionstype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLFunctionstype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLFunctionstype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLFunctionstype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLFunctionstype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLFunctionstype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLFunctionstype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLFunctionstype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLFunctionstype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLFunctionstype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLDomainofapplicationtype }

procedure TXMLDomainofapplicationtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLDomainofapplicationtype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLDomainofapplicationtype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLDomainofapplicationtype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLDomainofapplicationtype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLDomainofapplicationtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLDomainofapplicationtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLDomainofapplicationtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLDomainofapplicationtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLDomainofapplicationtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLDomainofapplicationtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLDomainofapplicationtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLDomainofapplicationtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLDomainofapplicationtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLDomainofapplicationtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLDomainofapplicationtype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLDomainofapplicationtype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLDomainofapplicationtype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLDomainofapplicationtype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLDomainofapplicationtype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLDomainofapplicationtype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLDomainofapplicationtype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLDomainofapplicationtype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLDomainofapplicationtype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLDomainofapplicationtype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLDomainofapplicationtype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLDomainofapplicationtype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLDomainofapplicationtype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLDomainofapplicationtype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLDomainofapplicationtype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLDomainofapplicationtype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLDomainofapplicationtype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLDomainofapplicationtype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLDomainofapplicationtype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLDomainofapplicationtype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLDomainofapplicationtype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLDomainofapplicationtype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLDomainofapplicationtype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLDomainofapplicationtype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLDomainofapplicationtype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLDomainofapplicationtype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLDomainofapplicationtype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLDomainofapplicationtype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLDomainofapplicationtype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLDomainofapplicationtype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLDomainofapplicationtype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLDomainofapplicationtype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLDomainofapplicationtype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLDomainofapplicationtype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLDomainofapplicationtype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLDomainofapplicationtype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLDomainofapplicationtype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLDomainofapplicationtype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLDomainofapplicationtype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLDomainofapplicationtype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLDomainofapplicationtype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLDomainofapplicationtype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLDomainofapplicationtype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLDomainofapplicationtype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLDomainofapplicationtype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLDomainofapplicationtype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLDomainofapplicationtype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLDomainofapplicationtype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLDomainofapplicationtype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLDomainofapplicationtype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLDomainofapplicationtype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLDomainofapplicationtype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLDomainofapplicationtype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLDomainofapplicationtype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLDomainofapplicationtype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLDomainofapplicationtype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLDomainofapplicationtype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLDomainofapplicationtype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLDomainofapplicationtype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLDomainofapplicationtype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLDomainofapplicationtype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLDomainofapplicationtype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLDomainofapplicationtype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLDomainofapplicationtype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLDomainofapplicationtype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLDomainofapplicationtype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLDomainofapplicationtype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLDomainofapplicationtype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLDomainofapplicationtype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLDomainofapplicationtype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLDomainofapplicationtype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLDomainofapplicationtype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLDomainofapplicationtype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLDomainofapplicationtype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLDomainofapplicationtype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLDomainofapplicationtype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLDomainofapplicationtype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLDomainofapplicationtype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLDomainofapplicationtype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLDomainofapplicationtype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLDomainofapplicationtype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLDomainofapplicationtype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLDomainofapplicationtype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLDomainofapplicationtype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLDomainofapplicationtype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLDomainofapplicationtype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLDomainofapplicationtype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLDomainofapplicationtype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLDomainofapplicationtype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLDomainofapplicationtype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLDomainofapplicationtype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLDomainofapplicationtype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLDomainofapplicationtype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLDomainofapplicationtype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLDomainofapplicationtype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLDomainofapplicationtype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLDomainofapplicationtype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLDomainofapplicationtype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLDomainofapplicationtype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLDomainofapplicationtype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLElementaryfunctionstype }

function TXMLElementaryfunctionstype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLElementaryfunctionstype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLElementaryfunctionstype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLElementaryfunctionstype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLElementaryfunctionstype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLElementaryfunctionstype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLElementaryfunctionstype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLElementaryfunctionstype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLElementaryfunctionstype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLElementaryfunctionstype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLElementaryfunctionstype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLElementaryfunctionstype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLElementaryfunctionstype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLElementaryfunctionstype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLLogictype }

function TXMLLogictype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLLogictype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLLogictype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLLogictype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLLogictype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLLogictype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLLogictype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLLogictype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLLogictype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLLogictype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLLogictype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLogictype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLogictype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLLogictype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLConstanttype }

function TXMLConstanttype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLConstanttype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLConstanttype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLConstanttype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLConstanttype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLConstanttype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLConstanttype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLConstanttype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLConstanttype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLConstanttype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLConstanttype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLConstanttype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLConstanttype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLConstanttype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLSettype }

procedure TXMLSettype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLSettype.Get_Type_: UnicodeString;
begin
  Result := Params['type'];
end;

procedure TXMLSettype.Set_Type_(Value: UnicodeString);
begin
  Params['type'] := Value;
end;

function TXMLSettype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLSettype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLSettype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLSettype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLSettype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLSettype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLSettype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLSettype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLSettype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLSettype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLSettype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLSettype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLSettype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLSettype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLSettype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLSettype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLSettype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLSettype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLSettype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLSettype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLSettype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLSettype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLSettype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLSettype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLSettype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLSettype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLSettype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLSettype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLSettype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLSettype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLSettype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLSettype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLSettype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLSettype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLSettype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLSettype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLSettype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLSettype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLSettype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLSettype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLSettype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLSettype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLSettype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLSettype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLSettype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLSettype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLSettype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLSettype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLSettype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLSettype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLSettype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLSettype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLSettype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLSettype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLSettype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLSettype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLSettype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLSettype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLSettype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLSettype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLSettype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLSettype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLSettype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLSettype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLSettype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLSettype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLSettype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLSettype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLSettype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLSettype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLSettype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLSettype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLSettype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLSettype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLSettype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLSettype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLSettype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLSettype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLSettype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLSettype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLSettype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLSettype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLSettype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLSettype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLSettype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLSettype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLSettype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLSettype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLSettype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLSettype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLSettype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLSettype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLSettype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLSettype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLSettype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLSettype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLSettype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLSettype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLSettype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLSettype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLSettype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLSettype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLSettype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLSettype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLSettype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLSettype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLSettype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLSettype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLSettype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLSettype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLSettype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLSettype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLSettype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLSettype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLSettype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLSettype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLSettype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLSettype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLSettype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLSettype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLSettype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLSettype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLSettype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLSettype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLSettype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLSettype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLSettype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLSettype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLSettype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLSettype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLSettype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLSettype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLSettype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLSettype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLSettype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLSettype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLSettype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLListtype }

procedure TXMLListtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLListtype.Get_Order: UnicodeString;
begin
  Result := Params['order'];
end;

procedure TXMLListtype.Set_Order(Value: UnicodeString);
begin
  Params['order'] := Value;
end;

function TXMLListtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLListtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLListtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLListtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLListtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLListtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLListtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLListtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLListtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLListtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLListtype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLListtype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLListtype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLListtype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLListtype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLListtype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLListtype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLListtype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLListtype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLListtype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLListtype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLListtype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLListtype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLListtype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLListtype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLListtype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLListtype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLListtype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLListtype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLListtype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLListtype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLListtype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLListtype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLListtype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLListtype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLListtype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLListtype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLListtype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLListtype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLListtype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLListtype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLListtype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLListtype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLListtype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLListtype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLListtype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLListtype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLListtype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLListtype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLListtype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLListtype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLListtype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLListtype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLListtype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLListtype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLListtype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLListtype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLListtype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLListtype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLListtype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLListtype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLListtype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLListtype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLListtype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLListtype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLListtype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLListtype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLListtype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLListtype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLListtype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLListtype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLListtype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLListtype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLListtype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLListtype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLListtype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLListtype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLListtype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLListtype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLListtype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLListtype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLListtype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLListtype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLListtype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLListtype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLListtype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLListtype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLListtype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLListtype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLListtype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLListtype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLListtype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLListtype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLListtype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLListtype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLListtype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLListtype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLListtype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLListtype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLListtype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLListtype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLListtype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLListtype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLListtype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLListtype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLListtype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLListtype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLListtype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLListtype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLListtype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLListtype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLListtype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLListtype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLListtype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLListtype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLListtype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLListtype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLListtype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLListtype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLListtype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLListtype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLListtype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLListtype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLListtype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLListtype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLListtype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLListtype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLListtype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLListtype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLListtype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLListtype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLListtype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLListtype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLListtype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLListtype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLListtype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLListtype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLUniontype }

function TXMLUniontype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLUniontype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLUniontype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLUniontype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLUniontype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLUniontype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLUniontype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLUniontype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLUniontype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLUniontype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLUniontype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLUniontype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLUniontype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLUniontype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLIntersecttype }

function TXMLIntersecttype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLIntersecttype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLIntersecttype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLIntersecttype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLIntersecttype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLIntersecttype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLIntersecttype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLIntersecttype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLIntersecttype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLIntersecttype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLIntersecttype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLIntersecttype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLIntersecttype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLIntersecttype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLIntype }

function TXMLIntype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLIntype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLIntype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLIntype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLIntype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLIntype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLIntype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLIntype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLIntype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLIntype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLIntype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLIntype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLIntype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLIntype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLNotintype }

function TXMLNotintype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLNotintype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLNotintype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLNotintype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLNotintype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLNotintype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLNotintype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLNotintype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLNotintype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLNotintype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLNotintype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLNotintype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLNotintype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLNotintype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLSubsettype }

function TXMLSubsettype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLSubsettype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLSubsettype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLSubsettype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLSubsettype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLSubsettype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLSubsettype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLSubsettype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLSubsettype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLSubsettype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLSubsettype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLSubsettype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLSubsettype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLSubsettype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLPrsubsettype }

function TXMLPrsubsettype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLPrsubsettype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLPrsubsettype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLPrsubsettype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLPrsubsettype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLPrsubsettype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLPrsubsettype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLPrsubsettype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLPrsubsettype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLPrsubsettype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLPrsubsettype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLPrsubsettype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLPrsubsettype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLPrsubsettype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLNotsubsettype }

function TXMLNotsubsettype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLNotsubsettype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLNotsubsettype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLNotsubsettype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLNotsubsettype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLNotsubsettype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLNotsubsettype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLNotsubsettype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLNotsubsettype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLNotsubsettype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLNotsubsettype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLNotsubsettype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLNotsubsettype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLNotsubsettype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLNotprsubsettype }

function TXMLNotprsubsettype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLNotprsubsettype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLNotprsubsettype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLNotprsubsettype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLNotprsubsettype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLNotprsubsettype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLNotprsubsettype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLNotprsubsettype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLNotprsubsettype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLNotprsubsettype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLNotprsubsettype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLNotprsubsettype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLNotprsubsettype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLNotprsubsettype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLSetdifftype }

function TXMLSetdifftype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLSetdifftype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLSetdifftype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLSetdifftype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLSetdifftype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLSetdifftype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLSetdifftype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLSetdifftype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLSetdifftype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLSetdifftype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLSetdifftype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLSetdifftype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLSetdifftype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLSetdifftype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLCardtype }

function TXMLCardtype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLCardtype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLCardtype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLCardtype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLCardtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLCardtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLCardtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLCardtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLCardtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLCardtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLCardtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLCardtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLCardtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLCardtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLCartesianproducttype }

function TXMLCartesianproducttype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLCartesianproducttype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLCartesianproducttype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLCartesianproducttype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLCartesianproducttype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLCartesianproducttype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLCartesianproducttype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLCartesianproducttype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLCartesianproducttype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLCartesianproducttype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLCartesianproducttype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLCartesianproducttype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLCartesianproducttype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLCartesianproducttype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLRelationstype }

function TXMLRelationstype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLRelationstype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLRelationstype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLRelationstype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLRelationstype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLRelationstype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLRelationstype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLRelationstype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLRelationstype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLRelationstype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLRelationstype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLRelationstype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLRelationstype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLRelationstype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLLogbasetype }

procedure TXMLLogbasetype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLLogbasetype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLLogbasetype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLLogbasetype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLLogbasetype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLLogbasetype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLLogbasetype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLLogbasetype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLogbasetype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLogbasetype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLLogbasetype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLLogbasetype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLLogbasetype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLLogbasetype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLLogbasetype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLLogbasetype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLLogbasetype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLLogbasetype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLLogbasetype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLLogbasetype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLLogbasetype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLLogbasetype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLLogbasetype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLLogbasetype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLLogbasetype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLLogbasetype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLLogbasetype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLLogbasetype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLLogbasetype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLLogbasetype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLLogbasetype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLLogbasetype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLLogbasetype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLLogbasetype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLLogbasetype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLLogbasetype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLLogbasetype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLLogbasetype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLLogbasetype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLLogbasetype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLLogbasetype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLLogbasetype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLLogbasetype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLLogbasetype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLLogbasetype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLLogbasetype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLLogbasetype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLLogbasetype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLLogbasetype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLLogbasetype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLLogbasetype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLLogbasetype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLLogbasetype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLLogbasetype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLLogbasetype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLLogbasetype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLLogbasetype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLLogbasetype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLLogbasetype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLLogbasetype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLLogbasetype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLLogbasetype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLLogbasetype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLLogbasetype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLLogbasetype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLLogbasetype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLLogbasetype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLLogbasetype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLLogbasetype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLLogbasetype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLLogbasetype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLLogbasetype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLLogbasetype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLLogbasetype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLLogbasetype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLLogbasetype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLLogbasetype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLLogbasetype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLLogbasetype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLLogbasetype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLLogbasetype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLLogbasetype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLLogbasetype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLLogbasetype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLLogbasetype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLLogbasetype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLLogbasetype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLLogbasetype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLLogbasetype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLLogbasetype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLLogbasetype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLLogbasetype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLLogbasetype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLLogbasetype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLLogbasetype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLLogbasetype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLLogbasetype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLLogbasetype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLLogbasetype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLLogbasetype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLLogbasetype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLLogbasetype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLLogbasetype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLLogbasetype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLLogbasetype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLLogbasetype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLLogbasetype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLLogbasetype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLLogbasetype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLLogbasetype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLLogbasetype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLLogbasetype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLLogbasetype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLLogbasetype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLLogbasetype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLInttype }

function TXMLInttype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLInttype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLInttype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLInttype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLInttype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLInttype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLInttype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLInttype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLInttype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLInttype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLInttype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLInttype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLInttype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLInttype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLDifftype }

function TXMLDifftype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLDifftype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLDifftype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLDifftype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLDifftype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLDifftype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLDifftype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLDifftype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLDifftype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLDifftype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLDifftype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLDifftype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLDifftype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLDifftype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLPartialdifftype }

function TXMLPartialdifftype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLPartialdifftype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLPartialdifftype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLPartialdifftype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLPartialdifftype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLPartialdifftype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLPartialdifftype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLPartialdifftype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLPartialdifftype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLPartialdifftype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLPartialdifftype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLPartialdifftype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLPartialdifftype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLPartialdifftype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLLimittype }

function TXMLLimittype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLLimittype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLLimittype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLLimittype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLLimittype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLLimittype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLLimittype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLLimittype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLLimittype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLLimittype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLLimittype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLimittype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLimittype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLLimittype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLLowlimittype }

procedure TXMLLowlimittype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLLowlimittype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLLowlimittype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLLowlimittype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLLowlimittype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLLowlimittype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLLowlimittype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLLowlimittype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLLowlimittype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLLowlimittype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLLowlimittype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLLowlimittype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLowlimittype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLowlimittype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLLowlimittype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLLowlimittype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLLowlimittype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLLowlimittype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLLowlimittype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLLowlimittype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLLowlimittype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLLowlimittype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLLowlimittype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLLowlimittype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLLowlimittype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLLowlimittype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLLowlimittype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLLowlimittype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLLowlimittype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLLowlimittype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLLowlimittype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLLowlimittype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLLowlimittype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLLowlimittype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLLowlimittype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLLowlimittype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLLowlimittype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLLowlimittype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLLowlimittype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLLowlimittype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLLowlimittype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLLowlimittype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLLowlimittype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLLowlimittype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLLowlimittype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLLowlimittype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLLowlimittype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLLowlimittype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLLowlimittype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLLowlimittype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLLowlimittype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLLowlimittype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLLowlimittype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLLowlimittype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLLowlimittype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLLowlimittype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLLowlimittype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLLowlimittype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLLowlimittype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLLowlimittype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLLowlimittype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLLowlimittype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLLowlimittype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLLowlimittype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLLowlimittype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLLowlimittype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLLowlimittype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLLowlimittype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLLowlimittype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLLowlimittype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLLowlimittype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLLowlimittype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLLowlimittype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLLowlimittype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLLowlimittype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLLowlimittype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLLowlimittype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLLowlimittype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLLowlimittype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLLowlimittype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLLowlimittype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLLowlimittype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLLowlimittype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLLowlimittype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLLowlimittype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLLowlimittype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLLowlimittype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLLowlimittype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLLowlimittype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLLowlimittype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLLowlimittype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLLowlimittype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLLowlimittype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLLowlimittype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLLowlimittype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLLowlimittype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLLowlimittype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLLowlimittype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLLowlimittype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLLowlimittype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLLowlimittype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLLowlimittype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLLowlimittype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLLowlimittype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLLowlimittype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLLowlimittype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLLowlimittype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLLowlimittype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLLowlimittype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLLowlimittype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLLowlimittype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLLowlimittype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLLowlimittype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLLowlimittype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLLowlimittype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLLowlimittype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLLowlimittype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLLowlimittype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLLowlimittype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLUplimittype }

procedure TXMLUplimittype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLUplimittype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLUplimittype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLUplimittype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLUplimittype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLUplimittype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLUplimittype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLUplimittype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLUplimittype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLUplimittype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLUplimittype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLUplimittype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLUplimittype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLUplimittype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLUplimittype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLUplimittype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLUplimittype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLUplimittype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLUplimittype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLUplimittype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLUplimittype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLUplimittype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLUplimittype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLUplimittype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLUplimittype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLUplimittype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLUplimittype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLUplimittype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLUplimittype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLUplimittype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLUplimittype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLUplimittype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLUplimittype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLUplimittype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLUplimittype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLUplimittype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLUplimittype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLUplimittype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLUplimittype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLUplimittype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLUplimittype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLUplimittype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLUplimittype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLUplimittype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLUplimittype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLUplimittype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLUplimittype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLUplimittype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLUplimittype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLUplimittype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLUplimittype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLUplimittype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLUplimittype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLUplimittype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLUplimittype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLUplimittype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLUplimittype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLUplimittype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLUplimittype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLUplimittype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLUplimittype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLUplimittype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLUplimittype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLUplimittype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLUplimittype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLUplimittype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLUplimittype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLUplimittype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLUplimittype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLUplimittype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLUplimittype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLUplimittype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLUplimittype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLUplimittype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLUplimittype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLUplimittype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLUplimittype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLUplimittype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLUplimittype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLUplimittype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLUplimittype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLUplimittype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLUplimittype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLUplimittype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLUplimittype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLUplimittype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLUplimittype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLUplimittype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLUplimittype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLUplimittype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLUplimittype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLUplimittype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLUplimittype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLUplimittype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLUplimittype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLUplimittype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLUplimittype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLUplimittype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLUplimittype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLUplimittype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLUplimittype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLUplimittype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLUplimittype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLUplimittype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLUplimittype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLUplimittype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLUplimittype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLUplimittype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLUplimittype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLUplimittype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLUplimittype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLUplimittype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLUplimittype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLUplimittype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLUplimittype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLUplimittype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLUplimittype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLUplimittype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLUplimittype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLTendstotype }

function TXMLTendstotype.Get_Type_: UnicodeString;
begin
  Result := Params['type'];
end;

procedure TXMLTendstotype.Set_Type_(Value: UnicodeString);
begin
  Params['type'] := Value;
end;

function TXMLTendstotype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLTendstotype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLTendstotype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLTendstotype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLTendstotype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLTendstotype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLTendstotype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLTendstotype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLTendstotype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLTendstotype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLTendstotype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLTendstotype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLTendstotype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLTendstotype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLVectortype }

procedure TXMLVectortype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLVectortype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLVectortype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLVectortype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLVectortype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLVectortype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLVectortype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLVectortype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLVectortype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLVectortype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLVectortype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLVectortype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLVectortype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLVectortype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLVectortype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLVectortype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLVectortype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLVectortype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLVectortype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLVectortype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLVectortype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLVectortype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLVectortype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLVectortype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLVectortype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLVectortype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLVectortype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLVectortype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLVectortype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLVectortype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLVectortype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLVectortype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLVectortype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLVectortype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLVectortype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLVectortype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLVectortype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLVectortype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLVectortype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLVectortype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLVectortype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLVectortype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLVectortype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLVectortype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLVectortype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLVectortype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLVectortype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLVectortype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLVectortype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLVectortype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLVectortype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLVectortype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLVectortype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLVectortype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLVectortype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLVectortype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLVectortype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLVectortype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLVectortype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLVectortype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLVectortype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLVectortype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLVectortype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLVectortype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLVectortype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLVectortype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLVectortype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLVectortype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLVectortype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLVectortype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLVectortype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLVectortype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLVectortype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLVectortype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLVectortype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLVectortype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLVectortype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLVectortype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLVectortype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLVectortype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLVectortype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLVectortype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLVectortype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLVectortype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLVectortype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLVectortype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLVectortype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLVectortype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLVectortype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLVectortype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLVectortype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLVectortype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLVectortype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLVectortype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLVectortype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLVectortype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLVectortype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLVectortype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLVectortype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLVectortype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLVectortype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLVectortype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLVectortype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLVectortype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLVectortype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLVectortype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLVectortype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLVectortype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLVectortype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLVectortype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLVectortype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLVectortype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLVectortype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLVectortype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLVectortype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLMatrixtype }

procedure TXMLMatrixtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('matrixrow', TXMLMatrixrowtype);
  inherited;
end;

function TXMLMatrixtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMatrixtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMatrixtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMatrixtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMatrixtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMatrixtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMatrixtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMatrixtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMatrixtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMatrixtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMatrixtype.Get_Matrixrow: IXMLMatrixrowtype;
begin
  Result := Nodes['matrixrow'] as IXMLMatrixrowtype;
end;

{ TXMLMatrixrowtype }

procedure TXMLMatrixrowtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLMatrixrowtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMatrixrowtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMatrixrowtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMatrixrowtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMatrixrowtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMatrixrowtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMatrixrowtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMatrixrowtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMatrixrowtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMatrixrowtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMatrixrowtype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMatrixrowtype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMatrixrowtype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMatrixrowtype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMatrixrowtype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMatrixrowtype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMatrixrowtype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMatrixrowtype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMatrixrowtype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMatrixrowtype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMatrixrowtype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMatrixrowtype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMatrixrowtype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMatrixrowtype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMatrixrowtype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMatrixrowtype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMatrixrowtype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMatrixrowtype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMatrixrowtype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMatrixrowtype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMatrixrowtype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMatrixrowtype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMatrixrowtype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMatrixrowtype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMatrixrowtype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMatrixrowtype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMatrixrowtype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMatrixrowtype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMatrixrowtype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMatrixrowtype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMatrixrowtype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMatrixrowtype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMatrixrowtype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMatrixrowtype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMatrixrowtype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMatrixrowtype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMatrixrowtype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMatrixrowtype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMatrixrowtype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMatrixrowtype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMatrixrowtype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMatrixrowtype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMatrixrowtype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMatrixrowtype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMatrixrowtype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMatrixrowtype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMatrixrowtype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMatrixrowtype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMatrixrowtype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMatrixrowtype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMatrixrowtype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMatrixrowtype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMatrixrowtype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMatrixrowtype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMatrixrowtype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMatrixrowtype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMatrixrowtype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMatrixrowtype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMatrixrowtype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMatrixrowtype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMatrixrowtype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMatrixrowtype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMatrixrowtype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMatrixrowtype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMatrixrowtype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMatrixrowtype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMatrixrowtype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMatrixrowtype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMatrixrowtype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMatrixrowtype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMatrixrowtype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMatrixrowtype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMatrixrowtype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMatrixrowtype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMatrixrowtype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMatrixrowtype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMatrixrowtype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLMatrixrowtype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMatrixrowtype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMatrixrowtype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMatrixrowtype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMatrixrowtype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMatrixrowtype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMatrixrowtype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMatrixrowtype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMatrixrowtype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMatrixrowtype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMatrixrowtype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMatrixrowtype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMatrixrowtype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMatrixrowtype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMatrixrowtype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMatrixrowtype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMatrixrowtype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMatrixrowtype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMatrixrowtype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMatrixrowtype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMatrixrowtype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMatrixrowtype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMatrixrowtype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMatrixrowtype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMatrixrowtype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMatrixrowtype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMatrixrowtype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLDeterminanttype }

function TXMLDeterminanttype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLDeterminanttype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLDeterminanttype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLDeterminanttype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLDeterminanttype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLDeterminanttype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLDeterminanttype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLDeterminanttype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLDeterminanttype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLDeterminanttype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLDeterminanttype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLDeterminanttype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLDeterminanttype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLDeterminanttype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLTransposetype }

function TXMLTransposetype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLTransposetype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLTransposetype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLTransposetype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLTransposetype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLTransposetype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLTransposetype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLTransposetype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLTransposetype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLTransposetype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLTransposetype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLTransposetype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLTransposetype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLTransposetype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLSelectortype }

function TXMLSelectortype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLSelectortype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLSelectortype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLSelectortype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLSelectortype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLSelectortype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLSelectortype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLSelectortype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLSelectortype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLSelectortype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLSelectortype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLSelectortype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLSelectortype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLSelectortype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLVectorproducttype }

function TXMLVectorproducttype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLVectorproducttype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLVectorproducttype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLVectorproducttype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLVectorproducttype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLVectorproducttype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLVectorproducttype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLVectorproducttype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLVectorproducttype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLVectorproducttype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLVectorproducttype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLVectorproducttype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLVectorproducttype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLVectorproducttype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLScalarproducttype }

function TXMLScalarproducttype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLScalarproducttype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLScalarproducttype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLScalarproducttype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLScalarproducttype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLScalarproducttype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLScalarproducttype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLScalarproducttype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLScalarproducttype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLScalarproducttype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLScalarproducttype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLScalarproducttype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLScalarproducttype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLScalarproducttype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLOuterproducttype }

function TXMLOuterproducttype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLOuterproducttype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLOuterproducttype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLOuterproducttype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLOuterproducttype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLOuterproducttype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLOuterproducttype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLOuterproducttype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLOuterproducttype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLOuterproducttype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLOuterproducttype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLOuterproducttype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLOuterproducttype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLOuterproducttype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLDivergencetype }

function TXMLDivergencetype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLDivergencetype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLDivergencetype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLDivergencetype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLDivergencetype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLDivergencetype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLDivergencetype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLDivergencetype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLDivergencetype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLDivergencetype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLDivergencetype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLDivergencetype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLDivergencetype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLDivergencetype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLGradtype }

function TXMLGradtype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLGradtype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLGradtype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLGradtype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLGradtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLGradtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLGradtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLGradtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLGradtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLGradtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLGradtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLGradtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLGradtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLGradtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLCurltype }

function TXMLCurltype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLCurltype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLCurltype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLCurltype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLCurltype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLCurltype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLCurltype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLCurltype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLCurltype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLCurltype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLCurltype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLCurltype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLCurltype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLCurltype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLLaplaciantype }

function TXMLLaplaciantype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLLaplaciantype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLLaplaciantype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLLaplaciantype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLLaplaciantype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLLaplaciantype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLLaplaciantype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLLaplaciantype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLLaplaciantype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLLaplaciantype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLLaplaciantype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLaplaciantype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLaplaciantype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLLaplaciantype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLMeantype }

function TXMLMeantype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLMeantype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLMeantype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLMeantype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLMeantype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMeantype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMeantype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMeantype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMeantype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMeantype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMeantype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMeantype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMeantype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMeantype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLSdevtype }

function TXMLSdevtype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLSdevtype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLSdevtype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLSdevtype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLSdevtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLSdevtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLSdevtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLSdevtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLSdevtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLSdevtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLSdevtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLSdevtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLSdevtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLSdevtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLVariancetype }

function TXMLVariancetype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLVariancetype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLVariancetype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLVariancetype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLVariancetype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLVariancetype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLVariancetype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLVariancetype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLVariancetype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLVariancetype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLVariancetype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLVariancetype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLVariancetype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLVariancetype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLMediantype }

function TXMLMediantype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLMediantype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLMediantype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLMediantype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLMediantype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMediantype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMediantype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMediantype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMediantype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMediantype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMediantype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMediantype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMediantype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMediantype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLModetype }

function TXMLModetype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLModetype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLModetype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLModetype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLModetype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLModetype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLModetype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLModetype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLModetype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLModetype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLModetype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLModetype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLModetype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLModetype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLMomenttype }

function TXMLMomenttype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLMomenttype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLMomenttype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLMomenttype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLMomenttype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMomenttype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMomenttype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMomenttype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMomenttype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMomenttype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMomenttype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMomenttype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMomenttype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMomenttype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLMomentabouttype }

procedure TXMLMomentabouttype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLMomentabouttype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLMomentabouttype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLMomentabouttype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLMomentabouttype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLMomentabouttype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMomentabouttype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMomentabouttype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMomentabouttype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMomentabouttype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMomentabouttype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMomentabouttype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMomentabouttype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMomentabouttype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMomentabouttype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMomentabouttype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLMomentabouttype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLMomentabouttype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLMomentabouttype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLMomentabouttype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLMomentabouttype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLMomentabouttype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLMomentabouttype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLMomentabouttype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLMomentabouttype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLMomentabouttype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLMomentabouttype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLMomentabouttype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLMomentabouttype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLMomentabouttype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLMomentabouttype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLMomentabouttype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLMomentabouttype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLMomentabouttype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLMomentabouttype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLMomentabouttype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLMomentabouttype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLMomentabouttype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLMomentabouttype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLMomentabouttype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLMomentabouttype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLMomentabouttype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLMomentabouttype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLMomentabouttype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLMomentabouttype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLMomentabouttype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLMomentabouttype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLMomentabouttype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLMomentabouttype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLMomentabouttype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLMomentabouttype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLMomentabouttype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLMomentabouttype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLMomentabouttype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLMomentabouttype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLMomentabouttype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLMomentabouttype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLMomentabouttype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLMomentabouttype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLMomentabouttype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLMomentabouttype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLMomentabouttype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLMomentabouttype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLMomentabouttype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLMomentabouttype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLMomentabouttype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLMomentabouttype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLMomentabouttype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLMomentabouttype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLMomentabouttype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLMomentabouttype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLMomentabouttype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLMomentabouttype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLMomentabouttype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLMomentabouttype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLMomentabouttype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLMomentabouttype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLMomentabouttype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLMomentabouttype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLMomentabouttype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLMomentabouttype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLMomentabouttype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLMomentabouttype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLMomentabouttype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLMomentabouttype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLMomentabouttype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLMomentabouttype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLMomentabouttype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLMomentabouttype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLMomentabouttype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLMomentabouttype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLMomentabouttype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLMomentabouttype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLMomentabouttype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLMomentabouttype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLMomentabouttype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLMomentabouttype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLMomentabouttype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLMomentabouttype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLMomentabouttype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLMomentabouttype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLMomentabouttype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLMomentabouttype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLMomentabouttype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLMomentabouttype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLMomentabouttype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLMomentabouttype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLMomentabouttype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLMomentabouttype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLMomentabouttype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLMomentabouttype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLMomentabouttype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLMomentabouttype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLMomentabouttype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLMomentabouttype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLMomentabouttype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLMomentabouttype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLMomentabouttype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLMomentabouttype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLApplytype }

procedure TXMLApplytype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLApplytype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLApplytype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLApplytype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLApplytype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLApplytype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLApplytype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLApplytype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLApplytype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLApplytype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLApplytype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLApplytype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLApplytype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLApplytype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLApplytype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLApplytype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLApplytype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLApplytype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLApplytype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLApplytype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLApplytype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLApplytype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLApplytype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLApplytype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLApplytype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLApplytype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLApplytype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLApplytype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLApplytype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLApplytype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLApplytype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLApplytype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLApplytype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLApplytype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLApplytype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLApplytype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLApplytype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLApplytype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLApplytype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLApplytype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLApplytype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLApplytype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLApplytype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLApplytype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLApplytype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLApplytype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLApplytype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLApplytype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLApplytype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLApplytype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLApplytype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLApplytype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLApplytype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLApplytype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLApplytype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLApplytype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLApplytype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLApplytype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLApplytype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLApplytype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLApplytype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLApplytype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLApplytype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLApplytype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLApplytype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLApplytype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLApplytype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLApplytype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLApplytype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLApplytype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLApplytype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLApplytype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLApplytype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLApplytype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLApplytype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLApplytype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLApplytype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLApplytype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLApplytype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLApplytype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLApplytype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLApplytype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLApplytype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLApplytype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLApplytype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLApplytype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLApplytype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLApplytype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLApplytype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLApplytype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLApplytype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLApplytype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLApplytype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLApplytype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLApplytype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLApplytype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLApplytype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLApplytype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLApplytype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLApplytype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLApplytype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLApplytype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLApplytype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLApplytype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLApplytype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLApplytype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLApplytype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLApplytype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLApplytype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLApplytype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLApplytype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLApplytype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLApplytype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLApplytype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLApplytype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLIntervaltype }

procedure TXMLIntervaltype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLIntervaltype.Get_Closure: UnicodeString;
begin
  Result := Params['closure'];
end;

procedure TXMLIntervaltype.Set_Closure(Value: UnicodeString);
begin
  Params['closure'] := Value;
end;

function TXMLIntervaltype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLIntervaltype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLIntervaltype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLIntervaltype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLIntervaltype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLIntervaltype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLIntervaltype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLIntervaltype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLIntervaltype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLIntervaltype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLIntervaltype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLIntervaltype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLIntervaltype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLIntervaltype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLIntervaltype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLIntervaltype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLIntervaltype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLIntervaltype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLIntervaltype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLIntervaltype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLIntervaltype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLIntervaltype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLIntervaltype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLIntervaltype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLIntervaltype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLIntervaltype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLIntervaltype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLIntervaltype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLIntervaltype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLIntervaltype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLIntervaltype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLIntervaltype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLIntervaltype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLIntervaltype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLIntervaltype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLIntervaltype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLIntervaltype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLIntervaltype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLIntervaltype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLIntervaltype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLIntervaltype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLIntervaltype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLIntervaltype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLIntervaltype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLIntervaltype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLIntervaltype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLIntervaltype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLIntervaltype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLIntervaltype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLIntervaltype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLIntervaltype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLIntervaltype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLIntervaltype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLIntervaltype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLIntervaltype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLIntervaltype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLIntervaltype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLIntervaltype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLIntervaltype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLIntervaltype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLIntervaltype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLIntervaltype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLIntervaltype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLIntervaltype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLIntervaltype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLIntervaltype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLIntervaltype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLIntervaltype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLIntervaltype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLIntervaltype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLIntervaltype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLIntervaltype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLIntervaltype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLIntervaltype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLIntervaltype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLIntervaltype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLIntervaltype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLIntervaltype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLIntervaltype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLIntervaltype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLIntervaltype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLIntervaltype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLIntervaltype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLIntervaltype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLIntervaltype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLIntervaltype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLIntervaltype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLIntervaltype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLIntervaltype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLIntervaltype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLIntervaltype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLIntervaltype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLIntervaltype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLIntervaltype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLIntervaltype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLIntervaltype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLIntervaltype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLIntervaltype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLIntervaltype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLIntervaltype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLIntervaltype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLIntervaltype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLIntervaltype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLIntervaltype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLIntervaltype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLIntervaltype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLIntervaltype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLIntervaltype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLIntervaltype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLIntervaltype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLIntervaltype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLIntervaltype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLIntervaltype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLIntervaltype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLInversetype }

function TXMLInversetype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLInversetype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLInversetype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLInversetype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLInversetype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLInversetype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLInversetype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLInversetype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLInversetype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLInversetype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLInversetype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLInversetype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLInversetype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLInversetype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLConditiontype }

procedure TXMLConditiontype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLConditiontype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLConditiontype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLConditiontype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLConditiontype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLConditiontype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLConditiontype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLConditiontype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLConditiontype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLConditiontype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLConditiontype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLConditiontype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLConditiontype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLConditiontype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLConditiontype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLConditiontype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLConditiontype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLConditiontype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLConditiontype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLConditiontype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLConditiontype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLConditiontype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLConditiontype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLConditiontype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLConditiontype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLConditiontype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLConditiontype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLConditiontype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLConditiontype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLConditiontype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLConditiontype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLConditiontype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLConditiontype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLConditiontype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLConditiontype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLConditiontype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLConditiontype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLConditiontype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLConditiontype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLConditiontype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLConditiontype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLConditiontype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLConditiontype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLConditiontype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLConditiontype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLConditiontype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLConditiontype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLConditiontype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLConditiontype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLConditiontype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLConditiontype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLConditiontype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLConditiontype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLConditiontype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLConditiontype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLConditiontype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLConditiontype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLConditiontype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLConditiontype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLConditiontype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLConditiontype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLConditiontype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLConditiontype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLConditiontype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLConditiontype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLConditiontype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLConditiontype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLConditiontype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLConditiontype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLConditiontype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLConditiontype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLConditiontype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLConditiontype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLConditiontype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLConditiontype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLConditiontype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLConditiontype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLConditiontype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLConditiontype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLConditiontype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLConditiontype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLConditiontype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLConditiontype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLConditiontype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLConditiontype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLConditiontype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLConditiontype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLConditiontype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLConditiontype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLConditiontype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLConditiontype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLConditiontype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLConditiontype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLConditiontype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLConditiontype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLConditiontype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLConditiontype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLConditiontype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLConditiontype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLConditiontype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLConditiontype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLConditiontype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLConditiontype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLConditiontype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLConditiontype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLConditiontype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLConditiontype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLConditiontype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLConditiontype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLDeclaretype }

procedure TXMLDeclaretype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLDeclaretype.Get_Type_: UnicodeString;
begin
  Result := Params['type'];
end;

procedure TXMLDeclaretype.Set_Type_(Value: UnicodeString);
begin
  Params['type'] := Value;
end;

function TXMLDeclaretype.Get_Scope: UnicodeString;
begin
  Result := Params['scope'];
end;

procedure TXMLDeclaretype.Set_Scope(Value: UnicodeString);
begin
  Params['scope'] := Value;
end;

function TXMLDeclaretype.Get_Nargs: LongWord;
begin
  Result := Params['nargs'];
end;

procedure TXMLDeclaretype.Set_Nargs(Value: LongWord);
begin
  Params['nargs'] := Value;
end;

function TXMLDeclaretype.Get_Occurrence: UnicodeString;
begin
  Result := Params['occurrence'];
end;

procedure TXMLDeclaretype.Set_Occurrence(Value: UnicodeString);
begin
  Params['occurrence'] := Value;
end;

function TXMLDeclaretype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLDeclaretype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLDeclaretype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLDeclaretype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLDeclaretype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLDeclaretype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLDeclaretype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLDeclaretype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLDeclaretype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLDeclaretype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLDeclaretype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLDeclaretype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLDeclaretype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLDeclaretype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLDeclaretype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLDeclaretype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLDeclaretype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLDeclaretype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLDeclaretype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLDeclaretype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLDeclaretype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLDeclaretype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLDeclaretype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLDeclaretype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLDeclaretype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLDeclaretype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLDeclaretype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLDeclaretype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLDeclaretype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLDeclaretype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLDeclaretype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLDeclaretype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLDeclaretype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLDeclaretype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLDeclaretype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLDeclaretype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLDeclaretype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLDeclaretype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLDeclaretype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLDeclaretype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLDeclaretype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLDeclaretype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLDeclaretype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLDeclaretype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLDeclaretype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLDeclaretype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLDeclaretype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLDeclaretype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLDeclaretype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLDeclaretype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLDeclaretype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLDeclaretype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLDeclaretype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLDeclaretype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLDeclaretype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLDeclaretype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLDeclaretype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLDeclaretype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLDeclaretype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLDeclaretype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLDeclaretype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLDeclaretype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLDeclaretype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLDeclaretype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLDeclaretype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLDeclaretype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLDeclaretype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLDeclaretype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLDeclaretype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLDeclaretype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLDeclaretype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLDeclaretype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLDeclaretype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLDeclaretype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLDeclaretype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLDeclaretype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLDeclaretype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLDeclaretype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLDeclaretype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLDeclaretype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLDeclaretype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLDeclaretype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLDeclaretype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLDeclaretype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLDeclaretype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLDeclaretype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLDeclaretype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLDeclaretype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLDeclaretype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLDeclaretype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLDeclaretype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLDeclaretype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLDeclaretype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLDeclaretype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLDeclaretype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLDeclaretype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLDeclaretype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLDeclaretype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLDeclaretype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLDeclaretype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLDeclaretype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLDeclaretype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLDeclaretype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLDeclaretype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLDeclaretype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLDeclaretype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLDeclaretype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLDeclaretype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLLambdatype }

procedure TXMLLambdatype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLLambdatype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLLambdatype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLLambdatype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLLambdatype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLLambdatype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLLambdatype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLLambdatype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLambdatype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLambdatype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLLambdatype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLLambdatype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLLambdatype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLLambdatype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLLambdatype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLLambdatype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLLambdatype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLLambdatype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLLambdatype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLLambdatype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLLambdatype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLLambdatype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLLambdatype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLLambdatype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLLambdatype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLLambdatype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLLambdatype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLLambdatype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLLambdatype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLLambdatype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLLambdatype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLLambdatype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLLambdatype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLLambdatype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLLambdatype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLLambdatype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLLambdatype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLLambdatype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLLambdatype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLLambdatype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLLambdatype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLLambdatype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLLambdatype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLLambdatype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLLambdatype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLLambdatype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLLambdatype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLLambdatype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLLambdatype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLLambdatype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLLambdatype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLLambdatype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLLambdatype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLLambdatype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLLambdatype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLLambdatype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLLambdatype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLLambdatype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLLambdatype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLLambdatype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLLambdatype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLLambdatype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLLambdatype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLLambdatype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLLambdatype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLLambdatype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLLambdatype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLLambdatype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLLambdatype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLLambdatype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLLambdatype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLLambdatype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLLambdatype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLLambdatype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLLambdatype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLLambdatype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLLambdatype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLLambdatype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLLambdatype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLLambdatype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLLambdatype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLLambdatype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLLambdatype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLLambdatype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLLambdatype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLLambdatype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLLambdatype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLLambdatype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLLambdatype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLLambdatype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLLambdatype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLLambdatype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLLambdatype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLLambdatype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLLambdatype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLLambdatype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLLambdatype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLLambdatype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLLambdatype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLLambdatype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLLambdatype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLLambdatype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLLambdatype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLLambdatype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLLambdatype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLLambdatype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLLambdatype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLLambdatype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLLambdatype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLLambdatype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLLambdatype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLLambdatype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLLambdatype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLLambdatype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLLambdatype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLPiecewisetype }

procedure TXMLPiecewisetype.DoRegisterChildClasses;
begin
  FClassesTree.Add('piece', TXMLPiecetype);
  FClassesTree.Add('otherwise', TXMLOtherwisetype);
  FPiece := CreateFilter(TXMLPiecetypeList, TXMLPiecetype, IXMLPiecetype) as IXMLPiecetypeList;
  inherited;
end;

function TXMLPiecewisetype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLPiecewisetype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLPiecewisetype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLPiecewisetype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLPiecewisetype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLPiecewisetype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLPiecewisetype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLPiecewisetype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLPiecewisetype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLPiecewisetype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLPiecewisetype.Get_Piece: IXMLPiecetypeList;
begin
  Result := FPiece;
end;

function TXMLPiecewisetype.Get_Otherwise: IXMLOtherwisetype;
begin
  Result := Nodes['otherwise'] as IXMLOtherwisetype;
end;

{ TXMLPiecetype }

procedure TXMLPiecetype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLPiecetype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLPiecetype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLPiecetype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLPiecetype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLPiecetype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLPiecetype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLPiecetype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLPiecetype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLPiecetype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLPiecetype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLPiecetype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLPiecetype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLPiecetype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLPiecetype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLPiecetype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLPiecetype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLPiecetype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLPiecetype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLPiecetype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLPiecetype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLPiecetype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLPiecetype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLPiecetype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLPiecetype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLPiecetype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLPiecetype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLPiecetype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLPiecetype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLPiecetype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLPiecetype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLPiecetype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLPiecetype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLPiecetype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLPiecetype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLPiecetype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLPiecetype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLPiecetype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLPiecetype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLPiecetype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLPiecetype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLPiecetype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLPiecetype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLPiecetype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLPiecetype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLPiecetype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLPiecetype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLPiecetype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLPiecetype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLPiecetype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLPiecetype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLPiecetype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLPiecetype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLPiecetype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLPiecetype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLPiecetype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLPiecetype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLPiecetype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLPiecetype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLPiecetype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLPiecetype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLPiecetype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLPiecetype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLPiecetype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLPiecetype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLPiecetype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLPiecetype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLPiecetype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLPiecetype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLPiecetype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLPiecetype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLPiecetype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLPiecetype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLPiecetype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLPiecetype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLPiecetype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLPiecetype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLPiecetype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLPiecetype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLPiecetype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLPiecetype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLPiecetype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLPiecetype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLPiecetype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLPiecetype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLPiecetype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLPiecetype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLPiecetype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLPiecetype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLPiecetype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLPiecetype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLPiecetype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLPiecetype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLPiecetype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLPiecetype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLPiecetype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLPiecetype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLPiecetype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLPiecetype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLPiecetype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLPiecetype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLPiecetype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLPiecetype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLPiecetype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLPiecetype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLPiecetypeList }

function TXMLPiecetypeList.Add: IXMLPiecetype;
begin
  Result := AddItem(-1) as IXMLPiecetype;
end;

function TXMLPiecetypeList.Insert(const Index: Integer): IXMLPiecetype;
begin
  Result := AddItem(Index) as IXMLPiecetype;
end;

function TXMLPiecetypeList.Get_Item(Index: Integer): IXMLPiecetype;
begin
  Result := Nodes[Index] as IXMLPiecetype;
end;

{ TXMLBvartype }

procedure TXMLBvartype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLBvartype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLBvartype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLBvartype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLBvartype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLBvartype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLBvartype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLBvartype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLBvartype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLBvartype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLBvartype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLBvartype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLBvartype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLBvartype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLBvartype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLBvartype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLBvartype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLBvartype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLBvartype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLBvartype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLBvartype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLBvartype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLBvartype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLBvartype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLBvartype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLBvartype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLBvartype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLBvartype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLBvartype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLBvartype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLBvartype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLBvartype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLBvartype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLBvartype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLBvartype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLBvartype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLBvartype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLBvartype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLBvartype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLBvartype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLBvartype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLBvartype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLBvartype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLBvartype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLBvartype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLBvartype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLBvartype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLBvartype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLBvartype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLBvartype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLBvartype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLBvartype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLBvartype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLBvartype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLBvartype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLBvartype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLBvartype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLBvartype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLBvartype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLBvartype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLBvartype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLBvartype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLBvartype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLBvartype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLBvartype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLBvartype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLBvartype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLBvartype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLBvartype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLBvartype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLBvartype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLBvartype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLBvartype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLBvartype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLBvartype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLBvartype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLBvartype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLBvartype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLBvartype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLBvartype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLBvartype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLBvartype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLBvartype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLBvartype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLBvartype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLBvartype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLBvartype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLBvartype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLBvartype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLBvartype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLBvartype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLBvartype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLBvartype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLBvartype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLBvartype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLBvartype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLBvartype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLBvartype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLBvartype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLBvartype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLBvartype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLBvartype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLBvartype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLBvartype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLBvartype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLBvartype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLBvartype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLBvartype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLBvartype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLBvartype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLBvartype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLBvartype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLBvartype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLBvartype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLBvartype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLDegreetype }

procedure TXMLDegreetype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLDegreetype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLDegreetype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLDegreetype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLDegreetype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLDegreetype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLDegreetype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLDegreetype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLDegreetype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLDegreetype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLDegreetype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLDegreetype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLDegreetype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLDegreetype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLDegreetype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLDegreetype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLDegreetype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLDegreetype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLDegreetype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLDegreetype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLDegreetype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLDegreetype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLDegreetype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLDegreetype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLDegreetype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLDegreetype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLDegreetype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLDegreetype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLDegreetype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLDegreetype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLDegreetype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLDegreetype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLDegreetype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLDegreetype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLDegreetype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLDegreetype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLDegreetype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLDegreetype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLDegreetype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLDegreetype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLDegreetype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLDegreetype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLDegreetype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLDegreetype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLDegreetype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLDegreetype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLDegreetype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLDegreetype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLDegreetype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLDegreetype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLDegreetype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLDegreetype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLDegreetype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLDegreetype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLDegreetype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLDegreetype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLDegreetype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLDegreetype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLDegreetype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLDegreetype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLDegreetype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLDegreetype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLDegreetype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLDegreetype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLDegreetype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLDegreetype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLDegreetype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLDegreetype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLDegreetype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLDegreetype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLDegreetype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLDegreetype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLDegreetype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLDegreetype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLDegreetype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLDegreetype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLDegreetype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLDegreetype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLDegreetype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLDegreetype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLDegreetype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLDegreetype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLDegreetype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLDegreetype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLDegreetype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLDegreetype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLDegreetype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLDegreetype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLDegreetype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLDegreetype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLDegreetype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLDegreetype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLDegreetype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLDegreetype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLDegreetype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLDegreetype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLDegreetype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLDegreetype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLDegreetype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLDegreetype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLDegreetype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLDegreetype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLDegreetype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLDegreetype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLDegreetype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLDegreetype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLDegreetype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLDegreetype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLDegreetype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLDegreetype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLDegreetype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLDegreetype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLDegreetype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLDegreetype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLDegreetype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLSemanticstype }

procedure TXMLSemanticstype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  FClassesTree.Add('annotation', TXMLAnnotationtype);
  FClassesTree.Add('annotation-xml', TXMLAnnotationxmltype);
  inherited;
end;

function TXMLSemanticstype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLSemanticstype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLSemanticstype.Get_DefinitionURL: UnicodeString;
begin
  Result := Params['definitionURL'];
end;

procedure TXMLSemanticstype.Set_DefinitionURL(Value: UnicodeString);
begin
  Params['definitionURL'] := Value;
end;

function TXMLSemanticstype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLSemanticstype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLSemanticstype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLSemanticstype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLSemanticstype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLSemanticstype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLSemanticstype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLSemanticstype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLSemanticstype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLSemanticstype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLSemanticstype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLSemanticstype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLSemanticstype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLSemanticstype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLSemanticstype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLSemanticstype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLSemanticstype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLSemanticstype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLSemanticstype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLSemanticstype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLSemanticstype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLSemanticstype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLSemanticstype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLSemanticstype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLSemanticstype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLSemanticstype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLSemanticstype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLSemanticstype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLSemanticstype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLSemanticstype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLSemanticstype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLSemanticstype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLSemanticstype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLSemanticstype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLSemanticstype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLSemanticstype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLSemanticstype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLSemanticstype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLSemanticstype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLSemanticstype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLSemanticstype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLSemanticstype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLSemanticstype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLSemanticstype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLSemanticstype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLSemanticstype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLSemanticstype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLSemanticstype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLSemanticstype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLSemanticstype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLSemanticstype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLSemanticstype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLSemanticstype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLSemanticstype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLSemanticstype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLSemanticstype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLSemanticstype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLSemanticstype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLSemanticstype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLSemanticstype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLSemanticstype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLSemanticstype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLSemanticstype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLSemanticstype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLSemanticstype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLSemanticstype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLSemanticstype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLSemanticstype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLSemanticstype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLSemanticstype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLSemanticstype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLSemanticstype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLSemanticstype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLSemanticstype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLSemanticstype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLSemanticstype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLSemanticstype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLSemanticstype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLSemanticstype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLSemanticstype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLSemanticstype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLSemanticstype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLSemanticstype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLSemanticstype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLSemanticstype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLSemanticstype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLSemanticstype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLSemanticstype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLSemanticstype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLSemanticstype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLSemanticstype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLSemanticstype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLSemanticstype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLSemanticstype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLSemanticstype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLSemanticstype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLSemanticstype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLSemanticstype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLSemanticstype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLSemanticstype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLSemanticstype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLSemanticstype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLSemanticstype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLSemanticstype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLSemanticstype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLSemanticstype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLSemanticstype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLSemanticstype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLSemanticstype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLSemanticstype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLSemanticstype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLSemanticstype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLSemanticstype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLSemanticstype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

function TXMLSemanticstype.Get_Annotation: IXMLAnnotationtype;
begin
  Result := Nodes['annotation'] as IXMLAnnotationtype;
end;

function TXMLSemanticstype.Get_Annotationxml: IXMLAnnotationxmltype;
begin
  Result := Nodes['annotation-xml'] as IXMLAnnotationxmltype;
end;

{ TXMLAnnotationtype }

function TXMLAnnotationtype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLAnnotationtype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLAnnotationtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLAnnotationtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLAnnotationtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLAnnotationtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLAnnotationtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLAnnotationtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLAnnotationtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLAnnotationtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLAnnotationtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLAnnotationtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLAnnotationxmltype }

function TXMLAnnotationxmltype.Get_Encoding: UnicodeString;
begin
  Result := Params['encoding'];
end;

procedure TXMLAnnotationxmltype.Set_Encoding(Value: UnicodeString);
begin
  Params['encoding'] := Value;
end;

function TXMLAnnotationxmltype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLAnnotationxmltype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLAnnotationxmltype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLAnnotationxmltype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLAnnotationxmltype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLAnnotationxmltype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLAnnotationxmltype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLAnnotationxmltype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLAnnotationxmltype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLAnnotationxmltype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

{ TXMLOtherwisetype }

procedure TXMLOtherwisetype.DoRegisterChildClasses;
begin
  FClassesTree.Add('cn', TXMLCntype);
  FClassesTree.Add('ci', TXMLCitype);
  FClassesTree.Add('csymbol', TXMLCsymboltype);
  FClassesTree.Add('abs', TXMLArithtype);
  FClassesTree.Add('conjugate', TXMLArithtype);
  FClassesTree.Add('factorial', TXMLArithtype);
  FClassesTree.Add('arg', TXMLArithtype);
  FClassesTree.Add('real', TXMLArithtype);
  FClassesTree.Add('imaginary', TXMLArithtype);
  FClassesTree.Add('floor', TXMLArithtype);
  FClassesTree.Add('ceiling', TXMLArithtype);
  FClassesTree.Add('quotient', TXMLArithtype);
  FClassesTree.Add('divide', TXMLArithtype);
  FClassesTree.Add('rem', TXMLArithtype);
  FClassesTree.Add('minus', TXMLArithtype);
  FClassesTree.Add('plus', TXMLArithtype);
  FClassesTree.Add('times', TXMLArithtype);
  FClassesTree.Add('power', TXMLArithtype);
  FClassesTree.Add('root', TXMLArithtype);
  FClassesTree.Add('max', TXMLArithtype);
  FClassesTree.Add('min', TXMLArithtype);
  FClassesTree.Add('gcd', TXMLArithtype);
  FClassesTree.Add('lcm', TXMLArithtype);
  FClassesTree.Add('sum', TXMLArithtype);
  FClassesTree.Add('product', TXMLArithtype);
  FClassesTree.Add('compose', TXMLFunctionstype);
  FClassesTree.Add('domain', TXMLFunctionstype);
  FClassesTree.Add('codomain', TXMLFunctionstype);
  FClassesTree.Add('image', TXMLFunctionstype);
  FClassesTree.Add('domainofapplication', TXMLDomainofapplicationtype);
  FClassesTree.Add('ident', TXMLFunctionstype);
  FClassesTree.Add('and', TXMLElementaryfunctionstype);
  FClassesTree.Add('or', TXMLLogictype);
  FClassesTree.Add('xor', TXMLLogictype);
  FClassesTree.Add('not', TXMLLogictype);
  FClassesTree.Add('exists', TXMLLogictype);
  FClassesTree.Add('forall', TXMLLogictype);
  FClassesTree.Add('implies', TXMLLogictype);
  FClassesTree.Add('naturalnumbers', TXMLConstanttype);
  FClassesTree.Add('primes', TXMLConstanttype);
  FClassesTree.Add('integers', TXMLConstanttype);
  FClassesTree.Add('rationals', TXMLConstanttype);
  FClassesTree.Add('reals', TXMLConstanttype);
  FClassesTree.Add('complexes', TXMLConstanttype);
  FClassesTree.Add('emptyset', TXMLConstanttype);
  FClassesTree.Add('exponentiale', TXMLConstanttype);
  FClassesTree.Add('imaginaryi', TXMLConstanttype);
  FClassesTree.Add('pi', TXMLConstanttype);
  FClassesTree.Add('eulergamma', TXMLConstanttype);
  FClassesTree.Add('true', TXMLConstanttype);
  FClassesTree.Add('false', TXMLConstanttype);
  FClassesTree.Add('infinity', TXMLConstanttype);
  FClassesTree.Add('notanumber', TXMLConstanttype);
  FClassesTree.Add('set', TXMLSettype);
  FClassesTree.Add('list', TXMLListtype);
  FClassesTree.Add('union', TXMLUniontype);
  FClassesTree.Add('intersect', TXMLIntersecttype);
  FClassesTree.Add('in', TXMLIntype);
  FClassesTree.Add('notin', TXMLNotintype);
  FClassesTree.Add('subset', TXMLSubsettype);
  FClassesTree.Add('prsubset', TXMLPrsubsettype);
  FClassesTree.Add('notsubset', TXMLNotsubsettype);
  FClassesTree.Add('notprsubset', TXMLNotprsubsettype);
  FClassesTree.Add('setdiff', TXMLSetdifftype);
  FClassesTree.Add('card', TXMLCardtype);
  FClassesTree.Add('cartesianproduct', TXMLCartesianproducttype);
  FClassesTree.Add('eq', TXMLRelationstype);
  FClassesTree.Add('neq', TXMLRelationstype);
  FClassesTree.Add('leq', TXMLRelationstype);
  FClassesTree.Add('lt', TXMLRelationstype);
  FClassesTree.Add('geq', TXMLRelationstype);
  FClassesTree.Add('gt', TXMLRelationstype);
  FClassesTree.Add('equivalent', TXMLRelationstype);
  FClassesTree.Add('approx', TXMLRelationstype);
  FClassesTree.Add('factorof', TXMLRelationstype);
  FClassesTree.Add('exp', TXMLElementaryfunctionstype);
  FClassesTree.Add('ln', TXMLElementaryfunctionstype);
  FClassesTree.Add('log', TXMLElementaryfunctionstype);
  FClassesTree.Add('logbase', TXMLLogbasetype);
  FClassesTree.Add('sin', TXMLElementaryfunctionstype);
  FClassesTree.Add('cos', TXMLElementaryfunctionstype);
  FClassesTree.Add('tan', TXMLElementaryfunctionstype);
  FClassesTree.Add('sec', TXMLElementaryfunctionstype);
  FClassesTree.Add('csc', TXMLElementaryfunctionstype);
  FClassesTree.Add('cot', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsin', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccos', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctan', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsec', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsc', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccot', TXMLElementaryfunctionstype);
  FClassesTree.Add('sinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('cosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('tanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('sech', TXMLElementaryfunctionstype);
  FClassesTree.Add('csch', TXMLElementaryfunctionstype);
  FClassesTree.Add('coth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccosh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccoth', TXMLElementaryfunctionstype);
  FClassesTree.Add('arccsch', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsech', TXMLElementaryfunctionstype);
  FClassesTree.Add('arcsinh', TXMLElementaryfunctionstype);
  FClassesTree.Add('arctanh', TXMLElementaryfunctionstype);
  FClassesTree.Add('int', TXMLInttype);
  FClassesTree.Add('diff', TXMLDifftype);
  FClassesTree.Add('partialdiff', TXMLPartialdifftype);
  FClassesTree.Add('limit', TXMLLimittype);
  FClassesTree.Add('lowlimit', TXMLLowlimittype);
  FClassesTree.Add('uplimit', TXMLUplimittype);
  FClassesTree.Add('tendsto', TXMLTendstotype);
  FClassesTree.Add('vector', TXMLVectortype);
  FClassesTree.Add('matrix', TXMLMatrixtype);
  FClassesTree.Add('determinant', TXMLDeterminanttype);
  FClassesTree.Add('transpose', TXMLTransposetype);
  FClassesTree.Add('selector', TXMLSelectortype);
  FClassesTree.Add('vectorproduct', TXMLVectorproducttype);
  FClassesTree.Add('scalarproduct', TXMLScalarproducttype);
  FClassesTree.Add('outerproduct', TXMLOuterproducttype);
  FClassesTree.Add('divergence', TXMLDivergencetype);
  FClassesTree.Add('grad', TXMLGradtype);
  FClassesTree.Add('curl', TXMLCurltype);
  FClassesTree.Add('laplacian', TXMLLaplaciantype);
  FClassesTree.Add('mean', TXMLMeantype);
  FClassesTree.Add('sdev', TXMLSdevtype);
  FClassesTree.Add('variance', TXMLVariancetype);
  FClassesTree.Add('median', TXMLMediantype);
  FClassesTree.Add('mode', TXMLModetype);
  FClassesTree.Add('moment', TXMLMomenttype);
  FClassesTree.Add('momentabout', TXMLMomentabouttype);
  FClassesTree.Add('apply', TXMLApplytype);
  FClassesTree.Add('interval', TXMLIntervaltype);
  FClassesTree.Add('inverse', TXMLInversetype);
  FClassesTree.Add('condition', TXMLConditiontype);
  FClassesTree.Add('declare', TXMLDeclaretype);
  FClassesTree.Add('lambda', TXMLLambdatype);
  FClassesTree.Add('piecewise', TXMLPiecewisetype);
  FClassesTree.Add('bvar', TXMLBvartype);
  FClassesTree.Add('degree', TXMLDegreetype);
  FClassesTree.Add('semantics', TXMLSemanticstype);
  FClassesTree.Add('mi', TXMLMitype);
  FClassesTree.Add('mo', TXMLMotype);
  FClassesTree.Add('mn', TXMLMntype);
  FClassesTree.Add('mtext', TXMLMtexttype);
  FClassesTree.Add('ms', TXMLMstype);
  FClassesTree.Add('mrow', TXMLMrowtype);
  FClassesTree.Add('mfrac', TXMLMfractype);
  FClassesTree.Add('msqrt', TXMLMsqrttype);
  FClassesTree.Add('mroot', TXMLMroottype);
  FClassesTree.Add('mpadded', TXMLMpaddedtype);
  FClassesTree.Add('mphantom', TXMLMphantomtype);
  FClassesTree.Add('mfenced', TXMLMfencedtype);
  FClassesTree.Add('menclose', TXMLMenclosetype);
  FClassesTree.Add('msub', TXMLMsubtype);
  FClassesTree.Add('msup', TXMLMsuptype);
  FClassesTree.Add('msubsup', TXMLMsubsuptype);
  FClassesTree.Add('munder', TXMLMundertype);
  FClassesTree.Add('mover', TXMLMovertype);
  FClassesTree.Add('munderover', TXMLMunderovertype);
  FClassesTree.Add('mmultiscripts', TXMLMmultiscriptstype);
  FClassesTree.Add('mtable', TXMLMtabletype);
  FClassesTree.Add('maligngroup', TXMLMaligngrouptype);
  FClassesTree.Add('malignmark', TXMLMalignmarktype);
  FClassesTree.Add('mspace', TXMLMspacetype);
  FClassesTree.Add('maction', TXMLMactiontype);
  FClassesTree.Add('merror', TXMLMerrortype);
  FClassesTree.Add('mstyle', TXMLMstyletype);
  inherited;
end;

function TXMLOtherwisetype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLOtherwisetype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLOtherwisetype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLOtherwisetype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLOtherwisetype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLOtherwisetype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLOtherwisetype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLOtherwisetype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLOtherwisetype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLOtherwisetype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLOtherwisetype.Get_Cn: IXMLCntype;
begin
  Result := Nodes['cn'] as IXMLCntype;
end;

function TXMLOtherwisetype.Get_Ci: IXMLCitype;
begin
  Result := Nodes['ci'] as IXMLCitype;
end;

function TXMLOtherwisetype.Get_Csymbol: IXMLCsymboltype;
begin
  Result := Nodes['csymbol'] as IXMLCsymboltype;
end;

function TXMLOtherwisetype.Get_Abs: IXMLArithtype;
begin
  Result := Nodes['abs'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Conjugate: IXMLArithtype;
begin
  Result := Nodes['conjugate'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Factorial: IXMLArithtype;
begin
  Result := Nodes['factorial'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Arg: IXMLArithtype;
begin
  Result := Nodes['arg'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Real: IXMLArithtype;
begin
  Result := Nodes['real'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Imaginary: IXMLArithtype;
begin
  Result := Nodes['imaginary'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Floor: IXMLArithtype;
begin
  Result := Nodes['floor'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Ceiling: IXMLArithtype;
begin
  Result := Nodes['ceiling'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Quotient: IXMLArithtype;
begin
  Result := Nodes['quotient'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Divide: IXMLArithtype;
begin
  Result := Nodes['divide'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Rem: IXMLArithtype;
begin
  Result := Nodes['rem'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Minus: IXMLArithtype;
begin
  Result := Nodes['minus'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Plus: IXMLArithtype;
begin
  Result := Nodes['plus'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Times: IXMLArithtype;
begin
  Result := Nodes['times'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Power: IXMLArithtype;
begin
  Result := Nodes['power'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Root: IXMLArithtype;
begin
  Result := Nodes['root'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Max: IXMLArithtype;
begin
  Result := Nodes['max'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Min: IXMLArithtype;
begin
  Result := Nodes['min'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Gcd: IXMLArithtype;
begin
  Result := Nodes['gcd'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Lcm: IXMLArithtype;
begin
  Result := Nodes['lcm'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Sum: IXMLArithtype;
begin
  Result := Nodes['sum'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Product: IXMLArithtype;
begin
  Result := Nodes['product'] as IXMLArithtype;
end;

function TXMLOtherwisetype.Get_Compose: IXMLFunctionstype;
begin
  Result := Nodes['compose'] as IXMLFunctionstype;
end;

function TXMLOtherwisetype.Get_Domain: IXMLFunctionstype;
begin
  Result := Nodes['domain'] as IXMLFunctionstype;
end;

function TXMLOtherwisetype.Get_Codomain: IXMLFunctionstype;
begin
  Result := Nodes['codomain'] as IXMLFunctionstype;
end;

function TXMLOtherwisetype.Get_Image: IXMLFunctionstype;
begin
  Result := Nodes['image'] as IXMLFunctionstype;
end;

function TXMLOtherwisetype.Get_Domainofapplication: IXMLDomainofapplicationtype;
begin
  Result := Nodes['domainofapplication'] as IXMLDomainofapplicationtype;
end;

function TXMLOtherwisetype.Get_Ident: IXMLFunctionstype;
begin
  Result := Nodes['ident'] as IXMLFunctionstype;
end;

function TXMLOtherwisetype.Get_And_: IXMLElementaryfunctionstype;
begin
  Result := Nodes['and'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Or_: IXMLLogictype;
begin
  Result := Nodes['or'] as IXMLLogictype;
end;

function TXMLOtherwisetype.Get_Xor_: IXMLLogictype;
begin
  Result := Nodes['xor'] as IXMLLogictype;
end;

function TXMLOtherwisetype.Get_Not_: IXMLLogictype;
begin
  Result := Nodes['not'] as IXMLLogictype;
end;

function TXMLOtherwisetype.Get_Exists: IXMLLogictype;
begin
  Result := Nodes['exists'] as IXMLLogictype;
end;

function TXMLOtherwisetype.Get_Forall: IXMLLogictype;
begin
  Result := Nodes['forall'] as IXMLLogictype;
end;

function TXMLOtherwisetype.Get_Implies: IXMLLogictype;
begin
  Result := Nodes['implies'] as IXMLLogictype;
end;

function TXMLOtherwisetype.Get_Naturalnumbers: IXMLConstanttype;
begin
  Result := Nodes['naturalnumbers'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Primes: IXMLConstanttype;
begin
  Result := Nodes['primes'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Integers: IXMLConstanttype;
begin
  Result := Nodes['integers'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Rationals: IXMLConstanttype;
begin
  Result := Nodes['rationals'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Reals: IXMLConstanttype;
begin
  Result := Nodes['reals'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Complexes: IXMLConstanttype;
begin
  Result := Nodes['complexes'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Emptyset: IXMLConstanttype;
begin
  Result := Nodes['emptyset'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Exponentiale: IXMLConstanttype;
begin
  Result := Nodes['exponentiale'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Imaginaryi: IXMLConstanttype;
begin
  Result := Nodes['imaginaryi'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Pi: IXMLConstanttype;
begin
  Result := Nodes['pi'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Eulergamma: IXMLConstanttype;
begin
  Result := Nodes['eulergamma'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_True: IXMLConstanttype;
begin
  Result := Nodes['true'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_False: IXMLConstanttype;
begin
  Result := Nodes['false'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Infinity: IXMLConstanttype;
begin
  Result := Nodes['infinity'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Notanumber: IXMLConstanttype;
begin
  Result := Nodes['notanumber'] as IXMLConstanttype;
end;

function TXMLOtherwisetype.Get_Set_: IXMLSettype;
begin
  Result := Nodes['set'] as IXMLSettype;
end;

function TXMLOtherwisetype.Get_List: IXMLListtype;
begin
  Result := Nodes['list'] as IXMLListtype;
end;

function TXMLOtherwisetype.Get_Union: IXMLUniontype;
begin
  Result := Nodes['union'] as IXMLUniontype;
end;

function TXMLOtherwisetype.Get_Intersect: IXMLIntersecttype;
begin
  Result := Nodes['intersect'] as IXMLIntersecttype;
end;

function TXMLOtherwisetype.Get_In_: IXMLIntype;
begin
  Result := Nodes['in'] as IXMLIntype;
end;

function TXMLOtherwisetype.Get_Notin: IXMLNotintype;
begin
  Result := Nodes['notin'] as IXMLNotintype;
end;

function TXMLOtherwisetype.Get_Subset: IXMLSubsettype;
begin
  Result := Nodes['subset'] as IXMLSubsettype;
end;

function TXMLOtherwisetype.Get_Prsubset: IXMLPrsubsettype;
begin
  Result := Nodes['prsubset'] as IXMLPrsubsettype;
end;

function TXMLOtherwisetype.Get_Notsubset: IXMLNotsubsettype;
begin
  Result := Nodes['notsubset'] as IXMLNotsubsettype;
end;

function TXMLOtherwisetype.Get_Notprsubset: IXMLNotprsubsettype;
begin
  Result := Nodes['notprsubset'] as IXMLNotprsubsettype;
end;

function TXMLOtherwisetype.Get_Setdiff: IXMLSetdifftype;
begin
  Result := Nodes['setdiff'] as IXMLSetdifftype;
end;

function TXMLOtherwisetype.Get_Card: IXMLCardtype;
begin
  Result := Nodes['card'] as IXMLCardtype;
end;

function TXMLOtherwisetype.Get_Cartesianproduct: IXMLCartesianproducttype;
begin
  Result := Nodes['cartesianproduct'] as IXMLCartesianproducttype;
end;

function TXMLOtherwisetype.Get_Eq: IXMLRelationstype;
begin
  Result := Nodes['eq'] as IXMLRelationstype;
end;

function TXMLOtherwisetype.Get_Neq: IXMLRelationstype;
begin
  Result := Nodes['neq'] as IXMLRelationstype;
end;

function TXMLOtherwisetype.Get_Leq: IXMLRelationstype;
begin
  Result := Nodes['leq'] as IXMLRelationstype;
end;

function TXMLOtherwisetype.Get_Lt: IXMLRelationstype;
begin
  Result := Nodes['lt'] as IXMLRelationstype;
end;

function TXMLOtherwisetype.Get_Geq: IXMLRelationstype;
begin
  Result := Nodes['geq'] as IXMLRelationstype;
end;

function TXMLOtherwisetype.Get_Gt: IXMLRelationstype;
begin
  Result := Nodes['gt'] as IXMLRelationstype;
end;

function TXMLOtherwisetype.Get_Equivalent: IXMLRelationstype;
begin
  Result := Nodes['equivalent'] as IXMLRelationstype;
end;

function TXMLOtherwisetype.Get_Approx: IXMLRelationstype;
begin
  Result := Nodes['approx'] as IXMLRelationstype;
end;

function TXMLOtherwisetype.Get_Factorof: IXMLRelationstype;
begin
  Result := Nodes['factorof'] as IXMLRelationstype;
end;

function TXMLOtherwisetype.Get_Exp: IXMLElementaryfunctionstype;
begin
  Result := Nodes['exp'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Ln: IXMLElementaryfunctionstype;
begin
  Result := Nodes['ln'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Log: IXMLElementaryfunctionstype;
begin
  Result := Nodes['log'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Logbase: IXMLLogbasetype;
begin
  Result := Nodes['logbase'] as IXMLLogbasetype;
end;

function TXMLOtherwisetype.Get_Sin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sin'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Cos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cos'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Tan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tan'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Sec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sec'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Csc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csc'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Cot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cot'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Arcsin: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsin'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Arccos: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccos'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Arctan: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctan'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Arcsec: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsec'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Arccsc: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsc'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Arccot: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccot'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Sinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sinh'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Cosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['cosh'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Tanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['tanh'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Sech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['sech'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Csch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['csch'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Coth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['coth'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Arccosh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccosh'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Arccoth: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccoth'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Arccsch: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arccsch'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Arcsech: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsech'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Arcsinh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arcsinh'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Arctanh: IXMLElementaryfunctionstype;
begin
  Result := Nodes['arctanh'] as IXMLElementaryfunctionstype;
end;

function TXMLOtherwisetype.Get_Int: IXMLInttype;
begin
  Result := Nodes['int'] as IXMLInttype;
end;

function TXMLOtherwisetype.Get_Diff: IXMLDifftype;
begin
  Result := Nodes['diff'] as IXMLDifftype;
end;

function TXMLOtherwisetype.Get_Partialdiff: IXMLPartialdifftype;
begin
  Result := Nodes['partialdiff'] as IXMLPartialdifftype;
end;

function TXMLOtherwisetype.Get_Limit: IXMLLimittype;
begin
  Result := Nodes['limit'] as IXMLLimittype;
end;

function TXMLOtherwisetype.Get_Lowlimit: IXMLLowlimittype;
begin
  Result := Nodes['lowlimit'] as IXMLLowlimittype;
end;

function TXMLOtherwisetype.Get_Uplimit: IXMLUplimittype;
begin
  Result := Nodes['uplimit'] as IXMLUplimittype;
end;

function TXMLOtherwisetype.Get_Tendsto: IXMLTendstotype;
begin
  Result := Nodes['tendsto'] as IXMLTendstotype;
end;

function TXMLOtherwisetype.Get_Vector: IXMLVectortype;
begin
  Result := Nodes['vector'] as IXMLVectortype;
end;

function TXMLOtherwisetype.Get_Matrix: IXMLMatrixtype;
begin
  Result := Nodes['matrix'] as IXMLMatrixtype;
end;

function TXMLOtherwisetype.Get_Determinant: IXMLDeterminanttype;
begin
  Result := Nodes['determinant'] as IXMLDeterminanttype;
end;

function TXMLOtherwisetype.Get_Transpose: IXMLTransposetype;
begin
  Result := Nodes['transpose'] as IXMLTransposetype;
end;

function TXMLOtherwisetype.Get_Selector: IXMLSelectortype;
begin
  Result := Nodes['selector'] as IXMLSelectortype;
end;

function TXMLOtherwisetype.Get_Vectorproduct: IXMLVectorproducttype;
begin
  Result := Nodes['vectorproduct'] as IXMLVectorproducttype;
end;

function TXMLOtherwisetype.Get_Scalarproduct: IXMLScalarproducttype;
begin
  Result := Nodes['scalarproduct'] as IXMLScalarproducttype;
end;

function TXMLOtherwisetype.Get_Outerproduct: IXMLOuterproducttype;
begin
  Result := Nodes['outerproduct'] as IXMLOuterproducttype;
end;

function TXMLOtherwisetype.Get_Divergence: IXMLDivergencetype;
begin
  Result := Nodes['divergence'] as IXMLDivergencetype;
end;

function TXMLOtherwisetype.Get_Grad: IXMLGradtype;
begin
  Result := Nodes['grad'] as IXMLGradtype;
end;

function TXMLOtherwisetype.Get_Curl: IXMLCurltype;
begin
  Result := Nodes['curl'] as IXMLCurltype;
end;

function TXMLOtherwisetype.Get_Laplacian: IXMLLaplaciantype;
begin
  Result := Nodes['laplacian'] as IXMLLaplaciantype;
end;

function TXMLOtherwisetype.Get_Mean: IXMLMeantype;
begin
  Result := Nodes['mean'] as IXMLMeantype;
end;

function TXMLOtherwisetype.Get_Sdev: IXMLSdevtype;
begin
  Result := Nodes['sdev'] as IXMLSdevtype;
end;

function TXMLOtherwisetype.Get_Variance: IXMLVariancetype;
begin
  Result := Nodes['variance'] as IXMLVariancetype;
end;

function TXMLOtherwisetype.Get_Median: IXMLMediantype;
begin
  Result := Nodes['median'] as IXMLMediantype;
end;

function TXMLOtherwisetype.Get_Mode: IXMLModetype;
begin
  Result := Nodes['mode'] as IXMLModetype;
end;

function TXMLOtherwisetype.Get_Moment: IXMLMomenttype;
begin
  Result := Nodes['moment'] as IXMLMomenttype;
end;

function TXMLOtherwisetype.Get_Momentabout: IXMLMomentabouttype;
begin
  Result := Nodes['momentabout'] as IXMLMomentabouttype;
end;

function TXMLOtherwisetype.Get_Apply: IXMLApplytype;
begin
  Result := Nodes['apply'] as IXMLApplytype;
end;

function TXMLOtherwisetype.Get_Interval: IXMLIntervaltype;
begin
  Result := Nodes['interval'] as IXMLIntervaltype;
end;

function TXMLOtherwisetype.Get_Inverse: IXMLInversetype;
begin
  Result := Nodes['inverse'] as IXMLInversetype;
end;

function TXMLOtherwisetype.Get_Condition: IXMLConditiontype;
begin
  Result := Nodes['condition'] as IXMLConditiontype;
end;

function TXMLOtherwisetype.Get_Declare: IXMLDeclaretype;
begin
  Result := Nodes['declare'] as IXMLDeclaretype;
end;

function TXMLOtherwisetype.Get_Lambda: IXMLLambdatype;
begin
  Result := Nodes['lambda'] as IXMLLambdatype;
end;

function TXMLOtherwisetype.Get_Piecewise: IXMLPiecewisetype;
begin
  Result := Nodes['piecewise'] as IXMLPiecewisetype;
end;

function TXMLOtherwisetype.Get_Bvar: IXMLBvartype;
begin
  Result := Nodes['bvar'] as IXMLBvartype;
end;

function TXMLOtherwisetype.Get_Degree: IXMLDegreetype;
begin
  Result := Nodes['degree'] as IXMLDegreetype;
end;

function TXMLOtherwisetype.Get_Semantics: IXMLSemanticstype;
begin
  Result := Nodes['semantics'] as IXMLSemanticstype;
end;

function TXMLOtherwisetype.Get_Mi: IXMLMitype;
begin
  Result := Nodes['mi'] as IXMLMitype;
end;

function TXMLOtherwisetype.Get_Mo: IXMLMotype;
begin
  Result := Nodes['mo'] as IXMLMotype;
end;

function TXMLOtherwisetype.Get_Mn: IXMLMntype;
begin
  Result := Nodes['mn'] as IXMLMntype;
end;

function TXMLOtherwisetype.Get_Mtext: IXMLMtexttype;
begin
  Result := Nodes['mtext'] as IXMLMtexttype;
end;

function TXMLOtherwisetype.Get_Ms: IXMLMstype;
begin
  Result := Nodes['ms'] as IXMLMstype;
end;

function TXMLOtherwisetype.Get_Mrow: IXMLMrowtype;
begin
  Result := Nodes['mrow'] as IXMLMrowtype;
end;

function TXMLOtherwisetype.Get_Mfrac: IXMLMfractype;
begin
  Result := Nodes['mfrac'] as IXMLMfractype;
end;

function TXMLOtherwisetype.Get_Msqrt: IXMLMsqrttype;
begin
  Result := Nodes['msqrt'] as IXMLMsqrttype;
end;

function TXMLOtherwisetype.Get_Mroot: IXMLMroottype;
begin
  Result := Nodes['mroot'] as IXMLMroottype;
end;

function TXMLOtherwisetype.Get_Mpadded: IXMLMpaddedtype;
begin
  Result := Nodes['mpadded'] as IXMLMpaddedtype;
end;

function TXMLOtherwisetype.Get_Mphantom: IXMLMphantomtype;
begin
  Result := Nodes['mphantom'] as IXMLMphantomtype;
end;

function TXMLOtherwisetype.Get_Mfenced: IXMLMfencedtype;
begin
  Result := Nodes['mfenced'] as IXMLMfencedtype;
end;

function TXMLOtherwisetype.Get_Menclose: IXMLMenclosetype;
begin
  Result := Nodes['menclose'] as IXMLMenclosetype;
end;

function TXMLOtherwisetype.Get_Msub: IXMLMsubtype;
begin
  Result := Nodes['msub'] as IXMLMsubtype;
end;

function TXMLOtherwisetype.Get_Msup: IXMLMsuptype;
begin
  Result := Nodes['msup'] as IXMLMsuptype;
end;

function TXMLOtherwisetype.Get_Msubsup: IXMLMsubsuptype;
begin
  Result := Nodes['msubsup'] as IXMLMsubsuptype;
end;

function TXMLOtherwisetype.Get_Munder: IXMLMundertype;
begin
  Result := Nodes['munder'] as IXMLMundertype;
end;

function TXMLOtherwisetype.Get_Mover: IXMLMovertype;
begin
  Result := Nodes['mover'] as IXMLMovertype;
end;

function TXMLOtherwisetype.Get_Munderover: IXMLMunderovertype;
begin
  Result := Nodes['munderover'] as IXMLMunderovertype;
end;

function TXMLOtherwisetype.Get_Mmultiscripts: IXMLMmultiscriptstype;
begin
  Result := Nodes['mmultiscripts'] as IXMLMmultiscriptstype;
end;

function TXMLOtherwisetype.Get_Mtable: IXMLMtabletype;
begin
  Result := Nodes['mtable'] as IXMLMtabletype;
end;

function TXMLOtherwisetype.Get_Maligngroup: IXMLMaligngrouptype;
begin
  Result := Nodes['maligngroup'] as IXMLMaligngrouptype;
end;

function TXMLOtherwisetype.Get_Malignmark: IXMLMalignmarktype;
begin
  Result := Nodes['malignmark'] as IXMLMalignmarktype;
end;

function TXMLOtherwisetype.Get_Mspace: IXMLMspacetype;
begin
  Result := Nodes['mspace'] as IXMLMspacetype;
end;

function TXMLOtherwisetype.Get_Maction: IXMLMactiontype;
begin
  Result := Nodes['maction'] as IXMLMactiontype;
end;

function TXMLOtherwisetype.Get_Merror: IXMLMerrortype;
begin
  Result := Nodes['merror'] as IXMLMerrortype;
end;

function TXMLOtherwisetype.Get_Mstyle: IXMLMstyletype;
begin
  Result := Nodes['mstyle'] as IXMLMstyletype;
end;

{ TXMLSeptype }

{ TXMLMlabeledtrtype }

procedure TXMLMlabeledtrtype.DoRegisterChildClasses;
begin
  FClassesTree.Add('mtd', TXMLMtdtype);
  inherited;
end;

function TXMLMlabeledtrtype.Get_Rowalign: UnicodeString;
begin
  Result := Params['rowalign'];
end;

procedure TXMLMlabeledtrtype.Set_Rowalign(Value: UnicodeString);
begin
  Params['rowalign'] := Value;
end;

function TXMLMlabeledtrtype.Get_Columnalign: UnicodeString;
begin
  Result := Params['columnalign'];
end;

procedure TXMLMlabeledtrtype.Set_Columnalign(Value: UnicodeString);
begin
  Params['columnalign'] := Value;
end;

function TXMLMlabeledtrtype.Get_Groupalign: UnicodeString;
begin
  Result := Params['groupalign'];
end;

procedure TXMLMlabeledtrtype.Set_Groupalign(Value: UnicodeString);
begin
  Params['groupalign'] := Value;
end;

function TXMLMlabeledtrtype.Get_Class_: UnicodeString;
begin
  Result := Params['class'];
end;

procedure TXMLMlabeledtrtype.Set_Class_(Value: UnicodeString);
begin
  Params['class'] := Value;
end;

function TXMLMlabeledtrtype.Get_Style: UnicodeString;
begin
  Result := Params['style'];
end;

procedure TXMLMlabeledtrtype.Set_Style(Value: UnicodeString);
begin
  Params['style'] := Value;
end;

function TXMLMlabeledtrtype.Get_Xref: UnicodeString;
begin
  Result := Params['xref'];
end;

procedure TXMLMlabeledtrtype.Set_Xref(Value: UnicodeString);
begin
  Params['xref'] := Value;
end;

function TXMLMlabeledtrtype.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLMlabeledtrtype.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLMlabeledtrtype.Get_Href: UnicodeString;
begin
  Result := Params['href'];
end;

procedure TXMLMlabeledtrtype.Set_Href(Value: UnicodeString);
begin
  Params['href'] := Value;
end;

function TXMLMlabeledtrtype.Get_Mtd: IXMLMtdtype;
begin
  Result := Nodes['mtd'] as IXMLMtdtype;
end;

{ TXMLNonetype }

{ TXMLMprescriptstype }

{ TXMLLibrary_articulated_systems_type }

procedure TXMLLibrary_articulated_systems_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('articulated_system', TXMLArticulated_system_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FArticulated_system := CreateFilter(TXMLArticulated_system_typeList, TXMLArticulated_system_type, IXMLArticulated_system_type) as IXMLArticulated_system_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_articulated_systems_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_articulated_systems_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_articulated_systems_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_articulated_systems_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_articulated_systems_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_articulated_systems_type.Get_Articulated_system: IXMLArticulated_system_typeList;
begin
  Result := FArticulated_system;
end;

function TXMLLibrary_articulated_systems_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_articulated_systems_typeList }

function TXMLLibrary_articulated_systems_typeList.Add: IXMLLibrary_articulated_systems_type;
begin
  Result := AddItem(-1) as IXMLLibrary_articulated_systems_type;
end;

function TXMLLibrary_articulated_systems_typeList.Insert(const Index: Integer): IXMLLibrary_articulated_systems_type;
begin
  Result := AddItem(Index) as IXMLLibrary_articulated_systems_type;
end;

function TXMLLibrary_articulated_systems_typeList.Get_Item(Index: Integer): IXMLLibrary_articulated_systems_type;
begin
  Result := Nodes[Index] as IXMLLibrary_articulated_systems_type;
end;

{ TXMLArticulated_system_type }

procedure TXMLArticulated_system_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('kinematics', TXMLKinematics_type);
  FClassesTree.Add('motion', TXMLMotion_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLArticulated_system_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLArticulated_system_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLArticulated_system_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLArticulated_system_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLArticulated_system_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLArticulated_system_type.Get_Kinematics: IXMLKinematics_type;
begin
  Result := Nodes['kinematics'] as IXMLKinematics_type;
end;

function TXMLArticulated_system_type.Get_Motion: IXMLMotion_type;
begin
  Result := Nodes['motion'] as IXMLMotion_type;
end;

function TXMLArticulated_system_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLArticulated_system_typeList }

function TXMLArticulated_system_typeList.Add: IXMLArticulated_system_type;
begin
  Result := AddItem(-1) as IXMLArticulated_system_type;
end;

function TXMLArticulated_system_typeList.Insert(const Index: Integer): IXMLArticulated_system_type;
begin
  Result := AddItem(Index) as IXMLArticulated_system_type;
end;

function TXMLArticulated_system_typeList.Get_Item(Index: Integer): IXMLArticulated_system_type;
begin
  Result := Nodes[Index] as IXMLArticulated_system_type;
end;

{ TXMLKinematics_type }

procedure TXMLKinematics_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('instance_kinematics_model', TXMLInstance_kinematics_model_type);
  FClassesTree.Add('technique_common', TXMLKinematics_technique_type);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInstance_kinematics_model := CreateFilter(TXMLInstance_kinematics_model_typeList, TXMLInstance_kinematics_model_type, IXMLInstance_kinematics_model_type) as IXMLInstance_kinematics_model_typeList;
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLKinematics_type.Get_Instance_kinematics_model: IXMLInstance_kinematics_model_typeList;
begin
  Result := FInstance_kinematics_model;
end;

function TXMLKinematics_type.Get_Technique_common: IXMLKinematics_technique_type;
begin
  Result := Nodes['technique_common'] as IXMLKinematics_technique_type;
end;

function TXMLKinematics_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLKinematics_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_kinematics_model_type }

procedure TXMLInstance_kinematics_model_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('bind', TXMLKinematics_bind_type);
  FClassesTree.Add('newparam', TXMLKinematics_newparam_type);
  FClassesTree.Add('setparam', TXMLKinematics_setparam_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FBind := CreateFilter(TXMLKinematics_bind_typeList, TXMLKinematics_bind_type, IXMLKinematics_bind_type) as IXMLKinematics_bind_typeList;
  FNewparam := CreateFilter(TXMLKinematics_newparam_typeList, TXMLKinematics_newparam_type, IXMLKinematics_newparam_type) as IXMLKinematics_newparam_typeList;
  FSetparam := CreateFilter(TXMLKinematics_setparam_typeList, TXMLKinematics_setparam_type, IXMLKinematics_setparam_type) as IXMLKinematics_setparam_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLInstance_kinematics_model_type.Get_Url: UnicodeString;
begin
  Result := Params['url'];
end;

procedure TXMLInstance_kinematics_model_type.Set_Url(Value: UnicodeString);
begin
  Params['url'] := Value;
end;

function TXMLInstance_kinematics_model_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_kinematics_model_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLInstance_kinematics_model_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInstance_kinematics_model_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInstance_kinematics_model_type.Get_Bind: IXMLKinematics_bind_typeList;
begin
  Result := FBind;
end;

function TXMLInstance_kinematics_model_type.Get_Newparam: IXMLKinematics_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLInstance_kinematics_model_type.Get_Setparam: IXMLKinematics_setparam_typeList;
begin
  Result := FSetparam;
end;

function TXMLInstance_kinematics_model_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_kinematics_model_typeList }

function TXMLInstance_kinematics_model_typeList.Add: IXMLInstance_kinematics_model_type;
begin
  Result := AddItem(-1) as IXMLInstance_kinematics_model_type;
end;

function TXMLInstance_kinematics_model_typeList.Insert(const Index: Integer): IXMLInstance_kinematics_model_type;
begin
  Result := AddItem(Index) as IXMLInstance_kinematics_model_type;
end;

function TXMLInstance_kinematics_model_typeList.Get_Item(Index: Integer): IXMLInstance_kinematics_model_type;
begin
  Result := Nodes[Index] as IXMLInstance_kinematics_model_type;
end;

{ TXMLKinematics_bind_type }

procedure TXMLKinematics_bind_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('param', TXMLKinematics_param_type);
  inherited;
end;

function TXMLKinematics_bind_type.Get_Symbol: UnicodeString;
begin
  Result := Params['symbol'];
end;

procedure TXMLKinematics_bind_type.Set_Symbol(Value: UnicodeString);
begin
  Params['symbol'] := Value;
end;

function TXMLKinematics_bind_type.Get_Param: IXMLKinematics_param_type;
begin
  Result := Nodes['param'] as IXMLKinematics_param_type;
end;

function TXMLKinematics_bind_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLKinematics_bind_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLKinematics_bind_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLKinematics_bind_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLKinematics_bind_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLKinematics_bind_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLKinematics_bind_type.Get_SIDREF: UnicodeString;
begin
  Result := Nodes['SIDREF'].Content;
end;

procedure TXMLKinematics_bind_type.Set_SIDREF(Value: UnicodeString);
begin
  Nodes['SIDREF'].Content := Value;
end;

{ TXMLKinematics_bind_typeList }

function TXMLKinematics_bind_typeList.Add: IXMLKinematics_bind_type;
begin
  Result := AddItem(-1) as IXMLKinematics_bind_type;
end;

function TXMLKinematics_bind_typeList.Insert(const Index: Integer): IXMLKinematics_bind_type;
begin
  Result := AddItem(Index) as IXMLKinematics_bind_type;
end;

function TXMLKinematics_bind_typeList.Get_Item(Index: Integer): IXMLKinematics_bind_type;
begin
  Result := Nodes[Index] as IXMLKinematics_bind_type;
end;

{ TXMLKinematics_param_type }

function TXMLKinematics_param_type.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLKinematics_param_type.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

{ TXMLKinematics_setparam_type }

procedure TXMLKinematics_setparam_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('connect_param', TXMLKinematics_connect_param_type);
  inherited;
end;

function TXMLKinematics_setparam_type.Get_Ref: UnicodeString;
begin
  Result := Params['ref'];
end;

procedure TXMLKinematics_setparam_type.Set_Ref(Value: UnicodeString);
begin
  Params['ref'] := Value;
end;

function TXMLKinematics_setparam_type.Get_Float: Double;
begin
  Result := Nodes['float'].Content;
end;

procedure TXMLKinematics_setparam_type.Set_Float(Value: Double);
begin
  Nodes['float'].Content := Value;
end;

function TXMLKinematics_setparam_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLKinematics_setparam_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLKinematics_setparam_type.Get_SIDREF: UnicodeString;
begin
  Result := Nodes['SIDREF'].Content;
end;

procedure TXMLKinematics_setparam_type.Set_SIDREF(Value: UnicodeString);
begin
  Nodes['SIDREF'].Content := Value;
end;

function TXMLKinematics_setparam_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLKinematics_setparam_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLKinematics_setparam_type.Get_Connect_param: IXMLKinematics_connect_param_type;
begin
  Result := Nodes['connect_param'] as IXMLKinematics_connect_param_type;
end;

{ TXMLKinematics_setparam_typeList }

function TXMLKinematics_setparam_typeList.Add: IXMLKinematics_setparam_type;
begin
  Result := AddItem(-1) as IXMLKinematics_setparam_type;
end;

function TXMLKinematics_setparam_typeList.Insert(const Index: Integer): IXMLKinematics_setparam_type;
begin
  Result := AddItem(Index) as IXMLKinematics_setparam_type;
end;

function TXMLKinematics_setparam_typeList.Get_Item(Index: Integer): IXMLKinematics_setparam_type;
begin
  Result := Nodes[Index] as IXMLKinematics_setparam_type;
end;

{ TXMLKinematics_technique_type }

procedure TXMLKinematics_technique_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('axis_info', TXMLKinematics_axis_info_type);
  FClassesTree.Add('frame_origin', TXMLKinematics_frame_type);
  FClassesTree.Add('frame_tip', TXMLKinematics_frame_type);
  FClassesTree.Add('frame_tcp', TXMLKinematics_frame_type);
  FClassesTree.Add('frame_object', TXMLKinematics_frame_type);
  FAxis_info := CreateFilter(TXMLKinematics_axis_info_typeList, TXMLKinematics_axis_info_type, IXMLKinematics_axis_info_type) as IXMLKinematics_axis_info_typeList;
  inherited;
end;

function TXMLKinematics_technique_type.Get_Axis_info: IXMLKinematics_axis_info_typeList;
begin
  Result := FAxis_info;
end;

function TXMLKinematics_technique_type.Get_Frame_origin: IXMLKinematics_frame_type;
begin
  Result := Nodes['frame_origin'] as IXMLKinematics_frame_type;
end;

function TXMLKinematics_technique_type.Get_Frame_tip: IXMLKinematics_frame_type;
begin
  Result := Nodes['frame_tip'] as IXMLKinematics_frame_type;
end;

function TXMLKinematics_technique_type.Get_Frame_tcp: IXMLKinematics_frame_type;
begin
  Result := Nodes['frame_tcp'] as IXMLKinematics_frame_type;
end;

function TXMLKinematics_technique_type.Get_Frame_object: IXMLKinematics_frame_type;
begin
  Result := Nodes['frame_object'] as IXMLKinematics_frame_type;
end;

{ TXMLKinematics_axis_info_type }

procedure TXMLKinematics_axis_info_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('newparam', TXMLKinematics_newparam_type);
  FClassesTree.Add('active', TXMLCommon_bool_or_param_type);
  FClassesTree.Add('locked', TXMLCommon_bool_or_param_type);
  FClassesTree.Add('index', TXMLKinematics_index_type);
  FClassesTree.Add('limits', TXMLKinematics_limits_type);
  FClassesTree.Add('formula', TXMLFormula_type);
  FClassesTree.Add('instance_formula', TXMLInstance_formula_type);
  FNewparam := CreateFilter(TXMLKinematics_newparam_typeList, TXMLKinematics_newparam_type, IXMLKinematics_newparam_type) as IXMLKinematics_newparam_typeList;
  FIndex := CreateFilter(TXMLKinematics_index_typeList, TXMLKinematics_index_type, IXMLKinematics_index_type) as IXMLKinematics_index_typeList;
  FFormula := CreateFilter(TXMLFormula_typeList, TXMLFormula_type, IXMLFormula_type) as IXMLFormula_typeList;
  FInstance_formula := CreateFilter(TXMLInstance_formula_typeList, TXMLInstance_formula_type, IXMLInstance_formula_type) as IXMLInstance_formula_typeList;
  inherited;
end;

function TXMLKinematics_axis_info_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLKinematics_axis_info_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLKinematics_axis_info_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLKinematics_axis_info_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLKinematics_axis_info_type.Get_Axis: UnicodeString;
begin
  Result := Params['axis'];
end;

procedure TXMLKinematics_axis_info_type.Set_Axis(Value: UnicodeString);
begin
  Params['axis'] := Value;
end;

function TXMLKinematics_axis_info_type.Get_Newparam: IXMLKinematics_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLKinematics_axis_info_type.Get_Active: IXMLCommon_bool_or_param_type;
begin
  Result := Nodes['active'] as IXMLCommon_bool_or_param_type;
end;

function TXMLKinematics_axis_info_type.Get_Locked: IXMLCommon_bool_or_param_type;
begin
  Result := Nodes['locked'] as IXMLCommon_bool_or_param_type;
end;

function TXMLKinematics_axis_info_type.Get_Index: IXMLKinematics_index_typeList;
begin
  Result := FIndex;
end;

function TXMLKinematics_axis_info_type.Get_Limits: IXMLKinematics_limits_type;
begin
  Result := Nodes['limits'] as IXMLKinematics_limits_type;
end;

function TXMLKinematics_axis_info_type.Get_Formula: IXMLFormula_typeList;
begin
  Result := FFormula;
end;

function TXMLKinematics_axis_info_type.Get_Instance_formula: IXMLInstance_formula_typeList;
begin
  Result := FInstance_formula;
end;

{ TXMLKinematics_axis_info_typeList }

function TXMLKinematics_axis_info_typeList.Add: IXMLKinematics_axis_info_type;
begin
  Result := AddItem(-1) as IXMLKinematics_axis_info_type;
end;

function TXMLKinematics_axis_info_typeList.Insert(const Index: Integer): IXMLKinematics_axis_info_type;
begin
  Result := AddItem(Index) as IXMLKinematics_axis_info_type;
end;

function TXMLKinematics_axis_info_typeList.Get_Item(Index: Integer): IXMLKinematics_axis_info_type;
begin
  Result := Nodes[Index] as IXMLKinematics_axis_info_type;
end;

{ TXMLCommon_bool_or_param_type }

procedure TXMLCommon_bool_or_param_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('param', TXMLCommon_param_type);
  inherited;
end;

function TXMLCommon_bool_or_param_type.Get_Bool: Boolean;
begin
  Result := Nodes['bool'].Content;
end;

procedure TXMLCommon_bool_or_param_type.Set_Bool(Value: Boolean);
begin
  Nodes['bool'].Content := Value;
end;

function TXMLCommon_bool_or_param_type.Get_Param: IXMLCommon_param_type;
begin
  Result := Nodes['param'] as IXMLCommon_param_type;
end;

{ TXMLCommon_int_or_param_type }

procedure TXMLCommon_int_or_param_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('param', TXMLCommon_param_type);
  inherited;
end;

function TXMLCommon_int_or_param_type.Get_Int: Int64;
begin
  Result := Nodes['int'].Content;
end;

procedure TXMLCommon_int_or_param_type.Set_Int(Value: Int64);
begin
  Nodes['int'].Content := Value;
end;

function TXMLCommon_int_or_param_type.Get_Param: IXMLCommon_param_type;
begin
  Result := Nodes['param'] as IXMLCommon_param_type;
end;

{ TXMLKinematics_index_type }

function TXMLKinematics_index_type.Get_Semantic: UnicodeString;
begin
  Result := Params['semantic'];
end;

procedure TXMLKinematics_index_type.Set_Semantic(Value: UnicodeString);
begin
  Params['semantic'] := Value;
end;

{ TXMLKinematics_index_typeList }

function TXMLKinematics_index_typeList.Add: IXMLKinematics_index_type;
begin
  Result := AddItem(-1) as IXMLKinematics_index_type;
end;

function TXMLKinematics_index_typeList.Insert(const Index: Integer): IXMLKinematics_index_type;
begin
  Result := AddItem(Index) as IXMLKinematics_index_type;
end;

function TXMLKinematics_index_typeList.Get_Item(Index: Integer): IXMLKinematics_index_type;
begin
  Result := Nodes[Index] as IXMLKinematics_index_type;
end;

{ TXMLKinematics_limits_type }

procedure TXMLKinematics_limits_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('min', TXMLCommon_float_or_param_type);
  FClassesTree.Add('max', TXMLCommon_float_or_param_type);
  inherited;
end;

function TXMLKinematics_limits_type.Get_Min: IXMLCommon_float_or_param_type;
begin
  Result := Nodes['min'] as IXMLCommon_float_or_param_type;
end;

function TXMLKinematics_limits_type.Get_Max: IXMLCommon_float_or_param_type;
begin
  Result := Nodes['max'] as IXMLCommon_float_or_param_type;
end;

{ TXMLKinematics_frame_type }

procedure TXMLKinematics_frame_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('translate', TXMLTranslate_type);
  FClassesTree.Add('rotate', TXMLRotate_type);
  FTranslate := CreateFilter(TXMLTranslate_typeList, TXMLTranslate_type, IXMLTranslate_type) as IXMLTranslate_typeList;
  FRotate := CreateFilter(TXMLRotate_typeList, TXMLRotate_type, IXMLRotate_type) as IXMLRotate_typeList;
  inherited;
end;

function TXMLKinematics_frame_type.Get_Link: UnicodeString;
begin
  Result := Params['link'];
end;

procedure TXMLKinematics_frame_type.Set_Link(Value: UnicodeString);
begin
  Params['link'] := Value;
end;

function TXMLKinematics_frame_type.Get_Translate: IXMLTranslate_typeList;
begin
  Result := FTranslate;
end;

function TXMLKinematics_frame_type.Get_Rotate: IXMLRotate_typeList;
begin
  Result := FRotate;
end;

{ TXMLMotion_type }

procedure TXMLMotion_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('instance_articulated_system', TXMLInstance_articulated_system_type);
  FClassesTree.Add('technique_common', TXMLMotion_technique_type);
  FClassesTree.Add('technique', TXMLTechnique_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FTechnique := CreateFilter(TXMLTechnique_typeList, TXMLTechnique_type, IXMLTechnique_type) as IXMLTechnique_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLMotion_type.Get_Instance_articulated_system: IXMLInstance_articulated_system_type;
begin
  Result := Nodes['instance_articulated_system'] as IXMLInstance_articulated_system_type;
end;

function TXMLMotion_type.Get_Technique_common: IXMLMotion_technique_type;
begin
  Result := Nodes['technique_common'] as IXMLMotion_technique_type;
end;

function TXMLMotion_type.Get_Technique: IXMLTechnique_typeList;
begin
  Result := FTechnique;
end;

function TXMLMotion_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_articulated_system_type }

procedure TXMLInstance_articulated_system_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('bind', TXMLKinematics_bind_type);
  FClassesTree.Add('setparam', TXMLKinematics_setparam_type);
  FClassesTree.Add('newparam', TXMLKinematics_newparam_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FBind := CreateFilter(TXMLKinematics_bind_typeList, TXMLKinematics_bind_type, IXMLKinematics_bind_type) as IXMLKinematics_bind_typeList;
  FSetparam := CreateFilter(TXMLKinematics_setparam_typeList, TXMLKinematics_setparam_type, IXMLKinematics_setparam_type) as IXMLKinematics_setparam_typeList;
  FNewparam := CreateFilter(TXMLKinematics_newparam_typeList, TXMLKinematics_newparam_type, IXMLKinematics_newparam_type) as IXMLKinematics_newparam_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLInstance_articulated_system_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_articulated_system_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLInstance_articulated_system_type.Get_Url: UnicodeString;
begin
  Result := Params['url'];
end;

procedure TXMLInstance_articulated_system_type.Set_Url(Value: UnicodeString);
begin
  Params['url'] := Value;
end;

function TXMLInstance_articulated_system_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInstance_articulated_system_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInstance_articulated_system_type.Get_Bind: IXMLKinematics_bind_typeList;
begin
  Result := FBind;
end;

function TXMLInstance_articulated_system_type.Get_Setparam: IXMLKinematics_setparam_typeList;
begin
  Result := FSetparam;
end;

function TXMLInstance_articulated_system_type.Get_Newparam: IXMLKinematics_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLInstance_articulated_system_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_articulated_system_typeList }

function TXMLInstance_articulated_system_typeList.Add: IXMLInstance_articulated_system_type;
begin
  Result := AddItem(-1) as IXMLInstance_articulated_system_type;
end;

function TXMLInstance_articulated_system_typeList.Insert(const Index: Integer): IXMLInstance_articulated_system_type;
begin
  Result := AddItem(Index) as IXMLInstance_articulated_system_type;
end;

function TXMLInstance_articulated_system_typeList.Get_Item(Index: Integer): IXMLInstance_articulated_system_type;
begin
  Result := Nodes[Index] as IXMLInstance_articulated_system_type;
end;

{ TXMLMotion_technique_type }

procedure TXMLMotion_technique_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('axis_info', TXMLMotion_axis_info_type);
  FClassesTree.Add('effector_info', TXMLMotion_effector_info_type);
  FAxis_info := CreateFilter(TXMLMotion_axis_info_typeList, TXMLMotion_axis_info_type, IXMLMotion_axis_info_type) as IXMLMotion_axis_info_typeList;
  inherited;
end;

function TXMLMotion_technique_type.Get_Axis_info: IXMLMotion_axis_info_typeList;
begin
  Result := FAxis_info;
end;

function TXMLMotion_technique_type.Get_Effector_info: IXMLMotion_effector_info_type;
begin
  Result := Nodes['effector_info'] as IXMLMotion_effector_info_type;
end;

{ TXMLMotion_axis_info_type }

procedure TXMLMotion_axis_info_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('bind', TXMLKinematics_bind_type);
  FClassesTree.Add('newparam', TXMLKinematics_newparam_type);
  FClassesTree.Add('setparam', TXMLKinematics_setparam_type);
  FClassesTree.Add('speed', TXMLCommon_float_or_param_type);
  FClassesTree.Add('acceleration', TXMLCommon_float_or_param_type);
  FClassesTree.Add('deceleration', TXMLCommon_float_or_param_type);
  FClassesTree.Add('jerk', TXMLCommon_float_or_param_type);
  FBind := CreateFilter(TXMLKinematics_bind_typeList, TXMLKinematics_bind_type, IXMLKinematics_bind_type) as IXMLKinematics_bind_typeList;
  FNewparam := CreateFilter(TXMLKinematics_newparam_typeList, TXMLKinematics_newparam_type, IXMLKinematics_newparam_type) as IXMLKinematics_newparam_typeList;
  FSetparam := CreateFilter(TXMLKinematics_setparam_typeList, TXMLKinematics_setparam_type, IXMLKinematics_setparam_type) as IXMLKinematics_setparam_typeList;
  inherited;
end;

function TXMLMotion_axis_info_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLMotion_axis_info_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLMotion_axis_info_type.Get_Axis: UnicodeString;
begin
  Result := Params['axis'];
end;

procedure TXMLMotion_axis_info_type.Set_Axis(Value: UnicodeString);
begin
  Params['axis'] := Value;
end;

function TXMLMotion_axis_info_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLMotion_axis_info_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLMotion_axis_info_type.Get_Bind: IXMLKinematics_bind_typeList;
begin
  Result := FBind;
end;

function TXMLMotion_axis_info_type.Get_Newparam: IXMLKinematics_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLMotion_axis_info_type.Get_Setparam: IXMLKinematics_setparam_typeList;
begin
  Result := FSetparam;
end;

function TXMLMotion_axis_info_type.Get_Speed: IXMLCommon_float_or_param_type;
begin
  Result := Nodes['speed'] as IXMLCommon_float_or_param_type;
end;

function TXMLMotion_axis_info_type.Get_Acceleration: IXMLCommon_float_or_param_type;
begin
  Result := Nodes['acceleration'] as IXMLCommon_float_or_param_type;
end;

function TXMLMotion_axis_info_type.Get_Deceleration: IXMLCommon_float_or_param_type;
begin
  Result := Nodes['deceleration'] as IXMLCommon_float_or_param_type;
end;

function TXMLMotion_axis_info_type.Get_Jerk: IXMLCommon_float_or_param_type;
begin
  Result := Nodes['jerk'] as IXMLCommon_float_or_param_type;
end;

{ TXMLMotion_axis_info_typeList }

function TXMLMotion_axis_info_typeList.Add: IXMLMotion_axis_info_type;
begin
  Result := AddItem(-1) as IXMLMotion_axis_info_type;
end;

function TXMLMotion_axis_info_typeList.Insert(const Index: Integer): IXMLMotion_axis_info_type;
begin
  Result := AddItem(Index) as IXMLMotion_axis_info_type;
end;

function TXMLMotion_axis_info_typeList.Get_Item(Index: Integer): IXMLMotion_axis_info_type;
begin
  Result := Nodes[Index] as IXMLMotion_axis_info_type;
end;

{ TXMLMotion_effector_info_type }

procedure TXMLMotion_effector_info_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('bind', TXMLKinematics_bind_type);
  FClassesTree.Add('newparam', TXMLKinematics_newparam_type);
  FClassesTree.Add('setparam', TXMLKinematics_setparam_type);
  FClassesTree.Add('speed', TXMLCommon_float2_or_param_type);
  FClassesTree.Add('acceleration', TXMLCommon_float2_or_param_type);
  FClassesTree.Add('deceleration', TXMLCommon_float2_or_param_type);
  FClassesTree.Add('jerk', TXMLCommon_float2_or_param_type);
  FBind := CreateFilter(TXMLKinematics_bind_typeList, TXMLKinematics_bind_type, IXMLKinematics_bind_type) as IXMLKinematics_bind_typeList;
  FNewparam := CreateFilter(TXMLKinematics_newparam_typeList, TXMLKinematics_newparam_type, IXMLKinematics_newparam_type) as IXMLKinematics_newparam_typeList;
  FSetparam := CreateFilter(TXMLKinematics_setparam_typeList, TXMLKinematics_setparam_type, IXMLKinematics_setparam_type) as IXMLKinematics_setparam_typeList;
  inherited;
end;

function TXMLMotion_effector_info_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLMotion_effector_info_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLMotion_effector_info_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLMotion_effector_info_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLMotion_effector_info_type.Get_Bind: IXMLKinematics_bind_typeList;
begin
  Result := FBind;
end;

function TXMLMotion_effector_info_type.Get_Newparam: IXMLKinematics_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLMotion_effector_info_type.Get_Setparam: IXMLKinematics_setparam_typeList;
begin
  Result := FSetparam;
end;

function TXMLMotion_effector_info_type.Get_Speed: IXMLCommon_float2_or_param_type;
begin
  Result := Nodes['speed'] as IXMLCommon_float2_or_param_type;
end;

function TXMLMotion_effector_info_type.Get_Acceleration: IXMLCommon_float2_or_param_type;
begin
  Result := Nodes['acceleration'] as IXMLCommon_float2_or_param_type;
end;

function TXMLMotion_effector_info_type.Get_Deceleration: IXMLCommon_float2_or_param_type;
begin
  Result := Nodes['deceleration'] as IXMLCommon_float2_or_param_type;
end;

function TXMLMotion_effector_info_type.Get_Jerk: IXMLCommon_float2_or_param_type;
begin
  Result := Nodes['jerk'] as IXMLCommon_float2_or_param_type;
end;

{ TXMLCommon_float2_or_param_type }

procedure TXMLCommon_float2_or_param_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('param', TXMLCommon_param_type);
  inherited;
end;

function TXMLCommon_float2_or_param_type.Get_Float2: UnicodeString;
begin
  Result := Nodes['float2'].Content;
end;

procedure TXMLCommon_float2_or_param_type.Set_Float2(Value: UnicodeString);
begin
  Nodes['float2'].Content := Value;
end;

function TXMLCommon_float2_or_param_type.Get_Param: IXMLCommon_param_type;
begin
  Result := Nodes['param'] as IXMLCommon_param_type;
end;

{ TXMLLibrary_kinematics_scenes_type }

procedure TXMLLibrary_kinematics_scenes_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('kinematics_scene', TXMLKinematics_scene_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FKinematics_scene := CreateFilter(TXMLKinematics_scene_typeList, TXMLKinematics_scene_type, IXMLKinematics_scene_type) as IXMLKinematics_scene_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_kinematics_scenes_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_kinematics_scenes_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_kinematics_scenes_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_kinematics_scenes_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_kinematics_scenes_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_kinematics_scenes_type.Get_Kinematics_scene: IXMLKinematics_scene_typeList;
begin
  Result := FKinematics_scene;
end;

function TXMLLibrary_kinematics_scenes_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_kinematics_scenes_typeList }

function TXMLLibrary_kinematics_scenes_typeList.Add: IXMLLibrary_kinematics_scenes_type;
begin
  Result := AddItem(-1) as IXMLLibrary_kinematics_scenes_type;
end;

function TXMLLibrary_kinematics_scenes_typeList.Insert(const Index: Integer): IXMLLibrary_kinematics_scenes_type;
begin
  Result := AddItem(Index) as IXMLLibrary_kinematics_scenes_type;
end;

function TXMLLibrary_kinematics_scenes_typeList.Get_Item(Index: Integer): IXMLLibrary_kinematics_scenes_type;
begin
  Result := Nodes[Index] as IXMLLibrary_kinematics_scenes_type;
end;

{ TXMLKinematics_scene_type }

procedure TXMLKinematics_scene_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('instance_kinematics_model', TXMLInstance_kinematics_model_type);
  FClassesTree.Add('instance_articulated_system', TXMLInstance_articulated_system_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInstance_kinematics_model := CreateFilter(TXMLInstance_kinematics_model_typeList, TXMLInstance_kinematics_model_type, IXMLInstance_kinematics_model_type) as IXMLInstance_kinematics_model_typeList;
  FInstance_articulated_system := CreateFilter(TXMLInstance_articulated_system_typeList, TXMLInstance_articulated_system_type, IXMLInstance_articulated_system_type) as IXMLInstance_articulated_system_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLKinematics_scene_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLKinematics_scene_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLKinematics_scene_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLKinematics_scene_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLKinematics_scene_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLKinematics_scene_type.Get_Instance_kinematics_model: IXMLInstance_kinematics_model_typeList;
begin
  Result := FInstance_kinematics_model;
end;

function TXMLKinematics_scene_type.Get_Instance_articulated_system: IXMLInstance_articulated_system_typeList;
begin
  Result := FInstance_articulated_system;
end;

function TXMLKinematics_scene_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLKinematics_scene_typeList }

function TXMLKinematics_scene_typeList.Add: IXMLKinematics_scene_type;
begin
  Result := AddItem(-1) as IXMLKinematics_scene_type;
end;

function TXMLKinematics_scene_typeList.Insert(const Index: Integer): IXMLKinematics_scene_type;
begin
  Result := AddItem(Index) as IXMLKinematics_scene_type;
end;

function TXMLKinematics_scene_typeList.Get_Item(Index: Integer): IXMLKinematics_scene_type;
begin
  Result := Nodes[Index] as IXMLKinematics_scene_type;
end;

{ TXMLLibrary_formulas_type }

procedure TXMLLibrary_formulas_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('formula', TXMLFormula_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FFormula := CreateFilter(TXMLFormula_typeList, TXMLFormula_type, IXMLFormula_type) as IXMLFormula_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLLibrary_formulas_type.Get_Id: UnicodeString;
begin
  Result := Params['id'];
end;

procedure TXMLLibrary_formulas_type.Set_Id(Value: UnicodeString);
begin
  Params['id'] := Value;
end;

function TXMLLibrary_formulas_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLLibrary_formulas_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLLibrary_formulas_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLLibrary_formulas_type.Get_Formula: IXMLFormula_typeList;
begin
  Result := FFormula;
end;

function TXMLLibrary_formulas_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLLibrary_formulas_typeList }

function TXMLLibrary_formulas_typeList.Add: IXMLLibrary_formulas_type;
begin
  Result := AddItem(-1) as IXMLLibrary_formulas_type;
end;

function TXMLLibrary_formulas_typeList.Insert(const Index: Integer): IXMLLibrary_formulas_type;
begin
  Result := AddItem(Index) as IXMLLibrary_formulas_type;
end;

function TXMLLibrary_formulas_typeList.Get_Item(Index: Integer): IXMLLibrary_formulas_type;
begin
  Result := Nodes[Index] as IXMLLibrary_formulas_type;
end;

{ TXMLCOLLADA_scene }

procedure TXMLCOLLADA_scene.DoRegisterChildClasses;
begin
  FClassesTree.Add('instance_physics_scene', TXMLInstance_with_extra_type);
  FClassesTree.Add('instance_visual_scene', TXMLInstance_with_extra_type);
  FClassesTree.Add('instance_kinematics_scene', TXMLInstance_kinematics_scene_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FInstance_physics_scene := CreateFilter(TXMLInstance_with_extra_typeList, TXMLInstance_with_extra_type, IXMLInstance_with_extra_type) as IXMLInstance_with_extra_typeList;
  FInstance_kinematics_scene := CreateFilter(TXMLInstance_kinematics_scene_typeList, TXMLInstance_kinematics_scene_type, IXMLInstance_kinematics_scene_type) as IXMLInstance_kinematics_scene_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLCOLLADA_scene.Get_Instance_physics_scene: IXMLInstance_with_extra_typeList;
begin
  Result := FInstance_physics_scene;
end;

function TXMLCOLLADA_scene.Get_Instance_visual_scene: IXMLInstance_with_extra_type;
begin
  Result := Nodes['instance_visual_scene'] as IXMLInstance_with_extra_type;
end;

function TXMLCOLLADA_scene.Get_Instance_kinematics_scene: IXMLInstance_kinematics_scene_typeList;
begin
  Result := FInstance_kinematics_scene;
end;

function TXMLCOLLADA_scene.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_kinematics_scene_type }

procedure TXMLInstance_kinematics_scene_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('asset', TXMLAsset_type);
  FClassesTree.Add('newparam', TXMLKinematics_newparam_type);
  FClassesTree.Add('setparam', TXMLKinematics_setparam_type);
  FClassesTree.Add('bind_kinematics_model', TXMLBind_kinematics_model_type);
  FClassesTree.Add('bind_joint_axis', TXMLBind_joint_axis_type);
  FClassesTree.Add('extra', TXMLExtra_type);
  FNewparam := CreateFilter(TXMLKinematics_newparam_typeList, TXMLKinematics_newparam_type, IXMLKinematics_newparam_type) as IXMLKinematics_newparam_typeList;
  FSetparam := CreateFilter(TXMLKinematics_setparam_typeList, TXMLKinematics_setparam_type, IXMLKinematics_setparam_type) as IXMLKinematics_setparam_typeList;
  FBind_kinematics_model := CreateFilter(TXMLBind_kinematics_model_typeList, TXMLBind_kinematics_model_type, IXMLBind_kinematics_model_type) as IXMLBind_kinematics_model_typeList;
  FBind_joint_axis := CreateFilter(TXMLBind_joint_axis_typeList, TXMLBind_joint_axis_type, IXMLBind_joint_axis_type) as IXMLBind_joint_axis_typeList;
  FExtra := CreateFilter(TXMLExtra_typeList, TXMLExtra_type, IXMLExtra_type) as IXMLExtra_typeList;
  inherited;
end;

function TXMLInstance_kinematics_scene_type.Get_Url: UnicodeString;
begin
  Result := Params['url'];
end;

procedure TXMLInstance_kinematics_scene_type.Set_Url(Value: UnicodeString);
begin
  Params['url'] := Value;
end;

function TXMLInstance_kinematics_scene_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLInstance_kinematics_scene_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

function TXMLInstance_kinematics_scene_type.Get_Name: UnicodeString;
begin
  Result := Params['name'];
end;

procedure TXMLInstance_kinematics_scene_type.Set_Name(Value: UnicodeString);
begin
  Params['name'] := Value;
end;

function TXMLInstance_kinematics_scene_type.Get_Asset: IXMLAsset_type;
begin
  Result := Nodes['asset'] as IXMLAsset_type;
end;

function TXMLInstance_kinematics_scene_type.Get_Newparam: IXMLKinematics_newparam_typeList;
begin
  Result := FNewparam;
end;

function TXMLInstance_kinematics_scene_type.Get_Setparam: IXMLKinematics_setparam_typeList;
begin
  Result := FSetparam;
end;

function TXMLInstance_kinematics_scene_type.Get_Bind_kinematics_model: IXMLBind_kinematics_model_typeList;
begin
  Result := FBind_kinematics_model;
end;

function TXMLInstance_kinematics_scene_type.Get_Bind_joint_axis: IXMLBind_joint_axis_typeList;
begin
  Result := FBind_joint_axis;
end;

function TXMLInstance_kinematics_scene_type.Get_Extra: IXMLExtra_typeList;
begin
  Result := FExtra;
end;

{ TXMLInstance_kinematics_scene_typeList }

function TXMLInstance_kinematics_scene_typeList.Add: IXMLInstance_kinematics_scene_type;
begin
  Result := AddItem(-1) as IXMLInstance_kinematics_scene_type;
end;

function TXMLInstance_kinematics_scene_typeList.Insert(const Index: Integer): IXMLInstance_kinematics_scene_type;
begin
  Result := AddItem(Index) as IXMLInstance_kinematics_scene_type;
end;

function TXMLInstance_kinematics_scene_typeList.Get_Item(Index: Integer): IXMLInstance_kinematics_scene_type;
begin
  Result := Nodes[Index] as IXMLInstance_kinematics_scene_type;
end;

{ TXMLCommon_sidref_or_param_type }

procedure TXMLCommon_sidref_or_param_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('param', TXMLCommon_param_type);
  inherited;
end;

function TXMLCommon_sidref_or_param_type.Get_SIDREF: UnicodeString;
begin
  Result := Nodes['SIDREF'].Content;
end;

procedure TXMLCommon_sidref_or_param_type.Set_SIDREF(Value: UnicodeString);
begin
  Nodes['SIDREF'].Content := Value;
end;

function TXMLCommon_sidref_or_param_type.Get_Param: IXMLCommon_param_type;
begin
  Result := Nodes['param'] as IXMLCommon_param_type;
end;

{ TXMLBind_kinematics_model_type }

function TXMLBind_kinematics_model_type.Get_Node: UnicodeString;
begin
  Result := Params['node'];
end;

procedure TXMLBind_kinematics_model_type.Set_Node(Value: UnicodeString);
begin
  Params['node'] := Value;
end;

{ TXMLBind_kinematics_model_typeList }

function TXMLBind_kinematics_model_typeList.Add: IXMLBind_kinematics_model_type;
begin
  Result := AddItem(-1) as IXMLBind_kinematics_model_type;
end;

function TXMLBind_kinematics_model_typeList.Insert(const Index: Integer): IXMLBind_kinematics_model_type;
begin
  Result := AddItem(Index) as IXMLBind_kinematics_model_type;
end;

function TXMLBind_kinematics_model_typeList.Get_Item(Index: Integer): IXMLBind_kinematics_model_type;
begin
  Result := Nodes[Index] as IXMLBind_kinematics_model_type;
end;

{ TXMLBind_joint_axis_type }

procedure TXMLBind_joint_axis_type.DoRegisterChildClasses;
begin
  FClassesTree.Add('axis', TXMLCommon_sidref_or_param_type);
  FClassesTree.Add('value', TXMLCommon_float_or_param_type);
  inherited;
end;

function TXMLBind_joint_axis_type.Get_Target: UnicodeString;
begin
  Result := Params['target'];
end;

procedure TXMLBind_joint_axis_type.Set_Target(Value: UnicodeString);
begin
  Params['target'] := Value;
end;

function TXMLBind_joint_axis_type.Get_Axis: IXMLCommon_sidref_or_param_type;
begin
  Result := Nodes['axis'] as IXMLCommon_sidref_or_param_type;
end;

function TXMLBind_joint_axis_type.Get_Value: IXMLCommon_float_or_param_type;
begin
  Result := Nodes['value'] as IXMLCommon_float_or_param_type;
end;

{ TXMLBind_joint_axis_typeList }

function TXMLBind_joint_axis_typeList.Add: IXMLBind_joint_axis_type;
begin
  Result := AddItem(-1) as IXMLBind_joint_axis_type;
end;

function TXMLBind_joint_axis_typeList.Insert(const Index: Integer): IXMLBind_joint_axis_type;
begin
  Result := AddItem(Index) as IXMLBind_joint_axis_type;
end;

function TXMLBind_joint_axis_typeList.Get_Item(Index: Integer): IXMLBind_joint_axis_type;
begin
  Result := Nodes[Index] as IXMLBind_joint_axis_type;
end;

{ TXMLInput_global_type }

function TXMLInput_global_type.Get_Semantic: UnicodeString;
begin
  Result := Params['semantic'];
end;

procedure TXMLInput_global_type.Set_Semantic(Value: UnicodeString);
begin
  Params['semantic'] := Value;
end;

function TXMLInput_global_type.Get_Source: UnicodeString;
begin
  Result := Params['source'];
end;

procedure TXMLInput_global_type.Set_Source(Value: UnicodeString);
begin
  Params['source'] := Value;
end;

{ TXMLEllipsoid_type }

function TXMLEllipsoid_type.Get_Size: UnicodeString;
begin
  Result := Nodes['size'].Content;
end;

procedure TXMLEllipsoid_type.Set_Size(Value: UnicodeString);
begin
  Nodes['size'].Content := Value;
end;

{ TXMLLimits_sub_type }

function TXMLLimits_sub_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLLimits_sub_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLTargetable_float4_type }

function TXMLTargetable_float4_type.Get_Sid: UnicodeString;
begin
  Result := Params['sid'];
end;

procedure TXMLTargetable_float4_type.Set_Sid(Value: UnicodeString);
begin
  Params['sid'] := Value;
end;

{ TXMLList_of_uints_typeList }

function TXMLList_of_uints_typeList.Add(const Value: UnicodeString): IXML;
begin
  Result := AddItem(-1);
  Result.Content := Value;
end;

function TXMLList_of_uints_typeList.Insert(const Index: Integer; const Value: UnicodeString): IXML;
begin
  Result := AddItem(Index);
  Result.Content := Value;
end;

function TXMLList_of_uints_typeList.Get_Item(Index: Integer): UnicodeString;
begin
  Result := Nodes[Index].Content;
end;

{ TXMLAnyURIList }

function TXMLAnyURIList.Add(const Value: UnicodeString): IXML;
begin
  Result := AddItem(-1);
  Result.Content := Value;
end;

function TXMLAnyURIList.Insert(const Index: Integer; const Value: UnicodeString): IXML;
begin
  Result := AddItem(Index);
  Result.Content := Value;
end;

function TXMLAnyURIList.Get_Item(Index: Integer): UnicodeString;
begin
  Result := Nodes[Index].Content;
end;

{ TXMLString_List }

function TXMLString_List.Add(const Value: UnicodeString): IXML;
begin
  Result := AddItem(-1);
  Result.Content := Value;
end;

function TXMLString_List.Insert(const Index: Integer; const Value: UnicodeString): IXML;
begin
  Result := AddItem(Index);
  Result.Content := Value;
end;

function TXMLString_List.Get_Item(Index: Integer): UnicodeString;
begin
  Result := Nodes[Index].Content;
end;

{ TXMLNCNameList }

function TXMLNCNameList.Add(const Value: UnicodeString): IXML;
begin
  Result := AddItem(-1);
  Result.Content := Value;
end;

function TXMLNCNameList.Insert(const Index: Integer; const Value: UnicodeString): IXML;
begin
  Result := AddItem(Index);
  Result.Content := Value;
end;

function TXMLNCNameList.Get_Item(Index: Integer): UnicodeString;
begin
  Result := Nodes[Index].Content;
end;

end.
